{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/cython/cython/issues/3704/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/cython/cython/pulls/3704/commits"
        },
        "html": {
            "href": "https://github.com/cython/cython/pull/3704"
        },
        "issue": {
            "href": "https://api.github.com/repos/cython/cython/issues/3704"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/cython/cython/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/cython/cython/pulls/3704/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/cython/cython/pulls/3704"
        },
        "statuses": {
            "href": "https://api.github.com/repos/cython/cython/statuses/8c03aff230486c1fbe11b7c4cb135489ea66ec57"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "base": {
        "label": "cython:clean_up_capi_features",
        "ref": "clean_up_capi_features",
        "repo": {
            "archive_url": "https://api.github.com/repos/cython/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/cython/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/cython/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/cython/cython/branches{/branch}",
            "clone_url": "https://github.com/cython/cython.git",
            "collaborators_url": "https://api.github.com/repos/cython/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/cython/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/cython/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/cython/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/cython/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/cython/cython/contributors",
            "created_at": "2010-11-21T07:44:20Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/cython/cython/deployments",
            "description": "The most widely used Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/cython/cython/downloads",
            "events_url": "https://api.github.com/repos/cython/cython/events",
            "fork": false,
            "forks": 1044,
            "forks_count": 1044,
            "forks_url": "https://api.github.com/repos/cython/cython/forks",
            "full_name": "cython/cython",
            "git_commits_url": "https://api.github.com/repos/cython/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/cython/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/cython/cython/git/tags{/sha}",
            "git_url": "git://github.com/cython/cython.git",
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://cython.org",
            "hooks_url": "https://api.github.com/repos/cython/cython/hooks",
            "html_url": "https://github.com/cython/cython",
            "id": 1099265,
            "issue_comment_url": "https://api.github.com/repos/cython/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/cython/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/cython/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/cython/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/cython/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/cython/cython/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/cython/cython/merges",
            "milestones_url": "https://api.github.com/repos/cython/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkxMDk5MjY1",
            "notifications_url": "https://api.github.com/repos/cython/cython/notifications{?since,all,participating}",
            "open_issues": 851,
            "open_issues_count": 851,
            "owner": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/486082?v=4",
                "events_url": "https://api.github.com/users/cython/events{/privacy}",
                "followers_url": "https://api.github.com/users/cython/followers",
                "following_url": "https://api.github.com/users/cython/following{/other_user}",
                "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/cython",
                "id": 486082,
                "login": "cython",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
                "organizations_url": "https://api.github.com/users/cython/orgs",
                "received_events_url": "https://api.github.com/users/cython/received_events",
                "repos_url": "https://api.github.com/users/cython/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/cython"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/cython/cython/pulls{/number}",
            "pushed_at": "2020-07-09T14:17:21Z",
            "releases_url": "https://api.github.com/repos/cython/cython/releases{/id}",
            "size": 60001,
            "ssh_url": "git@github.com:cython/cython.git",
            "stargazers_count": 5305,
            "stargazers_url": "https://api.github.com/repos/cython/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/cython/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/cython/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/cython/cython/subscription",
            "svn_url": "https://github.com/cython/cython",
            "tags_url": "https://api.github.com/repos/cython/cython/tags",
            "teams_url": "https://api.github.com/repos/cython/cython/teams",
            "trees_url": "https://api.github.com/repos/cython/cython/git/trees{/sha}",
            "updated_at": "2020-07-09T14:36:08Z",
            "url": "https://api.github.com/repos/cython/cython",
            "watchers": 5305,
            "watchers_count": 5305
        },
        "sha": "0efe5fb87853d1b9aa6fc72901d31c67aab84a4d",
        "user": {
            "avatar_url": "https://avatars3.githubusercontent.com/u/486082?v=4",
            "events_url": "https://api.github.com/users/cython/events{/privacy}",
            "followers_url": "https://api.github.com/users/cython/followers",
            "following_url": "https://api.github.com/users/cython/following{/other_user}",
            "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/cython",
            "id": 486082,
            "login": "cython",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
            "organizations_url": "https://api.github.com/users/cython/orgs",
            "received_events_url": "https://api.github.com/users/cython/received_events",
            "repos_url": "https://api.github.com/users/cython/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/cython"
        }
    },
    "body": "This is a request for comments for addressing #3689 and to get some early review feedback, before I go off and translate everything to this style.\r\n\r\nThere's 2 preparation cleanups in this PR, the real work addressing the issue is in the third commit.\r\n- Always create a struct for the module state. For the proof of concept the struct will only include the couple variables from `generate_module_preamble` without limited mode enabled.\r\n- Add `__Pyx_Globals()` macro that returns a pointer to the module state. Without limited mode enabled, we will create 1 global static variable and have the macro return the address of that.\r\n- Wrap some `Naming.xxx` things in a `Global` struct, so that using them in a string-context (`__str__`) they return a `__Pyx_Globals()->xxx` expression, but also add a `field_name` field so that we can access just the `xxx` name in the few context that need it, without changing most other users in the codebase.",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3704#discussion_r444233910"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3704"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/444233910"
                }
            },
            "author_association": "MEMBER",
            "body": "This doesn't look very explicit in code. When I see this, I immediately wonder why this is needed here and not elsewhere. I'd rather not have to do anything at all here.",
            "commit_id": "8c03aff230486c1fbe11b7c4cb135489ea66ec57",
            "created_at": "2020-06-23T13:43:16Z",
            "diff_hunk": "@@ -8013,7 +8005,7 @@ def calculate_result_code(self):\n         if len(self.args) > 0:\n             return self.result_code\n         else:\n-            return Naming.empty_tuple\n+            return str(Naming.empty_tuple)",
            "html_url": "https://github.com/cython/cython/pull/3704#discussion_r444233910",
            "id": 444233910,
            "line": 8035,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIzMzkxMA==",
            "original_commit_id": "4fbfe11ff5559fdd139d6bfd49c95a95d4348b25",
            "original_line": 8035,
            "original_position": 27,
            "original_start_line": null,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": 32,
            "pull_request_review_id": 435795543,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3704",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-07-09T04:07:58Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/444233910",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3704#discussion_r444235485"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3704"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/444235485"
                }
            },
            "author_association": "MEMBER",
            "body": "Wouldn't this be nicer without the `pyrex_prefix` now?",
            "commit_id": "8c03aff230486c1fbe11b7c4cb135489ea66ec57",
            "created_at": "2020-06-23T13:45:24Z",
            "diff_hunk": "@@ -73,6 +73,24 @@\n     'umethod': pyrex_prefix + \"umethod_\",\n }\n \n+\n+class Global:\n+    def __init__(self, name):\n+        self._name = name\n+        self._field_name = pyrex_prefix + name\n+        self._expr = \"__Pyx_Globals()->%s\" % self._field_name",
            "html_url": "https://github.com/cython/cython/pull/3704#discussion_r444235485",
            "id": 444235485,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIzNTQ4NQ==",
            "original_commit_id": "4fbfe11ff5559fdd139d6bfd49c95a95d4348b25",
            "original_line": 81,
            "original_position": 9,
            "original_start_line": 80,
            "path": "Cython/Compiler/Naming.py",
            "position": null,
            "pull_request_review_id": 435795543,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3704",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2020-07-09T04:07:58Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/444235485",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3704#discussion_r444236868"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3704"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/444236868"
                }
            },
            "author_association": "MEMBER",
            "body": "Now that we have a tool for generating the access code in `Naming.py`, I think we should generally use it whenever a global is referenced.",
            "commit_id": "8c03aff230486c1fbe11b7c4cb135489ea66ec57",
            "created_at": "2020-06-23T13:47:15Z",
            "diff_hunk": "@@ -1232,9 +1219,8 @@ def generate_c_class_declarations(self, env, code, definition, globalstate):\n                 code.putln(\"static PyTypeObject *%s = 0;\" % (\n                     entry.type.typeptr_cname))\n                 module_state.putln(\"PyTypeObject *%s;\" % entry.type.typeptr_cname)\n-                module_state_defines.putln(\"#define %s %s->%s\" % (\n+                module_state_defines.putln(\"#define %s __Pyx_Globals()->%s\" % (",
            "html_url": "https://github.com/cython/cython/pull/3704#discussion_r444236868",
            "id": 444236868,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIzNjg2OA==",
            "original_commit_id": "4fbfe11ff5559fdd139d6bfd49c95a95d4348b25",
            "original_line": 1222,
            "original_position": 55,
            "original_start_line": null,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": null,
            "pull_request_review_id": 435795543,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3704",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-07-09T04:07:58Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/444236868",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3704#discussion_r444238363"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3704"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/444238363"
                }
            },
            "author_association": "MEMBER",
            "body": "Redefinitions should have an `#undef` first.\r\n```suggestion\r\n        code.putln('#define __Pyx_Globals() (&%s)' % Naming.modulestate_cname)\r\n```",
            "commit_id": "8c03aff230486c1fbe11b7c4cb135489ea66ec57",
            "created_at": "2020-06-23T13:49:08Z",
            "diff_hunk": "@@ -2542,117 +2527,85 @@ def generate_import_star(self, env, code):\n         code.putln(UtilityCode.load_as_string(\"ImportStar\", \"ImportExport.c\")[1])\n         code.exit_cfunc_scope()  # done with labels\n \n-    def generate_module_state_start(self, env, code):\n-        # TODO: Refactor to move module state struct decl closer to the static decl\n-        code.putln(\"#if CYTHON_USE_MODULE_STATE\")\n-        code.putln('typedef struct {')\n-        code.putln('PyObject *%s;' % Naming.builtins_cname)\n-        code.putln('PyObject *%s;' % Naming.cython_runtime_cname)\n-        code.putln('PyObject *%s;' % Naming.empty_tuple)\n-        code.putln('PyObject *%s;' % Naming.empty_bytes)\n-        code.putln('PyObject *%s;' % Naming.empty_unicode)\n+    def generate_module_state_begin(self, env, code):\n+        code.putln('static int %s;' % Naming.lineno_cname)\n+        code.putln('static int %s = 0;' % Naming.clineno_cname)\n+        code.putln('static const char * %s = %s;' % (Naming.cfilenm_cname, Naming.file_c_macro))\n+        code.putln('static const char *%s;' % Naming.filename_cname)\n+        code.putln('')\n+        code.putln('typedef struct %s {' % Naming.modulestate_type_cname)\n+        code.putln('PyObject *%s;' % env.module_dict_cname.field_name)\n+        code.putln('PyObject *%s;' % Naming.builtins_cname.field_name)\n+        code.putln('PyObject *%s;' % Naming.cython_runtime_cname.field_name)\n+        code.putln('PyObject *%s;' % Naming.empty_tuple.field_name)\n+        code.putln('PyObject *%s;' % Naming.empty_bytes.field_name)\n+        code.putln('PyObject *%s;' % Naming.empty_unicode.field_name)\n         if Options.pre_import is not None:\n             code.putln('PyObject *%s;' % Naming.preimport_cname)\n+        code.putln(\"#if CYTHON_USE_MODULE_STATE\")\n         code.putln('#ifdef __Pyx_CyFunction_USED')\n         code.putln('PyTypeObject *%s;' % Naming.cyfunction_type_cname)\n         code.putln('#endif')\n         code.putln('#ifdef __Pyx_FusedFunction_USED')\n         code.putln('PyTypeObject *%s;' % Naming.fusedfunction_type_cname)\n         code.putln('#endif')\n \n-    def generate_module_state_end(self, env, modules, globalstate):\n-        module_state = globalstate['module_state']\n-        module_state_defines = globalstate['module_state_defines']\n-        module_state_clear = globalstate['module_state_clear']\n-        module_state_traverse = globalstate['module_state_traverse']\n-        module_state.putln('} %s;' % Naming.modulestate_cname)\n-        module_state.putln('')\n-        module_state.putln('#ifdef __cplusplus')\n-        module_state.putln('namespace {')\n-        module_state.putln('extern struct PyModuleDef %s;' % Naming.pymoduledef_cname)\n-        module_state.putln('} /* anonymous namespace */')\n-        module_state.putln('#else')\n-        module_state.putln('static struct PyModuleDef %s;' % Naming.pymoduledef_cname)\n-        module_state.putln('#endif')\n-        module_state.putln('')\n-        module_state.putln('#define %s(o) ((%s *)__Pyx_PyModule_GetState(o))' % (\n-            Naming.modulestate_cname,\n-            Naming.modulestate_cname))\n-        module_state.putln('')\n-        module_state.putln('#define %s (%s(PyState_FindModule(&%s)))' % (\n-            Naming.modulestateglobal_cname,\n-            Naming.modulestate_cname,\n-            Naming.pymoduledef_cname))\n-        module_state.putln('')\n-        module_state.putln('#define %s (PyState_FindModule(&%s))' % (\n-            env.module_cname,\n-            Naming.pymoduledef_cname))\n-        module_state.putln(\"#endif\")\n-        module_state_defines.putln(\"#endif\")\n-        module_state_clear.putln(\"return 0;\")\n-        module_state_clear.putln(\"}\")\n-        module_state_clear.putln(\"#endif\")\n-        module_state_traverse.putln(\"return 0;\")\n-        module_state_traverse.putln(\"}\")\n-        module_state_traverse.putln(\"#endif\")\n-\n-    def generate_module_state_defines(self, env, code):\n+    def generate_module_state_end(self, env, code):\n+        code.putln('#endif /* CYTHON_USE_MODULE_STATE */')\n+        code.putln('} %s;' % Naming.modulestate_type_cname)\n+        code.putln('')\n+        code.putln('#if !CYTHON_USE_MODULE_STATE')\n+        code.putln('static %s %s;' % (Naming.modulestate_type_cname, Naming.modulestate_cname))\n+        code.putln('#define __Pyx_Globals() (&%s)' % (Naming.modulestate_cname))",
            "html_url": "https://github.com/cython/cython/pull/3704#discussion_r444238363",
            "id": 444238363,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIzODM2Mw==",
            "original_commit_id": "4fbfe11ff5559fdd139d6bfd49c95a95d4348b25",
            "original_line": 2559,
            "original_position": 151,
            "original_start_line": null,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": null,
            "pull_request_review_id": 435795543,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3704",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-07-09T04:07:58Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/444238363",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3704#discussion_r444244493"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3704"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/444244493"
                }
            },
            "author_association": "MEMBER",
            "body": "This suggests some kind of helper function to me. Maybe something like\r\n`code.put_clear_global(Naming.builtins_cname)` ? With a default module state target of `'clear_module_state'`, if we also need it elsewhere. Same to the `Py_VISIT()` code.",
            "commit_id": "8c03aff230486c1fbe11b7c4cb135489ea66ec57",
            "created_at": "2020-06-23T13:57:05Z",
            "diff_hunk": "@@ -2542,117 +2527,85 @@ def generate_import_star(self, env, code):\n         code.putln(UtilityCode.load_as_string(\"ImportStar\", \"ImportExport.c\")[1])\n         code.exit_cfunc_scope()  # done with labels\n \n-    def generate_module_state_start(self, env, code):\n-        # TODO: Refactor to move module state struct decl closer to the static decl\n-        code.putln(\"#if CYTHON_USE_MODULE_STATE\")\n-        code.putln('typedef struct {')\n-        code.putln('PyObject *%s;' % Naming.builtins_cname)\n-        code.putln('PyObject *%s;' % Naming.cython_runtime_cname)\n-        code.putln('PyObject *%s;' % Naming.empty_tuple)\n-        code.putln('PyObject *%s;' % Naming.empty_bytes)\n-        code.putln('PyObject *%s;' % Naming.empty_unicode)\n+    def generate_module_state_begin(self, env, code):\n+        code.putln('static int %s;' % Naming.lineno_cname)\n+        code.putln('static int %s = 0;' % Naming.clineno_cname)\n+        code.putln('static const char * %s = %s;' % (Naming.cfilenm_cname, Naming.file_c_macro))\n+        code.putln('static const char *%s;' % Naming.filename_cname)\n+        code.putln('')\n+        code.putln('typedef struct %s {' % Naming.modulestate_type_cname)\n+        code.putln('PyObject *%s;' % env.module_dict_cname.field_name)\n+        code.putln('PyObject *%s;' % Naming.builtins_cname.field_name)\n+        code.putln('PyObject *%s;' % Naming.cython_runtime_cname.field_name)\n+        code.putln('PyObject *%s;' % Naming.empty_tuple.field_name)\n+        code.putln('PyObject *%s;' % Naming.empty_bytes.field_name)\n+        code.putln('PyObject *%s;' % Naming.empty_unicode.field_name)\n         if Options.pre_import is not None:\n             code.putln('PyObject *%s;' % Naming.preimport_cname)\n+        code.putln(\"#if CYTHON_USE_MODULE_STATE\")\n         code.putln('#ifdef __Pyx_CyFunction_USED')\n         code.putln('PyTypeObject *%s;' % Naming.cyfunction_type_cname)\n         code.putln('#endif')\n         code.putln('#ifdef __Pyx_FusedFunction_USED')\n         code.putln('PyTypeObject *%s;' % Naming.fusedfunction_type_cname)\n         code.putln('#endif')\n \n-    def generate_module_state_end(self, env, modules, globalstate):\n-        module_state = globalstate['module_state']\n-        module_state_defines = globalstate['module_state_defines']\n-        module_state_clear = globalstate['module_state_clear']\n-        module_state_traverse = globalstate['module_state_traverse']\n-        module_state.putln('} %s;' % Naming.modulestate_cname)\n-        module_state.putln('')\n-        module_state.putln('#ifdef __cplusplus')\n-        module_state.putln('namespace {')\n-        module_state.putln('extern struct PyModuleDef %s;' % Naming.pymoduledef_cname)\n-        module_state.putln('} /* anonymous namespace */')\n-        module_state.putln('#else')\n-        module_state.putln('static struct PyModuleDef %s;' % Naming.pymoduledef_cname)\n-        module_state.putln('#endif')\n-        module_state.putln('')\n-        module_state.putln('#define %s(o) ((%s *)__Pyx_PyModule_GetState(o))' % (\n-            Naming.modulestate_cname,\n-            Naming.modulestate_cname))\n-        module_state.putln('')\n-        module_state.putln('#define %s (%s(PyState_FindModule(&%s)))' % (\n-            Naming.modulestateglobal_cname,\n-            Naming.modulestate_cname,\n-            Naming.pymoduledef_cname))\n-        module_state.putln('')\n-        module_state.putln('#define %s (PyState_FindModule(&%s))' % (\n-            env.module_cname,\n-            Naming.pymoduledef_cname))\n-        module_state.putln(\"#endif\")\n-        module_state_defines.putln(\"#endif\")\n-        module_state_clear.putln(\"return 0;\")\n-        module_state_clear.putln(\"}\")\n-        module_state_clear.putln(\"#endif\")\n-        module_state_traverse.putln(\"return 0;\")\n-        module_state_traverse.putln(\"}\")\n-        module_state_traverse.putln(\"#endif\")\n-\n-    def generate_module_state_defines(self, env, code):\n+    def generate_module_state_end(self, env, code):\n+        code.putln('#endif /* CYTHON_USE_MODULE_STATE */')\n+        code.putln('} %s;' % Naming.modulestate_type_cname)\n+        code.putln('')\n+        code.putln('#if !CYTHON_USE_MODULE_STATE')\n+        code.putln('static %s %s;' % (Naming.modulestate_type_cname, Naming.modulestate_cname))\n+        code.putln('#define __Pyx_Globals() (&%s)' % (Naming.modulestate_cname))\n+        code.putln('static PyObject *%s;' % env.module_cname)\n+        code.putln('#else')\n+        code.putln('/* Module def forward declaration */')\n+        code.putln('#ifdef __cplusplus')\n+        code.putln('namespace {')\n+        code.putln('  extern struct PyModuleDef %s;' % Naming.pymoduledef_cname)\n+        code.putln('} /* anonymous namespace */')\n+        code.putln('#else')\n+        code.putln('static struct PyModuleDef %s;' % Naming.pymoduledef_cname)\n+        code.putln('#endif')\n+        code.putln('#define %s (PyState_FindModule(&%s))' % (env.module_cname, Naming.pymoduledef_cname))\n+        code.putln('#define __Pyx_ModuleState(m) ((%s *)__Pyx_PyModule_GetState(m))' %\n+                   Naming.modulestate_type_cname)\n+        code.putln('#define __Pyx_Globals() __Pyx_ModuleState(%s)' % env.module_cname)\n+        code.putln('#endif')\n+\n+    def generate_module_state_defines_begin(self, env, code):\n         code.putln(\"#if CYTHON_USE_MODULE_STATE\")\n-        code.putln('#define %s %s->%s' % (\n-            Naming.builtins_cname,\n-            Naming.modulestateglobal_cname,\n-            Naming.builtins_cname))\n-        code.putln('#define %s %s->%s' % (\n-            Naming.cython_runtime_cname,\n-            Naming.modulestateglobal_cname,\n-            Naming.cython_runtime_cname))\n-        code.putln('#define %s %s->%s' % (\n-            Naming.empty_tuple,\n-            Naming.modulestateglobal_cname,\n-            Naming.empty_tuple))\n-        code.putln('#define %s %s->%s' % (\n-            Naming.empty_bytes,\n-            Naming.modulestateglobal_cname,\n-            Naming.empty_bytes))\n-        code.putln('#define %s %s->%s' % (\n-            Naming.empty_unicode,\n-            Naming.modulestateglobal_cname,\n-            Naming.empty_unicode))\n-        if Options.pre_import is not None:\n-            code.putln('#define %s %s->%s' % (\n-                Naming.preimport_cname,\n-                Naming.modulestateglobal_cname,\n-                Naming.preimport_cname))\n         code.putln('#ifdef __Pyx_CyFunction_USED')\n-        code.putln('#define %s %s->%s' % (\n+        code.putln('#define %s __Pyx_Globals()->%s' % (\n             Naming.cyfunction_type_cname,\n-            Naming.modulestateglobal_cname,\n             Naming.cyfunction_type_cname))\n         code.putln('#endif')\n         code.putln('#ifdef __Pyx_FusedFunction_USED')\n-        code.putln('#define %s %s->%s' %\n+        code.putln('#define %s __Pyx_Globals()->%s' %\n             (Naming.fusedfunction_type_cname,\n-            Naming.modulestateglobal_cname,\n             Naming.fusedfunction_type_cname))\n         code.putln('#endif')\n \n-    def generate_module_state_clear(self, env, code):\n+    def generate_module_state_defines_end(self, env, code):\n+        code.putln(\"#endif /* CYTHON_USE_MODULE_STATE */\")\n+\n+    def generate_module_state_clear_begin(self, env, code):\n         code.putln(\"#if CYTHON_USE_MODULE_STATE\")\n         code.putln(\"static int %s_clear(PyObject *m) {\" % Naming.module_cname)\n-        code.putln(\"%s *clear_module_state = %s(m);\" % (\n-            Naming.modulestate_cname,\n-            Naming.modulestate_cname))\n+        code.putln(\"%s *clear_module_state = __Pyx_ModuleState(m);\" % Naming.modulestate_type_cname)\n         code.putln(\"if (!clear_module_state) return 0;\")\n         code.putln('Py_CLEAR(clear_module_state->%s);' %\n-            Naming.builtins_cname)\n+            env.module_dict_cname.field_name)\n+        code.putln('Py_CLEAR(clear_module_state->%s);' %\n+            Naming.builtins_cname.field_name)",
            "html_url": "https://github.com/cython/cython/pull/3704#discussion_r444244493",
            "id": 444244493,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI0NDQ5Mw==",
            "original_commit_id": "4fbfe11ff5559fdd139d6bfd49c95a95d4348b25",
            "original_line": 2600,
            "original_position": 226,
            "original_start_line": 2599,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": null,
            "pull_request_review_id": 435795543,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3704",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2020-07-09T04:07:58Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/444244493",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3704#discussion_r444245523"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3704"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/444245523"
                }
            },
            "author_association": "MEMBER",
            "body": "I like this idea. Seems worth using wherever we deal with global names then. Not sure about the `__str__()` behaviour  – might make the formatting a bit too implicit in some cases. Can't say right now. We could also make this inherit from `str` instead, just with the added property …? That would make it clearer what the intended usage is.\r\n\r\n(Otherwise, it should inherit from `object` to make it a new-style class in Py2.)",
            "commit_id": "8c03aff230486c1fbe11b7c4cb135489ea66ec57",
            "created_at": "2020-06-23T13:58:23Z",
            "diff_hunk": "@@ -73,6 +73,24 @@\n     'umethod': pyrex_prefix + \"umethod_\",\n }\n \n+\n+class Global:",
            "html_url": "https://github.com/cython/cython/pull/3704#discussion_r444245523",
            "id": 444245523,
            "line": 81,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI0NTUyMw==",
            "original_commit_id": "4fbfe11ff5559fdd139d6bfd49c95a95d4348b25",
            "original_line": 81,
            "original_position": 5,
            "original_start_line": null,
            "path": "Cython/Compiler/Naming.py",
            "position": 37,
            "pull_request_review_id": 435795543,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3704",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-07-09T04:07:58Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/444245523",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3704#discussion_r445469202"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3704"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/445469202"
                }
            },
            "author_association": "MEMBER",
            "body": "A better name for this property is `cname`, since it's the name that ends up in the C code and not the Python level name.",
            "commit_id": "8c03aff230486c1fbe11b7c4cb135489ea66ec57",
            "created_at": "2020-06-25T10:45:03Z",
            "diff_hunk": "@@ -73,6 +73,23 @@\n     'umethod': pyrex_prefix + \"umethod_\",\n }\n \n+\n+class Global:\n+    def __init__(self, name):\n+        self._name = name\n+        self._expr = \"__Pyx_Globals()->%s\" % self._name\n+\n+    @property\n+    def name(self):",
            "html_url": "https://github.com/cython/cython/pull/3704#discussion_r445469202",
            "id": 445469202,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ2OTIwMg==",
            "original_commit_id": "5478b13aaf20815035112ee97222480ba05694e1",
            "original_line": 83,
            "original_position": 11,
            "original_start_line": null,
            "path": "Cython/Compiler/Naming.py",
            "position": null,
            "pull_request_review_id": 437376129,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3704",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-07-09T04:07:58Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/445469202",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3704#discussion_r445473318"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3704"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/445473318"
                }
            },
            "author_association": "MEMBER",
            "body": "I actually liked the idea in your original change set of using a dict for this. The `Global` could also know its specific preprocessor guard, if any. I would then use an `OrderedDict` to get deterministic output also in Py<3.6 whenever we generate something generic for this dict.",
            "commit_id": "8c03aff230486c1fbe11b7c4cb135489ea66ec57",
            "created_at": "2020-06-25T10:53:24Z",
            "diff_hunk": "@@ -150,8 +150,15 @@ def __repr__(self):\n obj_dict_version_temp = pyrex_prefix + \"obj_dict_version\"\n type_dict_guard_temp = pyrex_prefix + \"typedict_guard\"\n cython_runtime_cname = Global(\"cython_runtime\")\n-cyfunction_type_cname = pyrex_prefix + \"CyFunctionType\"\n-fusedfunction_type_cname = pyrex_prefix + \"FusedFunctionType\"\n+asyncgen_type_cname = Global(\"AsyncGenType\")\n+asyncgen_asend_type_cname = Global(\"AsyncGenASendType\")\n+asyncgen_athrow_type_cname = Global(\"AsyncGenAThrowType\")\n+asyncgen_wrapped_value_type_cname = Global(\"AsyncGenWrappedValueType\")\n+coroutine_type_cname = Global(\"CoroutineType\")\n+coroutine_await_type_cname = Global(\"CoroutineAwaitType\")\n+cyfunction_type_cname = Global(\"CyFunctionType\")\n+fusedfunction_type_cname = Global(\"FusedFunctionType\")\n+generator_type_cname = Global(\"GeneratorType\")",
            "html_url": "https://github.com/cython/cython/pull/3704#discussion_r445473318",
            "id": 445473318,
            "line": 168,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ3MzMxOA==",
            "original_commit_id": "d96383c7c339d26f18609b18c86a2ea368233066",
            "original_line": 168,
            "original_position": 14,
            "original_start_line": 153,
            "path": "Cython/Compiler/Naming.py",
            "position": 112,
            "pull_request_review_id": 437376129,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3704",
            "side": "RIGHT",
            "start_line": 160,
            "start_side": "RIGHT",
            "updated_at": "2020-07-09T04:07:58Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/445473318",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3704#discussion_r445475536"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3704"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/445475536"
                }
            },
            "author_association": "MEMBER",
            "body": "I think we should have macros `__Pyx_GetCGlobal(name)` and `__Pyx_SetCGlobal(name, value)`. I don't see why we should require usages to take care of the pointer dereference (if any), nor require them to know if the name is `__Pyx_…` escaped or not. We could even go back to static global names quite easily that way, if we ever want to, or insert assertions and what not.\r\n\r\nWhile we're at it, we could also distinguish between Python object variables (which require ref-counting) and bare C variables, e.g. with alias macro names `__Pyx_[GS]etPyCGlobal(name)`. That might improve the readability of the C code and would allow us to use different assertions on Python variables or inject the ref-counting into the macros at some point, or … I don't know. Globals with Python and C types really seem different enough to use different names for them.\r\n\r\n(Note: Global names in the Python module dict are an entirely different thing and not meant here. That should also become clear from the naming.)",
            "commit_id": "8c03aff230486c1fbe11b7c4cb135489ea66ec57",
            "created_at": "2020-06-25T10:58:15Z",
            "diff_hunk": "@@ -2565,71 +2551,38 @@ def generate_module_state_begin(self, env, code):\n         code.putln('#endif')\n \n     def generate_module_state_end(self, env, code):\n-        code.putln('} %s;' % Naming.modulestate_cname)\n+        code.putln('#endif /* CYTHON_USE_MODULE_STATE */')\n+        code.putln('} %s;' % Naming.modulestate_type_cname)\n         code.putln('')\n+        code.putln('#if !CYTHON_USE_MODULE_STATE')\n+        code.putln('static %s %s;' % (Naming.modulestate_type_cname, Naming.modulestate_cname))\n+        code.putln('#define __Pyx_Globals() (&%s)' % Naming.modulestate_cname)",
            "html_url": "https://github.com/cython/cython/pull/3704#discussion_r445475536",
            "id": 445475536,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ3NTUzNg==",
            "original_commit_id": "5478b13aaf20815035112ee97222480ba05694e1",
            "original_line": 2559,
            "original_position": 86,
            "original_start_line": null,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": null,
            "pull_request_review_id": 437376129,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3704",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-07-09T04:07:58Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/445475536",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3704#discussion_r445477134"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3704"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/445477134"
                }
            },
            "author_association": "MEMBER",
            "body": "Why was this function moved down?",
            "commit_id": "8c03aff230486c1fbe11b7c4cb135489ea66ec57",
            "created_at": "2020-06-25T11:01:38Z",
            "diff_hunk": "@@ -170,6 +156,20 @@ typedef struct {\n #define _PyAsyncGen_MAXFREELIST 80\n #endif\n \n+static __pyx_CoroutineObject *__Pyx_AsyncGen_New(",
            "html_url": "https://github.com/cython/cython/pull/3704#discussion_r445477134",
            "id": 445477134,
            "line": 159,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ3NzEzNA==",
            "original_commit_id": "d96383c7c339d26f18609b18c86a2ea368233066",
            "original_line": 159,
            "original_position": 44,
            "original_start_line": null,
            "path": "Cython/Utility/AsyncGen.c",
            "position": 44,
            "pull_request_review_id": 437376129,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3704",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-07-09T04:07:58Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/445477134",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3704#discussion_r445691630"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3704"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/445691630"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Yeah this one is not nice. While the big majority of the users uses the globals in a string formatting context (\"...%s...\" % ) where things work well, this one happened to end up in a `xxx` list that and a `\", \".join(xxx)`expression, and unfortunately the join operation expects strings in the list and cannot deal with things that are merely convertible to a string...",
            "commit_id": "8c03aff230486c1fbe11b7c4cb135489ea66ec57",
            "created_at": "2020-06-25T16:37:46Z",
            "diff_hunk": "@@ -8013,7 +8005,7 @@ def calculate_result_code(self):\n         if len(self.args) > 0:\n             return self.result_code\n         else:\n-            return Naming.empty_tuple\n+            return str(Naming.empty_tuple)",
            "html_url": "https://github.com/cython/cython/pull/3704#discussion_r445691630",
            "id": 445691630,
            "in_reply_to_id": 444233910,
            "line": 8035,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY5MTYzMA==",
            "original_commit_id": "4fbfe11ff5559fdd139d6bfd49c95a95d4348b25",
            "original_line": 8035,
            "original_position": 27,
            "original_start_line": null,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": 32,
            "pull_request_review_id": 437669583,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3704",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-07-09T04:07:58Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/445691630",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/71571?v=4",
                "events_url": "https://api.github.com/users/MatzeB/events{/privacy}",
                "followers_url": "https://api.github.com/users/MatzeB/followers",
                "following_url": "https://api.github.com/users/MatzeB/following{/other_user}",
                "gists_url": "https://api.github.com/users/MatzeB/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MatzeB",
                "id": 71571,
                "login": "MatzeB",
                "node_id": "MDQ6VXNlcjcxNTcx",
                "organizations_url": "https://api.github.com/users/MatzeB/orgs",
                "received_events_url": "https://api.github.com/users/MatzeB/received_events",
                "repos_url": "https://api.github.com/users/MatzeB/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MatzeB/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MatzeB/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MatzeB"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3704#discussion_r445692223"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3704"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/445692223"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I definitely plan to do this. But I have to pull this off in testable steps that only change some things at a time. This one will come later.",
            "commit_id": "8c03aff230486c1fbe11b7c4cb135489ea66ec57",
            "created_at": "2020-06-25T16:38:44Z",
            "diff_hunk": "@@ -1232,9 +1219,8 @@ def generate_c_class_declarations(self, env, code, definition, globalstate):\n                 code.putln(\"static PyTypeObject *%s = 0;\" % (\n                     entry.type.typeptr_cname))\n                 module_state.putln(\"PyTypeObject *%s;\" % entry.type.typeptr_cname)\n-                module_state_defines.putln(\"#define %s %s->%s\" % (\n+                module_state_defines.putln(\"#define %s __Pyx_Globals()->%s\" % (",
            "html_url": "https://github.com/cython/cython/pull/3704#discussion_r445692223",
            "id": 445692223,
            "in_reply_to_id": 444236868,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY5MjIyMw==",
            "original_commit_id": "4fbfe11ff5559fdd139d6bfd49c95a95d4348b25",
            "original_line": 1222,
            "original_position": 55,
            "original_start_line": null,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": null,
            "pull_request_review_id": 437670339,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3704",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-07-09T04:07:58Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/445692223",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/71571?v=4",
                "events_url": "https://api.github.com/users/MatzeB/events{/privacy}",
                "followers_url": "https://api.github.com/users/MatzeB/followers",
                "following_url": "https://api.github.com/users/MatzeB/following{/other_user}",
                "gists_url": "https://api.github.com/users/MatzeB/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MatzeB",
                "id": 71571,
                "login": "MatzeB",
                "node_id": "MDQ6VXNlcjcxNTcx",
                "organizations_url": "https://api.github.com/users/MatzeB/orgs",
                "received_events_url": "https://api.github.com/users/MatzeB/received_events",
                "repos_url": "https://api.github.com/users/MatzeB/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MatzeB/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MatzeB/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MatzeB"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3704#discussion_r445692988"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3704"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/445692988"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Not sure what you mean with \"redefinition\" here. There should be a `__Pyx_Globals()` definition when `CYTHON_USE_MODULE_STATE` is enabled and another one when it is disabled. There should only ever be 1 definition be active at a time.",
            "commit_id": "8c03aff230486c1fbe11b7c4cb135489ea66ec57",
            "created_at": "2020-06-25T16:40:00Z",
            "diff_hunk": "@@ -2542,117 +2527,85 @@ def generate_import_star(self, env, code):\n         code.putln(UtilityCode.load_as_string(\"ImportStar\", \"ImportExport.c\")[1])\n         code.exit_cfunc_scope()  # done with labels\n \n-    def generate_module_state_start(self, env, code):\n-        # TODO: Refactor to move module state struct decl closer to the static decl\n-        code.putln(\"#if CYTHON_USE_MODULE_STATE\")\n-        code.putln('typedef struct {')\n-        code.putln('PyObject *%s;' % Naming.builtins_cname)\n-        code.putln('PyObject *%s;' % Naming.cython_runtime_cname)\n-        code.putln('PyObject *%s;' % Naming.empty_tuple)\n-        code.putln('PyObject *%s;' % Naming.empty_bytes)\n-        code.putln('PyObject *%s;' % Naming.empty_unicode)\n+    def generate_module_state_begin(self, env, code):\n+        code.putln('static int %s;' % Naming.lineno_cname)\n+        code.putln('static int %s = 0;' % Naming.clineno_cname)\n+        code.putln('static const char * %s = %s;' % (Naming.cfilenm_cname, Naming.file_c_macro))\n+        code.putln('static const char *%s;' % Naming.filename_cname)\n+        code.putln('')\n+        code.putln('typedef struct %s {' % Naming.modulestate_type_cname)\n+        code.putln('PyObject *%s;' % env.module_dict_cname.field_name)\n+        code.putln('PyObject *%s;' % Naming.builtins_cname.field_name)\n+        code.putln('PyObject *%s;' % Naming.cython_runtime_cname.field_name)\n+        code.putln('PyObject *%s;' % Naming.empty_tuple.field_name)\n+        code.putln('PyObject *%s;' % Naming.empty_bytes.field_name)\n+        code.putln('PyObject *%s;' % Naming.empty_unicode.field_name)\n         if Options.pre_import is not None:\n             code.putln('PyObject *%s;' % Naming.preimport_cname)\n+        code.putln(\"#if CYTHON_USE_MODULE_STATE\")\n         code.putln('#ifdef __Pyx_CyFunction_USED')\n         code.putln('PyTypeObject *%s;' % Naming.cyfunction_type_cname)\n         code.putln('#endif')\n         code.putln('#ifdef __Pyx_FusedFunction_USED')\n         code.putln('PyTypeObject *%s;' % Naming.fusedfunction_type_cname)\n         code.putln('#endif')\n \n-    def generate_module_state_end(self, env, modules, globalstate):\n-        module_state = globalstate['module_state']\n-        module_state_defines = globalstate['module_state_defines']\n-        module_state_clear = globalstate['module_state_clear']\n-        module_state_traverse = globalstate['module_state_traverse']\n-        module_state.putln('} %s;' % Naming.modulestate_cname)\n-        module_state.putln('')\n-        module_state.putln('#ifdef __cplusplus')\n-        module_state.putln('namespace {')\n-        module_state.putln('extern struct PyModuleDef %s;' % Naming.pymoduledef_cname)\n-        module_state.putln('} /* anonymous namespace */')\n-        module_state.putln('#else')\n-        module_state.putln('static struct PyModuleDef %s;' % Naming.pymoduledef_cname)\n-        module_state.putln('#endif')\n-        module_state.putln('')\n-        module_state.putln('#define %s(o) ((%s *)__Pyx_PyModule_GetState(o))' % (\n-            Naming.modulestate_cname,\n-            Naming.modulestate_cname))\n-        module_state.putln('')\n-        module_state.putln('#define %s (%s(PyState_FindModule(&%s)))' % (\n-            Naming.modulestateglobal_cname,\n-            Naming.modulestate_cname,\n-            Naming.pymoduledef_cname))\n-        module_state.putln('')\n-        module_state.putln('#define %s (PyState_FindModule(&%s))' % (\n-            env.module_cname,\n-            Naming.pymoduledef_cname))\n-        module_state.putln(\"#endif\")\n-        module_state_defines.putln(\"#endif\")\n-        module_state_clear.putln(\"return 0;\")\n-        module_state_clear.putln(\"}\")\n-        module_state_clear.putln(\"#endif\")\n-        module_state_traverse.putln(\"return 0;\")\n-        module_state_traverse.putln(\"}\")\n-        module_state_traverse.putln(\"#endif\")\n-\n-    def generate_module_state_defines(self, env, code):\n+    def generate_module_state_end(self, env, code):\n+        code.putln('#endif /* CYTHON_USE_MODULE_STATE */')\n+        code.putln('} %s;' % Naming.modulestate_type_cname)\n+        code.putln('')\n+        code.putln('#if !CYTHON_USE_MODULE_STATE')\n+        code.putln('static %s %s;' % (Naming.modulestate_type_cname, Naming.modulestate_cname))\n+        code.putln('#define __Pyx_Globals() (&%s)' % (Naming.modulestate_cname))",
            "html_url": "https://github.com/cython/cython/pull/3704#discussion_r445692988",
            "id": 445692988,
            "in_reply_to_id": 444238363,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY5Mjk4OA==",
            "original_commit_id": "4fbfe11ff5559fdd139d6bfd49c95a95d4348b25",
            "original_line": 2559,
            "original_position": 151,
            "original_start_line": null,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": null,
            "pull_request_review_id": 437671341,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3704",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-07-09T04:07:58Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/445692988",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/71571?v=4",
                "events_url": "https://api.github.com/users/MatzeB/events{/privacy}",
                "followers_url": "https://api.github.com/users/MatzeB/followers",
                "following_url": "https://api.github.com/users/MatzeB/following{/other_user}",
                "gists_url": "https://api.github.com/users/MatzeB/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MatzeB",
                "id": 71571,
                "login": "MatzeB",
                "node_id": "MDQ6VXNlcjcxNTcx",
                "organizations_url": "https://api.github.com/users/MatzeB/orgs",
                "received_events_url": "https://api.github.com/users/MatzeB/received_events",
                "repos_url": "https://api.github.com/users/MatzeB/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MatzeB/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MatzeB/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MatzeB"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3704#discussion_r445694289"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3704"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/445694289"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Yes, I am also contemplating to further raise the abstraction level and maintain a `globals` list in the code environment or so. And then completely generate the `clear` and `visit` calls from that. So that the typical user could would just add a something to the `globals` list once and the rest falls into place automatically.\r\n\r\nBut again, I'd like to do one step at a time (and have the code testable and working between, so we can hit the master branch rather sooner than later).",
            "commit_id": "8c03aff230486c1fbe11b7c4cb135489ea66ec57",
            "created_at": "2020-06-25T16:42:13Z",
            "diff_hunk": "@@ -2542,117 +2527,85 @@ def generate_import_star(self, env, code):\n         code.putln(UtilityCode.load_as_string(\"ImportStar\", \"ImportExport.c\")[1])\n         code.exit_cfunc_scope()  # done with labels\n \n-    def generate_module_state_start(self, env, code):\n-        # TODO: Refactor to move module state struct decl closer to the static decl\n-        code.putln(\"#if CYTHON_USE_MODULE_STATE\")\n-        code.putln('typedef struct {')\n-        code.putln('PyObject *%s;' % Naming.builtins_cname)\n-        code.putln('PyObject *%s;' % Naming.cython_runtime_cname)\n-        code.putln('PyObject *%s;' % Naming.empty_tuple)\n-        code.putln('PyObject *%s;' % Naming.empty_bytes)\n-        code.putln('PyObject *%s;' % Naming.empty_unicode)\n+    def generate_module_state_begin(self, env, code):\n+        code.putln('static int %s;' % Naming.lineno_cname)\n+        code.putln('static int %s = 0;' % Naming.clineno_cname)\n+        code.putln('static const char * %s = %s;' % (Naming.cfilenm_cname, Naming.file_c_macro))\n+        code.putln('static const char *%s;' % Naming.filename_cname)\n+        code.putln('')\n+        code.putln('typedef struct %s {' % Naming.modulestate_type_cname)\n+        code.putln('PyObject *%s;' % env.module_dict_cname.field_name)\n+        code.putln('PyObject *%s;' % Naming.builtins_cname.field_name)\n+        code.putln('PyObject *%s;' % Naming.cython_runtime_cname.field_name)\n+        code.putln('PyObject *%s;' % Naming.empty_tuple.field_name)\n+        code.putln('PyObject *%s;' % Naming.empty_bytes.field_name)\n+        code.putln('PyObject *%s;' % Naming.empty_unicode.field_name)\n         if Options.pre_import is not None:\n             code.putln('PyObject *%s;' % Naming.preimport_cname)\n+        code.putln(\"#if CYTHON_USE_MODULE_STATE\")\n         code.putln('#ifdef __Pyx_CyFunction_USED')\n         code.putln('PyTypeObject *%s;' % Naming.cyfunction_type_cname)\n         code.putln('#endif')\n         code.putln('#ifdef __Pyx_FusedFunction_USED')\n         code.putln('PyTypeObject *%s;' % Naming.fusedfunction_type_cname)\n         code.putln('#endif')\n \n-    def generate_module_state_end(self, env, modules, globalstate):\n-        module_state = globalstate['module_state']\n-        module_state_defines = globalstate['module_state_defines']\n-        module_state_clear = globalstate['module_state_clear']\n-        module_state_traverse = globalstate['module_state_traverse']\n-        module_state.putln('} %s;' % Naming.modulestate_cname)\n-        module_state.putln('')\n-        module_state.putln('#ifdef __cplusplus')\n-        module_state.putln('namespace {')\n-        module_state.putln('extern struct PyModuleDef %s;' % Naming.pymoduledef_cname)\n-        module_state.putln('} /* anonymous namespace */')\n-        module_state.putln('#else')\n-        module_state.putln('static struct PyModuleDef %s;' % Naming.pymoduledef_cname)\n-        module_state.putln('#endif')\n-        module_state.putln('')\n-        module_state.putln('#define %s(o) ((%s *)__Pyx_PyModule_GetState(o))' % (\n-            Naming.modulestate_cname,\n-            Naming.modulestate_cname))\n-        module_state.putln('')\n-        module_state.putln('#define %s (%s(PyState_FindModule(&%s)))' % (\n-            Naming.modulestateglobal_cname,\n-            Naming.modulestate_cname,\n-            Naming.pymoduledef_cname))\n-        module_state.putln('')\n-        module_state.putln('#define %s (PyState_FindModule(&%s))' % (\n-            env.module_cname,\n-            Naming.pymoduledef_cname))\n-        module_state.putln(\"#endif\")\n-        module_state_defines.putln(\"#endif\")\n-        module_state_clear.putln(\"return 0;\")\n-        module_state_clear.putln(\"}\")\n-        module_state_clear.putln(\"#endif\")\n-        module_state_traverse.putln(\"return 0;\")\n-        module_state_traverse.putln(\"}\")\n-        module_state_traverse.putln(\"#endif\")\n-\n-    def generate_module_state_defines(self, env, code):\n+    def generate_module_state_end(self, env, code):\n+        code.putln('#endif /* CYTHON_USE_MODULE_STATE */')\n+        code.putln('} %s;' % Naming.modulestate_type_cname)\n+        code.putln('')\n+        code.putln('#if !CYTHON_USE_MODULE_STATE')\n+        code.putln('static %s %s;' % (Naming.modulestate_type_cname, Naming.modulestate_cname))\n+        code.putln('#define __Pyx_Globals() (&%s)' % (Naming.modulestate_cname))\n+        code.putln('static PyObject *%s;' % env.module_cname)\n+        code.putln('#else')\n+        code.putln('/* Module def forward declaration */')\n+        code.putln('#ifdef __cplusplus')\n+        code.putln('namespace {')\n+        code.putln('  extern struct PyModuleDef %s;' % Naming.pymoduledef_cname)\n+        code.putln('} /* anonymous namespace */')\n+        code.putln('#else')\n+        code.putln('static struct PyModuleDef %s;' % Naming.pymoduledef_cname)\n+        code.putln('#endif')\n+        code.putln('#define %s (PyState_FindModule(&%s))' % (env.module_cname, Naming.pymoduledef_cname))\n+        code.putln('#define __Pyx_ModuleState(m) ((%s *)__Pyx_PyModule_GetState(m))' %\n+                   Naming.modulestate_type_cname)\n+        code.putln('#define __Pyx_Globals() __Pyx_ModuleState(%s)' % env.module_cname)\n+        code.putln('#endif')\n+\n+    def generate_module_state_defines_begin(self, env, code):\n         code.putln(\"#if CYTHON_USE_MODULE_STATE\")\n-        code.putln('#define %s %s->%s' % (\n-            Naming.builtins_cname,\n-            Naming.modulestateglobal_cname,\n-            Naming.builtins_cname))\n-        code.putln('#define %s %s->%s' % (\n-            Naming.cython_runtime_cname,\n-            Naming.modulestateglobal_cname,\n-            Naming.cython_runtime_cname))\n-        code.putln('#define %s %s->%s' % (\n-            Naming.empty_tuple,\n-            Naming.modulestateglobal_cname,\n-            Naming.empty_tuple))\n-        code.putln('#define %s %s->%s' % (\n-            Naming.empty_bytes,\n-            Naming.modulestateglobal_cname,\n-            Naming.empty_bytes))\n-        code.putln('#define %s %s->%s' % (\n-            Naming.empty_unicode,\n-            Naming.modulestateglobal_cname,\n-            Naming.empty_unicode))\n-        if Options.pre_import is not None:\n-            code.putln('#define %s %s->%s' % (\n-                Naming.preimport_cname,\n-                Naming.modulestateglobal_cname,\n-                Naming.preimport_cname))\n         code.putln('#ifdef __Pyx_CyFunction_USED')\n-        code.putln('#define %s %s->%s' % (\n+        code.putln('#define %s __Pyx_Globals()->%s' % (\n             Naming.cyfunction_type_cname,\n-            Naming.modulestateglobal_cname,\n             Naming.cyfunction_type_cname))\n         code.putln('#endif')\n         code.putln('#ifdef __Pyx_FusedFunction_USED')\n-        code.putln('#define %s %s->%s' %\n+        code.putln('#define %s __Pyx_Globals()->%s' %\n             (Naming.fusedfunction_type_cname,\n-            Naming.modulestateglobal_cname,\n             Naming.fusedfunction_type_cname))\n         code.putln('#endif')\n \n-    def generate_module_state_clear(self, env, code):\n+    def generate_module_state_defines_end(self, env, code):\n+        code.putln(\"#endif /* CYTHON_USE_MODULE_STATE */\")\n+\n+    def generate_module_state_clear_begin(self, env, code):\n         code.putln(\"#if CYTHON_USE_MODULE_STATE\")\n         code.putln(\"static int %s_clear(PyObject *m) {\" % Naming.module_cname)\n-        code.putln(\"%s *clear_module_state = %s(m);\" % (\n-            Naming.modulestate_cname,\n-            Naming.modulestate_cname))\n+        code.putln(\"%s *clear_module_state = __Pyx_ModuleState(m);\" % Naming.modulestate_type_cname)\n         code.putln(\"if (!clear_module_state) return 0;\")\n         code.putln('Py_CLEAR(clear_module_state->%s);' %\n-            Naming.builtins_cname)\n+            env.module_dict_cname.field_name)\n+        code.putln('Py_CLEAR(clear_module_state->%s);' %\n+            Naming.builtins_cname.field_name)",
            "html_url": "https://github.com/cython/cython/pull/3704#discussion_r445694289",
            "id": 445694289,
            "in_reply_to_id": 444244493,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY5NDI4OQ==",
            "original_commit_id": "4fbfe11ff5559fdd139d6bfd49c95a95d4348b25",
            "original_line": 2600,
            "original_position": 226,
            "original_start_line": 2599,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": null,
            "pull_request_review_id": 437673050,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3704",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2020-07-09T04:07:58Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/445694289",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/71571?v=4",
                "events_url": "https://api.github.com/users/MatzeB/events{/privacy}",
                "followers_url": "https://api.github.com/users/MatzeB/followers",
                "following_url": "https://api.github.com/users/MatzeB/following{/other_user}",
                "gists_url": "https://api.github.com/users/MatzeB/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MatzeB",
                "id": 71571,
                "login": "MatzeB",
                "node_id": "MDQ6VXNlcjcxNTcx",
                "organizations_url": "https://api.github.com/users/MatzeB/orgs",
                "received_events_url": "https://api.github.com/users/MatzeB/received_events",
                "repos_url": "https://api.github.com/users/MatzeB/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MatzeB/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MatzeB/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MatzeB"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3704#discussion_r445696821"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3704"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/445696821"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I was also wondering whether I the `__str__` conversion is slightly too clever... I mean it works beautifully for all the `%s` format strings (short of having python3 and a `__format__` which would have been clearer).\r\n\r\nI'm a bit more skeptical of making it a string subclass. Conceptually it feels like it's more a tuple of 2 strings, rather than a subclass. And in practice that would make the string immutable after construction, and I think that there may be room to dynamically change the way are globals are formatted based on context. Like a function putting a pointer to the module state into a local variable at the beginning of the function and then all further references within the function are relative to that pointer...",
            "commit_id": "8c03aff230486c1fbe11b7c4cb135489ea66ec57",
            "created_at": "2020-06-25T16:46:19Z",
            "diff_hunk": "@@ -73,6 +73,24 @@\n     'umethod': pyrex_prefix + \"umethod_\",\n }\n \n+\n+class Global:",
            "html_url": "https://github.com/cython/cython/pull/3704#discussion_r445696821",
            "id": 445696821,
            "in_reply_to_id": 444245523,
            "line": 81,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY5NjgyMQ==",
            "original_commit_id": "4fbfe11ff5559fdd139d6bfd49c95a95d4348b25",
            "original_line": 81,
            "original_position": 5,
            "original_start_line": null,
            "path": "Cython/Compiler/Naming.py",
            "position": 37,
            "pull_request_review_id": 437676334,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3704",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-07-09T04:07:58Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/445696821",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/71571?v=4",
                "events_url": "https://api.github.com/users/MatzeB/events{/privacy}",
                "followers_url": "https://api.github.com/users/MatzeB/followers",
                "following_url": "https://api.github.com/users/MatzeB/following{/other_user}",
                "gists_url": "https://api.github.com/users/MatzeB/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MatzeB",
                "id": 71571,
                "login": "MatzeB",
                "node_id": "MDQ6VXNlcjcxNTcx",
                "organizations_url": "https://api.github.com/users/MatzeB/orgs",
                "received_events_url": "https://api.github.com/users/MatzeB/received_events",
                "repos_url": "https://api.github.com/users/MatzeB/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MatzeB/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MatzeB/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MatzeB"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3704#discussion_r445698021"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3704"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/445698021"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "This is also about me contemplating to maybe create a list of all \"globals\" in the module state (which would then supersede having a list of just those helper types). So for now I'd like to stay with the simpler approach, and leave merging to later changes.",
            "commit_id": "8c03aff230486c1fbe11b7c4cb135489ea66ec57",
            "created_at": "2020-06-25T16:48:05Z",
            "diff_hunk": "@@ -150,8 +150,15 @@ def __repr__(self):\n obj_dict_version_temp = pyrex_prefix + \"obj_dict_version\"\n type_dict_guard_temp = pyrex_prefix + \"typedict_guard\"\n cython_runtime_cname = Global(\"cython_runtime\")\n-cyfunction_type_cname = pyrex_prefix + \"CyFunctionType\"\n-fusedfunction_type_cname = pyrex_prefix + \"FusedFunctionType\"\n+asyncgen_type_cname = Global(\"AsyncGenType\")\n+asyncgen_asend_type_cname = Global(\"AsyncGenASendType\")\n+asyncgen_athrow_type_cname = Global(\"AsyncGenAThrowType\")\n+asyncgen_wrapped_value_type_cname = Global(\"AsyncGenWrappedValueType\")\n+coroutine_type_cname = Global(\"CoroutineType\")\n+coroutine_await_type_cname = Global(\"CoroutineAwaitType\")\n+cyfunction_type_cname = Global(\"CyFunctionType\")\n+fusedfunction_type_cname = Global(\"FusedFunctionType\")\n+generator_type_cname = Global(\"GeneratorType\")",
            "html_url": "https://github.com/cython/cython/pull/3704#discussion_r445698021",
            "id": 445698021,
            "in_reply_to_id": 445473318,
            "line": 168,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY5ODAyMQ==",
            "original_commit_id": "d96383c7c339d26f18609b18c86a2ea368233066",
            "original_line": 168,
            "original_position": 14,
            "original_start_line": 153,
            "path": "Cython/Compiler/Naming.py",
            "position": 112,
            "pull_request_review_id": 437677749,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3704",
            "side": "RIGHT",
            "start_line": 160,
            "start_side": "RIGHT",
            "updated_at": "2020-07-09T04:07:58Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/445698021",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/71571?v=4",
                "events_url": "https://api.github.com/users/MatzeB/events{/privacy}",
                "followers_url": "https://api.github.com/users/MatzeB/followers",
                "following_url": "https://api.github.com/users/MatzeB/following{/other_user}",
                "gists_url": "https://api.github.com/users/MatzeB/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MatzeB",
                "id": 71571,
                "login": "MatzeB",
                "node_id": "MDQ6VXNlcjcxNTcx",
                "organizations_url": "https://api.github.com/users/MatzeB/orgs",
                "received_events_url": "https://api.github.com/users/MatzeB/received_events",
                "repos_url": "https://api.github.com/users/MatzeB/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MatzeB/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MatzeB/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MatzeB"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3704#discussion_r445698249"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3704"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/445698249"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Sure",
            "commit_id": "8c03aff230486c1fbe11b7c4cb135489ea66ec57",
            "created_at": "2020-06-25T16:48:28Z",
            "diff_hunk": "@@ -73,6 +73,23 @@\n     'umethod': pyrex_prefix + \"umethod_\",\n }\n \n+\n+class Global:\n+    def __init__(self, name):\n+        self._name = name\n+        self._expr = \"__Pyx_Globals()->%s\" % self._name\n+\n+    @property\n+    def name(self):",
            "html_url": "https://github.com/cython/cython/pull/3704#discussion_r445698249",
            "id": 445698249,
            "in_reply_to_id": 445469202,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY5ODI0OQ==",
            "original_commit_id": "5478b13aaf20815035112ee97222480ba05694e1",
            "original_line": 83,
            "original_position": 11,
            "original_start_line": null,
            "path": "Cython/Compiler/Naming.py",
            "position": null,
            "pull_request_review_id": 437678054,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3704",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-07-09T04:07:58Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/445698249",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/71571?v=4",
                "events_url": "https://api.github.com/users/MatzeB/events{/privacy}",
                "followers_url": "https://api.github.com/users/MatzeB/followers",
                "following_url": "https://api.github.com/users/MatzeB/following{/other_user}",
                "gists_url": "https://api.github.com/users/MatzeB/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MatzeB",
                "id": 71571,
                "login": "MatzeB",
                "node_id": "MDQ6VXNlcjcxNTcx",
                "organizations_url": "https://api.github.com/users/MatzeB/orgs",
                "received_events_url": "https://api.github.com/users/MatzeB/received_events",
                "repos_url": "https://api.github.com/users/MatzeB/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MatzeB/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MatzeB/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MatzeB"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3704#discussion_r445701850"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3704"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/445701850"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Splitting things into a getter and setter pattern will be a gigantic churn. With the current approach we can leave many places in the code untouched because things naturally format for the `%s` pattern. Requiring to call explicit getters and setters means we have to explicitely review every single place in the code. I also think seeing a `=` for assignments rather than a set function helps readability.\r\n\r\nPutting the dereferencing into the macro is fine with me. It hides more of the mechanism from the casual reader, but given that globals are used extensively all over the place that may be worth it as it reduces the noise. So how about `__Pyx_Global(name) = ...`  /  `xxx = __Pyx_Global(name)` ?   I would vote to not include the `C` into the macro name, because in the generated code it's all C anyway and there is no need to distinguish from some python name.",
            "commit_id": "8c03aff230486c1fbe11b7c4cb135489ea66ec57",
            "created_at": "2020-06-25T16:54:15Z",
            "diff_hunk": "@@ -2565,71 +2551,38 @@ def generate_module_state_begin(self, env, code):\n         code.putln('#endif')\n \n     def generate_module_state_end(self, env, code):\n-        code.putln('} %s;' % Naming.modulestate_cname)\n+        code.putln('#endif /* CYTHON_USE_MODULE_STATE */')\n+        code.putln('} %s;' % Naming.modulestate_type_cname)\n         code.putln('')\n+        code.putln('#if !CYTHON_USE_MODULE_STATE')\n+        code.putln('static %s %s;' % (Naming.modulestate_type_cname, Naming.modulestate_cname))\n+        code.putln('#define __Pyx_Globals() (&%s)' % Naming.modulestate_cname)",
            "html_url": "https://github.com/cython/cython/pull/3704#discussion_r445701850",
            "id": 445701850,
            "in_reply_to_id": 445475536,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTcwMTg1MA==",
            "original_commit_id": "5478b13aaf20815035112ee97222480ba05694e1",
            "original_line": 2559,
            "original_position": 86,
            "original_start_line": null,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": null,
            "pull_request_review_id": 437682541,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3704",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-07-09T04:07:58Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/445701850",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/71571?v=4",
                "events_url": "https://api.github.com/users/MatzeB/events{/privacy}",
                "followers_url": "https://api.github.com/users/MatzeB/followers",
                "following_url": "https://api.github.com/users/MatzeB/following{/other_user}",
                "gists_url": "https://api.github.com/users/MatzeB/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MatzeB",
                "id": 71571,
                "login": "MatzeB",
                "node_id": "MDQ6VXNlcjcxNTcx",
                "organizations_url": "https://api.github.com/users/MatzeB/orgs",
                "received_events_url": "https://api.github.com/users/MatzeB/received_events",
                "repos_url": "https://api.github.com/users/MatzeB/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MatzeB/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MatzeB/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MatzeB"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3704#discussion_r445703081"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3704"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/445703081"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I'm also open to different term than \"Global\" for those thing, I was contemplating stuff like \"StateVar\" ro \"Static\" but so far \"Global\" felt like the most natural to me.",
            "commit_id": "8c03aff230486c1fbe11b7c4cb135489ea66ec57",
            "created_at": "2020-06-25T16:56:12Z",
            "diff_hunk": "@@ -2565,71 +2551,38 @@ def generate_module_state_begin(self, env, code):\n         code.putln('#endif')\n \n     def generate_module_state_end(self, env, code):\n-        code.putln('} %s;' % Naming.modulestate_cname)\n+        code.putln('#endif /* CYTHON_USE_MODULE_STATE */')\n+        code.putln('} %s;' % Naming.modulestate_type_cname)\n         code.putln('')\n+        code.putln('#if !CYTHON_USE_MODULE_STATE')\n+        code.putln('static %s %s;' % (Naming.modulestate_type_cname, Naming.modulestate_cname))\n+        code.putln('#define __Pyx_Globals() (&%s)' % Naming.modulestate_cname)",
            "html_url": "https://github.com/cython/cython/pull/3704#discussion_r445703081",
            "id": 445703081,
            "in_reply_to_id": 445475536,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTcwMzA4MQ==",
            "original_commit_id": "5478b13aaf20815035112ee97222480ba05694e1",
            "original_line": 2559,
            "original_position": 86,
            "original_start_line": null,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": null,
            "pull_request_review_id": 437684111,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3704",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-07-09T04:07:58Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/445703081",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/71571?v=4",
                "events_url": "https://api.github.com/users/MatzeB/events{/privacy}",
                "followers_url": "https://api.github.com/users/MatzeB/followers",
                "following_url": "https://api.github.com/users/MatzeB/following{/other_user}",
                "gists_url": "https://api.github.com/users/MatzeB/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MatzeB",
                "id": 71571,
                "login": "MatzeB",
                "node_id": "MDQ6VXNlcjcxNTcx",
                "organizations_url": "https://api.github.com/users/MatzeB/orgs",
                "received_events_url": "https://api.github.com/users/MatzeB/received_events",
                "repos_url": "https://api.github.com/users/MatzeB/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MatzeB/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MatzeB/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MatzeB"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3704#discussion_r445703834"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3704"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/445703834"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Because the `Generator.proto` block happened to end up before the definition of the module state struct, so it is not possible to use `__Pyx_Globals()` that early in the file. Anyway it felt like a good idea to only have a prototype in the `xxx.proto` section and the implementation further down.",
            "commit_id": "8c03aff230486c1fbe11b7c4cb135489ea66ec57",
            "created_at": "2020-06-25T16:57:30Z",
            "diff_hunk": "@@ -170,6 +156,20 @@ typedef struct {\n #define _PyAsyncGen_MAXFREELIST 80\n #endif\n \n+static __pyx_CoroutineObject *__Pyx_AsyncGen_New(",
            "html_url": "https://github.com/cython/cython/pull/3704#discussion_r445703834",
            "id": 445703834,
            "in_reply_to_id": 445477134,
            "line": 159,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTcwMzgzNA==",
            "original_commit_id": "d96383c7c339d26f18609b18c86a2ea368233066",
            "original_line": 159,
            "original_position": 44,
            "original_start_line": null,
            "path": "Cython/Utility/AsyncGen.c",
            "position": 44,
            "pull_request_review_id": 437685131,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3704",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-07-09T04:07:58Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/445703834",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/71571?v=4",
                "events_url": "https://api.github.com/users/MatzeB/events{/privacy}",
                "followers_url": "https://api.github.com/users/MatzeB/followers",
                "following_url": "https://api.github.com/users/MatzeB/following{/other_user}",
                "gists_url": "https://api.github.com/users/MatzeB/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MatzeB",
                "id": 71571,
                "login": "MatzeB",
                "node_id": "MDQ6VXNlcjcxNTcx",
                "organizations_url": "https://api.github.com/users/MatzeB/orgs",
                "received_events_url": "https://api.github.com/users/MatzeB/received_events",
                "repos_url": "https://api.github.com/users/MatzeB/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MatzeB/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MatzeB/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MatzeB"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3704#discussion_r445817032"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3704"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/445817032"
                }
            },
            "author_association": "MEMBER",
            "body": "Ok, probably just me scrolling around too much in the long diff. :)",
            "commit_id": "8c03aff230486c1fbe11b7c4cb135489ea66ec57",
            "created_at": "2020-06-25T20:24:12Z",
            "diff_hunk": "@@ -2542,117 +2527,85 @@ def generate_import_star(self, env, code):\n         code.putln(UtilityCode.load_as_string(\"ImportStar\", \"ImportExport.c\")[1])\n         code.exit_cfunc_scope()  # done with labels\n \n-    def generate_module_state_start(self, env, code):\n-        # TODO: Refactor to move module state struct decl closer to the static decl\n-        code.putln(\"#if CYTHON_USE_MODULE_STATE\")\n-        code.putln('typedef struct {')\n-        code.putln('PyObject *%s;' % Naming.builtins_cname)\n-        code.putln('PyObject *%s;' % Naming.cython_runtime_cname)\n-        code.putln('PyObject *%s;' % Naming.empty_tuple)\n-        code.putln('PyObject *%s;' % Naming.empty_bytes)\n-        code.putln('PyObject *%s;' % Naming.empty_unicode)\n+    def generate_module_state_begin(self, env, code):\n+        code.putln('static int %s;' % Naming.lineno_cname)\n+        code.putln('static int %s = 0;' % Naming.clineno_cname)\n+        code.putln('static const char * %s = %s;' % (Naming.cfilenm_cname, Naming.file_c_macro))\n+        code.putln('static const char *%s;' % Naming.filename_cname)\n+        code.putln('')\n+        code.putln('typedef struct %s {' % Naming.modulestate_type_cname)\n+        code.putln('PyObject *%s;' % env.module_dict_cname.field_name)\n+        code.putln('PyObject *%s;' % Naming.builtins_cname.field_name)\n+        code.putln('PyObject *%s;' % Naming.cython_runtime_cname.field_name)\n+        code.putln('PyObject *%s;' % Naming.empty_tuple.field_name)\n+        code.putln('PyObject *%s;' % Naming.empty_bytes.field_name)\n+        code.putln('PyObject *%s;' % Naming.empty_unicode.field_name)\n         if Options.pre_import is not None:\n             code.putln('PyObject *%s;' % Naming.preimport_cname)\n+        code.putln(\"#if CYTHON_USE_MODULE_STATE\")\n         code.putln('#ifdef __Pyx_CyFunction_USED')\n         code.putln('PyTypeObject *%s;' % Naming.cyfunction_type_cname)\n         code.putln('#endif')\n         code.putln('#ifdef __Pyx_FusedFunction_USED')\n         code.putln('PyTypeObject *%s;' % Naming.fusedfunction_type_cname)\n         code.putln('#endif')\n \n-    def generate_module_state_end(self, env, modules, globalstate):\n-        module_state = globalstate['module_state']\n-        module_state_defines = globalstate['module_state_defines']\n-        module_state_clear = globalstate['module_state_clear']\n-        module_state_traverse = globalstate['module_state_traverse']\n-        module_state.putln('} %s;' % Naming.modulestate_cname)\n-        module_state.putln('')\n-        module_state.putln('#ifdef __cplusplus')\n-        module_state.putln('namespace {')\n-        module_state.putln('extern struct PyModuleDef %s;' % Naming.pymoduledef_cname)\n-        module_state.putln('} /* anonymous namespace */')\n-        module_state.putln('#else')\n-        module_state.putln('static struct PyModuleDef %s;' % Naming.pymoduledef_cname)\n-        module_state.putln('#endif')\n-        module_state.putln('')\n-        module_state.putln('#define %s(o) ((%s *)__Pyx_PyModule_GetState(o))' % (\n-            Naming.modulestate_cname,\n-            Naming.modulestate_cname))\n-        module_state.putln('')\n-        module_state.putln('#define %s (%s(PyState_FindModule(&%s)))' % (\n-            Naming.modulestateglobal_cname,\n-            Naming.modulestate_cname,\n-            Naming.pymoduledef_cname))\n-        module_state.putln('')\n-        module_state.putln('#define %s (PyState_FindModule(&%s))' % (\n-            env.module_cname,\n-            Naming.pymoduledef_cname))\n-        module_state.putln(\"#endif\")\n-        module_state_defines.putln(\"#endif\")\n-        module_state_clear.putln(\"return 0;\")\n-        module_state_clear.putln(\"}\")\n-        module_state_clear.putln(\"#endif\")\n-        module_state_traverse.putln(\"return 0;\")\n-        module_state_traverse.putln(\"}\")\n-        module_state_traverse.putln(\"#endif\")\n-\n-    def generate_module_state_defines(self, env, code):\n+    def generate_module_state_end(self, env, code):\n+        code.putln('#endif /* CYTHON_USE_MODULE_STATE */')\n+        code.putln('} %s;' % Naming.modulestate_type_cname)\n+        code.putln('')\n+        code.putln('#if !CYTHON_USE_MODULE_STATE')\n+        code.putln('static %s %s;' % (Naming.modulestate_type_cname, Naming.modulestate_cname))\n+        code.putln('#define __Pyx_Globals() (&%s)' % (Naming.modulestate_cname))",
            "html_url": "https://github.com/cython/cython/pull/3704#discussion_r445817032",
            "id": 445817032,
            "in_reply_to_id": 444238363,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgxNzAzMg==",
            "original_commit_id": "4fbfe11ff5559fdd139d6bfd49c95a95d4348b25",
            "original_line": 2559,
            "original_position": 151,
            "original_start_line": null,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": null,
            "pull_request_review_id": 437831491,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3704",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-07-09T04:07:58Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/445817032",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3704#discussion_r445821505"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3704"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/445821505"
                }
            },
            "author_association": "MEMBER",
            "body": "You mean like what we do in `ModuleNode.generate_module_cleanup_func()`? ;-)",
            "commit_id": "8c03aff230486c1fbe11b7c4cb135489ea66ec57",
            "created_at": "2020-06-25T20:33:10Z",
            "diff_hunk": "@@ -2542,117 +2527,85 @@ def generate_import_star(self, env, code):\n         code.putln(UtilityCode.load_as_string(\"ImportStar\", \"ImportExport.c\")[1])\n         code.exit_cfunc_scope()  # done with labels\n \n-    def generate_module_state_start(self, env, code):\n-        # TODO: Refactor to move module state struct decl closer to the static decl\n-        code.putln(\"#if CYTHON_USE_MODULE_STATE\")\n-        code.putln('typedef struct {')\n-        code.putln('PyObject *%s;' % Naming.builtins_cname)\n-        code.putln('PyObject *%s;' % Naming.cython_runtime_cname)\n-        code.putln('PyObject *%s;' % Naming.empty_tuple)\n-        code.putln('PyObject *%s;' % Naming.empty_bytes)\n-        code.putln('PyObject *%s;' % Naming.empty_unicode)\n+    def generate_module_state_begin(self, env, code):\n+        code.putln('static int %s;' % Naming.lineno_cname)\n+        code.putln('static int %s = 0;' % Naming.clineno_cname)\n+        code.putln('static const char * %s = %s;' % (Naming.cfilenm_cname, Naming.file_c_macro))\n+        code.putln('static const char *%s;' % Naming.filename_cname)\n+        code.putln('')\n+        code.putln('typedef struct %s {' % Naming.modulestate_type_cname)\n+        code.putln('PyObject *%s;' % env.module_dict_cname.field_name)\n+        code.putln('PyObject *%s;' % Naming.builtins_cname.field_name)\n+        code.putln('PyObject *%s;' % Naming.cython_runtime_cname.field_name)\n+        code.putln('PyObject *%s;' % Naming.empty_tuple.field_name)\n+        code.putln('PyObject *%s;' % Naming.empty_bytes.field_name)\n+        code.putln('PyObject *%s;' % Naming.empty_unicode.field_name)\n         if Options.pre_import is not None:\n             code.putln('PyObject *%s;' % Naming.preimport_cname)\n+        code.putln(\"#if CYTHON_USE_MODULE_STATE\")\n         code.putln('#ifdef __Pyx_CyFunction_USED')\n         code.putln('PyTypeObject *%s;' % Naming.cyfunction_type_cname)\n         code.putln('#endif')\n         code.putln('#ifdef __Pyx_FusedFunction_USED')\n         code.putln('PyTypeObject *%s;' % Naming.fusedfunction_type_cname)\n         code.putln('#endif')\n \n-    def generate_module_state_end(self, env, modules, globalstate):\n-        module_state = globalstate['module_state']\n-        module_state_defines = globalstate['module_state_defines']\n-        module_state_clear = globalstate['module_state_clear']\n-        module_state_traverse = globalstate['module_state_traverse']\n-        module_state.putln('} %s;' % Naming.modulestate_cname)\n-        module_state.putln('')\n-        module_state.putln('#ifdef __cplusplus')\n-        module_state.putln('namespace {')\n-        module_state.putln('extern struct PyModuleDef %s;' % Naming.pymoduledef_cname)\n-        module_state.putln('} /* anonymous namespace */')\n-        module_state.putln('#else')\n-        module_state.putln('static struct PyModuleDef %s;' % Naming.pymoduledef_cname)\n-        module_state.putln('#endif')\n-        module_state.putln('')\n-        module_state.putln('#define %s(o) ((%s *)__Pyx_PyModule_GetState(o))' % (\n-            Naming.modulestate_cname,\n-            Naming.modulestate_cname))\n-        module_state.putln('')\n-        module_state.putln('#define %s (%s(PyState_FindModule(&%s)))' % (\n-            Naming.modulestateglobal_cname,\n-            Naming.modulestate_cname,\n-            Naming.pymoduledef_cname))\n-        module_state.putln('')\n-        module_state.putln('#define %s (PyState_FindModule(&%s))' % (\n-            env.module_cname,\n-            Naming.pymoduledef_cname))\n-        module_state.putln(\"#endif\")\n-        module_state_defines.putln(\"#endif\")\n-        module_state_clear.putln(\"return 0;\")\n-        module_state_clear.putln(\"}\")\n-        module_state_clear.putln(\"#endif\")\n-        module_state_traverse.putln(\"return 0;\")\n-        module_state_traverse.putln(\"}\")\n-        module_state_traverse.putln(\"#endif\")\n-\n-    def generate_module_state_defines(self, env, code):\n+    def generate_module_state_end(self, env, code):\n+        code.putln('#endif /* CYTHON_USE_MODULE_STATE */')\n+        code.putln('} %s;' % Naming.modulestate_type_cname)\n+        code.putln('')\n+        code.putln('#if !CYTHON_USE_MODULE_STATE')\n+        code.putln('static %s %s;' % (Naming.modulestate_type_cname, Naming.modulestate_cname))\n+        code.putln('#define __Pyx_Globals() (&%s)' % (Naming.modulestate_cname))\n+        code.putln('static PyObject *%s;' % env.module_cname)\n+        code.putln('#else')\n+        code.putln('/* Module def forward declaration */')\n+        code.putln('#ifdef __cplusplus')\n+        code.putln('namespace {')\n+        code.putln('  extern struct PyModuleDef %s;' % Naming.pymoduledef_cname)\n+        code.putln('} /* anonymous namespace */')\n+        code.putln('#else')\n+        code.putln('static struct PyModuleDef %s;' % Naming.pymoduledef_cname)\n+        code.putln('#endif')\n+        code.putln('#define %s (PyState_FindModule(&%s))' % (env.module_cname, Naming.pymoduledef_cname))\n+        code.putln('#define __Pyx_ModuleState(m) ((%s *)__Pyx_PyModule_GetState(m))' %\n+                   Naming.modulestate_type_cname)\n+        code.putln('#define __Pyx_Globals() __Pyx_ModuleState(%s)' % env.module_cname)\n+        code.putln('#endif')\n+\n+    def generate_module_state_defines_begin(self, env, code):\n         code.putln(\"#if CYTHON_USE_MODULE_STATE\")\n-        code.putln('#define %s %s->%s' % (\n-            Naming.builtins_cname,\n-            Naming.modulestateglobal_cname,\n-            Naming.builtins_cname))\n-        code.putln('#define %s %s->%s' % (\n-            Naming.cython_runtime_cname,\n-            Naming.modulestateglobal_cname,\n-            Naming.cython_runtime_cname))\n-        code.putln('#define %s %s->%s' % (\n-            Naming.empty_tuple,\n-            Naming.modulestateglobal_cname,\n-            Naming.empty_tuple))\n-        code.putln('#define %s %s->%s' % (\n-            Naming.empty_bytes,\n-            Naming.modulestateglobal_cname,\n-            Naming.empty_bytes))\n-        code.putln('#define %s %s->%s' % (\n-            Naming.empty_unicode,\n-            Naming.modulestateglobal_cname,\n-            Naming.empty_unicode))\n-        if Options.pre_import is not None:\n-            code.putln('#define %s %s->%s' % (\n-                Naming.preimport_cname,\n-                Naming.modulestateglobal_cname,\n-                Naming.preimport_cname))\n         code.putln('#ifdef __Pyx_CyFunction_USED')\n-        code.putln('#define %s %s->%s' % (\n+        code.putln('#define %s __Pyx_Globals()->%s' % (\n             Naming.cyfunction_type_cname,\n-            Naming.modulestateglobal_cname,\n             Naming.cyfunction_type_cname))\n         code.putln('#endif')\n         code.putln('#ifdef __Pyx_FusedFunction_USED')\n-        code.putln('#define %s %s->%s' %\n+        code.putln('#define %s __Pyx_Globals()->%s' %\n             (Naming.fusedfunction_type_cname,\n-            Naming.modulestateglobal_cname,\n             Naming.fusedfunction_type_cname))\n         code.putln('#endif')\n \n-    def generate_module_state_clear(self, env, code):\n+    def generate_module_state_defines_end(self, env, code):\n+        code.putln(\"#endif /* CYTHON_USE_MODULE_STATE */\")\n+\n+    def generate_module_state_clear_begin(self, env, code):\n         code.putln(\"#if CYTHON_USE_MODULE_STATE\")\n         code.putln(\"static int %s_clear(PyObject *m) {\" % Naming.module_cname)\n-        code.putln(\"%s *clear_module_state = %s(m);\" % (\n-            Naming.modulestate_cname,\n-            Naming.modulestate_cname))\n+        code.putln(\"%s *clear_module_state = __Pyx_ModuleState(m);\" % Naming.modulestate_type_cname)\n         code.putln(\"if (!clear_module_state) return 0;\")\n         code.putln('Py_CLEAR(clear_module_state->%s);' %\n-            Naming.builtins_cname)\n+            env.module_dict_cname.field_name)\n+        code.putln('Py_CLEAR(clear_module_state->%s);' %\n+            Naming.builtins_cname.field_name)",
            "html_url": "https://github.com/cython/cython/pull/3704#discussion_r445821505",
            "id": 445821505,
            "in_reply_to_id": 444244493,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyMTUwNQ==",
            "original_commit_id": "4fbfe11ff5559fdd139d6bfd49c95a95d4348b25",
            "original_line": 2600,
            "original_position": 226,
            "original_start_line": 2599,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": null,
            "pull_request_review_id": 437837319,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3704",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2020-07-09T04:07:58Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/445821505",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3704#discussion_r445823318"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3704"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/445823318"
                }
            },
            "author_association": "MEMBER",
            "body": "That could really be done automatically. When a `Global` declaration is written into the C code of the module (and we could have a dedicated method for that), then it would be kept around and automatically visited/cleared. Sounds simple enough.",
            "commit_id": "8c03aff230486c1fbe11b7c4cb135489ea66ec57",
            "created_at": "2020-06-25T20:36:35Z",
            "diff_hunk": "@@ -2542,117 +2527,85 @@ def generate_import_star(self, env, code):\n         code.putln(UtilityCode.load_as_string(\"ImportStar\", \"ImportExport.c\")[1])\n         code.exit_cfunc_scope()  # done with labels\n \n-    def generate_module_state_start(self, env, code):\n-        # TODO: Refactor to move module state struct decl closer to the static decl\n-        code.putln(\"#if CYTHON_USE_MODULE_STATE\")\n-        code.putln('typedef struct {')\n-        code.putln('PyObject *%s;' % Naming.builtins_cname)\n-        code.putln('PyObject *%s;' % Naming.cython_runtime_cname)\n-        code.putln('PyObject *%s;' % Naming.empty_tuple)\n-        code.putln('PyObject *%s;' % Naming.empty_bytes)\n-        code.putln('PyObject *%s;' % Naming.empty_unicode)\n+    def generate_module_state_begin(self, env, code):\n+        code.putln('static int %s;' % Naming.lineno_cname)\n+        code.putln('static int %s = 0;' % Naming.clineno_cname)\n+        code.putln('static const char * %s = %s;' % (Naming.cfilenm_cname, Naming.file_c_macro))\n+        code.putln('static const char *%s;' % Naming.filename_cname)\n+        code.putln('')\n+        code.putln('typedef struct %s {' % Naming.modulestate_type_cname)\n+        code.putln('PyObject *%s;' % env.module_dict_cname.field_name)\n+        code.putln('PyObject *%s;' % Naming.builtins_cname.field_name)\n+        code.putln('PyObject *%s;' % Naming.cython_runtime_cname.field_name)\n+        code.putln('PyObject *%s;' % Naming.empty_tuple.field_name)\n+        code.putln('PyObject *%s;' % Naming.empty_bytes.field_name)\n+        code.putln('PyObject *%s;' % Naming.empty_unicode.field_name)\n         if Options.pre_import is not None:\n             code.putln('PyObject *%s;' % Naming.preimport_cname)\n+        code.putln(\"#if CYTHON_USE_MODULE_STATE\")\n         code.putln('#ifdef __Pyx_CyFunction_USED')\n         code.putln('PyTypeObject *%s;' % Naming.cyfunction_type_cname)\n         code.putln('#endif')\n         code.putln('#ifdef __Pyx_FusedFunction_USED')\n         code.putln('PyTypeObject *%s;' % Naming.fusedfunction_type_cname)\n         code.putln('#endif')\n \n-    def generate_module_state_end(self, env, modules, globalstate):\n-        module_state = globalstate['module_state']\n-        module_state_defines = globalstate['module_state_defines']\n-        module_state_clear = globalstate['module_state_clear']\n-        module_state_traverse = globalstate['module_state_traverse']\n-        module_state.putln('} %s;' % Naming.modulestate_cname)\n-        module_state.putln('')\n-        module_state.putln('#ifdef __cplusplus')\n-        module_state.putln('namespace {')\n-        module_state.putln('extern struct PyModuleDef %s;' % Naming.pymoduledef_cname)\n-        module_state.putln('} /* anonymous namespace */')\n-        module_state.putln('#else')\n-        module_state.putln('static struct PyModuleDef %s;' % Naming.pymoduledef_cname)\n-        module_state.putln('#endif')\n-        module_state.putln('')\n-        module_state.putln('#define %s(o) ((%s *)__Pyx_PyModule_GetState(o))' % (\n-            Naming.modulestate_cname,\n-            Naming.modulestate_cname))\n-        module_state.putln('')\n-        module_state.putln('#define %s (%s(PyState_FindModule(&%s)))' % (\n-            Naming.modulestateglobal_cname,\n-            Naming.modulestate_cname,\n-            Naming.pymoduledef_cname))\n-        module_state.putln('')\n-        module_state.putln('#define %s (PyState_FindModule(&%s))' % (\n-            env.module_cname,\n-            Naming.pymoduledef_cname))\n-        module_state.putln(\"#endif\")\n-        module_state_defines.putln(\"#endif\")\n-        module_state_clear.putln(\"return 0;\")\n-        module_state_clear.putln(\"}\")\n-        module_state_clear.putln(\"#endif\")\n-        module_state_traverse.putln(\"return 0;\")\n-        module_state_traverse.putln(\"}\")\n-        module_state_traverse.putln(\"#endif\")\n-\n-    def generate_module_state_defines(self, env, code):\n+    def generate_module_state_end(self, env, code):\n+        code.putln('#endif /* CYTHON_USE_MODULE_STATE */')\n+        code.putln('} %s;' % Naming.modulestate_type_cname)\n+        code.putln('')\n+        code.putln('#if !CYTHON_USE_MODULE_STATE')\n+        code.putln('static %s %s;' % (Naming.modulestate_type_cname, Naming.modulestate_cname))\n+        code.putln('#define __Pyx_Globals() (&%s)' % (Naming.modulestate_cname))\n+        code.putln('static PyObject *%s;' % env.module_cname)\n+        code.putln('#else')\n+        code.putln('/* Module def forward declaration */')\n+        code.putln('#ifdef __cplusplus')\n+        code.putln('namespace {')\n+        code.putln('  extern struct PyModuleDef %s;' % Naming.pymoduledef_cname)\n+        code.putln('} /* anonymous namespace */')\n+        code.putln('#else')\n+        code.putln('static struct PyModuleDef %s;' % Naming.pymoduledef_cname)\n+        code.putln('#endif')\n+        code.putln('#define %s (PyState_FindModule(&%s))' % (env.module_cname, Naming.pymoduledef_cname))\n+        code.putln('#define __Pyx_ModuleState(m) ((%s *)__Pyx_PyModule_GetState(m))' %\n+                   Naming.modulestate_type_cname)\n+        code.putln('#define __Pyx_Globals() __Pyx_ModuleState(%s)' % env.module_cname)\n+        code.putln('#endif')\n+\n+    def generate_module_state_defines_begin(self, env, code):\n         code.putln(\"#if CYTHON_USE_MODULE_STATE\")\n-        code.putln('#define %s %s->%s' % (\n-            Naming.builtins_cname,\n-            Naming.modulestateglobal_cname,\n-            Naming.builtins_cname))\n-        code.putln('#define %s %s->%s' % (\n-            Naming.cython_runtime_cname,\n-            Naming.modulestateglobal_cname,\n-            Naming.cython_runtime_cname))\n-        code.putln('#define %s %s->%s' % (\n-            Naming.empty_tuple,\n-            Naming.modulestateglobal_cname,\n-            Naming.empty_tuple))\n-        code.putln('#define %s %s->%s' % (\n-            Naming.empty_bytes,\n-            Naming.modulestateglobal_cname,\n-            Naming.empty_bytes))\n-        code.putln('#define %s %s->%s' % (\n-            Naming.empty_unicode,\n-            Naming.modulestateglobal_cname,\n-            Naming.empty_unicode))\n-        if Options.pre_import is not None:\n-            code.putln('#define %s %s->%s' % (\n-                Naming.preimport_cname,\n-                Naming.modulestateglobal_cname,\n-                Naming.preimport_cname))\n         code.putln('#ifdef __Pyx_CyFunction_USED')\n-        code.putln('#define %s %s->%s' % (\n+        code.putln('#define %s __Pyx_Globals()->%s' % (\n             Naming.cyfunction_type_cname,\n-            Naming.modulestateglobal_cname,\n             Naming.cyfunction_type_cname))\n         code.putln('#endif')\n         code.putln('#ifdef __Pyx_FusedFunction_USED')\n-        code.putln('#define %s %s->%s' %\n+        code.putln('#define %s __Pyx_Globals()->%s' %\n             (Naming.fusedfunction_type_cname,\n-            Naming.modulestateglobal_cname,\n             Naming.fusedfunction_type_cname))\n         code.putln('#endif')\n \n-    def generate_module_state_clear(self, env, code):\n+    def generate_module_state_defines_end(self, env, code):\n+        code.putln(\"#endif /* CYTHON_USE_MODULE_STATE */\")\n+\n+    def generate_module_state_clear_begin(self, env, code):\n         code.putln(\"#if CYTHON_USE_MODULE_STATE\")\n         code.putln(\"static int %s_clear(PyObject *m) {\" % Naming.module_cname)\n-        code.putln(\"%s *clear_module_state = %s(m);\" % (\n-            Naming.modulestate_cname,\n-            Naming.modulestate_cname))\n+        code.putln(\"%s *clear_module_state = __Pyx_ModuleState(m);\" % Naming.modulestate_type_cname)\n         code.putln(\"if (!clear_module_state) return 0;\")\n         code.putln('Py_CLEAR(clear_module_state->%s);' %\n-            Naming.builtins_cname)\n+            env.module_dict_cname.field_name)\n+        code.putln('Py_CLEAR(clear_module_state->%s);' %\n+            Naming.builtins_cname.field_name)",
            "html_url": "https://github.com/cython/cython/pull/3704#discussion_r445823318",
            "id": 445823318,
            "in_reply_to_id": 444244493,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyMzMxOA==",
            "original_commit_id": "4fbfe11ff5559fdd139d6bfd49c95a95d4348b25",
            "original_line": 2600,
            "original_position": 226,
            "original_start_line": 2599,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": null,
            "pull_request_review_id": 437839621,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3704",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2020-07-09T04:07:58Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/445823318",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3704#discussion_r445824265"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3704"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/445824265"
                }
            },
            "author_association": "MEMBER",
            "body": "And we can also post-process the utility code fragments and re-search for `__Pyx_Global(…)`, extract the name, and make sure it gets declared.",
            "commit_id": "8c03aff230486c1fbe11b7c4cb135489ea66ec57",
            "created_at": "2020-06-25T20:38:22Z",
            "diff_hunk": "@@ -2542,117 +2527,85 @@ def generate_import_star(self, env, code):\n         code.putln(UtilityCode.load_as_string(\"ImportStar\", \"ImportExport.c\")[1])\n         code.exit_cfunc_scope()  # done with labels\n \n-    def generate_module_state_start(self, env, code):\n-        # TODO: Refactor to move module state struct decl closer to the static decl\n-        code.putln(\"#if CYTHON_USE_MODULE_STATE\")\n-        code.putln('typedef struct {')\n-        code.putln('PyObject *%s;' % Naming.builtins_cname)\n-        code.putln('PyObject *%s;' % Naming.cython_runtime_cname)\n-        code.putln('PyObject *%s;' % Naming.empty_tuple)\n-        code.putln('PyObject *%s;' % Naming.empty_bytes)\n-        code.putln('PyObject *%s;' % Naming.empty_unicode)\n+    def generate_module_state_begin(self, env, code):\n+        code.putln('static int %s;' % Naming.lineno_cname)\n+        code.putln('static int %s = 0;' % Naming.clineno_cname)\n+        code.putln('static const char * %s = %s;' % (Naming.cfilenm_cname, Naming.file_c_macro))\n+        code.putln('static const char *%s;' % Naming.filename_cname)\n+        code.putln('')\n+        code.putln('typedef struct %s {' % Naming.modulestate_type_cname)\n+        code.putln('PyObject *%s;' % env.module_dict_cname.field_name)\n+        code.putln('PyObject *%s;' % Naming.builtins_cname.field_name)\n+        code.putln('PyObject *%s;' % Naming.cython_runtime_cname.field_name)\n+        code.putln('PyObject *%s;' % Naming.empty_tuple.field_name)\n+        code.putln('PyObject *%s;' % Naming.empty_bytes.field_name)\n+        code.putln('PyObject *%s;' % Naming.empty_unicode.field_name)\n         if Options.pre_import is not None:\n             code.putln('PyObject *%s;' % Naming.preimport_cname)\n+        code.putln(\"#if CYTHON_USE_MODULE_STATE\")\n         code.putln('#ifdef __Pyx_CyFunction_USED')\n         code.putln('PyTypeObject *%s;' % Naming.cyfunction_type_cname)\n         code.putln('#endif')\n         code.putln('#ifdef __Pyx_FusedFunction_USED')\n         code.putln('PyTypeObject *%s;' % Naming.fusedfunction_type_cname)\n         code.putln('#endif')\n \n-    def generate_module_state_end(self, env, modules, globalstate):\n-        module_state = globalstate['module_state']\n-        module_state_defines = globalstate['module_state_defines']\n-        module_state_clear = globalstate['module_state_clear']\n-        module_state_traverse = globalstate['module_state_traverse']\n-        module_state.putln('} %s;' % Naming.modulestate_cname)\n-        module_state.putln('')\n-        module_state.putln('#ifdef __cplusplus')\n-        module_state.putln('namespace {')\n-        module_state.putln('extern struct PyModuleDef %s;' % Naming.pymoduledef_cname)\n-        module_state.putln('} /* anonymous namespace */')\n-        module_state.putln('#else')\n-        module_state.putln('static struct PyModuleDef %s;' % Naming.pymoduledef_cname)\n-        module_state.putln('#endif')\n-        module_state.putln('')\n-        module_state.putln('#define %s(o) ((%s *)__Pyx_PyModule_GetState(o))' % (\n-            Naming.modulestate_cname,\n-            Naming.modulestate_cname))\n-        module_state.putln('')\n-        module_state.putln('#define %s (%s(PyState_FindModule(&%s)))' % (\n-            Naming.modulestateglobal_cname,\n-            Naming.modulestate_cname,\n-            Naming.pymoduledef_cname))\n-        module_state.putln('')\n-        module_state.putln('#define %s (PyState_FindModule(&%s))' % (\n-            env.module_cname,\n-            Naming.pymoduledef_cname))\n-        module_state.putln(\"#endif\")\n-        module_state_defines.putln(\"#endif\")\n-        module_state_clear.putln(\"return 0;\")\n-        module_state_clear.putln(\"}\")\n-        module_state_clear.putln(\"#endif\")\n-        module_state_traverse.putln(\"return 0;\")\n-        module_state_traverse.putln(\"}\")\n-        module_state_traverse.putln(\"#endif\")\n-\n-    def generate_module_state_defines(self, env, code):\n+    def generate_module_state_end(self, env, code):\n+        code.putln('#endif /* CYTHON_USE_MODULE_STATE */')\n+        code.putln('} %s;' % Naming.modulestate_type_cname)\n+        code.putln('')\n+        code.putln('#if !CYTHON_USE_MODULE_STATE')\n+        code.putln('static %s %s;' % (Naming.modulestate_type_cname, Naming.modulestate_cname))\n+        code.putln('#define __Pyx_Globals() (&%s)' % (Naming.modulestate_cname))\n+        code.putln('static PyObject *%s;' % env.module_cname)\n+        code.putln('#else')\n+        code.putln('/* Module def forward declaration */')\n+        code.putln('#ifdef __cplusplus')\n+        code.putln('namespace {')\n+        code.putln('  extern struct PyModuleDef %s;' % Naming.pymoduledef_cname)\n+        code.putln('} /* anonymous namespace */')\n+        code.putln('#else')\n+        code.putln('static struct PyModuleDef %s;' % Naming.pymoduledef_cname)\n+        code.putln('#endif')\n+        code.putln('#define %s (PyState_FindModule(&%s))' % (env.module_cname, Naming.pymoduledef_cname))\n+        code.putln('#define __Pyx_ModuleState(m) ((%s *)__Pyx_PyModule_GetState(m))' %\n+                   Naming.modulestate_type_cname)\n+        code.putln('#define __Pyx_Globals() __Pyx_ModuleState(%s)' % env.module_cname)\n+        code.putln('#endif')\n+\n+    def generate_module_state_defines_begin(self, env, code):\n         code.putln(\"#if CYTHON_USE_MODULE_STATE\")\n-        code.putln('#define %s %s->%s' % (\n-            Naming.builtins_cname,\n-            Naming.modulestateglobal_cname,\n-            Naming.builtins_cname))\n-        code.putln('#define %s %s->%s' % (\n-            Naming.cython_runtime_cname,\n-            Naming.modulestateglobal_cname,\n-            Naming.cython_runtime_cname))\n-        code.putln('#define %s %s->%s' % (\n-            Naming.empty_tuple,\n-            Naming.modulestateglobal_cname,\n-            Naming.empty_tuple))\n-        code.putln('#define %s %s->%s' % (\n-            Naming.empty_bytes,\n-            Naming.modulestateglobal_cname,\n-            Naming.empty_bytes))\n-        code.putln('#define %s %s->%s' % (\n-            Naming.empty_unicode,\n-            Naming.modulestateglobal_cname,\n-            Naming.empty_unicode))\n-        if Options.pre_import is not None:\n-            code.putln('#define %s %s->%s' % (\n-                Naming.preimport_cname,\n-                Naming.modulestateglobal_cname,\n-                Naming.preimport_cname))\n         code.putln('#ifdef __Pyx_CyFunction_USED')\n-        code.putln('#define %s %s->%s' % (\n+        code.putln('#define %s __Pyx_Globals()->%s' % (\n             Naming.cyfunction_type_cname,\n-            Naming.modulestateglobal_cname,\n             Naming.cyfunction_type_cname))\n         code.putln('#endif')\n         code.putln('#ifdef __Pyx_FusedFunction_USED')\n-        code.putln('#define %s %s->%s' %\n+        code.putln('#define %s __Pyx_Globals()->%s' %\n             (Naming.fusedfunction_type_cname,\n-            Naming.modulestateglobal_cname,\n             Naming.fusedfunction_type_cname))\n         code.putln('#endif')\n \n-    def generate_module_state_clear(self, env, code):\n+    def generate_module_state_defines_end(self, env, code):\n+        code.putln(\"#endif /* CYTHON_USE_MODULE_STATE */\")\n+\n+    def generate_module_state_clear_begin(self, env, code):\n         code.putln(\"#if CYTHON_USE_MODULE_STATE\")\n         code.putln(\"static int %s_clear(PyObject *m) {\" % Naming.module_cname)\n-        code.putln(\"%s *clear_module_state = %s(m);\" % (\n-            Naming.modulestate_cname,\n-            Naming.modulestate_cname))\n+        code.putln(\"%s *clear_module_state = __Pyx_ModuleState(m);\" % Naming.modulestate_type_cname)\n         code.putln(\"if (!clear_module_state) return 0;\")\n         code.putln('Py_CLEAR(clear_module_state->%s);' %\n-            Naming.builtins_cname)\n+            env.module_dict_cname.field_name)\n+        code.putln('Py_CLEAR(clear_module_state->%s);' %\n+            Naming.builtins_cname.field_name)",
            "html_url": "https://github.com/cython/cython/pull/3704#discussion_r445824265",
            "id": 445824265,
            "in_reply_to_id": 444244493,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyNDI2NQ==",
            "original_commit_id": "4fbfe11ff5559fdd139d6bfd49c95a95d4348b25",
            "original_line": 2600,
            "original_position": 226,
            "original_start_line": 2599,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": null,
            "pull_request_review_id": 437840818,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3704",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2020-07-09T04:07:58Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/445824265",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3704#discussion_r445828712"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3704"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/445828712"
                }
            },
            "author_association": "MEMBER",
            "body": ">  I would vote to not include the C into the macro name, because in the generated code it's all C anyway and there is no need to distinguish from some python name.\r\n\r\n`CGlobal` feels better for me because `global` sounds a lot like \"globals()\". `CGlobal` makes it clear that we are not referring to the Python context. While the C code is obviously C, it comes from Python code and uses a lot of Python jargon. Also, most C code readers will be more acquainted with the Python concepts than the C concepts.\r\n\r\nIt also sounds better than `Static` because the variables are not necessarily `static`. They are in fact specific to the module instance.",
            "commit_id": "8c03aff230486c1fbe11b7c4cb135489ea66ec57",
            "created_at": "2020-06-25T20:47:17Z",
            "diff_hunk": "@@ -2565,71 +2551,38 @@ def generate_module_state_begin(self, env, code):\n         code.putln('#endif')\n \n     def generate_module_state_end(self, env, code):\n-        code.putln('} %s;' % Naming.modulestate_cname)\n+        code.putln('#endif /* CYTHON_USE_MODULE_STATE */')\n+        code.putln('} %s;' % Naming.modulestate_type_cname)\n         code.putln('')\n+        code.putln('#if !CYTHON_USE_MODULE_STATE')\n+        code.putln('static %s %s;' % (Naming.modulestate_type_cname, Naming.modulestate_cname))\n+        code.putln('#define __Pyx_Globals() (&%s)' % Naming.modulestate_cname)",
            "html_url": "https://github.com/cython/cython/pull/3704#discussion_r445828712",
            "id": 445828712,
            "in_reply_to_id": 445475536,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyODcxMg==",
            "original_commit_id": "5478b13aaf20815035112ee97222480ba05694e1",
            "original_line": 2559,
            "original_position": 86,
            "original_start_line": null,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": null,
            "pull_request_review_id": 437846487,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3704",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-07-09T04:07:58Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/445828712",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3704#discussion_r445832858"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3704"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/445832858"
                }
            },
            "author_association": "MEMBER",
            "body": "> Splitting things into a getter and setter pattern will be a gigantic churn\r\n\r\nMaybe. Not sure. My guess is that this churn may come at some point when we switch to per module instance C globals and require a reference to `self` for looking them up. But that's best decided when we actually see what works and what doesn't.\r\n\r\n> Requiring to call explicit getters and setters means we have to explicitely review every single place in the code.\r\n\r\nUnless we keep the getter for the `__str__` formatting and require explicit action only for the setter. Then the C code should fail to compile in all places where a setter was intended, and those are probably few and easy to find and fix by their context. That also has the advantage that we can put in an assertion that all globals have been set *and* read at some point and are not only read, e.g. due to a typo in the name. That becomes even more interesting when we start declaring C globals automatically on use.",
            "commit_id": "8c03aff230486c1fbe11b7c4cb135489ea66ec57",
            "created_at": "2020-06-25T20:55:27Z",
            "diff_hunk": "@@ -2565,71 +2551,38 @@ def generate_module_state_begin(self, env, code):\n         code.putln('#endif')\n \n     def generate_module_state_end(self, env, code):\n-        code.putln('} %s;' % Naming.modulestate_cname)\n+        code.putln('#endif /* CYTHON_USE_MODULE_STATE */')\n+        code.putln('} %s;' % Naming.modulestate_type_cname)\n         code.putln('')\n+        code.putln('#if !CYTHON_USE_MODULE_STATE')\n+        code.putln('static %s %s;' % (Naming.modulestate_type_cname, Naming.modulestate_cname))\n+        code.putln('#define __Pyx_Globals() (&%s)' % Naming.modulestate_cname)",
            "html_url": "https://github.com/cython/cython/pull/3704#discussion_r445832858",
            "id": 445832858,
            "in_reply_to_id": 445475536,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgzMjg1OA==",
            "original_commit_id": "5478b13aaf20815035112ee97222480ba05694e1",
            "original_line": 2559,
            "original_position": 86,
            "original_start_line": null,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": null,
            "pull_request_review_id": 437851801,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3704",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-07-09T04:07:58Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/445832858",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3704#discussion_r445976305"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3704"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/445976305"
                }
            },
            "author_association": "MEMBER",
            "body": "I actually hope that we're not using these any more. They should be function local now (again). But it's not part of this PR to try if they can be removed.",
            "commit_id": "8c03aff230486c1fbe11b7c4cb135489ea66ec57",
            "created_at": "2020-06-26T05:34:52Z",
            "diff_hunk": "@@ -2542,151 +2516,178 @@ def generate_import_star(self, env, code):\n         code.putln(UtilityCode.load_as_string(\"ImportStar\", \"ImportExport.c\")[1])\n         code.exit_cfunc_scope()  # done with labels\n \n-    def generate_module_state_start(self, env, code):\n-        # TODO: Refactor to move module state struct decl closer to the static decl\n-        code.putln(\"#if CYTHON_USE_MODULE_STATE\")\n-        code.putln('typedef struct {')\n-        code.putln('PyObject *%s;' % Naming.builtins_cname)\n-        code.putln('PyObject *%s;' % Naming.cython_runtime_cname)\n-        code.putln('PyObject *%s;' % Naming.empty_tuple)\n-        code.putln('PyObject *%s;' % Naming.empty_bytes)\n-        code.putln('PyObject *%s;' % Naming.empty_unicode)\n+    def generate_module_state_begin(self, env, code):\n+        code.putln('static int %s;' % Naming.lineno_cname)\n+        code.putln('static int %s = 0;' % Naming.clineno_cname)\n+        code.putln('static const char * %s = %s;' % (Naming.cfilenm_cname, Naming.file_c_macro))\n+        code.putln('static const char *%s;' % Naming.filename_cname)",
            "html_url": "https://github.com/cython/cython/pull/3704#discussion_r445976305",
            "id": 445976305,
            "line": 2524,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk3NjMwNQ==",
            "original_commit_id": "a0044a22fb2dc6a401d95ce337aba34524d54dd3",
            "original_line": 2524,
            "original_position": 97,
            "original_start_line": 2520,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": 114,
            "pull_request_review_id": 438024041,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3704",
            "side": "RIGHT",
            "start_line": 2521,
            "start_side": "RIGHT",
            "updated_at": "2020-07-09T04:07:58Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/445976305",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3704#discussion_r445976733"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3704"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/445976733"
                }
            },
            "author_association": "MEMBER",
            "body": "I also always wondered why this C++ special case was introduced. Any idea? Why should this be necessary?",
            "commit_id": "8c03aff230486c1fbe11b7c4cb135489ea66ec57",
            "created_at": "2020-06-26T05:36:34Z",
            "diff_hunk": "@@ -2542,151 +2516,178 @@ def generate_import_star(self, env, code):\n         code.putln(UtilityCode.load_as_string(\"ImportStar\", \"ImportExport.c\")[1])\n         code.exit_cfunc_scope()  # done with labels\n \n-    def generate_module_state_start(self, env, code):\n-        # TODO: Refactor to move module state struct decl closer to the static decl\n-        code.putln(\"#if CYTHON_USE_MODULE_STATE\")\n-        code.putln('typedef struct {')\n-        code.putln('PyObject *%s;' % Naming.builtins_cname)\n-        code.putln('PyObject *%s;' % Naming.cython_runtime_cname)\n-        code.putln('PyObject *%s;' % Naming.empty_tuple)\n-        code.putln('PyObject *%s;' % Naming.empty_bytes)\n-        code.putln('PyObject *%s;' % Naming.empty_unicode)\n+    def generate_module_state_begin(self, env, code):\n+        code.putln('static int %s;' % Naming.lineno_cname)\n+        code.putln('static int %s = 0;' % Naming.clineno_cname)\n+        code.putln('static const char * %s = %s;' % (Naming.cfilenm_cname, Naming.file_c_macro))\n+        code.putln('static const char *%s;' % Naming.filename_cname)\n+        code.putln('')\n+        code.putln('typedef struct %s {' % Naming.cglobals_type_cname)\n+        code.putln('PyObject *%s;' % env.module_dict_cname.cname)\n+        code.putln('PyObject *%s;' % Naming.builtins_cname.cname)\n+        code.putln('PyObject *%s;' % Naming.cython_runtime_cname.cname)\n+        code.putln('PyObject *%s;' % Naming.empty_tuple.cname)\n+        code.putln('PyObject *%s;' % Naming.empty_bytes.cname)\n+        code.putln('PyObject *%s;' % Naming.empty_unicode.cname)\n         if Options.pre_import is not None:\n-            code.putln('PyObject *%s;' % Naming.preimport_cname)\n+            code.putln('PyObject *%s;' % Naming.preimport_cname.cname)\n+        code.putln('#ifdef __Pyx_AsyncGen_USED')\n+        code.putln('PyTypeObject *%s;' % Naming.asyncgen_type_cname.cname)\n+        code.putln('PyTypeObject *%s;' % Naming.asyncgen_asend_type_cname.cname)\n+        code.putln('PyTypeObject *%s;' % Naming.asyncgen_athrow_type_cname.cname)\n+        code.putln('PyTypeObject *%s;' % Naming.asyncgen_wrapped_value_type_cname.cname)\n+        code.putln('#endif')\n+        code.putln('#ifdef __Pyx_Coroutine_USED')\n+        code.putln('PyTypeObject *%s;' % Naming.coroutine_type_cname.cname)\n+        code.putln('PyTypeObject *%s;' % Naming.coroutine_await_type_cname.cname)\n+        code.putln('#endif')\n         code.putln('#ifdef __Pyx_CyFunction_USED')\n-        code.putln('PyTypeObject *%s;' % Naming.cyfunction_type_cname)\n+        code.putln('PyTypeObject *%s;' % Naming.cyfunction_type_cname.cname)\n         code.putln('#endif')\n         code.putln('#ifdef __Pyx_FusedFunction_USED')\n-        code.putln('PyTypeObject *%s;' % Naming.fusedfunction_type_cname)\n+        code.putln('PyTypeObject *%s;' % Naming.fusedfunction_type_cname.cname)\n+        code.putln('#endif')\n+        code.putln('#ifdef __Pyx_Generator_USED')\n+        code.putln('PyTypeObject *%s;' % Naming.generator_type_cname.cname)\n         code.putln('#endif')\n-\n-    def generate_module_state_end(self, env, modules, globalstate):\n-        module_state = globalstate['module_state']\n-        module_state_defines = globalstate['module_state_defines']\n-        module_state_clear = globalstate['module_state_clear']\n-        module_state_traverse = globalstate['module_state_traverse']\n-        module_state.putln('} %s;' % Naming.modulestate_cname)\n-        module_state.putln('')\n-        module_state.putln('#ifdef __cplusplus')\n-        module_state.putln('namespace {')\n-        module_state.putln('extern struct PyModuleDef %s;' % Naming.pymoduledef_cname)\n-        module_state.putln('} /* anonymous namespace */')\n-        module_state.putln('#else')\n-        module_state.putln('static struct PyModuleDef %s;' % Naming.pymoduledef_cname)\n-        module_state.putln('#endif')\n-        module_state.putln('')\n-        module_state.putln('#define %s(o) ((%s *)__Pyx_PyModule_GetState(o))' % (\n-            Naming.modulestate_cname,\n-            Naming.modulestate_cname))\n-        module_state.putln('')\n-        module_state.putln('#define %s (%s(PyState_FindModule(&%s)))' % (\n-            Naming.modulestateglobal_cname,\n-            Naming.modulestate_cname,\n-            Naming.pymoduledef_cname))\n-        module_state.putln('')\n-        module_state.putln('#define %s (PyState_FindModule(&%s))' % (\n-            env.module_cname,\n-            Naming.pymoduledef_cname))\n-        module_state.putln(\"#endif\")\n-        module_state_defines.putln(\"#endif\")\n-        module_state_clear.putln(\"return 0;\")\n-        module_state_clear.putln(\"}\")\n-        module_state_clear.putln(\"#endif\")\n-        module_state_traverse.putln(\"return 0;\")\n-        module_state_traverse.putln(\"}\")\n-        module_state_traverse.putln(\"#endif\")\n-\n-    def generate_module_state_defines(self, env, code):\n         code.putln(\"#if CYTHON_USE_MODULE_STATE\")\n-        code.putln('#define %s %s->%s' % (\n-            Naming.builtins_cname,\n-            Naming.modulestateglobal_cname,\n-            Naming.builtins_cname))\n-        code.putln('#define %s %s->%s' % (\n-            Naming.cython_runtime_cname,\n-            Naming.modulestateglobal_cname,\n-            Naming.cython_runtime_cname))\n-        code.putln('#define %s %s->%s' % (\n-            Naming.empty_tuple,\n-            Naming.modulestateglobal_cname,\n-            Naming.empty_tuple))\n-        code.putln('#define %s %s->%s' % (\n-            Naming.empty_bytes,\n-            Naming.modulestateglobal_cname,\n-            Naming.empty_bytes))\n-        code.putln('#define %s %s->%s' % (\n-            Naming.empty_unicode,\n-            Naming.modulestateglobal_cname,\n-            Naming.empty_unicode))\n-        if Options.pre_import is not None:\n-            code.putln('#define %s %s->%s' % (\n-                Naming.preimport_cname,\n-                Naming.modulestateglobal_cname,\n-                Naming.preimport_cname))\n-        code.putln('#ifdef __Pyx_CyFunction_USED')\n-        code.putln('#define %s %s->%s' % (\n-            Naming.cyfunction_type_cname,\n-            Naming.modulestateglobal_cname,\n-            Naming.cyfunction_type_cname))\n+\n+    def generate_module_state_end(self, env, code):\n+        code.putln('#endif /* CYTHON_USE_MODULE_STATE */')\n+        code.putln('} %s;' % Naming.cglobals_type_cname)\n+        code.putln('')\n+        code.putln('#if !CYTHON_USE_MODULE_STATE')\n+        code.putln('static %s %s;' % (Naming.cglobals_type_cname, Naming.cglobals_cname))\n+        code.putln('#define __Pyx_CGlobal(ident) (%s.ident)' % Naming.cglobals_cname)\n+        code.putln('static PyObject *%s;' % env.module_cname)\n+        code.putln('#else')\n+        code.putln('/* Module def forward declaration */')\n+        code.putln('#ifdef __cplusplus')\n+        code.putln('namespace {')\n+        code.putln('extern struct PyModuleDef %s;' % Naming.pymoduledef_cname)\n+        code.putln('} /* anonymous namespace */')\n+        code.putln('#else')\n+        code.putln('static struct PyModuleDef %s;' % Naming.pymoduledef_cname)\n         code.putln('#endif')",
            "html_url": "https://github.com/cython/cython/pull/3704#discussion_r445976733",
            "id": 445976733,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk3NjczMw==",
            "original_commit_id": "a0044a22fb2dc6a401d95ce337aba34524d54dd3",
            "original_line": 2572,
            "original_position": 216,
            "original_start_line": 2564,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": null,
            "pull_request_review_id": 438024041,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3704",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2020-07-09T04:07:58Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/445976733",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3704#discussion_r445980429"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3704"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/445980429"
                }
            },
            "author_association": "MEMBER",
            "body": "This looks so wrong in the C code, there should really be a setter macro which does this. Even if it's not used globally for now (pun not intended), it would avoid having to write code by hand that assigns to the result of a \"function call\".",
            "commit_id": "8c03aff230486c1fbe11b7c4cb135489ea66ec57",
            "created_at": "2020-06-26T05:51:00Z",
            "diff_hunk": "@@ -1228,43 +1228,48 @@ __Pyx_async_gen_athrow_new(__pyx_PyAsyncGenObject *gen, PyObject *args)\n /* ---------- global type sharing ------------ */\n \n static int __pyx_AsyncGen_init(PyObject *module) {\n+    PyTypeObject *type;\n #if CYTHON_USE_TYPE_SPECS\n-    __pyx_AsyncGenType = __Pyx_FetchCommonTypeFromSpec(module, &__pyx_AsyncGenType_spec, NULL);\n+    type = __Pyx_FetchCommonTypeFromSpec(module, &__pyx_AsyncGenType_spec, NULL);\n #else\n     (void) module;\n     // on Windows, C-API functions can't be used in slots statically\n     __pyx_AsyncGenType_type.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;\n-    __pyx_AsyncGenType = __Pyx_FetchCommonType(&__pyx_AsyncGenType_type);\n+    type = __Pyx_FetchCommonType(&__pyx_AsyncGenType_type);\n #endif\n-    if (unlikely(!__pyx_AsyncGenType))\n+    if (unlikely(!type))\n         return -1;\n+    __Pyx_CGlobal(AsyncGenType) = type;",
            "html_url": "https://github.com/cython/cython/pull/3704#discussion_r445980429",
            "id": 445980429,
            "line": 1242,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk4MDQyOQ==",
            "original_commit_id": "a0044a22fb2dc6a401d95ce337aba34524d54dd3",
            "original_line": 1242,
            "original_position": 124,
            "original_start_line": null,
            "path": "Cython/Utility/AsyncGen.c",
            "position": 124,
            "pull_request_review_id": 438024041,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3704",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-07-09T04:07:58Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/445980429",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3704#discussion_r445989580"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3704"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/445989580"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Yes, turns out in C you can forward-declare a static global variable (it's technically not a forward declaration, but just two definitions that get merged by the linker). While in C++ you can only forward declare via `extern` which would mean the variable has no longer private linkage. Hence this strange workaround puts the variable into an anonymous namespace so it is private again...",
            "commit_id": "8c03aff230486c1fbe11b7c4cb135489ea66ec57",
            "created_at": "2020-06-26T06:21:47Z",
            "diff_hunk": "@@ -2542,151 +2516,178 @@ def generate_import_star(self, env, code):\n         code.putln(UtilityCode.load_as_string(\"ImportStar\", \"ImportExport.c\")[1])\n         code.exit_cfunc_scope()  # done with labels\n \n-    def generate_module_state_start(self, env, code):\n-        # TODO: Refactor to move module state struct decl closer to the static decl\n-        code.putln(\"#if CYTHON_USE_MODULE_STATE\")\n-        code.putln('typedef struct {')\n-        code.putln('PyObject *%s;' % Naming.builtins_cname)\n-        code.putln('PyObject *%s;' % Naming.cython_runtime_cname)\n-        code.putln('PyObject *%s;' % Naming.empty_tuple)\n-        code.putln('PyObject *%s;' % Naming.empty_bytes)\n-        code.putln('PyObject *%s;' % Naming.empty_unicode)\n+    def generate_module_state_begin(self, env, code):\n+        code.putln('static int %s;' % Naming.lineno_cname)\n+        code.putln('static int %s = 0;' % Naming.clineno_cname)\n+        code.putln('static const char * %s = %s;' % (Naming.cfilenm_cname, Naming.file_c_macro))\n+        code.putln('static const char *%s;' % Naming.filename_cname)\n+        code.putln('')\n+        code.putln('typedef struct %s {' % Naming.cglobals_type_cname)\n+        code.putln('PyObject *%s;' % env.module_dict_cname.cname)\n+        code.putln('PyObject *%s;' % Naming.builtins_cname.cname)\n+        code.putln('PyObject *%s;' % Naming.cython_runtime_cname.cname)\n+        code.putln('PyObject *%s;' % Naming.empty_tuple.cname)\n+        code.putln('PyObject *%s;' % Naming.empty_bytes.cname)\n+        code.putln('PyObject *%s;' % Naming.empty_unicode.cname)\n         if Options.pre_import is not None:\n-            code.putln('PyObject *%s;' % Naming.preimport_cname)\n+            code.putln('PyObject *%s;' % Naming.preimport_cname.cname)\n+        code.putln('#ifdef __Pyx_AsyncGen_USED')\n+        code.putln('PyTypeObject *%s;' % Naming.asyncgen_type_cname.cname)\n+        code.putln('PyTypeObject *%s;' % Naming.asyncgen_asend_type_cname.cname)\n+        code.putln('PyTypeObject *%s;' % Naming.asyncgen_athrow_type_cname.cname)\n+        code.putln('PyTypeObject *%s;' % Naming.asyncgen_wrapped_value_type_cname.cname)\n+        code.putln('#endif')\n+        code.putln('#ifdef __Pyx_Coroutine_USED')\n+        code.putln('PyTypeObject *%s;' % Naming.coroutine_type_cname.cname)\n+        code.putln('PyTypeObject *%s;' % Naming.coroutine_await_type_cname.cname)\n+        code.putln('#endif')\n         code.putln('#ifdef __Pyx_CyFunction_USED')\n-        code.putln('PyTypeObject *%s;' % Naming.cyfunction_type_cname)\n+        code.putln('PyTypeObject *%s;' % Naming.cyfunction_type_cname.cname)\n         code.putln('#endif')\n         code.putln('#ifdef __Pyx_FusedFunction_USED')\n-        code.putln('PyTypeObject *%s;' % Naming.fusedfunction_type_cname)\n+        code.putln('PyTypeObject *%s;' % Naming.fusedfunction_type_cname.cname)\n+        code.putln('#endif')\n+        code.putln('#ifdef __Pyx_Generator_USED')\n+        code.putln('PyTypeObject *%s;' % Naming.generator_type_cname.cname)\n         code.putln('#endif')\n-\n-    def generate_module_state_end(self, env, modules, globalstate):\n-        module_state = globalstate['module_state']\n-        module_state_defines = globalstate['module_state_defines']\n-        module_state_clear = globalstate['module_state_clear']\n-        module_state_traverse = globalstate['module_state_traverse']\n-        module_state.putln('} %s;' % Naming.modulestate_cname)\n-        module_state.putln('')\n-        module_state.putln('#ifdef __cplusplus')\n-        module_state.putln('namespace {')\n-        module_state.putln('extern struct PyModuleDef %s;' % Naming.pymoduledef_cname)\n-        module_state.putln('} /* anonymous namespace */')\n-        module_state.putln('#else')\n-        module_state.putln('static struct PyModuleDef %s;' % Naming.pymoduledef_cname)\n-        module_state.putln('#endif')\n-        module_state.putln('')\n-        module_state.putln('#define %s(o) ((%s *)__Pyx_PyModule_GetState(o))' % (\n-            Naming.modulestate_cname,\n-            Naming.modulestate_cname))\n-        module_state.putln('')\n-        module_state.putln('#define %s (%s(PyState_FindModule(&%s)))' % (\n-            Naming.modulestateglobal_cname,\n-            Naming.modulestate_cname,\n-            Naming.pymoduledef_cname))\n-        module_state.putln('')\n-        module_state.putln('#define %s (PyState_FindModule(&%s))' % (\n-            env.module_cname,\n-            Naming.pymoduledef_cname))\n-        module_state.putln(\"#endif\")\n-        module_state_defines.putln(\"#endif\")\n-        module_state_clear.putln(\"return 0;\")\n-        module_state_clear.putln(\"}\")\n-        module_state_clear.putln(\"#endif\")\n-        module_state_traverse.putln(\"return 0;\")\n-        module_state_traverse.putln(\"}\")\n-        module_state_traverse.putln(\"#endif\")\n-\n-    def generate_module_state_defines(self, env, code):\n         code.putln(\"#if CYTHON_USE_MODULE_STATE\")\n-        code.putln('#define %s %s->%s' % (\n-            Naming.builtins_cname,\n-            Naming.modulestateglobal_cname,\n-            Naming.builtins_cname))\n-        code.putln('#define %s %s->%s' % (\n-            Naming.cython_runtime_cname,\n-            Naming.modulestateglobal_cname,\n-            Naming.cython_runtime_cname))\n-        code.putln('#define %s %s->%s' % (\n-            Naming.empty_tuple,\n-            Naming.modulestateglobal_cname,\n-            Naming.empty_tuple))\n-        code.putln('#define %s %s->%s' % (\n-            Naming.empty_bytes,\n-            Naming.modulestateglobal_cname,\n-            Naming.empty_bytes))\n-        code.putln('#define %s %s->%s' % (\n-            Naming.empty_unicode,\n-            Naming.modulestateglobal_cname,\n-            Naming.empty_unicode))\n-        if Options.pre_import is not None:\n-            code.putln('#define %s %s->%s' % (\n-                Naming.preimport_cname,\n-                Naming.modulestateglobal_cname,\n-                Naming.preimport_cname))\n-        code.putln('#ifdef __Pyx_CyFunction_USED')\n-        code.putln('#define %s %s->%s' % (\n-            Naming.cyfunction_type_cname,\n-            Naming.modulestateglobal_cname,\n-            Naming.cyfunction_type_cname))\n+\n+    def generate_module_state_end(self, env, code):\n+        code.putln('#endif /* CYTHON_USE_MODULE_STATE */')\n+        code.putln('} %s;' % Naming.cglobals_type_cname)\n+        code.putln('')\n+        code.putln('#if !CYTHON_USE_MODULE_STATE')\n+        code.putln('static %s %s;' % (Naming.cglobals_type_cname, Naming.cglobals_cname))\n+        code.putln('#define __Pyx_CGlobal(ident) (%s.ident)' % Naming.cglobals_cname)\n+        code.putln('static PyObject *%s;' % env.module_cname)\n+        code.putln('#else')\n+        code.putln('/* Module def forward declaration */')\n+        code.putln('#ifdef __cplusplus')\n+        code.putln('namespace {')\n+        code.putln('extern struct PyModuleDef %s;' % Naming.pymoduledef_cname)\n+        code.putln('} /* anonymous namespace */')\n+        code.putln('#else')\n+        code.putln('static struct PyModuleDef %s;' % Naming.pymoduledef_cname)\n         code.putln('#endif')",
            "html_url": "https://github.com/cython/cython/pull/3704#discussion_r445989580",
            "id": 445989580,
            "in_reply_to_id": 445976733,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk4OTU4MA==",
            "original_commit_id": "a0044a22fb2dc6a401d95ce337aba34524d54dd3",
            "original_line": 2572,
            "original_position": 216,
            "original_start_line": 2564,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": null,
            "pull_request_review_id": 438040222,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3704",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2020-07-09T04:07:58Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/445989580",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/71571?v=4",
                "events_url": "https://api.github.com/users/MatzeB/events{/privacy}",
                "followers_url": "https://api.github.com/users/MatzeB/followers",
                "following_url": "https://api.github.com/users/MatzeB/following{/other_user}",
                "gists_url": "https://api.github.com/users/MatzeB/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MatzeB",
                "id": 71571,
                "login": "MatzeB",
                "node_id": "MDQ6VXNlcjcxNTcx",
                "organizations_url": "https://api.github.com/users/MatzeB/orgs",
                "received_events_url": "https://api.github.com/users/MatzeB/received_events",
                "repos_url": "https://api.github.com/users/MatzeB/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MatzeB/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MatzeB/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MatzeB"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3704#discussion_r445990598"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3704"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/445990598"
                }
            },
            "author_association": "MEMBER",
            "body": "That would make an excellent comment in the code, I think. :)",
            "commit_id": "8c03aff230486c1fbe11b7c4cb135489ea66ec57",
            "created_at": "2020-06-26T06:25:01Z",
            "diff_hunk": "@@ -2542,151 +2516,178 @@ def generate_import_star(self, env, code):\n         code.putln(UtilityCode.load_as_string(\"ImportStar\", \"ImportExport.c\")[1])\n         code.exit_cfunc_scope()  # done with labels\n \n-    def generate_module_state_start(self, env, code):\n-        # TODO: Refactor to move module state struct decl closer to the static decl\n-        code.putln(\"#if CYTHON_USE_MODULE_STATE\")\n-        code.putln('typedef struct {')\n-        code.putln('PyObject *%s;' % Naming.builtins_cname)\n-        code.putln('PyObject *%s;' % Naming.cython_runtime_cname)\n-        code.putln('PyObject *%s;' % Naming.empty_tuple)\n-        code.putln('PyObject *%s;' % Naming.empty_bytes)\n-        code.putln('PyObject *%s;' % Naming.empty_unicode)\n+    def generate_module_state_begin(self, env, code):\n+        code.putln('static int %s;' % Naming.lineno_cname)\n+        code.putln('static int %s = 0;' % Naming.clineno_cname)\n+        code.putln('static const char * %s = %s;' % (Naming.cfilenm_cname, Naming.file_c_macro))\n+        code.putln('static const char *%s;' % Naming.filename_cname)\n+        code.putln('')\n+        code.putln('typedef struct %s {' % Naming.cglobals_type_cname)\n+        code.putln('PyObject *%s;' % env.module_dict_cname.cname)\n+        code.putln('PyObject *%s;' % Naming.builtins_cname.cname)\n+        code.putln('PyObject *%s;' % Naming.cython_runtime_cname.cname)\n+        code.putln('PyObject *%s;' % Naming.empty_tuple.cname)\n+        code.putln('PyObject *%s;' % Naming.empty_bytes.cname)\n+        code.putln('PyObject *%s;' % Naming.empty_unicode.cname)\n         if Options.pre_import is not None:\n-            code.putln('PyObject *%s;' % Naming.preimport_cname)\n+            code.putln('PyObject *%s;' % Naming.preimport_cname.cname)\n+        code.putln('#ifdef __Pyx_AsyncGen_USED')\n+        code.putln('PyTypeObject *%s;' % Naming.asyncgen_type_cname.cname)\n+        code.putln('PyTypeObject *%s;' % Naming.asyncgen_asend_type_cname.cname)\n+        code.putln('PyTypeObject *%s;' % Naming.asyncgen_athrow_type_cname.cname)\n+        code.putln('PyTypeObject *%s;' % Naming.asyncgen_wrapped_value_type_cname.cname)\n+        code.putln('#endif')\n+        code.putln('#ifdef __Pyx_Coroutine_USED')\n+        code.putln('PyTypeObject *%s;' % Naming.coroutine_type_cname.cname)\n+        code.putln('PyTypeObject *%s;' % Naming.coroutine_await_type_cname.cname)\n+        code.putln('#endif')\n         code.putln('#ifdef __Pyx_CyFunction_USED')\n-        code.putln('PyTypeObject *%s;' % Naming.cyfunction_type_cname)\n+        code.putln('PyTypeObject *%s;' % Naming.cyfunction_type_cname.cname)\n         code.putln('#endif')\n         code.putln('#ifdef __Pyx_FusedFunction_USED')\n-        code.putln('PyTypeObject *%s;' % Naming.fusedfunction_type_cname)\n+        code.putln('PyTypeObject *%s;' % Naming.fusedfunction_type_cname.cname)\n+        code.putln('#endif')\n+        code.putln('#ifdef __Pyx_Generator_USED')\n+        code.putln('PyTypeObject *%s;' % Naming.generator_type_cname.cname)\n         code.putln('#endif')\n-\n-    def generate_module_state_end(self, env, modules, globalstate):\n-        module_state = globalstate['module_state']\n-        module_state_defines = globalstate['module_state_defines']\n-        module_state_clear = globalstate['module_state_clear']\n-        module_state_traverse = globalstate['module_state_traverse']\n-        module_state.putln('} %s;' % Naming.modulestate_cname)\n-        module_state.putln('')\n-        module_state.putln('#ifdef __cplusplus')\n-        module_state.putln('namespace {')\n-        module_state.putln('extern struct PyModuleDef %s;' % Naming.pymoduledef_cname)\n-        module_state.putln('} /* anonymous namespace */')\n-        module_state.putln('#else')\n-        module_state.putln('static struct PyModuleDef %s;' % Naming.pymoduledef_cname)\n-        module_state.putln('#endif')\n-        module_state.putln('')\n-        module_state.putln('#define %s(o) ((%s *)__Pyx_PyModule_GetState(o))' % (\n-            Naming.modulestate_cname,\n-            Naming.modulestate_cname))\n-        module_state.putln('')\n-        module_state.putln('#define %s (%s(PyState_FindModule(&%s)))' % (\n-            Naming.modulestateglobal_cname,\n-            Naming.modulestate_cname,\n-            Naming.pymoduledef_cname))\n-        module_state.putln('')\n-        module_state.putln('#define %s (PyState_FindModule(&%s))' % (\n-            env.module_cname,\n-            Naming.pymoduledef_cname))\n-        module_state.putln(\"#endif\")\n-        module_state_defines.putln(\"#endif\")\n-        module_state_clear.putln(\"return 0;\")\n-        module_state_clear.putln(\"}\")\n-        module_state_clear.putln(\"#endif\")\n-        module_state_traverse.putln(\"return 0;\")\n-        module_state_traverse.putln(\"}\")\n-        module_state_traverse.putln(\"#endif\")\n-\n-    def generate_module_state_defines(self, env, code):\n         code.putln(\"#if CYTHON_USE_MODULE_STATE\")\n-        code.putln('#define %s %s->%s' % (\n-            Naming.builtins_cname,\n-            Naming.modulestateglobal_cname,\n-            Naming.builtins_cname))\n-        code.putln('#define %s %s->%s' % (\n-            Naming.cython_runtime_cname,\n-            Naming.modulestateglobal_cname,\n-            Naming.cython_runtime_cname))\n-        code.putln('#define %s %s->%s' % (\n-            Naming.empty_tuple,\n-            Naming.modulestateglobal_cname,\n-            Naming.empty_tuple))\n-        code.putln('#define %s %s->%s' % (\n-            Naming.empty_bytes,\n-            Naming.modulestateglobal_cname,\n-            Naming.empty_bytes))\n-        code.putln('#define %s %s->%s' % (\n-            Naming.empty_unicode,\n-            Naming.modulestateglobal_cname,\n-            Naming.empty_unicode))\n-        if Options.pre_import is not None:\n-            code.putln('#define %s %s->%s' % (\n-                Naming.preimport_cname,\n-                Naming.modulestateglobal_cname,\n-                Naming.preimport_cname))\n-        code.putln('#ifdef __Pyx_CyFunction_USED')\n-        code.putln('#define %s %s->%s' % (\n-            Naming.cyfunction_type_cname,\n-            Naming.modulestateglobal_cname,\n-            Naming.cyfunction_type_cname))\n+\n+    def generate_module_state_end(self, env, code):\n+        code.putln('#endif /* CYTHON_USE_MODULE_STATE */')\n+        code.putln('} %s;' % Naming.cglobals_type_cname)\n+        code.putln('')\n+        code.putln('#if !CYTHON_USE_MODULE_STATE')\n+        code.putln('static %s %s;' % (Naming.cglobals_type_cname, Naming.cglobals_cname))\n+        code.putln('#define __Pyx_CGlobal(ident) (%s.ident)' % Naming.cglobals_cname)\n+        code.putln('static PyObject *%s;' % env.module_cname)\n+        code.putln('#else')\n+        code.putln('/* Module def forward declaration */')\n+        code.putln('#ifdef __cplusplus')\n+        code.putln('namespace {')\n+        code.putln('extern struct PyModuleDef %s;' % Naming.pymoduledef_cname)\n+        code.putln('} /* anonymous namespace */')\n+        code.putln('#else')\n+        code.putln('static struct PyModuleDef %s;' % Naming.pymoduledef_cname)\n         code.putln('#endif')",
            "html_url": "https://github.com/cython/cython/pull/3704#discussion_r445990598",
            "id": 445990598,
            "in_reply_to_id": 445976733,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk5MDU5OA==",
            "original_commit_id": "a0044a22fb2dc6a401d95ce337aba34524d54dd3",
            "original_line": 2572,
            "original_position": 216,
            "original_start_line": 2564,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": null,
            "pull_request_review_id": 438041554,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3704",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2020-07-09T04:07:58Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/445990598",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3704#discussion_r446343531"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3704"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/446343531"
                }
            },
            "author_association": "MEMBER",
            "body": "Not easy to say what a good name is here. `expr` suggests a Python expression, i.e. an `ExprNode`.\r\n`get_py_string_const_code()` ? It returns the C code to refer to a Python string constant.",
            "commit_id": "8c03aff230486c1fbe11b7c4cb135489ea66ec57",
            "created_at": "2020-06-26T18:26:51Z",
            "diff_hunk": "@@ -1317,7 +1317,7 @@ def get_pyunicode_ptr_const(self, text):\n             c = self.pyunicode_ptr_const_index[text] = self.new_const_cname()\n         return c\n \n-    def get_py_string_const(self, text, identifier=None,\n+    def get_py_string_expr(self, text, identifier=None,",
            "html_url": "https://github.com/cython/cython/pull/3704#discussion_r446343531",
            "id": 446343531,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM0MzUzMQ==",
            "original_commit_id": "e36b3d71855a855f200c340e4b2d35ba9d9d4e5b",
            "original_line": 1320,
            "original_position": 22,
            "original_start_line": null,
            "path": "Cython/Compiler/Code.py",
            "position": null,
            "pull_request_review_id": 438508232,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3704",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-07-09T04:07:58Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/446343531",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3704#discussion_r446347470"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3704"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/446347470"
                }
            },
            "author_association": "MEMBER",
            "body": "Ah, nice – this actually allows us to keep the string table as `static const`. That is a good thing.",
            "commit_id": "8c03aff230486c1fbe11b7c4cb135489ea66ec57",
            "created_at": "2020-06-26T18:35:37Z",
            "diff_hunk": "@@ -1514,20 +1514,17 @@ def generate_string_constants(self):\n         if py_strings:\n             self.use_utility_code(UtilityCode.load_cached(\"InitStrings\", \"StringTools.c\"))\n             py_strings.sort()\n+\n+            decls_writer.putln(\"/* String Constant Indexes */\")\n+            decls_writer.putln(\"enum {\")\n+            for _, _, py_string in py_strings:\n+                decls_writer.putln(\"%s,\" % py_string.cname)\n+            decls_writer.putln(\"%s\" % Naming.string_tab_length_cname)\n+            decls_writer.putln(\"};\")\n+\n             w = self.parts['pystring_table']\n             w.putln(\"\")\n-            w.putln(\"static __Pyx_StringTabEntry %s[] = {\" % Naming.stringtab_cname)\n-            w.putln(\"#if CYTHON_USE_MODULE_STATE\")\n-            w_in_module_state = w.insertion_point()\n-            w.putln(\"#else\")\n-            w_not_in_module_state = w.insertion_point()\n-            w.putln(\"#endif\")\n-            decls_writer.putln(\"#if !CYTHON_USE_MODULE_STATE\")\n-            not_limited_api_decls_writer = decls_writer.insertion_point()\n-            decls_writer.putln(\"#endif\")\n-            init_globals.putln(\"#if CYTHON_USE_MODULE_STATE\")\n-            init_globals_in_module_state = init_globals.insertion_point()\n-            init_globals.putln(\"#endif\")\n+            w.putln(\"static const __Pyx_StringTabEntry %s[] = {\" % Naming.stringtab_cname)",
            "html_url": "https://github.com/cython/cython/pull/3704#discussion_r446347470",
            "id": 446347470,
            "line": 1572,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM0NzQ3MA==",
            "original_commit_id": "e36b3d71855a855f200c340e4b2d35ba9d9d4e5b",
            "original_line": 1572,
            "original_position": 111,
            "original_start_line": null,
            "path": "Cython/Compiler/Code.py",
            "position": 292,
            "pull_request_review_id": 438508232,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3704",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-07-09T04:07:58Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/446347470",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3704#discussion_r446352630"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3704"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/446352630"
                }
            },
            "author_association": "MEMBER",
            "body": "I think the function/struct/etc. header parts of the sections can be created in `GlobalState.initialize_main_c_code()`, just not the actual content. Maybe some of these methods can be removed or renamed once they only fill in certain fields or code, or can be merged with their `_end` companion (some of which could donate a few code lines to `GlobalState.close_global_decls()`.",
            "commit_id": "8c03aff230486c1fbe11b7c4cb135489ea66ec57",
            "created_at": "2020-06-26T18:47:19Z",
            "diff_hunk": "@@ -450,10 +450,10 @@ def generate_c_code(self, env, options, result):\n         # initialise the macro to reduce the code size of one-time functionality\n         code.putln(UtilityCode.load_as_string(\"SmallCodeConfig\", \"ModuleSetupCode.c\")[0].strip())\n \n-        self.generate_module_state_start(env, globalstate['module_state'])\n-        self.generate_module_state_defines(env, globalstate['module_state_defines'])\n-        self.generate_module_state_clear(env, globalstate['module_state_clear'])\n-        self.generate_module_state_traverse(env, globalstate['module_state_traverse'])\n+        self.generate_module_state_begin(env, globalstate['module_state'])\n+        self.generate_module_state_defines_begin(env, globalstate['module_state_defines'])\n+        self.generate_module_state_clear_begin(env, globalstate['module_state_clear'])\n+        self.generate_module_state_traverse_begin(env, globalstate['module_state_traverse'])",
            "html_url": "https://github.com/cython/cython/pull/3704#discussion_r446352630",
            "id": 446352630,
            "line": 457,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM1MjYzMA==",
            "original_commit_id": "e36b3d71855a855f200c340e4b2d35ba9d9d4e5b",
            "original_line": 457,
            "original_position": 11,
            "original_start_line": 453,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": 27,
            "pull_request_review_id": 438508232,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3704",
            "side": "RIGHT",
            "start_line": 454,
            "start_side": "RIGHT",
            "updated_at": "2020-07-09T04:07:58Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/446352630",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3704#discussion_r449987063"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3704"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/449987063"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Turns out this can be fixed in a simpler manner by simply moving the `PyModuleDef` instance above the module state so we no longer need a forward declaration.",
            "commit_id": "8c03aff230486c1fbe11b7c4cb135489ea66ec57",
            "created_at": "2020-07-06T05:13:19Z",
            "diff_hunk": "@@ -2542,151 +2516,178 @@ def generate_import_star(self, env, code):\n         code.putln(UtilityCode.load_as_string(\"ImportStar\", \"ImportExport.c\")[1])\n         code.exit_cfunc_scope()  # done with labels\n \n-    def generate_module_state_start(self, env, code):\n-        # TODO: Refactor to move module state struct decl closer to the static decl\n-        code.putln(\"#if CYTHON_USE_MODULE_STATE\")\n-        code.putln('typedef struct {')\n-        code.putln('PyObject *%s;' % Naming.builtins_cname)\n-        code.putln('PyObject *%s;' % Naming.cython_runtime_cname)\n-        code.putln('PyObject *%s;' % Naming.empty_tuple)\n-        code.putln('PyObject *%s;' % Naming.empty_bytes)\n-        code.putln('PyObject *%s;' % Naming.empty_unicode)\n+    def generate_module_state_begin(self, env, code):\n+        code.putln('static int %s;' % Naming.lineno_cname)\n+        code.putln('static int %s = 0;' % Naming.clineno_cname)\n+        code.putln('static const char * %s = %s;' % (Naming.cfilenm_cname, Naming.file_c_macro))\n+        code.putln('static const char *%s;' % Naming.filename_cname)\n+        code.putln('')\n+        code.putln('typedef struct %s {' % Naming.cglobals_type_cname)\n+        code.putln('PyObject *%s;' % env.module_dict_cname.cname)\n+        code.putln('PyObject *%s;' % Naming.builtins_cname.cname)\n+        code.putln('PyObject *%s;' % Naming.cython_runtime_cname.cname)\n+        code.putln('PyObject *%s;' % Naming.empty_tuple.cname)\n+        code.putln('PyObject *%s;' % Naming.empty_bytes.cname)\n+        code.putln('PyObject *%s;' % Naming.empty_unicode.cname)\n         if Options.pre_import is not None:\n-            code.putln('PyObject *%s;' % Naming.preimport_cname)\n+            code.putln('PyObject *%s;' % Naming.preimport_cname.cname)\n+        code.putln('#ifdef __Pyx_AsyncGen_USED')\n+        code.putln('PyTypeObject *%s;' % Naming.asyncgen_type_cname.cname)\n+        code.putln('PyTypeObject *%s;' % Naming.asyncgen_asend_type_cname.cname)\n+        code.putln('PyTypeObject *%s;' % Naming.asyncgen_athrow_type_cname.cname)\n+        code.putln('PyTypeObject *%s;' % Naming.asyncgen_wrapped_value_type_cname.cname)\n+        code.putln('#endif')\n+        code.putln('#ifdef __Pyx_Coroutine_USED')\n+        code.putln('PyTypeObject *%s;' % Naming.coroutine_type_cname.cname)\n+        code.putln('PyTypeObject *%s;' % Naming.coroutine_await_type_cname.cname)\n+        code.putln('#endif')\n         code.putln('#ifdef __Pyx_CyFunction_USED')\n-        code.putln('PyTypeObject *%s;' % Naming.cyfunction_type_cname)\n+        code.putln('PyTypeObject *%s;' % Naming.cyfunction_type_cname.cname)\n         code.putln('#endif')\n         code.putln('#ifdef __Pyx_FusedFunction_USED')\n-        code.putln('PyTypeObject *%s;' % Naming.fusedfunction_type_cname)\n+        code.putln('PyTypeObject *%s;' % Naming.fusedfunction_type_cname.cname)\n+        code.putln('#endif')\n+        code.putln('#ifdef __Pyx_Generator_USED')\n+        code.putln('PyTypeObject *%s;' % Naming.generator_type_cname.cname)\n         code.putln('#endif')\n-\n-    def generate_module_state_end(self, env, modules, globalstate):\n-        module_state = globalstate['module_state']\n-        module_state_defines = globalstate['module_state_defines']\n-        module_state_clear = globalstate['module_state_clear']\n-        module_state_traverse = globalstate['module_state_traverse']\n-        module_state.putln('} %s;' % Naming.modulestate_cname)\n-        module_state.putln('')\n-        module_state.putln('#ifdef __cplusplus')\n-        module_state.putln('namespace {')\n-        module_state.putln('extern struct PyModuleDef %s;' % Naming.pymoduledef_cname)\n-        module_state.putln('} /* anonymous namespace */')\n-        module_state.putln('#else')\n-        module_state.putln('static struct PyModuleDef %s;' % Naming.pymoduledef_cname)\n-        module_state.putln('#endif')\n-        module_state.putln('')\n-        module_state.putln('#define %s(o) ((%s *)__Pyx_PyModule_GetState(o))' % (\n-            Naming.modulestate_cname,\n-            Naming.modulestate_cname))\n-        module_state.putln('')\n-        module_state.putln('#define %s (%s(PyState_FindModule(&%s)))' % (\n-            Naming.modulestateglobal_cname,\n-            Naming.modulestate_cname,\n-            Naming.pymoduledef_cname))\n-        module_state.putln('')\n-        module_state.putln('#define %s (PyState_FindModule(&%s))' % (\n-            env.module_cname,\n-            Naming.pymoduledef_cname))\n-        module_state.putln(\"#endif\")\n-        module_state_defines.putln(\"#endif\")\n-        module_state_clear.putln(\"return 0;\")\n-        module_state_clear.putln(\"}\")\n-        module_state_clear.putln(\"#endif\")\n-        module_state_traverse.putln(\"return 0;\")\n-        module_state_traverse.putln(\"}\")\n-        module_state_traverse.putln(\"#endif\")\n-\n-    def generate_module_state_defines(self, env, code):\n         code.putln(\"#if CYTHON_USE_MODULE_STATE\")\n-        code.putln('#define %s %s->%s' % (\n-            Naming.builtins_cname,\n-            Naming.modulestateglobal_cname,\n-            Naming.builtins_cname))\n-        code.putln('#define %s %s->%s' % (\n-            Naming.cython_runtime_cname,\n-            Naming.modulestateglobal_cname,\n-            Naming.cython_runtime_cname))\n-        code.putln('#define %s %s->%s' % (\n-            Naming.empty_tuple,\n-            Naming.modulestateglobal_cname,\n-            Naming.empty_tuple))\n-        code.putln('#define %s %s->%s' % (\n-            Naming.empty_bytes,\n-            Naming.modulestateglobal_cname,\n-            Naming.empty_bytes))\n-        code.putln('#define %s %s->%s' % (\n-            Naming.empty_unicode,\n-            Naming.modulestateglobal_cname,\n-            Naming.empty_unicode))\n-        if Options.pre_import is not None:\n-            code.putln('#define %s %s->%s' % (\n-                Naming.preimport_cname,\n-                Naming.modulestateglobal_cname,\n-                Naming.preimport_cname))\n-        code.putln('#ifdef __Pyx_CyFunction_USED')\n-        code.putln('#define %s %s->%s' % (\n-            Naming.cyfunction_type_cname,\n-            Naming.modulestateglobal_cname,\n-            Naming.cyfunction_type_cname))\n+\n+    def generate_module_state_end(self, env, code):\n+        code.putln('#endif /* CYTHON_USE_MODULE_STATE */')\n+        code.putln('} %s;' % Naming.cglobals_type_cname)\n+        code.putln('')\n+        code.putln('#if !CYTHON_USE_MODULE_STATE')\n+        code.putln('static %s %s;' % (Naming.cglobals_type_cname, Naming.cglobals_cname))\n+        code.putln('#define __Pyx_CGlobal(ident) (%s.ident)' % Naming.cglobals_cname)\n+        code.putln('static PyObject *%s;' % env.module_cname)\n+        code.putln('#else')\n+        code.putln('/* Module def forward declaration */')\n+        code.putln('#ifdef __cplusplus')\n+        code.putln('namespace {')\n+        code.putln('extern struct PyModuleDef %s;' % Naming.pymoduledef_cname)\n+        code.putln('} /* anonymous namespace */')\n+        code.putln('#else')\n+        code.putln('static struct PyModuleDef %s;' % Naming.pymoduledef_cname)\n         code.putln('#endif')",
            "html_url": "https://github.com/cython/cython/pull/3704#discussion_r449987063",
            "id": 449987063,
            "in_reply_to_id": 445976733,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk4NzA2Mw==",
            "original_commit_id": "a0044a22fb2dc6a401d95ce337aba34524d54dd3",
            "original_line": 2572,
            "original_position": 216,
            "original_start_line": 2564,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": null,
            "pull_request_review_id": 442778140,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3704",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2020-07-09T04:07:58Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/449987063",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/71571?v=4",
                "events_url": "https://api.github.com/users/MatzeB/events{/privacy}",
                "followers_url": "https://api.github.com/users/MatzeB/followers",
                "following_url": "https://api.github.com/users/MatzeB/following{/other_user}",
                "gists_url": "https://api.github.com/users/MatzeB/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MatzeB",
                "id": 71571,
                "login": "MatzeB",
                "node_id": "MDQ6VXNlcjcxNTcx",
                "organizations_url": "https://api.github.com/users/MatzeB/orgs",
                "received_events_url": "https://api.github.com/users/MatzeB/received_events",
                "repos_url": "https://api.github.com/users/MatzeB/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MatzeB/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MatzeB/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MatzeB"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3704#discussion_r449987626"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3704"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/449987626"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "It looked less wrong when it was still `Globals()->AsynGenType = ...`. I would still like to postpone the getters/setter functions, things are already tricky to get working in the current state where I do not need to review every global access.\r\n\r\nLet's discuss this again when I have the branch in a way where it works with everything in the global state...",
            "commit_id": "8c03aff230486c1fbe11b7c4cb135489ea66ec57",
            "created_at": "2020-07-06T05:15:42Z",
            "diff_hunk": "@@ -1228,43 +1228,48 @@ __Pyx_async_gen_athrow_new(__pyx_PyAsyncGenObject *gen, PyObject *args)\n /* ---------- global type sharing ------------ */\n \n static int __pyx_AsyncGen_init(PyObject *module) {\n+    PyTypeObject *type;\n #if CYTHON_USE_TYPE_SPECS\n-    __pyx_AsyncGenType = __Pyx_FetchCommonTypeFromSpec(module, &__pyx_AsyncGenType_spec, NULL);\n+    type = __Pyx_FetchCommonTypeFromSpec(module, &__pyx_AsyncGenType_spec, NULL);\n #else\n     (void) module;\n     // on Windows, C-API functions can't be used in slots statically\n     __pyx_AsyncGenType_type.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;\n-    __pyx_AsyncGenType = __Pyx_FetchCommonType(&__pyx_AsyncGenType_type);\n+    type = __Pyx_FetchCommonType(&__pyx_AsyncGenType_type);\n #endif\n-    if (unlikely(!__pyx_AsyncGenType))\n+    if (unlikely(!type))\n         return -1;\n+    __Pyx_CGlobal(AsyncGenType) = type;",
            "html_url": "https://github.com/cython/cython/pull/3704#discussion_r449987626",
            "id": 449987626,
            "in_reply_to_id": 445980429,
            "line": 1242,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk4NzYyNg==",
            "original_commit_id": "a0044a22fb2dc6a401d95ce337aba34524d54dd3",
            "original_line": 1242,
            "original_position": 124,
            "original_start_line": null,
            "path": "Cython/Utility/AsyncGen.c",
            "position": 124,
            "pull_request_review_id": 442778798,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3704",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-07-09T04:07:58Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/449987626",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/71571?v=4",
                "events_url": "https://api.github.com/users/MatzeB/events{/privacy}",
                "followers_url": "https://api.github.com/users/MatzeB/followers",
                "following_url": "https://api.github.com/users/MatzeB/following{/other_user}",
                "gists_url": "https://api.github.com/users/MatzeB/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MatzeB",
                "id": 71571,
                "login": "MatzeB",
                "node_id": "MDQ6VXNlcjcxNTcx",
                "organizations_url": "https://api.github.com/users/MatzeB/orgs",
                "received_events_url": "https://api.github.com/users/MatzeB/received_events",
                "repos_url": "https://api.github.com/users/MatzeB/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MatzeB/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MatzeB/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MatzeB"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3704#discussion_r449988013"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3704"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/449988013"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I guess it's `_cexpr` then instead of `_expr` then?",
            "commit_id": "8c03aff230486c1fbe11b7c4cb135489ea66ec57",
            "created_at": "2020-07-06T05:17:07Z",
            "diff_hunk": "@@ -1317,7 +1317,7 @@ def get_pyunicode_ptr_const(self, text):\n             c = self.pyunicode_ptr_const_index[text] = self.new_const_cname()\n         return c\n \n-    def get_py_string_const(self, text, identifier=None,\n+    def get_py_string_expr(self, text, identifier=None,",
            "html_url": "https://github.com/cython/cython/pull/3704#discussion_r449988013",
            "id": 449988013,
            "in_reply_to_id": 446343531,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk4ODAxMw==",
            "original_commit_id": "e36b3d71855a855f200c340e4b2d35ba9d9d4e5b",
            "original_line": 1320,
            "original_position": 22,
            "original_start_line": null,
            "path": "Cython/Compiler/Code.py",
            "position": null,
            "pull_request_review_id": 442779163,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3704",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-07-09T04:07:58Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/449988013",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/71571?v=4",
                "events_url": "https://api.github.com/users/MatzeB/events{/privacy}",
                "followers_url": "https://api.github.com/users/MatzeB/followers",
                "following_url": "https://api.github.com/users/MatzeB/following{/other_user}",
                "gists_url": "https://api.github.com/users/MatzeB/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MatzeB",
                "id": 71571,
                "login": "MatzeB",
                "node_id": "MDQ6VXNlcjcxNTcx",
                "organizations_url": "https://api.github.com/users/MatzeB/orgs",
                "received_events_url": "https://api.github.com/users/MatzeB/received_events",
                "repos_url": "https://api.github.com/users/MatzeB/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MatzeB/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MatzeB/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MatzeB"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3704#discussion_r449990113"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3704"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/449990113"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Yes I also think this is more complex than necessary in its current form. As I mentioned in one of my other comments somewhere, I would like to come back and just maintain a list of globals in the code object. And then autogenerate the clear and traverse parts from that. (The defines part gets removed naturally, as it shrinks with every change in this branch until it is empty).\r\n\r\nBut I have to be careful not to extend the scope of these changes more than necessary. I'll come back to this when I have everything in the state struct working.",
            "commit_id": "8c03aff230486c1fbe11b7c4cb135489ea66ec57",
            "created_at": "2020-07-06T05:25:49Z",
            "diff_hunk": "@@ -450,10 +450,10 @@ def generate_c_code(self, env, options, result):\n         # initialise the macro to reduce the code size of one-time functionality\n         code.putln(UtilityCode.load_as_string(\"SmallCodeConfig\", \"ModuleSetupCode.c\")[0].strip())\n \n-        self.generate_module_state_start(env, globalstate['module_state'])\n-        self.generate_module_state_defines(env, globalstate['module_state_defines'])\n-        self.generate_module_state_clear(env, globalstate['module_state_clear'])\n-        self.generate_module_state_traverse(env, globalstate['module_state_traverse'])\n+        self.generate_module_state_begin(env, globalstate['module_state'])\n+        self.generate_module_state_defines_begin(env, globalstate['module_state_defines'])\n+        self.generate_module_state_clear_begin(env, globalstate['module_state_clear'])\n+        self.generate_module_state_traverse_begin(env, globalstate['module_state_traverse'])",
            "html_url": "https://github.com/cython/cython/pull/3704#discussion_r449990113",
            "id": 449990113,
            "in_reply_to_id": 446352630,
            "line": 457,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk5MDExMw==",
            "original_commit_id": "e36b3d71855a855f200c340e4b2d35ba9d9d4e5b",
            "original_line": 457,
            "original_position": 11,
            "original_start_line": 453,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": 27,
            "pull_request_review_id": 442781622,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3704",
            "side": "RIGHT",
            "start_line": 454,
            "start_side": "RIGHT",
            "updated_at": "2020-07-09T04:07:58Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/449990113",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/71571?v=4",
                "events_url": "https://api.github.com/users/MatzeB/events{/privacy}",
                "followers_url": "https://api.github.com/users/MatzeB/followers",
                "following_url": "https://api.github.com/users/MatzeB/following{/other_user}",
                "gists_url": "https://api.github.com/users/MatzeB/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MatzeB",
                "id": 71571,
                "login": "MatzeB",
                "node_id": "MDQ6VXNlcjcxNTcx",
                "organizations_url": "https://api.github.com/users/MatzeB/orgs",
                "received_events_url": "https://api.github.com/users/MatzeB/received_events",
                "repos_url": "https://api.github.com/users/MatzeB/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MatzeB/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MatzeB/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MatzeB"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/cython/cython/issues/3704/comments",
    "commit_data": [
        {
            "author": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/71571?v=4",
                "events_url": "https://api.github.com/users/MatzeB/events{/privacy}",
                "followers_url": "https://api.github.com/users/MatzeB/followers",
                "following_url": "https://api.github.com/users/MatzeB/following{/other_user}",
                "gists_url": "https://api.github.com/users/MatzeB/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MatzeB",
                "id": 71571,
                "login": "MatzeB",
                "node_id": "MDQ6VXNlcjcxNTcx",
                "organizations_url": "https://api.github.com/users/MatzeB/orgs",
                "received_events_url": "https://api.github.com/users/MatzeB/received_events",
                "repos_url": "https://api.github.com/users/MatzeB/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MatzeB/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MatzeB/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MatzeB"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/a5be8f5e1ffd8c4a4ad15bafb1994586cb045c98/comments",
            "commit": {
                "author": {
                    "date": "2020-06-23T00:22:11Z",
                    "email": "matze@braunis.de",
                    "name": "Matthias Braun"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-07-06T05:26:30Z",
                    "email": "matze@braunis.de",
                    "name": "Matthias Braun"
                },
                "message": "Refact module state code",
                "tree": {
                    "sha": "738f7d8bc6d84c776ae0c272b5929200842710ed",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/738f7d8bc6d84c776ae0c272b5929200842710ed"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/a5be8f5e1ffd8c4a4ad15bafb1994586cb045c98",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/71571?v=4",
                "events_url": "https://api.github.com/users/MatzeB/events{/privacy}",
                "followers_url": "https://api.github.com/users/MatzeB/followers",
                "following_url": "https://api.github.com/users/MatzeB/following{/other_user}",
                "gists_url": "https://api.github.com/users/MatzeB/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MatzeB",
                "id": 71571,
                "login": "MatzeB",
                "node_id": "MDQ6VXNlcjcxNTcx",
                "organizations_url": "https://api.github.com/users/MatzeB/orgs",
                "received_events_url": "https://api.github.com/users/MatzeB/received_events",
                "repos_url": "https://api.github.com/users/MatzeB/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MatzeB/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MatzeB/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MatzeB"
            },
            "html_url": "https://github.com/cython/cython/commit/a5be8f5e1ffd8c4a4ad15bafb1994586cb045c98",
            "node_id": "MDY6Q29tbWl0MjczMzI0NjQ5OmE1YmU4ZjVlMWZmZDhjNGE0YWQxNWJhZmIxOTk0NTg2Y2IwNDVjOTg=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/0efe5fb87853d1b9aa6fc72901d31c67aab84a4d",
                    "sha": "0efe5fb87853d1b9aa6fc72901d31c67aab84a4d",
                    "url": "https://api.github.com/repos/cython/cython/commits/0efe5fb87853d1b9aa6fc72901d31c67aab84a4d"
                }
            ],
            "sha": "a5be8f5e1ffd8c4a4ad15bafb1994586cb045c98",
            "url": "https://api.github.com/repos/cython/cython/commits/a5be8f5e1ffd8c4a4ad15bafb1994586cb045c98"
        },
        {
            "author": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/71571?v=4",
                "events_url": "https://api.github.com/users/MatzeB/events{/privacy}",
                "followers_url": "https://api.github.com/users/MatzeB/followers",
                "following_url": "https://api.github.com/users/MatzeB/following{/other_user}",
                "gists_url": "https://api.github.com/users/MatzeB/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MatzeB",
                "id": 71571,
                "login": "MatzeB",
                "node_id": "MDQ6VXNlcjcxNTcx",
                "organizations_url": "https://api.github.com/users/MatzeB/orgs",
                "received_events_url": "https://api.github.com/users/MatzeB/received_events",
                "repos_url": "https://api.github.com/users/MatzeB/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MatzeB/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MatzeB/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MatzeB"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/5739498bba6ca631f0e3846c4aebca877f782afd/comments",
            "commit": {
                "author": {
                    "date": "2020-06-25T06:33:28Z",
                    "email": "matze@braunis.de",
                    "name": "Matthias Braun"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-07-06T05:26:30Z",
                    "email": "matze@braunis.de",
                    "name": "Matthias Braun"
                },
                "message": "Remove typeobj_cname entry from module state\n\nThere is already an entry for `typeptr_cname` for custom classes in the\nmodule state. The entry for `typeobj_cname` in the module state was\nunused.",
                "tree": {
                    "sha": "874e2a20046178b0003d6d9e83b5cc54113dcb06",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/874e2a20046178b0003d6d9e83b5cc54113dcb06"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/5739498bba6ca631f0e3846c4aebca877f782afd",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/71571?v=4",
                "events_url": "https://api.github.com/users/MatzeB/events{/privacy}",
                "followers_url": "https://api.github.com/users/MatzeB/followers",
                "following_url": "https://api.github.com/users/MatzeB/following{/other_user}",
                "gists_url": "https://api.github.com/users/MatzeB/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MatzeB",
                "id": 71571,
                "login": "MatzeB",
                "node_id": "MDQ6VXNlcjcxNTcx",
                "organizations_url": "https://api.github.com/users/MatzeB/orgs",
                "received_events_url": "https://api.github.com/users/MatzeB/received_events",
                "repos_url": "https://api.github.com/users/MatzeB/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MatzeB/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MatzeB/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MatzeB"
            },
            "html_url": "https://github.com/cython/cython/commit/5739498bba6ca631f0e3846c4aebca877f782afd",
            "node_id": "MDY6Q29tbWl0MjczMzI0NjQ5OjU3Mzk0OThiYmE2Y2E2MzFmMGUzODQ2YzRhZWJjYTg3N2Y3ODJhZmQ=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/a5be8f5e1ffd8c4a4ad15bafb1994586cb045c98",
                    "sha": "a5be8f5e1ffd8c4a4ad15bafb1994586cb045c98",
                    "url": "https://api.github.com/repos/cython/cython/commits/a5be8f5e1ffd8c4a4ad15bafb1994586cb045c98"
                }
            ],
            "sha": "5739498bba6ca631f0e3846c4aebca877f782afd",
            "url": "https://api.github.com/repos/cython/cython/commits/5739498bba6ca631f0e3846c4aebca877f782afd"
        },
        {
            "author": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/71571?v=4",
                "events_url": "https://api.github.com/users/MatzeB/events{/privacy}",
                "followers_url": "https://api.github.com/users/MatzeB/followers",
                "following_url": "https://api.github.com/users/MatzeB/following{/other_user}",
                "gists_url": "https://api.github.com/users/MatzeB/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MatzeB",
                "id": 71571,
                "login": "MatzeB",
                "node_id": "MDQ6VXNlcjcxNTcx",
                "organizations_url": "https://api.github.com/users/MatzeB/orgs",
                "received_events_url": "https://api.github.com/users/MatzeB/received_events",
                "repos_url": "https://api.github.com/users/MatzeB/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MatzeB/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MatzeB/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MatzeB"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/51f9e267b8b0fc3f908fd56a303ec1c34c045b81/comments",
            "commit": {
                "author": {
                    "date": "2020-07-06T05:08:16Z",
                    "email": "matze@braunis.de",
                    "name": "Matthias Braun"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-07-09T04:05:57Z",
                    "email": "matze@braunis.de",
                    "name": "Matthias Braun"
                },
                "message": "Move PyModuleDef above module_state macros\n\nThis allows us to remove the forward declaration of the module state and\navoid the surprising C/C++ expressions necessary to do so.",
                "tree": {
                    "sha": "c2f1958c4dc9e940b210f8ebb755eaf5a6e30d3b",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/c2f1958c4dc9e940b210f8ebb755eaf5a6e30d3b"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/51f9e267b8b0fc3f908fd56a303ec1c34c045b81",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/71571?v=4",
                "events_url": "https://api.github.com/users/MatzeB/events{/privacy}",
                "followers_url": "https://api.github.com/users/MatzeB/followers",
                "following_url": "https://api.github.com/users/MatzeB/following{/other_user}",
                "gists_url": "https://api.github.com/users/MatzeB/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MatzeB",
                "id": 71571,
                "login": "MatzeB",
                "node_id": "MDQ6VXNlcjcxNTcx",
                "organizations_url": "https://api.github.com/users/MatzeB/orgs",
                "received_events_url": "https://api.github.com/users/MatzeB/received_events",
                "repos_url": "https://api.github.com/users/MatzeB/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MatzeB/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MatzeB/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MatzeB"
            },
            "html_url": "https://github.com/cython/cython/commit/51f9e267b8b0fc3f908fd56a303ec1c34c045b81",
            "node_id": "MDY6Q29tbWl0MjczMzI0NjQ5OjUxZjllMjY3YjhiMGZjM2Y5MDhmZDU2YTMwM2VjMWMzNGMwNDViODE=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/5739498bba6ca631f0e3846c4aebca877f782afd",
                    "sha": "5739498bba6ca631f0e3846c4aebca877f782afd",
                    "url": "https://api.github.com/repos/cython/cython/commits/5739498bba6ca631f0e3846c4aebca877f782afd"
                }
            ],
            "sha": "51f9e267b8b0fc3f908fd56a303ec1c34c045b81",
            "url": "https://api.github.com/repos/cython/cython/commits/51f9e267b8b0fc3f908fd56a303ec1c34c045b81"
        },
        {
            "author": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/71571?v=4",
                "events_url": "https://api.github.com/users/MatzeB/events{/privacy}",
                "followers_url": "https://api.github.com/users/MatzeB/followers",
                "following_url": "https://api.github.com/users/MatzeB/following{/other_user}",
                "gists_url": "https://api.github.com/users/MatzeB/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MatzeB",
                "id": 71571,
                "login": "MatzeB",
                "node_id": "MDQ6VXNlcjcxNTcx",
                "organizations_url": "https://api.github.com/users/MatzeB/orgs",
                "received_events_url": "https://api.github.com/users/MatzeB/received_events",
                "repos_url": "https://api.github.com/users/MatzeB/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MatzeB/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MatzeB/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MatzeB"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/188088b10819896a9e6980f003677c57da6ac4f2/comments",
            "commit": {
                "author": {
                    "date": "2020-06-23T00:23:14Z",
                    "email": "matze@braunis.de",
                    "name": "Matthias Braun"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-07-09T04:06:00Z",
                    "email": "matze@braunis.de",
                    "name": "Matthias Braun"
                },
                "message": "Modulestate in struct prototype",
                "tree": {
                    "sha": "9ef0a444826093a157d8ddd9c4cc079d9627d97a",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/9ef0a444826093a157d8ddd9c4cc079d9627d97a"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/188088b10819896a9e6980f003677c57da6ac4f2",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/71571?v=4",
                "events_url": "https://api.github.com/users/MatzeB/events{/privacy}",
                "followers_url": "https://api.github.com/users/MatzeB/followers",
                "following_url": "https://api.github.com/users/MatzeB/following{/other_user}",
                "gists_url": "https://api.github.com/users/MatzeB/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MatzeB",
                "id": 71571,
                "login": "MatzeB",
                "node_id": "MDQ6VXNlcjcxNTcx",
                "organizations_url": "https://api.github.com/users/MatzeB/orgs",
                "received_events_url": "https://api.github.com/users/MatzeB/received_events",
                "repos_url": "https://api.github.com/users/MatzeB/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MatzeB/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MatzeB/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MatzeB"
            },
            "html_url": "https://github.com/cython/cython/commit/188088b10819896a9e6980f003677c57da6ac4f2",
            "node_id": "MDY6Q29tbWl0MjczMzI0NjQ5OjE4ODA4OGIxMDgxOTg5NmE5ZTY5ODBmMDAzNjc3YzU3ZGE2YWM0ZjI=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/51f9e267b8b0fc3f908fd56a303ec1c34c045b81",
                    "sha": "51f9e267b8b0fc3f908fd56a303ec1c34c045b81",
                    "url": "https://api.github.com/repos/cython/cython/commits/51f9e267b8b0fc3f908fd56a303ec1c34c045b81"
                }
            ],
            "sha": "188088b10819896a9e6980f003677c57da6ac4f2",
            "url": "https://api.github.com/repos/cython/cython/commits/188088b10819896a9e6980f003677c57da6ac4f2"
        },
        {
            "author": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/71571?v=4",
                "events_url": "https://api.github.com/users/MatzeB/events{/privacy}",
                "followers_url": "https://api.github.com/users/MatzeB/followers",
                "following_url": "https://api.github.com/users/MatzeB/following{/other_user}",
                "gists_url": "https://api.github.com/users/MatzeB/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MatzeB",
                "id": 71571,
                "login": "MatzeB",
                "node_id": "MDQ6VXNlcjcxNTcx",
                "organizations_url": "https://api.github.com/users/MatzeB/orgs",
                "received_events_url": "https://api.github.com/users/MatzeB/received_events",
                "repos_url": "https://api.github.com/users/MatzeB/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MatzeB/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MatzeB/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MatzeB"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/552ee43bda09c9d52ec71ee0d4c152e1cbbca4f1/comments",
            "commit": {
                "author": {
                    "date": "2020-06-25T05:37:36Z",
                    "email": "matze@braunis.de",
                    "name": "Matthias Braun"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-07-09T04:06:00Z",
                    "email": "matze@braunis.de",
                    "name": "Matthias Braun"
                },
                "message": "Move cython specific types into module state",
                "tree": {
                    "sha": "4b4ff23eeb465eca8e52810716adda7a02c6bbc5",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/4b4ff23eeb465eca8e52810716adda7a02c6bbc5"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/552ee43bda09c9d52ec71ee0d4c152e1cbbca4f1",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/71571?v=4",
                "events_url": "https://api.github.com/users/MatzeB/events{/privacy}",
                "followers_url": "https://api.github.com/users/MatzeB/followers",
                "following_url": "https://api.github.com/users/MatzeB/following{/other_user}",
                "gists_url": "https://api.github.com/users/MatzeB/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MatzeB",
                "id": 71571,
                "login": "MatzeB",
                "node_id": "MDQ6VXNlcjcxNTcx",
                "organizations_url": "https://api.github.com/users/MatzeB/orgs",
                "received_events_url": "https://api.github.com/users/MatzeB/received_events",
                "repos_url": "https://api.github.com/users/MatzeB/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MatzeB/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MatzeB/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MatzeB"
            },
            "html_url": "https://github.com/cython/cython/commit/552ee43bda09c9d52ec71ee0d4c152e1cbbca4f1",
            "node_id": "MDY6Q29tbWl0MjczMzI0NjQ5OjU1MmVlNDNiZGEwOWM5ZDUyZWM3MWVlMGQ0YzE1MmUxY2JiY2E0ZjE=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/188088b10819896a9e6980f003677c57da6ac4f2",
                    "sha": "188088b10819896a9e6980f003677c57da6ac4f2",
                    "url": "https://api.github.com/repos/cython/cython/commits/188088b10819896a9e6980f003677c57da6ac4f2"
                }
            ],
            "sha": "552ee43bda09c9d52ec71ee0d4c152e1cbbca4f1",
            "url": "https://api.github.com/repos/cython/cython/commits/552ee43bda09c9d52ec71ee0d4c152e1cbbca4f1"
        },
        {
            "author": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/71571?v=4",
                "events_url": "https://api.github.com/users/MatzeB/events{/privacy}",
                "followers_url": "https://api.github.com/users/MatzeB/followers",
                "following_url": "https://api.github.com/users/MatzeB/following{/other_user}",
                "gists_url": "https://api.github.com/users/MatzeB/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MatzeB",
                "id": 71571,
                "login": "MatzeB",
                "node_id": "MDQ6VXNlcjcxNTcx",
                "organizations_url": "https://api.github.com/users/MatzeB/orgs",
                "received_events_url": "https://api.github.com/users/MatzeB/received_events",
                "repos_url": "https://api.github.com/users/MatzeB/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MatzeB/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MatzeB/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MatzeB"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/bb5ddf7f7ce2fded33ac6152071adf4066378cec/comments",
            "commit": {
                "author": {
                    "date": "2020-06-26T05:48:34Z",
                    "email": "matze@braunis.de",
                    "name": "Matthias Braun"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-07-09T04:06:00Z",
                    "email": "matze@braunis.de",
                    "name": "Matthias Braun"
                },
                "message": "Refactor string constant handling\n\nInstead of generating dozens of individual variables for string\nconstants, create an enum with indexes and an array.\n\nThis has the benefit that we no longer need to put a variable reference\ninto each string table entry. This in turn allows us to use the same\ncode regardless of `CYTHON_USE_MODULE_STATE`.",
                "tree": {
                    "sha": "22278cfc84cee731d42fa9b4eb3bbb508401aa07",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/22278cfc84cee731d42fa9b4eb3bbb508401aa07"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/bb5ddf7f7ce2fded33ac6152071adf4066378cec",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/71571?v=4",
                "events_url": "https://api.github.com/users/MatzeB/events{/privacy}",
                "followers_url": "https://api.github.com/users/MatzeB/followers",
                "following_url": "https://api.github.com/users/MatzeB/following{/other_user}",
                "gists_url": "https://api.github.com/users/MatzeB/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MatzeB",
                "id": 71571,
                "login": "MatzeB",
                "node_id": "MDQ6VXNlcjcxNTcx",
                "organizations_url": "https://api.github.com/users/MatzeB/orgs",
                "received_events_url": "https://api.github.com/users/MatzeB/received_events",
                "repos_url": "https://api.github.com/users/MatzeB/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MatzeB/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MatzeB/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MatzeB"
            },
            "html_url": "https://github.com/cython/cython/commit/bb5ddf7f7ce2fded33ac6152071adf4066378cec",
            "node_id": "MDY6Q29tbWl0MjczMzI0NjQ5OmJiNWRkZjdmN2NlMmZkZWQzM2FjNjE1MjA3MWFkZjQwNjYzNzhjZWM=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/552ee43bda09c9d52ec71ee0d4c152e1cbbca4f1",
                    "sha": "552ee43bda09c9d52ec71ee0d4c152e1cbbca4f1",
                    "url": "https://api.github.com/repos/cython/cython/commits/552ee43bda09c9d52ec71ee0d4c152e1cbbca4f1"
                }
            ],
            "sha": "bb5ddf7f7ce2fded33ac6152071adf4066378cec",
            "url": "https://api.github.com/repos/cython/cython/commits/bb5ddf7f7ce2fded33ac6152071adf4066378cec"
        },
        {
            "author": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/71571?v=4",
                "events_url": "https://api.github.com/users/MatzeB/events{/privacy}",
                "followers_url": "https://api.github.com/users/MatzeB/followers",
                "following_url": "https://api.github.com/users/MatzeB/following{/other_user}",
                "gists_url": "https://api.github.com/users/MatzeB/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MatzeB",
                "id": 71571,
                "login": "MatzeB",
                "node_id": "MDQ6VXNlcjcxNTcx",
                "organizations_url": "https://api.github.com/users/MatzeB/orgs",
                "received_events_url": "https://api.github.com/users/MatzeB/received_events",
                "repos_url": "https://api.github.com/users/MatzeB/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MatzeB/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MatzeB/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MatzeB"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/8c03aff230486c1fbe11b7c4cb135489ea66ec57/comments",
            "commit": {
                "author": {
                    "date": "2020-06-27T04:12:25Z",
                    "email": "matze@braunis.de",
                    "name": "Matthias Braun"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-07-09T04:06:00Z",
                    "email": "matze@braunis.de",
                    "name": "Matthias Braun"
                },
                "message": "Move int and python const into modulestate",
                "tree": {
                    "sha": "bc114da3d5814232ff9682910acdc0ac31cd9f8a",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/bc114da3d5814232ff9682910acdc0ac31cd9f8a"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/8c03aff230486c1fbe11b7c4cb135489ea66ec57",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/71571?v=4",
                "events_url": "https://api.github.com/users/MatzeB/events{/privacy}",
                "followers_url": "https://api.github.com/users/MatzeB/followers",
                "following_url": "https://api.github.com/users/MatzeB/following{/other_user}",
                "gists_url": "https://api.github.com/users/MatzeB/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MatzeB",
                "id": 71571,
                "login": "MatzeB",
                "node_id": "MDQ6VXNlcjcxNTcx",
                "organizations_url": "https://api.github.com/users/MatzeB/orgs",
                "received_events_url": "https://api.github.com/users/MatzeB/received_events",
                "repos_url": "https://api.github.com/users/MatzeB/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MatzeB/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MatzeB/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MatzeB"
            },
            "html_url": "https://github.com/cython/cython/commit/8c03aff230486c1fbe11b7c4cb135489ea66ec57",
            "node_id": "MDY6Q29tbWl0MjczMzI0NjQ5OjhjMDNhZmYyMzA0ODZjMWZiZTExYjdjNGNiMTM1NDg5ZWE2NmVjNTc=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/acf77534f075b20fd0b087faebfedbae156b3b04",
                    "sha": "acf77534f075b20fd0b087faebfedbae156b3b04",
                    "url": "https://api.github.com/repos/cython/cython/commits/acf77534f075b20fd0b087faebfedbae156b3b04"
                }
            ],
            "sha": "8c03aff230486c1fbe11b7c4cb135489ea66ec57",
            "url": "https://api.github.com/repos/cython/cython/commits/8c03aff230486c1fbe11b7c4cb135489ea66ec57"
        },
        {
            "author": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/71571?v=4",
                "events_url": "https://api.github.com/users/MatzeB/events{/privacy}",
                "followers_url": "https://api.github.com/users/MatzeB/followers",
                "following_url": "https://api.github.com/users/MatzeB/following{/other_user}",
                "gists_url": "https://api.github.com/users/MatzeB/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MatzeB",
                "id": 71571,
                "login": "MatzeB",
                "node_id": "MDQ6VXNlcjcxNTcx",
                "organizations_url": "https://api.github.com/users/MatzeB/orgs",
                "received_events_url": "https://api.github.com/users/MatzeB/received_events",
                "repos_url": "https://api.github.com/users/MatzeB/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MatzeB/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MatzeB/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MatzeB"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/acf77534f075b20fd0b087faebfedbae156b3b04/comments",
            "commit": {
                "author": {
                    "date": "2020-07-06T06:19:05Z",
                    "email": "matze@braunis.de",
                    "name": "Matthias Braun"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-07-09T04:06:00Z",
                    "email": "matze@braunis.de",
                    "name": "Matthias Braun"
                },
                "message": "Introduce macros to shorten string usage expressions",
                "tree": {
                    "sha": "a824519b34c4c0b69987eca5002687f9fd374614",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/a824519b34c4c0b69987eca5002687f9fd374614"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/acf77534f075b20fd0b087faebfedbae156b3b04",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/71571?v=4",
                "events_url": "https://api.github.com/users/MatzeB/events{/privacy}",
                "followers_url": "https://api.github.com/users/MatzeB/followers",
                "following_url": "https://api.github.com/users/MatzeB/following{/other_user}",
                "gists_url": "https://api.github.com/users/MatzeB/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MatzeB",
                "id": 71571,
                "login": "MatzeB",
                "node_id": "MDQ6VXNlcjcxNTcx",
                "organizations_url": "https://api.github.com/users/MatzeB/orgs",
                "received_events_url": "https://api.github.com/users/MatzeB/received_events",
                "repos_url": "https://api.github.com/users/MatzeB/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MatzeB/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MatzeB/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MatzeB"
            },
            "html_url": "https://github.com/cython/cython/commit/acf77534f075b20fd0b087faebfedbae156b3b04",
            "node_id": "MDY6Q29tbWl0MjczMzI0NjQ5OmFjZjc3NTM0ZjA3NWIyMGZkMGIwODdmYWViZmVkYmFlMTU2YjNiMDQ=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/bb5ddf7f7ce2fded33ac6152071adf4066378cec",
                    "sha": "bb5ddf7f7ce2fded33ac6152071adf4066378cec",
                    "url": "https://api.github.com/repos/cython/cython/commits/bb5ddf7f7ce2fded33ac6152071adf4066378cec"
                }
            ],
            "sha": "acf77534f075b20fd0b087faebfedbae156b3b04",
            "url": "https://api.github.com/repos/cython/cython/commits/acf77534f075b20fd0b087faebfedbae156b3b04"
        }
    ],
    "commits_url": "https://api.github.com/repos/cython/cython/pulls/3704/commits",
    "created_at": "2020-06-23T02:13:08Z",
    "diff_url": "https://github.com/cython/cython/pull/3704.diff",
    "draft": false,
    "head": {
        "label": "MatzeB:modulestate_struct",
        "ref": "modulestate_struct",
        "repo": {
            "archive_url": "https://api.github.com/repos/MatzeB/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/MatzeB/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/MatzeB/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/MatzeB/cython/branches{/branch}",
            "clone_url": "https://github.com/MatzeB/cython.git",
            "collaborators_url": "https://api.github.com/repos/MatzeB/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/MatzeB/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/MatzeB/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/MatzeB/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/MatzeB/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/MatzeB/cython/contributors",
            "created_at": "2020-06-18T19:36:21Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/MatzeB/cython/deployments",
            "description": "Fork to work on limited API (aka PEP384 / stable ABI) support",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/MatzeB/cython/downloads",
            "events_url": "https://api.github.com/repos/MatzeB/cython/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/MatzeB/cython/forks",
            "full_name": "MatzeB/cython",
            "git_commits_url": "https://api.github.com/repos/MatzeB/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/MatzeB/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/MatzeB/cython/git/tags{/sha}",
            "git_url": "git://github.com/MatzeB/cython.git",
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://cython.org",
            "hooks_url": "https://api.github.com/repos/MatzeB/cython/hooks",
            "html_url": "https://github.com/MatzeB/cython",
            "id": 273324649,
            "issue_comment_url": "https://api.github.com/repos/MatzeB/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/MatzeB/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/MatzeB/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/MatzeB/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/MatzeB/cython/labels{/name}",
            "language": null,
            "languages_url": "https://api.github.com/repos/MatzeB/cython/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/MatzeB/cython/merges",
            "milestones_url": "https://api.github.com/repos/MatzeB/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkyNzMzMjQ2NDk=",
            "notifications_url": "https://api.github.com/repos/MatzeB/cython/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/71571?v=4",
                "events_url": "https://api.github.com/users/MatzeB/events{/privacy}",
                "followers_url": "https://api.github.com/users/MatzeB/followers",
                "following_url": "https://api.github.com/users/MatzeB/following{/other_user}",
                "gists_url": "https://api.github.com/users/MatzeB/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MatzeB",
                "id": 71571,
                "login": "MatzeB",
                "node_id": "MDQ6VXNlcjcxNTcx",
                "organizations_url": "https://api.github.com/users/MatzeB/orgs",
                "received_events_url": "https://api.github.com/users/MatzeB/received_events",
                "repos_url": "https://api.github.com/users/MatzeB/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MatzeB/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MatzeB/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MatzeB"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/MatzeB/cython/pulls{/number}",
            "pushed_at": "2020-07-09T04:07:55Z",
            "releases_url": "https://api.github.com/repos/MatzeB/cython/releases{/id}",
            "size": 59907,
            "ssh_url": "git@github.com:MatzeB/cython.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/MatzeB/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/MatzeB/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/MatzeB/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/MatzeB/cython/subscription",
            "svn_url": "https://github.com/MatzeB/cython",
            "tags_url": "https://api.github.com/repos/MatzeB/cython/tags",
            "teams_url": "https://api.github.com/repos/MatzeB/cython/teams",
            "trees_url": "https://api.github.com/repos/MatzeB/cython/git/trees{/sha}",
            "updated_at": "2020-06-18T19:37:14Z",
            "url": "https://api.github.com/repos/MatzeB/cython",
            "watchers": 0,
            "watchers_count": 0
        },
        "sha": "8c03aff230486c1fbe11b7c4cb135489ea66ec57",
        "user": {
            "avatar_url": "https://avatars2.githubusercontent.com/u/71571?v=4",
            "events_url": "https://api.github.com/users/MatzeB/events{/privacy}",
            "followers_url": "https://api.github.com/users/MatzeB/followers",
            "following_url": "https://api.github.com/users/MatzeB/following{/other_user}",
            "gists_url": "https://api.github.com/users/MatzeB/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/MatzeB",
            "id": 71571,
            "login": "MatzeB",
            "node_id": "MDQ6VXNlcjcxNTcx",
            "organizations_url": "https://api.github.com/users/MatzeB/orgs",
            "received_events_url": "https://api.github.com/users/MatzeB/received_events",
            "repos_url": "https://api.github.com/users/MatzeB/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/MatzeB/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/MatzeB/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/MatzeB"
        }
    },
    "html_url": "https://github.com/cython/cython/pull/3704",
    "id": 438270849,
    "issue_url": "https://api.github.com/repos/cython/cython/issues/3704",
    "labels": [],
    "locked": false,
    "merge_commit_sha": "c5a1033930f8354a0d70017c0163e81ac752ef02",
    "merged_at": null,
    "milestone": null,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NDM4MjcwODQ5",
    "number": 3704,
    "patch_url": "https://github.com/cython/cython/pull/3704.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/cython/cython/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/cython/cython/pulls/3704/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/cython/cython/statuses/8c03aff230486c1fbe11b7c4cb135489ea66ec57",
    "title": "RFC: Modulestate struct",
    "updated_at": "2020-07-09T04:07:58Z",
    "url": "https://api.github.com/repos/cython/cython/pulls/3704",
    "user": {
        "avatar_url": "https://avatars2.githubusercontent.com/u/71571?v=4",
        "events_url": "https://api.github.com/users/MatzeB/events{/privacy}",
        "followers_url": "https://api.github.com/users/MatzeB/followers",
        "following_url": "https://api.github.com/users/MatzeB/following{/other_user}",
        "gists_url": "https://api.github.com/users/MatzeB/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/MatzeB",
        "id": 71571,
        "login": "MatzeB",
        "node_id": "MDQ6VXNlcjcxNTcx",
        "organizations_url": "https://api.github.com/users/MatzeB/orgs",
        "received_events_url": "https://api.github.com/users/MatzeB/received_events",
        "repos_url": "https://api.github.com/users/MatzeB/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/MatzeB/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/MatzeB/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/MatzeB"
    }
}