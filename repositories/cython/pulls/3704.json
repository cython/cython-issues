{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/cython/cython/issues/3704/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/cython/cython/pulls/3704/commits"
        },
        "html": {
            "href": "https://github.com/cython/cython/pull/3704"
        },
        "issue": {
            "href": "https://api.github.com/repos/cython/cython/issues/3704"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/cython/cython/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/cython/cython/pulls/3704/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/cython/cython/pulls/3704"
        },
        "statuses": {
            "href": "https://api.github.com/repos/cython/cython/statuses/d96383c7c339d26f18609b18c86a2ea368233066"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "base": {
        "label": "cython:clean_up_capi_features",
        "ref": "clean_up_capi_features",
        "repo": {
            "archive_url": "https://api.github.com/repos/cython/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/cython/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/cython/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/cython/cython/branches{/branch}",
            "clone_url": "https://github.com/cython/cython.git",
            "collaborators_url": "https://api.github.com/repos/cython/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/cython/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/cython/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/cython/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/cython/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/cython/cython/contributors",
            "created_at": "2010-11-21T07:44:20Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/cython/cython/deployments",
            "description": "The most widely used Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/cython/cython/downloads",
            "events_url": "https://api.github.com/repos/cython/cython/events",
            "fork": false,
            "forks": 1041,
            "forks_count": 1041,
            "forks_url": "https://api.github.com/repos/cython/cython/forks",
            "full_name": "cython/cython",
            "git_commits_url": "https://api.github.com/repos/cython/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/cython/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/cython/cython/git/tags{/sha}",
            "git_url": "git://github.com/cython/cython.git",
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://cython.org",
            "hooks_url": "https://api.github.com/repos/cython/cython/hooks",
            "html_url": "https://github.com/cython/cython",
            "id": 1099265,
            "issue_comment_url": "https://api.github.com/repos/cython/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/cython/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/cython/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/cython/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/cython/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/cython/cython/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/cython/cython/merges",
            "milestones_url": "https://api.github.com/repos/cython/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkxMDk5MjY1",
            "notifications_url": "https://api.github.com/repos/cython/cython/notifications{?since,all,participating}",
            "open_issues": 846,
            "open_issues_count": 846,
            "owner": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/486082?v=4",
                "events_url": "https://api.github.com/users/cython/events{/privacy}",
                "followers_url": "https://api.github.com/users/cython/followers",
                "following_url": "https://api.github.com/users/cython/following{/other_user}",
                "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/cython",
                "id": 486082,
                "login": "cython",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
                "organizations_url": "https://api.github.com/users/cython/orgs",
                "received_events_url": "https://api.github.com/users/cython/received_events",
                "repos_url": "https://api.github.com/users/cython/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/cython"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/cython/cython/pulls{/number}",
            "pushed_at": "2020-06-25T06:21:48Z",
            "releases_url": "https://api.github.com/repos/cython/cython/releases{/id}",
            "size": 59651,
            "ssh_url": "git@github.com:cython/cython.git",
            "stargazers_count": 5277,
            "stargazers_url": "https://api.github.com/repos/cython/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/cython/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/cython/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/cython/cython/subscription",
            "svn_url": "https://github.com/cython/cython",
            "tags_url": "https://api.github.com/repos/cython/cython/tags",
            "teams_url": "https://api.github.com/repos/cython/cython/teams",
            "trees_url": "https://api.github.com/repos/cython/cython/git/trees{/sha}",
            "updated_at": "2020-06-24T23:10:43Z",
            "url": "https://api.github.com/repos/cython/cython",
            "watchers": 5277,
            "watchers_count": 5277
        },
        "sha": "09dcb76939fa8520b8a4c3e51a673dacd52086c2",
        "user": {
            "avatar_url": "https://avatars3.githubusercontent.com/u/486082?v=4",
            "events_url": "https://api.github.com/users/cython/events{/privacy}",
            "followers_url": "https://api.github.com/users/cython/followers",
            "following_url": "https://api.github.com/users/cython/following{/other_user}",
            "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/cython",
            "id": 486082,
            "login": "cython",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
            "organizations_url": "https://api.github.com/users/cython/orgs",
            "received_events_url": "https://api.github.com/users/cython/received_events",
            "repos_url": "https://api.github.com/users/cython/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/cython"
        }
    },
    "body": "This is a request for comments for addressing #3689 and to get some early review feedback, before I go off and translate everything to this style.\r\n\r\nThere's 2 preparation cleanups in this PR, the real work addressing the issue is in the third commit.\r\n- Always create a struct for the module state. For the proof of concept the struct will only include the couple variables from `generate_module_preamble` without limited mode enabled.\r\n- Add `__Pyx_Globals()` macro that returns a pointer to the module state. Without limited mode enabled, we will create 1 global static variable and have the macro return the address of that.\r\n- Wrap some `Naming.xxx` things in a `Global` struct, so that using them in a string-context (`__str__`) they return a `__Pyx_Globals()->xxx` expression, but also add a `field_name` field so that we can access just the `xxx` name in the few context that need it, without changing most other users in the codebase.",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3704#discussion_r444233910"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3704"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/444233910"
                }
            },
            "author_association": "MEMBER",
            "body": "This doesn't look very explicit in code. When I see this, I immediately wonder why this is needed here and not elsewhere. I'd rather not have to do anything at all here.",
            "commit_id": "d96383c7c339d26f18609b18c86a2ea368233066",
            "created_at": "2020-06-23T13:43:16Z",
            "diff_hunk": "@@ -8013,7 +8005,7 @@ def calculate_result_code(self):\n         if len(self.args) > 0:\n             return self.result_code\n         else:\n-            return Naming.empty_tuple\n+            return str(Naming.empty_tuple)",
            "html_url": "https://github.com/cython/cython/pull/3704#discussion_r444233910",
            "id": 444233910,
            "line": 8008,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIzMzkxMA==",
            "original_commit_id": "4fbfe11ff5559fdd139d6bfd49c95a95d4348b25",
            "original_line": 8008,
            "original_position": 27,
            "original_start_line": null,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": 27,
            "pull_request_review_id": 435795543,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3704",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-06-25T06:21:47Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/444233910",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3704#discussion_r444235485"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3704"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/444235485"
                }
            },
            "author_association": "MEMBER",
            "body": "Wouldn't this be nicer without the `pyrex_prefix` now?",
            "commit_id": "d96383c7c339d26f18609b18c86a2ea368233066",
            "created_at": "2020-06-23T13:45:24Z",
            "diff_hunk": "@@ -73,6 +73,24 @@\n     'umethod': pyrex_prefix + \"umethod_\",\n }\n \n+\n+class Global:\n+    def __init__(self, name):\n+        self._name = name\n+        self._field_name = pyrex_prefix + name\n+        self._expr = \"__Pyx_Globals()->%s\" % self._field_name",
            "html_url": "https://github.com/cython/cython/pull/3704#discussion_r444235485",
            "id": 444235485,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIzNTQ4NQ==",
            "original_commit_id": "4fbfe11ff5559fdd139d6bfd49c95a95d4348b25",
            "original_line": 81,
            "original_position": 9,
            "original_start_line": 80,
            "path": "Cython/Compiler/Naming.py",
            "position": null,
            "pull_request_review_id": 435795543,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3704",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2020-06-25T06:21:47Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/444235485",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3704#discussion_r444236868"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3704"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/444236868"
                }
            },
            "author_association": "MEMBER",
            "body": "Now that we have a tool for generating the access code in `Naming.py`, I think we should generally use it whenever a global is referenced.",
            "commit_id": "d96383c7c339d26f18609b18c86a2ea368233066",
            "created_at": "2020-06-23T13:47:15Z",
            "diff_hunk": "@@ -1232,9 +1219,8 @@ def generate_c_class_declarations(self, env, code, definition, globalstate):\n                 code.putln(\"static PyTypeObject *%s = 0;\" % (\n                     entry.type.typeptr_cname))\n                 module_state.putln(\"PyTypeObject *%s;\" % entry.type.typeptr_cname)\n-                module_state_defines.putln(\"#define %s %s->%s\" % (\n+                module_state_defines.putln(\"#define %s __Pyx_Globals()->%s\" % (",
            "html_url": "https://github.com/cython/cython/pull/3704#discussion_r444236868",
            "id": 444236868,
            "line": 1222,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIzNjg2OA==",
            "original_commit_id": "4fbfe11ff5559fdd139d6bfd49c95a95d4348b25",
            "original_line": 1222,
            "original_position": 55,
            "original_start_line": null,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": 55,
            "pull_request_review_id": 435795543,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3704",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-06-25T06:21:47Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/444236868",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3704#discussion_r444238363"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3704"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/444238363"
                }
            },
            "author_association": "MEMBER",
            "body": "Redefinitions should have an `#undef` first.\r\n```suggestion\r\n        code.putln('#define __Pyx_Globals() (&%s)' % Naming.modulestate_cname)\r\n```",
            "commit_id": "d96383c7c339d26f18609b18c86a2ea368233066",
            "created_at": "2020-06-23T13:49:08Z",
            "diff_hunk": "@@ -2542,117 +2527,85 @@ def generate_import_star(self, env, code):\n         code.putln(UtilityCode.load_as_string(\"ImportStar\", \"ImportExport.c\")[1])\n         code.exit_cfunc_scope()  # done with labels\n \n-    def generate_module_state_start(self, env, code):\n-        # TODO: Refactor to move module state struct decl closer to the static decl\n-        code.putln(\"#if CYTHON_USE_MODULE_STATE\")\n-        code.putln('typedef struct {')\n-        code.putln('PyObject *%s;' % Naming.builtins_cname)\n-        code.putln('PyObject *%s;' % Naming.cython_runtime_cname)\n-        code.putln('PyObject *%s;' % Naming.empty_tuple)\n-        code.putln('PyObject *%s;' % Naming.empty_bytes)\n-        code.putln('PyObject *%s;' % Naming.empty_unicode)\n+    def generate_module_state_begin(self, env, code):\n+        code.putln('static int %s;' % Naming.lineno_cname)\n+        code.putln('static int %s = 0;' % Naming.clineno_cname)\n+        code.putln('static const char * %s = %s;' % (Naming.cfilenm_cname, Naming.file_c_macro))\n+        code.putln('static const char *%s;' % Naming.filename_cname)\n+        code.putln('')\n+        code.putln('typedef struct %s {' % Naming.modulestate_type_cname)\n+        code.putln('PyObject *%s;' % env.module_dict_cname.field_name)\n+        code.putln('PyObject *%s;' % Naming.builtins_cname.field_name)\n+        code.putln('PyObject *%s;' % Naming.cython_runtime_cname.field_name)\n+        code.putln('PyObject *%s;' % Naming.empty_tuple.field_name)\n+        code.putln('PyObject *%s;' % Naming.empty_bytes.field_name)\n+        code.putln('PyObject *%s;' % Naming.empty_unicode.field_name)\n         if Options.pre_import is not None:\n             code.putln('PyObject *%s;' % Naming.preimport_cname)\n+        code.putln(\"#if CYTHON_USE_MODULE_STATE\")\n         code.putln('#ifdef __Pyx_CyFunction_USED')\n         code.putln('PyTypeObject *%s;' % Naming.cyfunction_type_cname)\n         code.putln('#endif')\n         code.putln('#ifdef __Pyx_FusedFunction_USED')\n         code.putln('PyTypeObject *%s;' % Naming.fusedfunction_type_cname)\n         code.putln('#endif')\n \n-    def generate_module_state_end(self, env, modules, globalstate):\n-        module_state = globalstate['module_state']\n-        module_state_defines = globalstate['module_state_defines']\n-        module_state_clear = globalstate['module_state_clear']\n-        module_state_traverse = globalstate['module_state_traverse']\n-        module_state.putln('} %s;' % Naming.modulestate_cname)\n-        module_state.putln('')\n-        module_state.putln('#ifdef __cplusplus')\n-        module_state.putln('namespace {')\n-        module_state.putln('extern struct PyModuleDef %s;' % Naming.pymoduledef_cname)\n-        module_state.putln('} /* anonymous namespace */')\n-        module_state.putln('#else')\n-        module_state.putln('static struct PyModuleDef %s;' % Naming.pymoduledef_cname)\n-        module_state.putln('#endif')\n-        module_state.putln('')\n-        module_state.putln('#define %s(o) ((%s *)__Pyx_PyModule_GetState(o))' % (\n-            Naming.modulestate_cname,\n-            Naming.modulestate_cname))\n-        module_state.putln('')\n-        module_state.putln('#define %s (%s(PyState_FindModule(&%s)))' % (\n-            Naming.modulestateglobal_cname,\n-            Naming.modulestate_cname,\n-            Naming.pymoduledef_cname))\n-        module_state.putln('')\n-        module_state.putln('#define %s (PyState_FindModule(&%s))' % (\n-            env.module_cname,\n-            Naming.pymoduledef_cname))\n-        module_state.putln(\"#endif\")\n-        module_state_defines.putln(\"#endif\")\n-        module_state_clear.putln(\"return 0;\")\n-        module_state_clear.putln(\"}\")\n-        module_state_clear.putln(\"#endif\")\n-        module_state_traverse.putln(\"return 0;\")\n-        module_state_traverse.putln(\"}\")\n-        module_state_traverse.putln(\"#endif\")\n-\n-    def generate_module_state_defines(self, env, code):\n+    def generate_module_state_end(self, env, code):\n+        code.putln('#endif /* CYTHON_USE_MODULE_STATE */')\n+        code.putln('} %s;' % Naming.modulestate_type_cname)\n+        code.putln('')\n+        code.putln('#if !CYTHON_USE_MODULE_STATE')\n+        code.putln('static %s %s;' % (Naming.modulestate_type_cname, Naming.modulestate_cname))\n+        code.putln('#define __Pyx_Globals() (&%s)' % (Naming.modulestate_cname))",
            "html_url": "https://github.com/cython/cython/pull/3704#discussion_r444238363",
            "id": 444238363,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIzODM2Mw==",
            "original_commit_id": "4fbfe11ff5559fdd139d6bfd49c95a95d4348b25",
            "original_line": 2559,
            "original_position": 151,
            "original_start_line": null,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": null,
            "pull_request_review_id": 435795543,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3704",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-06-25T06:21:47Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/444238363",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3704#discussion_r444244493"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3704"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/444244493"
                }
            },
            "author_association": "MEMBER",
            "body": "This suggests some kind of helper function to me. Maybe something like\r\n`code.put_clear_global(Naming.builtins_cname)` ? With a default module state target of `'clear_module_state'`, if we also need it elsewhere. Same to the `Py_VISIT()` code.",
            "commit_id": "d96383c7c339d26f18609b18c86a2ea368233066",
            "created_at": "2020-06-23T13:57:05Z",
            "diff_hunk": "@@ -2542,117 +2527,85 @@ def generate_import_star(self, env, code):\n         code.putln(UtilityCode.load_as_string(\"ImportStar\", \"ImportExport.c\")[1])\n         code.exit_cfunc_scope()  # done with labels\n \n-    def generate_module_state_start(self, env, code):\n-        # TODO: Refactor to move module state struct decl closer to the static decl\n-        code.putln(\"#if CYTHON_USE_MODULE_STATE\")\n-        code.putln('typedef struct {')\n-        code.putln('PyObject *%s;' % Naming.builtins_cname)\n-        code.putln('PyObject *%s;' % Naming.cython_runtime_cname)\n-        code.putln('PyObject *%s;' % Naming.empty_tuple)\n-        code.putln('PyObject *%s;' % Naming.empty_bytes)\n-        code.putln('PyObject *%s;' % Naming.empty_unicode)\n+    def generate_module_state_begin(self, env, code):\n+        code.putln('static int %s;' % Naming.lineno_cname)\n+        code.putln('static int %s = 0;' % Naming.clineno_cname)\n+        code.putln('static const char * %s = %s;' % (Naming.cfilenm_cname, Naming.file_c_macro))\n+        code.putln('static const char *%s;' % Naming.filename_cname)\n+        code.putln('')\n+        code.putln('typedef struct %s {' % Naming.modulestate_type_cname)\n+        code.putln('PyObject *%s;' % env.module_dict_cname.field_name)\n+        code.putln('PyObject *%s;' % Naming.builtins_cname.field_name)\n+        code.putln('PyObject *%s;' % Naming.cython_runtime_cname.field_name)\n+        code.putln('PyObject *%s;' % Naming.empty_tuple.field_name)\n+        code.putln('PyObject *%s;' % Naming.empty_bytes.field_name)\n+        code.putln('PyObject *%s;' % Naming.empty_unicode.field_name)\n         if Options.pre_import is not None:\n             code.putln('PyObject *%s;' % Naming.preimport_cname)\n+        code.putln(\"#if CYTHON_USE_MODULE_STATE\")\n         code.putln('#ifdef __Pyx_CyFunction_USED')\n         code.putln('PyTypeObject *%s;' % Naming.cyfunction_type_cname)\n         code.putln('#endif')\n         code.putln('#ifdef __Pyx_FusedFunction_USED')\n         code.putln('PyTypeObject *%s;' % Naming.fusedfunction_type_cname)\n         code.putln('#endif')\n \n-    def generate_module_state_end(self, env, modules, globalstate):\n-        module_state = globalstate['module_state']\n-        module_state_defines = globalstate['module_state_defines']\n-        module_state_clear = globalstate['module_state_clear']\n-        module_state_traverse = globalstate['module_state_traverse']\n-        module_state.putln('} %s;' % Naming.modulestate_cname)\n-        module_state.putln('')\n-        module_state.putln('#ifdef __cplusplus')\n-        module_state.putln('namespace {')\n-        module_state.putln('extern struct PyModuleDef %s;' % Naming.pymoduledef_cname)\n-        module_state.putln('} /* anonymous namespace */')\n-        module_state.putln('#else')\n-        module_state.putln('static struct PyModuleDef %s;' % Naming.pymoduledef_cname)\n-        module_state.putln('#endif')\n-        module_state.putln('')\n-        module_state.putln('#define %s(o) ((%s *)__Pyx_PyModule_GetState(o))' % (\n-            Naming.modulestate_cname,\n-            Naming.modulestate_cname))\n-        module_state.putln('')\n-        module_state.putln('#define %s (%s(PyState_FindModule(&%s)))' % (\n-            Naming.modulestateglobal_cname,\n-            Naming.modulestate_cname,\n-            Naming.pymoduledef_cname))\n-        module_state.putln('')\n-        module_state.putln('#define %s (PyState_FindModule(&%s))' % (\n-            env.module_cname,\n-            Naming.pymoduledef_cname))\n-        module_state.putln(\"#endif\")\n-        module_state_defines.putln(\"#endif\")\n-        module_state_clear.putln(\"return 0;\")\n-        module_state_clear.putln(\"}\")\n-        module_state_clear.putln(\"#endif\")\n-        module_state_traverse.putln(\"return 0;\")\n-        module_state_traverse.putln(\"}\")\n-        module_state_traverse.putln(\"#endif\")\n-\n-    def generate_module_state_defines(self, env, code):\n+    def generate_module_state_end(self, env, code):\n+        code.putln('#endif /* CYTHON_USE_MODULE_STATE */')\n+        code.putln('} %s;' % Naming.modulestate_type_cname)\n+        code.putln('')\n+        code.putln('#if !CYTHON_USE_MODULE_STATE')\n+        code.putln('static %s %s;' % (Naming.modulestate_type_cname, Naming.modulestate_cname))\n+        code.putln('#define __Pyx_Globals() (&%s)' % (Naming.modulestate_cname))\n+        code.putln('static PyObject *%s;' % env.module_cname)\n+        code.putln('#else')\n+        code.putln('/* Module def forward declaration */')\n+        code.putln('#ifdef __cplusplus')\n+        code.putln('namespace {')\n+        code.putln('  extern struct PyModuleDef %s;' % Naming.pymoduledef_cname)\n+        code.putln('} /* anonymous namespace */')\n+        code.putln('#else')\n+        code.putln('static struct PyModuleDef %s;' % Naming.pymoduledef_cname)\n+        code.putln('#endif')\n+        code.putln('#define %s (PyState_FindModule(&%s))' % (env.module_cname, Naming.pymoduledef_cname))\n+        code.putln('#define __Pyx_ModuleState(m) ((%s *)__Pyx_PyModule_GetState(m))' %\n+                   Naming.modulestate_type_cname)\n+        code.putln('#define __Pyx_Globals() __Pyx_ModuleState(%s)' % env.module_cname)\n+        code.putln('#endif')\n+\n+    def generate_module_state_defines_begin(self, env, code):\n         code.putln(\"#if CYTHON_USE_MODULE_STATE\")\n-        code.putln('#define %s %s->%s' % (\n-            Naming.builtins_cname,\n-            Naming.modulestateglobal_cname,\n-            Naming.builtins_cname))\n-        code.putln('#define %s %s->%s' % (\n-            Naming.cython_runtime_cname,\n-            Naming.modulestateglobal_cname,\n-            Naming.cython_runtime_cname))\n-        code.putln('#define %s %s->%s' % (\n-            Naming.empty_tuple,\n-            Naming.modulestateglobal_cname,\n-            Naming.empty_tuple))\n-        code.putln('#define %s %s->%s' % (\n-            Naming.empty_bytes,\n-            Naming.modulestateglobal_cname,\n-            Naming.empty_bytes))\n-        code.putln('#define %s %s->%s' % (\n-            Naming.empty_unicode,\n-            Naming.modulestateglobal_cname,\n-            Naming.empty_unicode))\n-        if Options.pre_import is not None:\n-            code.putln('#define %s %s->%s' % (\n-                Naming.preimport_cname,\n-                Naming.modulestateglobal_cname,\n-                Naming.preimport_cname))\n         code.putln('#ifdef __Pyx_CyFunction_USED')\n-        code.putln('#define %s %s->%s' % (\n+        code.putln('#define %s __Pyx_Globals()->%s' % (\n             Naming.cyfunction_type_cname,\n-            Naming.modulestateglobal_cname,\n             Naming.cyfunction_type_cname))\n         code.putln('#endif')\n         code.putln('#ifdef __Pyx_FusedFunction_USED')\n-        code.putln('#define %s %s->%s' %\n+        code.putln('#define %s __Pyx_Globals()->%s' %\n             (Naming.fusedfunction_type_cname,\n-            Naming.modulestateglobal_cname,\n             Naming.fusedfunction_type_cname))\n         code.putln('#endif')\n \n-    def generate_module_state_clear(self, env, code):\n+    def generate_module_state_defines_end(self, env, code):\n+        code.putln(\"#endif /* CYTHON_USE_MODULE_STATE */\")\n+\n+    def generate_module_state_clear_begin(self, env, code):\n         code.putln(\"#if CYTHON_USE_MODULE_STATE\")\n         code.putln(\"static int %s_clear(PyObject *m) {\" % Naming.module_cname)\n-        code.putln(\"%s *clear_module_state = %s(m);\" % (\n-            Naming.modulestate_cname,\n-            Naming.modulestate_cname))\n+        code.putln(\"%s *clear_module_state = __Pyx_ModuleState(m);\" % Naming.modulestate_type_cname)\n         code.putln(\"if (!clear_module_state) return 0;\")\n         code.putln('Py_CLEAR(clear_module_state->%s);' %\n-            Naming.builtins_cname)\n+            env.module_dict_cname.field_name)\n+        code.putln('Py_CLEAR(clear_module_state->%s);' %\n+            Naming.builtins_cname.field_name)",
            "html_url": "https://github.com/cython/cython/pull/3704#discussion_r444244493",
            "id": 444244493,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI0NDQ5Mw==",
            "original_commit_id": "4fbfe11ff5559fdd139d6bfd49c95a95d4348b25",
            "original_line": 2600,
            "original_position": 226,
            "original_start_line": 2599,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": null,
            "pull_request_review_id": 435795543,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3704",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2020-06-25T06:21:47Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/444244493",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3704#discussion_r444245523"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3704"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/444245523"
                }
            },
            "author_association": "MEMBER",
            "body": "I like this idea. Seems worth using wherever we deal with global names then. Not sure about the `__str__()` behaviour  – might make the formatting a bit too implicit in some cases. Can't say right now. We could also make this inherit from `str` instead, just with the added property …? That would make it clearer what the intended usage is.\r\n\r\n(Otherwise, it should inherit from `object` to make it a new-style class in Py2.)",
            "commit_id": "d96383c7c339d26f18609b18c86a2ea368233066",
            "created_at": "2020-06-23T13:58:23Z",
            "diff_hunk": "@@ -73,6 +73,24 @@\n     'umethod': pyrex_prefix + \"umethod_\",\n }\n \n+\n+class Global:",
            "html_url": "https://github.com/cython/cython/pull/3704#discussion_r444245523",
            "id": 444245523,
            "line": 77,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI0NTUyMw==",
            "original_commit_id": "4fbfe11ff5559fdd139d6bfd49c95a95d4348b25",
            "original_line": 77,
            "original_position": 5,
            "original_start_line": null,
            "path": "Cython/Compiler/Naming.py",
            "position": 5,
            "pull_request_review_id": 435795543,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3704",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-06-25T06:21:47Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/444245523",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3704#discussion_r445469202"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3704"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/445469202"
                }
            },
            "author_association": "MEMBER",
            "body": "A better name for this property is `cname`, since it's the name that ends up in the C code and not the Python level name.",
            "commit_id": "d96383c7c339d26f18609b18c86a2ea368233066",
            "created_at": "2020-06-25T10:45:03Z",
            "diff_hunk": "@@ -73,6 +73,23 @@\n     'umethod': pyrex_prefix + \"umethod_\",\n }\n \n+\n+class Global:\n+    def __init__(self, name):\n+        self._name = name\n+        self._expr = \"__Pyx_Globals()->%s\" % self._name\n+\n+    @property\n+    def name(self):",
            "html_url": "https://github.com/cython/cython/pull/3704#discussion_r445469202",
            "id": 445469202,
            "line": 83,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ2OTIwMg==",
            "original_commit_id": "5478b13aaf20815035112ee97222480ba05694e1",
            "original_line": 83,
            "original_position": 11,
            "original_start_line": null,
            "path": "Cython/Compiler/Naming.py",
            "position": 11,
            "pull_request_review_id": 437376129,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3704",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-06-25T11:13:30Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/445469202",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3704#discussion_r445473318"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3704"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/445473318"
                }
            },
            "author_association": "MEMBER",
            "body": "I actually liked the idea in your original change set of using a dict for this. The `Global` could also know its specific preprocessor guard, if any. I would then use an `OrderedDict` to get deterministic output also in Py<3.6 whenever we generate something generic for this dict.",
            "commit_id": "d96383c7c339d26f18609b18c86a2ea368233066",
            "created_at": "2020-06-25T10:53:24Z",
            "diff_hunk": "@@ -150,8 +150,15 @@ def __repr__(self):\n obj_dict_version_temp = pyrex_prefix + \"obj_dict_version\"\n type_dict_guard_temp = pyrex_prefix + \"typedict_guard\"\n cython_runtime_cname = Global(\"cython_runtime\")\n-cyfunction_type_cname = pyrex_prefix + \"CyFunctionType\"\n-fusedfunction_type_cname = pyrex_prefix + \"FusedFunctionType\"\n+asyncgen_type_cname = Global(\"AsyncGenType\")\n+asyncgen_asend_type_cname = Global(\"AsyncGenASendType\")\n+asyncgen_athrow_type_cname = Global(\"AsyncGenAThrowType\")\n+asyncgen_wrapped_value_type_cname = Global(\"AsyncGenWrappedValueType\")\n+coroutine_type_cname = Global(\"CoroutineType\")\n+coroutine_await_type_cname = Global(\"CoroutineAwaitType\")\n+cyfunction_type_cname = Global(\"CyFunctionType\")\n+fusedfunction_type_cname = Global(\"FusedFunctionType\")\n+generator_type_cname = Global(\"GeneratorType\")",
            "html_url": "https://github.com/cython/cython/pull/3704#discussion_r445473318",
            "id": 445473318,
            "line": 161,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ3MzMxOA==",
            "original_commit_id": "d96383c7c339d26f18609b18c86a2ea368233066",
            "original_line": 161,
            "original_position": 14,
            "original_start_line": 153,
            "path": "Cython/Compiler/Naming.py",
            "position": 75,
            "pull_request_review_id": 437376129,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3704",
            "side": "RIGHT",
            "start_line": 153,
            "start_side": "RIGHT",
            "updated_at": "2020-06-25T11:13:30Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/445473318",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3704#discussion_r445475536"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3704"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/445475536"
                }
            },
            "author_association": "MEMBER",
            "body": "I think we should have macros `__Pyx_GetCGlobal(name)` and `__Pyx_SetCGlobal(name, value)`. I don't see why we should require usages to take care of the pointer dereference (if any), nor require them to know if the name is `__Pyx_…` escaped or not. We could even go back to static global names quite easily that way, if we ever want to, or insert assertions and what not.\r\n\r\nWhile we're at it, we could also distinguish between Python object variables (which require ref-counting) and bare C variables, e.g. with alias macro names `__Pyx_[GS]etPyCGlobal(name)`. That might improve the readability of the C code and would allow us to use different assertions on Python variables or inject the ref-counting into the macros at some point, or … I don't know. Globals with Python and C types really seem different enough to use different names for them.\r\n\r\n(Note: Global names in the Python module dict are an entirely different thing and not meant here. That should also become clear from the naming.)",
            "commit_id": "d96383c7c339d26f18609b18c86a2ea368233066",
            "created_at": "2020-06-25T10:58:15Z",
            "diff_hunk": "@@ -2565,71 +2551,38 @@ def generate_module_state_begin(self, env, code):\n         code.putln('#endif')\n \n     def generate_module_state_end(self, env, code):\n-        code.putln('} %s;' % Naming.modulestate_cname)\n+        code.putln('#endif /* CYTHON_USE_MODULE_STATE */')\n+        code.putln('} %s;' % Naming.modulestate_type_cname)\n         code.putln('')\n+        code.putln('#if !CYTHON_USE_MODULE_STATE')\n+        code.putln('static %s %s;' % (Naming.modulestate_type_cname, Naming.modulestate_cname))\n+        code.putln('#define __Pyx_Globals() (&%s)' % Naming.modulestate_cname)",
            "html_url": "https://github.com/cython/cython/pull/3704#discussion_r445475536",
            "id": 445475536,
            "line": 2572,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ3NTUzNg==",
            "original_commit_id": "5478b13aaf20815035112ee97222480ba05694e1",
            "original_line": 2559,
            "original_position": 86,
            "original_start_line": null,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": 197,
            "pull_request_review_id": 437376129,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3704",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-06-25T11:13:30Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/445475536",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3704#discussion_r445477134"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3704"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/445477134"
                }
            },
            "author_association": "MEMBER",
            "body": "Why was this function moved down?",
            "commit_id": "d96383c7c339d26f18609b18c86a2ea368233066",
            "created_at": "2020-06-25T11:01:38Z",
            "diff_hunk": "@@ -170,6 +156,20 @@ typedef struct {\n #define _PyAsyncGen_MAXFREELIST 80\n #endif\n \n+static __pyx_CoroutineObject *__Pyx_AsyncGen_New(",
            "html_url": "https://github.com/cython/cython/pull/3704#discussion_r445477134",
            "id": 445477134,
            "line": 159,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ3NzEzNA==",
            "original_commit_id": "d96383c7c339d26f18609b18c86a2ea368233066",
            "original_line": 159,
            "original_position": 44,
            "original_start_line": null,
            "path": "Cython/Utility/AsyncGen.c",
            "position": 44,
            "pull_request_review_id": 437376129,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3704",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-06-25T11:13:30Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/445477134",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/cython/cython/issues/3704/comments",
    "commit_data": [
        {
            "author": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/71571?v=4",
                "events_url": "https://api.github.com/users/MatzeB/events{/privacy}",
                "followers_url": "https://api.github.com/users/MatzeB/followers",
                "following_url": "https://api.github.com/users/MatzeB/following{/other_user}",
                "gists_url": "https://api.github.com/users/MatzeB/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MatzeB",
                "id": 71571,
                "login": "MatzeB",
                "node_id": "MDQ6VXNlcjcxNTcx",
                "organizations_url": "https://api.github.com/users/MatzeB/orgs",
                "received_events_url": "https://api.github.com/users/MatzeB/received_events",
                "repos_url": "https://api.github.com/users/MatzeB/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MatzeB/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MatzeB/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MatzeB"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/3c9749219e03c3893b6ae66745873c1c41cc5679/comments",
            "commit": {
                "author": {
                    "date": "2020-06-23T00:22:11Z",
                    "email": "matze@braunis.de",
                    "name": "Matthias Braun"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-06-23T00:29:35Z",
                    "email": "matze@braunis.de",
                    "name": "Matthias Braun"
                },
                "message": "Refact module state code",
                "tree": {
                    "sha": "e2cf365573cf68832aaefc0e08009a9a4fa3add7",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/e2cf365573cf68832aaefc0e08009a9a4fa3add7"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/3c9749219e03c3893b6ae66745873c1c41cc5679",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/71571?v=4",
                "events_url": "https://api.github.com/users/MatzeB/events{/privacy}",
                "followers_url": "https://api.github.com/users/MatzeB/followers",
                "following_url": "https://api.github.com/users/MatzeB/following{/other_user}",
                "gists_url": "https://api.github.com/users/MatzeB/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MatzeB",
                "id": 71571,
                "login": "MatzeB",
                "node_id": "MDQ6VXNlcjcxNTcx",
                "organizations_url": "https://api.github.com/users/MatzeB/orgs",
                "received_events_url": "https://api.github.com/users/MatzeB/received_events",
                "repos_url": "https://api.github.com/users/MatzeB/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MatzeB/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MatzeB/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MatzeB"
            },
            "html_url": "https://github.com/cython/cython/commit/3c9749219e03c3893b6ae66745873c1c41cc5679",
            "node_id": "MDY6Q29tbWl0MjczMzI0NjQ5OjNjOTc0OTIxOWUwM2MzODkzYjZhZTY2NzQ1ODczYzFjNDFjYzU2Nzk=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/8fd9ea55ea08b45c521ea4fbd27d437b35de1b44",
                    "sha": "8fd9ea55ea08b45c521ea4fbd27d437b35de1b44",
                    "url": "https://api.github.com/repos/cython/cython/commits/8fd9ea55ea08b45c521ea4fbd27d437b35de1b44"
                }
            ],
            "sha": "3c9749219e03c3893b6ae66745873c1c41cc5679",
            "url": "https://api.github.com/repos/cython/cython/commits/3c9749219e03c3893b6ae66745873c1c41cc5679"
        },
        {
            "author": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/71571?v=4",
                "events_url": "https://api.github.com/users/MatzeB/events{/privacy}",
                "followers_url": "https://api.github.com/users/MatzeB/followers",
                "following_url": "https://api.github.com/users/MatzeB/following{/other_user}",
                "gists_url": "https://api.github.com/users/MatzeB/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MatzeB",
                "id": 71571,
                "login": "MatzeB",
                "node_id": "MDQ6VXNlcjcxNTcx",
                "organizations_url": "https://api.github.com/users/MatzeB/orgs",
                "received_events_url": "https://api.github.com/users/MatzeB/received_events",
                "repos_url": "https://api.github.com/users/MatzeB/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MatzeB/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MatzeB/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MatzeB"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/6308d90921a4b456f151aa4d9faf138feeb88d01/comments",
            "commit": {
                "author": {
                    "date": "2020-06-23T01:48:43Z",
                    "email": "matze@braunis.de",
                    "name": "Matthias Braun"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-06-23T02:45:12Z",
                    "email": "matze@braunis.de",
                    "name": "Matthias Braun"
                },
                "message": "Keep reference to module dict around in limited mode\n\n`PyModule_GetDict` is part of the limited API so we can keep a reference\nto the module dict around regardless of limited mode being enabled or\nnot.",
                "tree": {
                    "sha": "a742c82551f21e672df109cd6e2550551046f028",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/a742c82551f21e672df109cd6e2550551046f028"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/6308d90921a4b456f151aa4d9faf138feeb88d01",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/71571?v=4",
                "events_url": "https://api.github.com/users/MatzeB/events{/privacy}",
                "followers_url": "https://api.github.com/users/MatzeB/followers",
                "following_url": "https://api.github.com/users/MatzeB/following{/other_user}",
                "gists_url": "https://api.github.com/users/MatzeB/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MatzeB",
                "id": 71571,
                "login": "MatzeB",
                "node_id": "MDQ6VXNlcjcxNTcx",
                "organizations_url": "https://api.github.com/users/MatzeB/orgs",
                "received_events_url": "https://api.github.com/users/MatzeB/received_events",
                "repos_url": "https://api.github.com/users/MatzeB/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MatzeB/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MatzeB/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MatzeB"
            },
            "html_url": "https://github.com/cython/cython/commit/6308d90921a4b456f151aa4d9faf138feeb88d01",
            "node_id": "MDY6Q29tbWl0MjczMzI0NjQ5OjYzMDhkOTA5MjFhNGI0NTZmMTUxYWE0ZDlmYWYxMzhmZWViODhkMDE=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/3c9749219e03c3893b6ae66745873c1c41cc5679",
                    "sha": "3c9749219e03c3893b6ae66745873c1c41cc5679",
                    "url": "https://api.github.com/repos/cython/cython/commits/3c9749219e03c3893b6ae66745873c1c41cc5679"
                }
            ],
            "sha": "6308d90921a4b456f151aa4d9faf138feeb88d01",
            "url": "https://api.github.com/repos/cython/cython/commits/6308d90921a4b456f151aa4d9faf138feeb88d01"
        },
        {
            "author": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/71571?v=4",
                "events_url": "https://api.github.com/users/MatzeB/events{/privacy}",
                "followers_url": "https://api.github.com/users/MatzeB/followers",
                "following_url": "https://api.github.com/users/MatzeB/following{/other_user}",
                "gists_url": "https://api.github.com/users/MatzeB/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MatzeB",
                "id": 71571,
                "login": "MatzeB",
                "node_id": "MDQ6VXNlcjcxNTcx",
                "organizations_url": "https://api.github.com/users/MatzeB/orgs",
                "received_events_url": "https://api.github.com/users/MatzeB/received_events",
                "repos_url": "https://api.github.com/users/MatzeB/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MatzeB/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MatzeB/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MatzeB"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/5478b13aaf20815035112ee97222480ba05694e1/comments",
            "commit": {
                "author": {
                    "date": "2020-06-23T00:23:14Z",
                    "email": "matze@braunis.de",
                    "name": "Matthias Braun"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-06-25T05:34:07Z",
                    "email": "matze@braunis.de",
                    "name": "Matthias Braun"
                },
                "message": "Modulestate in struct prototype",
                "tree": {
                    "sha": "a5c3024698a3c71ce4a352029fdc9a6857d06815",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/a5c3024698a3c71ce4a352029fdc9a6857d06815"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/5478b13aaf20815035112ee97222480ba05694e1",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/71571?v=4",
                "events_url": "https://api.github.com/users/MatzeB/events{/privacy}",
                "followers_url": "https://api.github.com/users/MatzeB/followers",
                "following_url": "https://api.github.com/users/MatzeB/following{/other_user}",
                "gists_url": "https://api.github.com/users/MatzeB/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MatzeB",
                "id": 71571,
                "login": "MatzeB",
                "node_id": "MDQ6VXNlcjcxNTcx",
                "organizations_url": "https://api.github.com/users/MatzeB/orgs",
                "received_events_url": "https://api.github.com/users/MatzeB/received_events",
                "repos_url": "https://api.github.com/users/MatzeB/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MatzeB/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MatzeB/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MatzeB"
            },
            "html_url": "https://github.com/cython/cython/commit/5478b13aaf20815035112ee97222480ba05694e1",
            "node_id": "MDY6Q29tbWl0MjczMzI0NjQ5OjU0NzhiMTNhYWYyMDgxNTAzNTExMmVlOTcyMjI0ODBiYTA1Njk0ZTE=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/6308d90921a4b456f151aa4d9faf138feeb88d01",
                    "sha": "6308d90921a4b456f151aa4d9faf138feeb88d01",
                    "url": "https://api.github.com/repos/cython/cython/commits/6308d90921a4b456f151aa4d9faf138feeb88d01"
                }
            ],
            "sha": "5478b13aaf20815035112ee97222480ba05694e1",
            "url": "https://api.github.com/repos/cython/cython/commits/5478b13aaf20815035112ee97222480ba05694e1"
        },
        {
            "author": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/71571?v=4",
                "events_url": "https://api.github.com/users/MatzeB/events{/privacy}",
                "followers_url": "https://api.github.com/users/MatzeB/followers",
                "following_url": "https://api.github.com/users/MatzeB/following{/other_user}",
                "gists_url": "https://api.github.com/users/MatzeB/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MatzeB",
                "id": 71571,
                "login": "MatzeB",
                "node_id": "MDQ6VXNlcjcxNTcx",
                "organizations_url": "https://api.github.com/users/MatzeB/orgs",
                "received_events_url": "https://api.github.com/users/MatzeB/received_events",
                "repos_url": "https://api.github.com/users/MatzeB/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MatzeB/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MatzeB/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MatzeB"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/d96383c7c339d26f18609b18c86a2ea368233066/comments",
            "commit": {
                "author": {
                    "date": "2020-06-25T05:37:36Z",
                    "email": "matze@braunis.de",
                    "name": "Matthias Braun"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-06-25T06:16:02Z",
                    "email": "matze@braunis.de",
                    "name": "Matthias Braun"
                },
                "message": "Move cython specific types into module state",
                "tree": {
                    "sha": "6f4f69bd2db9c20f25b484a1f71b295350b19e08",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/6f4f69bd2db9c20f25b484a1f71b295350b19e08"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/d96383c7c339d26f18609b18c86a2ea368233066",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/71571?v=4",
                "events_url": "https://api.github.com/users/MatzeB/events{/privacy}",
                "followers_url": "https://api.github.com/users/MatzeB/followers",
                "following_url": "https://api.github.com/users/MatzeB/following{/other_user}",
                "gists_url": "https://api.github.com/users/MatzeB/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MatzeB",
                "id": 71571,
                "login": "MatzeB",
                "node_id": "MDQ6VXNlcjcxNTcx",
                "organizations_url": "https://api.github.com/users/MatzeB/orgs",
                "received_events_url": "https://api.github.com/users/MatzeB/received_events",
                "repos_url": "https://api.github.com/users/MatzeB/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MatzeB/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MatzeB/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MatzeB"
            },
            "html_url": "https://github.com/cython/cython/commit/d96383c7c339d26f18609b18c86a2ea368233066",
            "node_id": "MDY6Q29tbWl0MjczMzI0NjQ5OmQ5NjM4M2M3YzMzOWQyNmYxODYwOWIxOGM4NmEyZWEzNjgyMzMwNjY=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/5478b13aaf20815035112ee97222480ba05694e1",
                    "sha": "5478b13aaf20815035112ee97222480ba05694e1",
                    "url": "https://api.github.com/repos/cython/cython/commits/5478b13aaf20815035112ee97222480ba05694e1"
                }
            ],
            "sha": "d96383c7c339d26f18609b18c86a2ea368233066",
            "url": "https://api.github.com/repos/cython/cython/commits/d96383c7c339d26f18609b18c86a2ea368233066"
        }
    ],
    "commits_url": "https://api.github.com/repos/cython/cython/pulls/3704/commits",
    "created_at": "2020-06-23T02:13:08Z",
    "diff_url": "https://github.com/cython/cython/pull/3704.diff",
    "draft": false,
    "head": {
        "label": "MatzeB:modulestate_struct",
        "ref": "modulestate_struct",
        "repo": {
            "archive_url": "https://api.github.com/repos/MatzeB/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/MatzeB/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/MatzeB/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/MatzeB/cython/branches{/branch}",
            "clone_url": "https://github.com/MatzeB/cython.git",
            "collaborators_url": "https://api.github.com/repos/MatzeB/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/MatzeB/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/MatzeB/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/MatzeB/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/MatzeB/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/MatzeB/cython/contributors",
            "created_at": "2020-06-18T19:36:21Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/MatzeB/cython/deployments",
            "description": "Fork to work on limited API (aka PEP384 / stable ABI) support",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/MatzeB/cython/downloads",
            "events_url": "https://api.github.com/repos/MatzeB/cython/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/MatzeB/cython/forks",
            "full_name": "MatzeB/cython",
            "git_commits_url": "https://api.github.com/repos/MatzeB/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/MatzeB/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/MatzeB/cython/git/tags{/sha}",
            "git_url": "git://github.com/MatzeB/cython.git",
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://cython.org",
            "hooks_url": "https://api.github.com/repos/MatzeB/cython/hooks",
            "html_url": "https://github.com/MatzeB/cython",
            "id": 273324649,
            "issue_comment_url": "https://api.github.com/repos/MatzeB/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/MatzeB/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/MatzeB/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/MatzeB/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/MatzeB/cython/labels{/name}",
            "language": null,
            "languages_url": "https://api.github.com/repos/MatzeB/cython/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/MatzeB/cython/merges",
            "milestones_url": "https://api.github.com/repos/MatzeB/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkyNzMzMjQ2NDk=",
            "notifications_url": "https://api.github.com/repos/MatzeB/cython/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/71571?v=4",
                "events_url": "https://api.github.com/users/MatzeB/events{/privacy}",
                "followers_url": "https://api.github.com/users/MatzeB/followers",
                "following_url": "https://api.github.com/users/MatzeB/following{/other_user}",
                "gists_url": "https://api.github.com/users/MatzeB/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MatzeB",
                "id": 71571,
                "login": "MatzeB",
                "node_id": "MDQ6VXNlcjcxNTcx",
                "organizations_url": "https://api.github.com/users/MatzeB/orgs",
                "received_events_url": "https://api.github.com/users/MatzeB/received_events",
                "repos_url": "https://api.github.com/users/MatzeB/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MatzeB/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MatzeB/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MatzeB"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/MatzeB/cython/pulls{/number}",
            "pushed_at": "2020-06-25T06:21:45Z",
            "releases_url": "https://api.github.com/repos/MatzeB/cython/releases{/id}",
            "size": 59791,
            "ssh_url": "git@github.com:MatzeB/cython.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/MatzeB/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/MatzeB/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/MatzeB/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/MatzeB/cython/subscription",
            "svn_url": "https://github.com/MatzeB/cython",
            "tags_url": "https://api.github.com/repos/MatzeB/cython/tags",
            "teams_url": "https://api.github.com/repos/MatzeB/cython/teams",
            "trees_url": "https://api.github.com/repos/MatzeB/cython/git/trees{/sha}",
            "updated_at": "2020-06-18T19:37:14Z",
            "url": "https://api.github.com/repos/MatzeB/cython",
            "watchers": 0,
            "watchers_count": 0
        },
        "sha": "d96383c7c339d26f18609b18c86a2ea368233066",
        "user": {
            "avatar_url": "https://avatars2.githubusercontent.com/u/71571?v=4",
            "events_url": "https://api.github.com/users/MatzeB/events{/privacy}",
            "followers_url": "https://api.github.com/users/MatzeB/followers",
            "following_url": "https://api.github.com/users/MatzeB/following{/other_user}",
            "gists_url": "https://api.github.com/users/MatzeB/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/MatzeB",
            "id": 71571,
            "login": "MatzeB",
            "node_id": "MDQ6VXNlcjcxNTcx",
            "organizations_url": "https://api.github.com/users/MatzeB/orgs",
            "received_events_url": "https://api.github.com/users/MatzeB/received_events",
            "repos_url": "https://api.github.com/users/MatzeB/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/MatzeB/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/MatzeB/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/MatzeB"
        }
    },
    "html_url": "https://github.com/cython/cython/pull/3704",
    "id": 438270849,
    "issue_url": "https://api.github.com/repos/cython/cython/issues/3704",
    "labels": [],
    "locked": false,
    "merge_commit_sha": "1f9ab9f9812eadbdd711b37960c973f4278150c2",
    "merged_at": null,
    "milestone": null,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NDM4MjcwODQ5",
    "number": 3704,
    "patch_url": "https://github.com/cython/cython/pull/3704.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/cython/cython/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/cython/cython/pulls/3704/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/cython/cython/statuses/d96383c7c339d26f18609b18c86a2ea368233066",
    "title": "RFC: Modulestate struct",
    "updated_at": "2020-06-25T11:13:30Z",
    "url": "https://api.github.com/repos/cython/cython/pulls/3704",
    "user": {
        "avatar_url": "https://avatars2.githubusercontent.com/u/71571?v=4",
        "events_url": "https://api.github.com/users/MatzeB/events{/privacy}",
        "followers_url": "https://api.github.com/users/MatzeB/followers",
        "following_url": "https://api.github.com/users/MatzeB/following{/other_user}",
        "gists_url": "https://api.github.com/users/MatzeB/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/MatzeB",
        "id": 71571,
        "login": "MatzeB",
        "node_id": "MDQ6VXNlcjcxNTcx",
        "organizations_url": "https://api.github.com/users/MatzeB/orgs",
        "received_events_url": "https://api.github.com/users/MatzeB/received_events",
        "repos_url": "https://api.github.com/users/MatzeB/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/MatzeB/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/MatzeB/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/MatzeB"
    }
}