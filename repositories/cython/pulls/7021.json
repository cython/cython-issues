{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/cython/cython/issues/7021/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/cython/cython/pulls/7021/commits"
        },
        "html": {
            "href": "https://github.com/cython/cython/pull/7021"
        },
        "issue": {
            "href": "https://api.github.com/repos/cython/cython/issues/7021"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/cython/cython/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/cython/cython/pulls/7021/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/cython/cython/pulls/7021"
        },
        "statuses": {
            "href": "https://api.github.com/repos/cython/cython/statuses/662dfad664c7a7f77e29ac28083ff75065170815"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": {
        "commit_message": "In addition to just \"returning literals\", also avoid creating a\ntraceback for a lot of simple assignments, and some safe variable reads.\n\nFollow up to https://github.com/cython/cython/pull/6602 covering a few\nmore cases that I believe it's possible to reason about.",
        "commit_title": "Avoid creating traceback in more except clauses (#7021)",
        "enabled_by": {
            "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
            "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
            "followers_url": "https://api.github.com/users/da-woods/followers",
            "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
            "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/da-woods",
            "id": 10536947,
            "login": "da-woods",
            "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
            "organizations_url": "https://api.github.com/users/da-woods/orgs",
            "received_events_url": "https://api.github.com/users/da-woods/received_events",
            "repos_url": "https://api.github.com/users/da-woods/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/da-woods",
            "user_view_type": "public"
        },
        "merge_method": "squash"
    },
    "base": {
        "label": "cython:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/cython/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/cython/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/cython/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/cython/cython/branches{/branch}",
            "clone_url": "https://github.com/cython/cython.git",
            "collaborators_url": "https://api.github.com/repos/cython/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/cython/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/cython/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/cython/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/cython/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/cython/cython/contributors",
            "created_at": "2010-11-21T07:44:20Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/cython/cython/deployments",
            "description": "The most widely used Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/cython/cython/downloads",
            "events_url": "https://api.github.com/repos/cython/cython/events",
            "fork": false,
            "forks": 1536,
            "forks_count": 1536,
            "forks_url": "https://api.github.com/repos/cython/cython/forks",
            "full_name": "cython/cython",
            "git_commits_url": "https://api.github.com/repos/cython/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/cython/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/cython/cython/git/tags{/sha}",
            "git_url": "git://github.com/cython/cython.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": false,
            "has_wiki": true,
            "homepage": "https://cython.org",
            "hooks_url": "https://api.github.com/repos/cython/cython/hooks",
            "html_url": "https://github.com/cython/cython",
            "id": 1099265,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/cython/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/cython/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/cython/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/cython/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/cython/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/cython/cython/languages",
            "license": {
                "key": "apache-2.0",
                "name": "Apache License 2.0",
                "node_id": "MDc6TGljZW5zZTI=",
                "spdx_id": "Apache-2.0",
                "url": "https://api.github.com/licenses/apache-2.0"
            },
            "merges_url": "https://api.github.com/repos/cython/cython/merges",
            "milestones_url": "https://api.github.com/repos/cython/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkxMDk5MjY1",
            "notifications_url": "https://api.github.com/repos/cython/cython/notifications{?since,all,participating}",
            "open_issues": 1444,
            "open_issues_count": 1444,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/486082?v=4",
                "events_url": "https://api.github.com/users/cython/events{/privacy}",
                "followers_url": "https://api.github.com/users/cython/followers",
                "following_url": "https://api.github.com/users/cython/following{/other_user}",
                "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/cython",
                "id": 486082,
                "login": "cython",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
                "organizations_url": "https://api.github.com/users/cython/orgs",
                "received_events_url": "https://api.github.com/users/cython/received_events",
                "repos_url": "https://api.github.com/users/cython/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/cython",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/cython/cython/pulls{/number}",
            "pushed_at": "2025-07-22T09:40:55Z",
            "releases_url": "https://api.github.com/repos/cython/cython/releases{/id}",
            "size": 76135,
            "ssh_url": "git@github.com:cython/cython.git",
            "stargazers_count": 10157,
            "stargazers_url": "https://api.github.com/repos/cython/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/cython/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/cython/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/cython/cython/subscription",
            "svn_url": "https://github.com/cython/cython",
            "tags_url": "https://api.github.com/repos/cython/cython/tags",
            "teams_url": "https://api.github.com/repos/cython/cython/teams",
            "topics": [
                "big-data",
                "c",
                "cpp",
                "cpython",
                "cpython-extensions",
                "cython",
                "performance",
                "python"
            ],
            "trees_url": "https://api.github.com/repos/cython/cython/git/trees{/sha}",
            "updated_at": "2025-07-22T13:01:41Z",
            "url": "https://api.github.com/repos/cython/cython",
            "visibility": "public",
            "watchers": 10157,
            "watchers_count": 10157,
            "web_commit_signoff_required": false
        },
        "sha": "e53273edc7c0eb1a4ab461ad8facdc27d8a2ece4",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/486082?v=4",
            "events_url": "https://api.github.com/users/cython/events{/privacy}",
            "followers_url": "https://api.github.com/users/cython/followers",
            "following_url": "https://api.github.com/users/cython/following{/other_user}",
            "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/cython",
            "id": 486082,
            "login": "cython",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
            "organizations_url": "https://api.github.com/users/cython/orgs",
            "received_events_url": "https://api.github.com/users/cython/received_events",
            "repos_url": "https://api.github.com/users/cython/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/cython",
            "user_view_type": "public"
        }
    },
    "body": "In addition to just \"returning literals\", also avoid creating a traceback for a lot of simple assignments, and some safe variable reads.\r\n\r\nFollow up to https://github.com/cython/cython/pull/6602 covering a few more cases that I believe it's possible to reason about.",
    "closed_at": "2025-07-20T13:50:01Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7021#discussion_r2216481799"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7021"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2216481799"
                }
            },
            "author_association": "MEMBER",
            "body": "I'm a bit unhappy with the double negation here, but since the intention is to detect cases where we really have no exceptions, and handle the rest at a \"best effort\" basis, I fail to come up with a better verb name for what the visitor does.\r\n```suggestion\r\n        tree_has_no_exceptions = HasNoExceptionHandlingVisitor()\r\n        return not tree_has_no_exceptions(self.body)\r\n```",
            "commit_id": "662dfad664c7a7f77e29ac28083ff75065170815",
            "created_at": "2025-07-18T16:49:37Z",
            "diff_hunk": "@@ -8388,28 +8388,9 @@ def infer_exception_type(self, env):\n         return Builtin.builtin_types[\"BaseException\"]\n \n     def body_may_need_exception(self):\n-        body = self.body\n-        if isinstance(body, StatListNode):\n-            for node in body.stats:\n-                if isinstance(node, PassStatNode):\n-                    continue\n-                elif isinstance(node, ReturnStatNode):\n-                    body = node\n-                    break\n-                else:\n-                    return True\n-            else:\n-                # No user code found (other than 'pass').\n-                return False\n-\n-        if isinstance(body, ReturnStatNode):\n-            value = body.value\n-            if value is None or value.is_literal:\n-                return False\n-            # There might be other safe cases, but literals seem the safest for now.\n-\n-        # If we cannot prove that the exception is unused, it may be used.\n-        return True\n+        from .ParseTreeTransforms import HasNoExceptionHandlingVisitor\n+        visitor = HasNoExceptionHandlingVisitor()\n+        return not visitor(self.body)",
            "html_url": "https://github.com/cython/cython/pull/7021#discussion_r2216481799",
            "id": 2216481799,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc6EHNQH",
            "original_commit_id": "d1b47d7ca731ce25a4c26d8336231ef298618496",
            "original_line": 8393,
            "original_position": 28,
            "original_start_line": 8392,
            "path": "Cython/Compiler/Nodes.py",
            "position": null,
            "pull_request_review_id": 3034190048,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7021",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2216481799/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-07-18T17:17:34Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2216481799",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7021#discussion_r2216490497"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7021"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2216490497"
                }
            },
            "author_association": "MEMBER",
            "body": "I think the flag assignments in the methods below would be easier to reason about if the name was less generic, e.g. `self.uses_no_exceptions`.",
            "commit_id": "662dfad664c7a7f77e29ac28083ff75065170815",
            "created_at": "2025-07-18T16:54:08Z",
            "diff_hunk": "@@ -4507,3 +4507,103 @@ def serialize_local_variables(self, entries):\n \n             self.tb.start('LocalVar', attrs)\n             self.tb.end('LocalVar')\n+\n+\n+class HasNoExceptionHandlingVisitor(TreeVisitor):\n+    \"\"\"\n+    Used by finalExceptClauseNode to work out if the body\n+    needs to handle exceptions at all. This includes:\n+\n+    1. Can raise an exception.\n+    2. May try to access the traceback.\n+    \"\"\"\n+    def __init__(self):\n+        self.result = True",
            "html_url": "https://github.com/cython/cython/pull/7021#discussion_r2216490497",
            "id": 2216490497,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc6EHPYB",
            "original_commit_id": "d1b47d7ca731ce25a4c26d8336231ef298618496",
            "original_line": 4521,
            "original_position": 15,
            "original_start_line": null,
            "path": "Cython/Compiler/ParseTreeTransforms.py",
            "position": null,
            "pull_request_review_id": 3034190048,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7021",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2216490497/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-18T17:18:14Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2216490497",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7021#discussion_r2216504618"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7021"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2216504618"
                }
            },
            "author_association": "MEMBER",
            "body": "We might do something smarter about certain builtins and their methods (although even an item comparison in `list.index()` can execute user code), but in general, any call (not just simple ones) should be assumed to be exception relevant, so let's make that explicit.\r\n```suggestion\r\n    def visit_CallNode(self, node):\r\n        # Implement this to make the behaviour as explicit as possible.\r\n        # Even noexcept functions might end up printing a traceback.\r\n        self.result = False\r\n```",
            "commit_id": "662dfad664c7a7f77e29ac28083ff75065170815",
            "created_at": "2025-07-18T16:58:44Z",
            "diff_hunk": "@@ -4507,3 +4507,103 @@ def serialize_local_variables(self, entries):\n \n             self.tb.start('LocalVar', attrs)\n             self.tb.end('LocalVar')\n+\n+\n+class HasNoExceptionHandlingVisitor(TreeVisitor):\n+    \"\"\"\n+    Used by finalExceptClauseNode to work out if the body\n+    needs to handle exceptions at all. This includes:\n+\n+    1. Can raise an exception.\n+    2. May try to access the traceback.\n+    \"\"\"\n+    def __init__(self):\n+        self.result = True\n+        self.assignment_lhs = None\n+        super().__init__()\n+\n+    def __call__(self, node) -> bool:\n+        self.visit(node)\n+        return self.result\n+\n+    def visit_Node(self, node):\n+        self.result = False  # In general, nodes use exceptions\n+\n+    def visit_ExprStatNode(self, node):\n+        self.visitchildren(node)\n+\n+    def visit_StatListNode(self, node):\n+        self.visitchildren(node)\n+\n+    def visit_ExprNode(self, node):\n+        if not node.is_literal:\n+            self.result = False\n+\n+    def visit_SimpleCallNode(self, node):\n+        # Implement this to make the behaviour as explicit as possible.\n+        # Even noexcept functions might end up printing a traceback.\n+        self.result = False",
            "html_url": "https://github.com/cython/cython/pull/7021#discussion_r2216504618",
            "id": 2216504618,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc6EHS0q",
            "original_commit_id": "d1b47d7ca731ce25a4c26d8336231ef298618496",
            "original_line": 4545,
            "original_position": 39,
            "original_start_line": 4542,
            "path": "Cython/Compiler/ParseTreeTransforms.py",
            "position": null,
            "pull_request_review_id": 3034190048,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7021",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2216504618/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-07-18T17:17:34Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2216504618",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7021#discussion_r2216540810"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7021"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2216540810"
                }
            },
            "author_association": "MEMBER",
            "body": "This needs to be a context manager, the one below.",
            "commit_id": "662dfad664c7a7f77e29ac28083ff75065170815",
            "created_at": "2025-07-18T17:10:16Z",
            "diff_hunk": "@@ -89,6 +89,9 @@ def test_assert_path_exists(*paths):\n def test_fail_if_path_exists(*paths):\n     return _empty_decorator\n \n+def test_body_needs_exception_handling(value):\n+    return _empty_decorator",
            "html_url": "https://github.com/cython/cython/pull/7021#discussion_r2216540810",
            "id": 2216540810,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc6EHbqK",
            "original_commit_id": "d1b47d7ca731ce25a4c26d8336231ef298618496",
            "original_line": 93,
            "original_position": 5,
            "original_start_line": 92,
            "path": "Cython/Shadow.py",
            "position": null,
            "pull_request_review_id": 3034190048,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7021",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2216540810/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-07-18T17:17:34Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2216540810",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7021#discussion_r2216548584"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7021"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2216548584"
                }
            },
            "author_association": "MEMBER",
            "body": "Since all of this is really a best effort optimisation, I'd prefer a positive list over a negative list (like this) wherever possible, to prevent an accidental application to future additions that we do not yet think of today.",
            "commit_id": "662dfad664c7a7f77e29ac28083ff75065170815",
            "created_at": "2025-07-18T17:15:26Z",
            "diff_hunk": "@@ -4507,3 +4507,103 @@ def serialize_local_variables(self, entries):\n \n             self.tb.start('LocalVar', attrs)\n             self.tb.end('LocalVar')\n+\n+\n+class HasNoExceptionHandlingVisitor(TreeVisitor):\n+    \"\"\"\n+    Used by finalExceptClauseNode to work out if the body\n+    needs to handle exceptions at all. This includes:\n+\n+    1. Can raise an exception.\n+    2. May try to access the traceback.\n+    \"\"\"\n+    def __init__(self):\n+        self.result = True\n+        self.assignment_lhs = None\n+        super().__init__()\n+\n+    def __call__(self, node) -> bool:\n+        self.visit(node)\n+        return self.result\n+\n+    def visit_Node(self, node):\n+        self.result = False  # In general, nodes use exceptions\n+\n+    def visit_ExprStatNode(self, node):\n+        self.visitchildren(node)\n+\n+    def visit_StatListNode(self, node):\n+        self.visitchildren(node)\n+\n+    def visit_ExprNode(self, node):\n+        if not node.is_literal:\n+            self.result = False\n+\n+    def visit_SimpleCallNode(self, node):\n+        # Implement this to make the behaviour as explicit as possible.\n+        # Even noexcept functions might end up printing a traceback.\n+        self.result = False\n+\n+    def visit_PassStatNode(self, node):\n+        pass  # Does nothing.  Good.\n+\n+    def visit_ReturnStatNode(self, node):\n+        if not self.result:\n+            return  # shortcut\n+        self.visitchildren(node)\n+\n+    def visit_SingleAssignmentNode(self, node):\n+        if not self.result:\n+            return  # shortcut\n+        node_lhs = self.assignment_lhs = node.lhs\n+        if ((not node_lhs.is_name or not node_lhs.cf_is_null) and\n+                (node_lhs.type.needs_refcounting or node_lhs.type.is_cpp_class)):\n+            # May trigger Non-trivial destructor - potentially dubious\n+            self.result = False\n+            return\n+        self.visit(node_lhs)\n+        self.assignment_lhs = None\n+        rhs_type = node.rhs.type\n+        if not (rhs_type.is_numeric or rhs_type.is_pyobject or rhs_type.is_memoryviewslice):\n+            # Treat everything we haven't explicitly thought about as potentially dubious.\n+            # cpp classes may non-trivial assignment operators for example.\n+            self.result = False\n+        if not self.result:\n+            return\n+        self.visitchildren(node, exclude=[\"lhs\"])\n+\n+    def visit_NameNode(self, node):\n+        if not self.result:\n+            return  # shortcut\n+        entry = node.entry\n+        if self.assignment_lhs == node:\n+            if not (entry.is_cglobal or entry.is_arg or\n+                    entry.is_local or entry.in_closure or entry.from_closure):\n+                self.result = False\n+                return\n+        else:\n+            if entry.is_cglobal:\n+                if entry.is_cpp_optional and node.initialized_check:\n+                    # Otherwise, C globals should be safe.\n+                    self.result = False\n+                    return\n+            elif entry.is_arg or entry.is_local or entry.in_closure or entry.from_closure:\n+                if (node.cf_is_null or node.cf_maybe_null) and not node.type.is_numeric:\n+                    # The logic here is slightly simpler than for NameNode error checking.\n+                    # This gives a few false negatives (which is always the safe thing to do)\n+                    # for memoryviews and cpp_optionals\n+                    self.result = False\n+                    return\n+            else:\n+                # Probably a py_global.\n+                self.result = False\n+                return\n+\n+    def visit_AttributeNode(self, node):\n+        if node.is_py_attr or node.entry.is_cpp_optional or node.type.is_memoryviewslice:\n+            self.result = False",
            "html_url": "https://github.com/cython/cython/pull/7021#discussion_r2216548584",
            "id": 2216548584,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc6EHdjo",
            "original_commit_id": "d1b47d7ca731ce25a4c26d8336231ef298618496",
            "original_line": 4604,
            "original_position": 98,
            "original_start_line": 4603,
            "path": "Cython/Compiler/ParseTreeTransforms.py",
            "position": null,
            "pull_request_review_id": 3034190048,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7021",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2216548584/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-07-18T17:17:34Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2216548584",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7021#discussion_r2216581610"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7021"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2216581610"
                }
            },
            "author_association": "MEMBER",
            "body": "Yes - what I was really trying to get in the way of anyone thinking about optimizing noexcept functions, because it seems so obvious. But I think `CallNode` does that too so I'm happy to widen it to that.",
            "commit_id": "662dfad664c7a7f77e29ac28083ff75065170815",
            "created_at": "2025-07-18T17:38:25Z",
            "diff_hunk": "@@ -4507,3 +4507,103 @@ def serialize_local_variables(self, entries):\n \n             self.tb.start('LocalVar', attrs)\n             self.tb.end('LocalVar')\n+\n+\n+class HasNoExceptionHandlingVisitor(TreeVisitor):\n+    \"\"\"\n+    Used by finalExceptClauseNode to work out if the body\n+    needs to handle exceptions at all. This includes:\n+\n+    1. Can raise an exception.\n+    2. May try to access the traceback.\n+    \"\"\"\n+    def __init__(self):\n+        self.result = True\n+        self.assignment_lhs = None\n+        super().__init__()\n+\n+    def __call__(self, node) -> bool:\n+        self.visit(node)\n+        return self.result\n+\n+    def visit_Node(self, node):\n+        self.result = False  # In general, nodes use exceptions\n+\n+    def visit_ExprStatNode(self, node):\n+        self.visitchildren(node)\n+\n+    def visit_StatListNode(self, node):\n+        self.visitchildren(node)\n+\n+    def visit_ExprNode(self, node):\n+        if not node.is_literal:\n+            self.result = False\n+\n+    def visit_SimpleCallNode(self, node):\n+        # Implement this to make the behaviour as explicit as possible.\n+        # Even noexcept functions might end up printing a traceback.\n+        self.result = False",
            "html_url": "https://github.com/cython/cython/pull/7021#discussion_r2216581610",
            "id": 2216581610,
            "in_reply_to_id": 2216504618,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc6EHlnq",
            "original_commit_id": "d1b47d7ca731ce25a4c26d8336231ef298618496",
            "original_line": 4545,
            "original_position": 39,
            "original_start_line": 4542,
            "path": "Cython/Compiler/ParseTreeTransforms.py",
            "position": null,
            "pull_request_review_id": 3034320090,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7021",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2216581610/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-07-18T17:38:25Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2216581610",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7021#discussion_r2216627750"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7021"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2216627750"
                }
            },
            "author_association": "MEMBER",
            "body": "I didn't really want to remove the negative list since they're all there for a reason. But I added a positive list of allowed types below to keep it restricted.",
            "commit_id": "662dfad664c7a7f77e29ac28083ff75065170815",
            "created_at": "2025-07-18T18:08:51Z",
            "diff_hunk": "@@ -4507,3 +4507,103 @@ def serialize_local_variables(self, entries):\n \n             self.tb.start('LocalVar', attrs)\n             self.tb.end('LocalVar')\n+\n+\n+class HasNoExceptionHandlingVisitor(TreeVisitor):\n+    \"\"\"\n+    Used by finalExceptClauseNode to work out if the body\n+    needs to handle exceptions at all. This includes:\n+\n+    1. Can raise an exception.\n+    2. May try to access the traceback.\n+    \"\"\"\n+    def __init__(self):\n+        self.result = True\n+        self.assignment_lhs = None\n+        super().__init__()\n+\n+    def __call__(self, node) -> bool:\n+        self.visit(node)\n+        return self.result\n+\n+    def visit_Node(self, node):\n+        self.result = False  # In general, nodes use exceptions\n+\n+    def visit_ExprStatNode(self, node):\n+        self.visitchildren(node)\n+\n+    def visit_StatListNode(self, node):\n+        self.visitchildren(node)\n+\n+    def visit_ExprNode(self, node):\n+        if not node.is_literal:\n+            self.result = False\n+\n+    def visit_SimpleCallNode(self, node):\n+        # Implement this to make the behaviour as explicit as possible.\n+        # Even noexcept functions might end up printing a traceback.\n+        self.result = False\n+\n+    def visit_PassStatNode(self, node):\n+        pass  # Does nothing.  Good.\n+\n+    def visit_ReturnStatNode(self, node):\n+        if not self.result:\n+            return  # shortcut\n+        self.visitchildren(node)\n+\n+    def visit_SingleAssignmentNode(self, node):\n+        if not self.result:\n+            return  # shortcut\n+        node_lhs = self.assignment_lhs = node.lhs\n+        if ((not node_lhs.is_name or not node_lhs.cf_is_null) and\n+                (node_lhs.type.needs_refcounting or node_lhs.type.is_cpp_class)):\n+            # May trigger Non-trivial destructor - potentially dubious\n+            self.result = False\n+            return\n+        self.visit(node_lhs)\n+        self.assignment_lhs = None\n+        rhs_type = node.rhs.type\n+        if not (rhs_type.is_numeric or rhs_type.is_pyobject or rhs_type.is_memoryviewslice):\n+            # Treat everything we haven't explicitly thought about as potentially dubious.\n+            # cpp classes may non-trivial assignment operators for example.\n+            self.result = False\n+        if not self.result:\n+            return\n+        self.visitchildren(node, exclude=[\"lhs\"])\n+\n+    def visit_NameNode(self, node):\n+        if not self.result:\n+            return  # shortcut\n+        entry = node.entry\n+        if self.assignment_lhs == node:\n+            if not (entry.is_cglobal or entry.is_arg or\n+                    entry.is_local or entry.in_closure or entry.from_closure):\n+                self.result = False\n+                return\n+        else:\n+            if entry.is_cglobal:\n+                if entry.is_cpp_optional and node.initialized_check:\n+                    # Otherwise, C globals should be safe.\n+                    self.result = False\n+                    return\n+            elif entry.is_arg or entry.is_local or entry.in_closure or entry.from_closure:\n+                if (node.cf_is_null or node.cf_maybe_null) and not node.type.is_numeric:\n+                    # The logic here is slightly simpler than for NameNode error checking.\n+                    # This gives a few false negatives (which is always the safe thing to do)\n+                    # for memoryviews and cpp_optionals\n+                    self.result = False\n+                    return\n+            else:\n+                # Probably a py_global.\n+                self.result = False\n+                return\n+\n+    def visit_AttributeNode(self, node):\n+        if node.is_py_attr or node.entry.is_cpp_optional or node.type.is_memoryviewslice:\n+            self.result = False",
            "html_url": "https://github.com/cython/cython/pull/7021#discussion_r2216627750",
            "id": 2216627750,
            "in_reply_to_id": 2216548584,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc6EHw4m",
            "original_commit_id": "d1b47d7ca731ce25a4c26d8336231ef298618496",
            "original_line": 4604,
            "original_position": 98,
            "original_start_line": 4603,
            "path": "Cython/Compiler/ParseTreeTransforms.py",
            "position": null,
            "pull_request_review_id": 3034397416,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7021",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2216627750/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-07-18T18:08:51Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2216627750",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7021#discussion_r2216629653"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7021"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2216629653"
                }
            },
            "author_association": "MEMBER",
            "body": "This is a new addition (but hopefully uncontroversial)",
            "commit_id": "662dfad664c7a7f77e29ac28083ff75065170815",
            "created_at": "2025-07-18T18:10:14Z",
            "diff_hunk": "@@ -4507,3 +4507,111 @@ def serialize_local_variables(self, entries):\n \n             self.tb.start('LocalVar', attrs)\n             self.tb.end('LocalVar')\n+\n+\n+class HasNoExceptionHandlingVisitor(TreeVisitor):\n+    \"\"\"\n+    Used by finalExceptClauseNode to work out if the body\n+    needs to handle exceptions at all. This includes:\n+\n+    1. Can raise an exception.\n+    2. May try to access the traceback.\n+    \"\"\"\n+    def __init__(self):\n+        self.uses_no_exceptions = True\n+        self.assignment_lhs = None\n+        super().__init__()\n+\n+    def __call__(self, node) -> bool:\n+        self.visit(node)\n+        return self.uses_no_exceptions\n+\n+    def visit_Node(self, node):\n+        self.uses_no_exceptions = False  # In general, nodes use exceptions\n+\n+    def visit_ExprStatNode(self, node):\n+        self.visitchildren(node)\n+\n+    def visit_StatListNode(self, node):\n+        self.visitchildren(node)\n+\n+    def visit_ExprNode(self, node):\n+        if not node.is_literal:\n+            self.uses_no_exceptions = False\n+\n+    def visit_CallNode(self, node):\n+        # Implement this to make the behaviour as explicit as possible.\n+        # Even noexcept functions might end up printing a traceback.\n+        self.uses_no_exceptions = False\n+\n+    def visit_PassStatNode(self, node):\n+        pass  # Does nothing.  Good.\n+\n+    def visit_ReturnStatNode(self, node):\n+        if not self.uses_no_exceptions:\n+            return  # shortcut\n+        self.visitchildren(node)\n+\n+    def visit_SingleAssignmentNode(self, node):\n+        if not self.uses_no_exceptions:\n+            return  # shortcut\n+        node_lhs = self.assignment_lhs = node.lhs\n+        if ((not node_lhs.is_name or not node_lhs.cf_is_null) and\n+                (node_lhs.type.needs_refcounting or node_lhs.type.is_cpp_class)):\n+            # There's a small (maybe non-exhaustive) list of builtin types that we can be confident\n+            # don't do anything interesting on destruction.\n+            if not (node_lhs.type in [Builtin.bytes_type, Builtin.unicode_type, Builtin.bytearray_type,\n+                                      Builtin.range_type,\n+                                      Builtin.bool_type, Builtin.float_type,\n+                                      Builtin.int_type, Builtin.complex_type]):",
            "html_url": "https://github.com/cython/cython/pull/7021#discussion_r2216629653",
            "id": 2216629653,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc6EHxWV",
            "original_commit_id": "5c0c11afa07b33987994d753375856f94ce0236d",
            "original_line": 4566,
            "original_position": 60,
            "original_start_line": 4563,
            "path": "Cython/Compiler/ParseTreeTransforms.py",
            "position": null,
            "pull_request_review_id": 3034400440,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7021",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2216629653/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-07-18T18:10:15Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2216629653",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7021#discussion_r2216876841"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7021"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2216876841"
                }
            },
            "author_association": "MEMBER",
            "body": "It wasn't immediately clear to me why a pyobject should be safe (you know, they do stuff on assignments, so they must be unsafe, no?), and these two make a funny combination. A comment might help, something like the following.\r\n```suggestion\r\n        # Python objects just need an incref and simple C types are fine, too. Others may not be.\r\n        if not (node.type.is_pyobject or node.type.is_numeric):\r\n            self.uses_no_exceptions = False\r\n```",
            "commit_id": "662dfad664c7a7f77e29ac28083ff75065170815",
            "created_at": "2025-07-18T20:30:25Z",
            "diff_hunk": "@@ -4507,3 +4507,111 @@ def serialize_local_variables(self, entries):\n \n             self.tb.start('LocalVar', attrs)\n             self.tb.end('LocalVar')\n+\n+\n+class HasNoExceptionHandlingVisitor(TreeVisitor):\n+    \"\"\"\n+    Used by finalExceptClauseNode to work out if the body\n+    needs to handle exceptions at all. This includes:\n+\n+    1. Can raise an exception.\n+    2. May try to access the traceback.\n+    \"\"\"\n+    def __init__(self):\n+        self.uses_no_exceptions = True\n+        self.assignment_lhs = None\n+        super().__init__()\n+\n+    def __call__(self, node) -> bool:\n+        self.visit(node)\n+        return self.uses_no_exceptions\n+\n+    def visit_Node(self, node):\n+        self.uses_no_exceptions = False  # In general, nodes use exceptions\n+\n+    def visit_ExprStatNode(self, node):\n+        self.visitchildren(node)\n+\n+    def visit_StatListNode(self, node):\n+        self.visitchildren(node)\n+\n+    def visit_ExprNode(self, node):\n+        if not node.is_literal:\n+            self.uses_no_exceptions = False\n+\n+    def visit_CallNode(self, node):\n+        # Implement this to make the behaviour as explicit as possible.\n+        # Even noexcept functions might end up printing a traceback.\n+        self.uses_no_exceptions = False\n+\n+    def visit_PassStatNode(self, node):\n+        pass  # Does nothing.  Good.\n+\n+    def visit_ReturnStatNode(self, node):\n+        if not self.uses_no_exceptions:\n+            return  # shortcut\n+        self.visitchildren(node)\n+\n+    def visit_SingleAssignmentNode(self, node):\n+        if not self.uses_no_exceptions:\n+            return  # shortcut\n+        node_lhs = self.assignment_lhs = node.lhs\n+        if ((not node_lhs.is_name or not node_lhs.cf_is_null) and\n+                (node_lhs.type.needs_refcounting or node_lhs.type.is_cpp_class)):\n+            # There's a small (maybe non-exhaustive) list of builtin types that we can be confident\n+            # don't do anything interesting on destruction.\n+            if not (node_lhs.type in [Builtin.bytes_type, Builtin.unicode_type, Builtin.bytearray_type,\n+                                      Builtin.range_type,\n+                                      Builtin.bool_type, Builtin.float_type,\n+                                      Builtin.int_type, Builtin.complex_type]):\n+                # May trigger non-trivial destructor - potentially dubious\n+                self.uses_no_exceptions = False\n+            return\n+        self.visit(node_lhs)\n+        self.assignment_lhs = None\n+        rhs_type = node.rhs.type\n+        if not (rhs_type.is_numeric or rhs_type.is_pyobject or rhs_type.is_memoryviewslice):\n+            # Treat everything we haven't explicitly thought about as potentially dubious.\n+            # cpp classes may non-trivial assignment operators for example.\n+            self.uses_no_exceptions = False\n+        if not self.uses_no_exceptions:\n+            return\n+        self.visitchildren(node, exclude=[\"lhs\"])\n+\n+    def visit_NameNode(self, node):\n+        if not self.uses_no_exceptions:\n+            return  # shortcut\n+        entry = node.entry\n+        if self.assignment_lhs == node:\n+            if not (entry.is_cglobal or entry.is_arg or\n+                    entry.is_local or entry.in_closure or entry.from_closure):\n+                self.uses_no_exceptions = False\n+                return\n+        else:\n+            if entry.is_cglobal:\n+                if entry.is_cpp_optional and node.initialized_check:\n+                    # Otherwise, C globals should be safe.\n+                    self.uses_no_exceptions = False\n+                    return\n+            elif entry.is_arg or entry.is_local or entry.in_closure or entry.from_closure:\n+                if (node.cf_is_null or node.cf_maybe_null) and not node.type.is_numeric:\n+                    # The logic here is slightly simpler than for NameNode error checking.\n+                    # This gives a few false negatives (which is always the safe thing to do)\n+                    # for memoryviews and cpp_optionals\n+                    self.uses_no_exceptions = False\n+                    return\n+            else:\n+                # Probably a py_global.\n+                self.uses_no_exceptions = False\n+                return\n+\n+    def visit_AttributeNode(self, node):\n+        if node.is_py_attr or node.entry.is_cpp_optional or node.type.is_memoryviewslice:\n+            self.uses_no_exceptions = False\n+        if not (node.type.is_pyobject or node.type.is_numeric):\n+            self.uses_no_exceptions = False",
            "html_url": "https://github.com/cython/cython/pull/7021#discussion_r2216876841",
            "id": 2216876841,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc6EItsp",
            "original_commit_id": "5c0c11afa07b33987994d753375856f94ce0236d",
            "original_line": 4612,
            "original_position": 106,
            "original_start_line": 4611,
            "path": "Cython/Compiler/ParseTreeTransforms.py",
            "position": null,
            "pull_request_review_id": 3034768520,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7021",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2216876841/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-07-18T20:56:47Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2216876841",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7021#discussion_r2216878081"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7021"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2216878081"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n# Restrict to c++17 just because we use cpp_locals in the test.\r\n```",
            "commit_id": "662dfad664c7a7f77e29ac28083ff75065170815",
            "created_at": "2025-07-18T20:31:24Z",
            "diff_hunk": "@@ -0,0 +1,156 @@\n+# mode: compile\n+# tag: cpp, cpp17, no-cpp-locals\n+\n+# This test tests a small optimization for except clauses where they can\n+# potentially omit some exception handling code if sufficiently simple.\n+# The optimization is performed explicitly because it's completely\n+# unobservable. Therefore, it's hard to test behaviourally.\n+#\n+# Restrict to c++17 just because to use cpp_locals in the test.",
            "html_url": "https://github.com/cython/cython/pull/7021#discussion_r2216878081",
            "id": 2216878081,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc6EIuAB",
            "original_commit_id": "5c0c11afa07b33987994d753375856f94ce0236d",
            "original_line": 9,
            "original_position": 9,
            "original_start_line": null,
            "path": "tests/compile/except_clause_needs_exception.pyx",
            "position": null,
            "pull_request_review_id": 3034768520,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7021",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2216878081/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-18T20:56:47Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2216878081",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7021#discussion_r2216880700"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7021"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2216880700"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n        if self.assignment_lhs is node:\r\n```",
            "commit_id": "662dfad664c7a7f77e29ac28083ff75065170815",
            "created_at": "2025-07-18T20:33:28Z",
            "diff_hunk": "@@ -4507,3 +4507,111 @@ def serialize_local_variables(self, entries):\n \n             self.tb.start('LocalVar', attrs)\n             self.tb.end('LocalVar')\n+\n+\n+class HasNoExceptionHandlingVisitor(TreeVisitor):\n+    \"\"\"\n+    Used by finalExceptClauseNode to work out if the body\n+    needs to handle exceptions at all. This includes:\n+\n+    1. Can raise an exception.\n+    2. May try to access the traceback.\n+    \"\"\"\n+    def __init__(self):\n+        self.uses_no_exceptions = True\n+        self.assignment_lhs = None\n+        super().__init__()\n+\n+    def __call__(self, node) -> bool:\n+        self.visit(node)\n+        return self.uses_no_exceptions\n+\n+    def visit_Node(self, node):\n+        self.uses_no_exceptions = False  # In general, nodes use exceptions\n+\n+    def visit_ExprStatNode(self, node):\n+        self.visitchildren(node)\n+\n+    def visit_StatListNode(self, node):\n+        self.visitchildren(node)\n+\n+    def visit_ExprNode(self, node):\n+        if not node.is_literal:\n+            self.uses_no_exceptions = False\n+\n+    def visit_CallNode(self, node):\n+        # Implement this to make the behaviour as explicit as possible.\n+        # Even noexcept functions might end up printing a traceback.\n+        self.uses_no_exceptions = False\n+\n+    def visit_PassStatNode(self, node):\n+        pass  # Does nothing.  Good.\n+\n+    def visit_ReturnStatNode(self, node):\n+        if not self.uses_no_exceptions:\n+            return  # shortcut\n+        self.visitchildren(node)\n+\n+    def visit_SingleAssignmentNode(self, node):\n+        if not self.uses_no_exceptions:\n+            return  # shortcut\n+        node_lhs = self.assignment_lhs = node.lhs\n+        if ((not node_lhs.is_name or not node_lhs.cf_is_null) and\n+                (node_lhs.type.needs_refcounting or node_lhs.type.is_cpp_class)):\n+            # There's a small (maybe non-exhaustive) list of builtin types that we can be confident\n+            # don't do anything interesting on destruction.\n+            if not (node_lhs.type in [Builtin.bytes_type, Builtin.unicode_type, Builtin.bytearray_type,\n+                                      Builtin.range_type,\n+                                      Builtin.bool_type, Builtin.float_type,\n+                                      Builtin.int_type, Builtin.complex_type]):\n+                # May trigger non-trivial destructor - potentially dubious\n+                self.uses_no_exceptions = False\n+            return\n+        self.visit(node_lhs)\n+        self.assignment_lhs = None\n+        rhs_type = node.rhs.type\n+        if not (rhs_type.is_numeric or rhs_type.is_pyobject or rhs_type.is_memoryviewslice):\n+            # Treat everything we haven't explicitly thought about as potentially dubious.\n+            # cpp classes may non-trivial assignment operators for example.\n+            self.uses_no_exceptions = False\n+        if not self.uses_no_exceptions:\n+            return\n+        self.visitchildren(node, exclude=[\"lhs\"])\n+\n+    def visit_NameNode(self, node):\n+        if not self.uses_no_exceptions:\n+            return  # shortcut\n+        entry = node.entry\n+        if self.assignment_lhs == node:",
            "html_url": "https://github.com/cython/cython/pull/7021#discussion_r2216880700",
            "id": 2216880700,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc6EIuo8",
            "original_commit_id": "5c0c11afa07b33987994d753375856f94ce0236d",
            "original_line": 4585,
            "original_position": 79,
            "original_start_line": null,
            "path": "Cython/Compiler/ParseTreeTransforms.py",
            "position": null,
            "pull_request_review_id": 3034768520,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7021",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2216880700/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-18T20:56:47Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2216880700",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7021#discussion_r2216881293"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7021"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2216881293"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n            # cpp classes may have non-trivial assignment operators for example.\r\n```",
            "commit_id": "662dfad664c7a7f77e29ac28083ff75065170815",
            "created_at": "2025-07-18T20:34:01Z",
            "diff_hunk": "@@ -4507,3 +4507,111 @@ def serialize_local_variables(self, entries):\n \n             self.tb.start('LocalVar', attrs)\n             self.tb.end('LocalVar')\n+\n+\n+class HasNoExceptionHandlingVisitor(TreeVisitor):\n+    \"\"\"\n+    Used by finalExceptClauseNode to work out if the body\n+    needs to handle exceptions at all. This includes:\n+\n+    1. Can raise an exception.\n+    2. May try to access the traceback.\n+    \"\"\"\n+    def __init__(self):\n+        self.uses_no_exceptions = True\n+        self.assignment_lhs = None\n+        super().__init__()\n+\n+    def __call__(self, node) -> bool:\n+        self.visit(node)\n+        return self.uses_no_exceptions\n+\n+    def visit_Node(self, node):\n+        self.uses_no_exceptions = False  # In general, nodes use exceptions\n+\n+    def visit_ExprStatNode(self, node):\n+        self.visitchildren(node)\n+\n+    def visit_StatListNode(self, node):\n+        self.visitchildren(node)\n+\n+    def visit_ExprNode(self, node):\n+        if not node.is_literal:\n+            self.uses_no_exceptions = False\n+\n+    def visit_CallNode(self, node):\n+        # Implement this to make the behaviour as explicit as possible.\n+        # Even noexcept functions might end up printing a traceback.\n+        self.uses_no_exceptions = False\n+\n+    def visit_PassStatNode(self, node):\n+        pass  # Does nothing.  Good.\n+\n+    def visit_ReturnStatNode(self, node):\n+        if not self.uses_no_exceptions:\n+            return  # shortcut\n+        self.visitchildren(node)\n+\n+    def visit_SingleAssignmentNode(self, node):\n+        if not self.uses_no_exceptions:\n+            return  # shortcut\n+        node_lhs = self.assignment_lhs = node.lhs\n+        if ((not node_lhs.is_name or not node_lhs.cf_is_null) and\n+                (node_lhs.type.needs_refcounting or node_lhs.type.is_cpp_class)):\n+            # There's a small (maybe non-exhaustive) list of builtin types that we can be confident\n+            # don't do anything interesting on destruction.\n+            if not (node_lhs.type in [Builtin.bytes_type, Builtin.unicode_type, Builtin.bytearray_type,\n+                                      Builtin.range_type,\n+                                      Builtin.bool_type, Builtin.float_type,\n+                                      Builtin.int_type, Builtin.complex_type]):\n+                # May trigger non-trivial destructor - potentially dubious\n+                self.uses_no_exceptions = False\n+            return\n+        self.visit(node_lhs)\n+        self.assignment_lhs = None\n+        rhs_type = node.rhs.type\n+        if not (rhs_type.is_numeric or rhs_type.is_pyobject or rhs_type.is_memoryviewslice):\n+            # Treat everything we haven't explicitly thought about as potentially dubious.\n+            # cpp classes may non-trivial assignment operators for example.",
            "html_url": "https://github.com/cython/cython/pull/7021#discussion_r2216881293",
            "id": 2216881293,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc6EIuyN",
            "original_commit_id": "5c0c11afa07b33987994d753375856f94ce0236d",
            "original_line": 4575,
            "original_position": 69,
            "original_start_line": null,
            "path": "Cython/Compiler/ParseTreeTransforms.py",
            "position": null,
            "pull_request_review_id": 3034768520,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7021",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2216881293/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-18T20:56:47Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2216881293",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7021#discussion_r2216886146"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7021"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2216886146"
                }
            },
            "author_association": "MEMBER",
            "body": "What about assignment errors due to a type check? The RHS and LHS Python types may not be compatible at runtime.",
            "commit_id": "662dfad664c7a7f77e29ac28083ff75065170815",
            "created_at": "2025-07-18T20:37:59Z",
            "diff_hunk": "@@ -4507,3 +4507,111 @@ def serialize_local_variables(self, entries):\n \n             self.tb.start('LocalVar', attrs)\n             self.tb.end('LocalVar')\n+\n+\n+class HasNoExceptionHandlingVisitor(TreeVisitor):\n+    \"\"\"\n+    Used by finalExceptClauseNode to work out if the body\n+    needs to handle exceptions at all. This includes:\n+\n+    1. Can raise an exception.\n+    2. May try to access the traceback.\n+    \"\"\"\n+    def __init__(self):\n+        self.uses_no_exceptions = True\n+        self.assignment_lhs = None\n+        super().__init__()\n+\n+    def __call__(self, node) -> bool:\n+        self.visit(node)\n+        return self.uses_no_exceptions\n+\n+    def visit_Node(self, node):\n+        self.uses_no_exceptions = False  # In general, nodes use exceptions\n+\n+    def visit_ExprStatNode(self, node):\n+        self.visitchildren(node)\n+\n+    def visit_StatListNode(self, node):\n+        self.visitchildren(node)\n+\n+    def visit_ExprNode(self, node):\n+        if not node.is_literal:\n+            self.uses_no_exceptions = False\n+\n+    def visit_CallNode(self, node):\n+        # Implement this to make the behaviour as explicit as possible.\n+        # Even noexcept functions might end up printing a traceback.\n+        self.uses_no_exceptions = False\n+\n+    def visit_PassStatNode(self, node):\n+        pass  # Does nothing.  Good.\n+\n+    def visit_ReturnStatNode(self, node):\n+        if not self.uses_no_exceptions:\n+            return  # shortcut\n+        self.visitchildren(node)\n+\n+    def visit_SingleAssignmentNode(self, node):\n+        if not self.uses_no_exceptions:\n+            return  # shortcut\n+        node_lhs = self.assignment_lhs = node.lhs\n+        if ((not node_lhs.is_name or not node_lhs.cf_is_null) and\n+                (node_lhs.type.needs_refcounting or node_lhs.type.is_cpp_class)):\n+            # There's a small (maybe non-exhaustive) list of builtin types that we can be confident\n+            # don't do anything interesting on destruction.\n+            if not (node_lhs.type in [Builtin.bytes_type, Builtin.unicode_type, Builtin.bytearray_type,\n+                                      Builtin.range_type,\n+                                      Builtin.bool_type, Builtin.float_type,\n+                                      Builtin.int_type, Builtin.complex_type]):\n+                # May trigger non-trivial destructor - potentially dubious\n+                self.uses_no_exceptions = False\n+            return\n+        self.visit(node_lhs)\n+        self.assignment_lhs = None\n+        rhs_type = node.rhs.type\n+        if not (rhs_type.is_numeric or rhs_type.is_pyobject or rhs_type.is_memoryviewslice):",
            "html_url": "https://github.com/cython/cython/pull/7021#discussion_r2216886146",
            "id": 2216886146,
            "line": 4562,
            "node_id": "PRRC_kwDOABDGAc6EIv-C",
            "original_commit_id": "5c0c11afa07b33987994d753375856f94ce0236d",
            "original_line": 4573,
            "original_position": 67,
            "original_start_line": null,
            "path": "Cython/Compiler/ParseTreeTransforms.py",
            "position": 56,
            "pull_request_review_id": 3034768520,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7021",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2216886146/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-18T20:56:47Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2216886146",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7021#discussion_r2216887297"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7021"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2216887297"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n            if node_lhs.type not in [Builtin.bytes_type, Builtin.unicode_type, Builtin.bytearray_type,\r\n                                     Builtin.range_type,\r\n                                     Builtin.bool_type, Builtin.float_type,\r\n                                     Builtin.int_type, Builtin.complex_type]:\r\n```",
            "commit_id": "662dfad664c7a7f77e29ac28083ff75065170815",
            "created_at": "2025-07-18T20:38:55Z",
            "diff_hunk": "@@ -4507,3 +4507,111 @@ def serialize_local_variables(self, entries):\n \n             self.tb.start('LocalVar', attrs)\n             self.tb.end('LocalVar')\n+\n+\n+class HasNoExceptionHandlingVisitor(TreeVisitor):\n+    \"\"\"\n+    Used by finalExceptClauseNode to work out if the body\n+    needs to handle exceptions at all. This includes:\n+\n+    1. Can raise an exception.\n+    2. May try to access the traceback.\n+    \"\"\"\n+    def __init__(self):\n+        self.uses_no_exceptions = True\n+        self.assignment_lhs = None\n+        super().__init__()\n+\n+    def __call__(self, node) -> bool:\n+        self.visit(node)\n+        return self.uses_no_exceptions\n+\n+    def visit_Node(self, node):\n+        self.uses_no_exceptions = False  # In general, nodes use exceptions\n+\n+    def visit_ExprStatNode(self, node):\n+        self.visitchildren(node)\n+\n+    def visit_StatListNode(self, node):\n+        self.visitchildren(node)\n+\n+    def visit_ExprNode(self, node):\n+        if not node.is_literal:\n+            self.uses_no_exceptions = False\n+\n+    def visit_CallNode(self, node):\n+        # Implement this to make the behaviour as explicit as possible.\n+        # Even noexcept functions might end up printing a traceback.\n+        self.uses_no_exceptions = False\n+\n+    def visit_PassStatNode(self, node):\n+        pass  # Does nothing.  Good.\n+\n+    def visit_ReturnStatNode(self, node):\n+        if not self.uses_no_exceptions:\n+            return  # shortcut\n+        self.visitchildren(node)\n+\n+    def visit_SingleAssignmentNode(self, node):\n+        if not self.uses_no_exceptions:\n+            return  # shortcut\n+        node_lhs = self.assignment_lhs = node.lhs\n+        if ((not node_lhs.is_name or not node_lhs.cf_is_null) and\n+                (node_lhs.type.needs_refcounting or node_lhs.type.is_cpp_class)):\n+            # There's a small (maybe non-exhaustive) list of builtin types that we can be confident\n+            # don't do anything interesting on destruction.\n+            if not (node_lhs.type in [Builtin.bytes_type, Builtin.unicode_type, Builtin.bytearray_type,\n+                                      Builtin.range_type,\n+                                      Builtin.bool_type, Builtin.float_type,\n+                                      Builtin.int_type, Builtin.complex_type]):",
            "html_url": "https://github.com/cython/cython/pull/7021#discussion_r2216887297",
            "id": 2216887297,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc6EIwQB",
            "original_commit_id": "5c0c11afa07b33987994d753375856f94ce0236d",
            "original_line": 4566,
            "original_position": 60,
            "original_start_line": 4563,
            "path": "Cython/Compiler/ParseTreeTransforms.py",
            "position": null,
            "pull_request_review_id": 3034768520,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7021",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2216887297/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-07-18T20:56:47Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2216887297",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7021#discussion_r2216891823"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7021"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2216891823"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n                    # Otherwise, reading C globals should be safe.\r\n```",
            "commit_id": "662dfad664c7a7f77e29ac28083ff75065170815",
            "created_at": "2025-07-18T20:42:41Z",
            "diff_hunk": "@@ -4507,3 +4507,111 @@ def serialize_local_variables(self, entries):\n \n             self.tb.start('LocalVar', attrs)\n             self.tb.end('LocalVar')\n+\n+\n+class HasNoExceptionHandlingVisitor(TreeVisitor):\n+    \"\"\"\n+    Used by finalExceptClauseNode to work out if the body\n+    needs to handle exceptions at all. This includes:\n+\n+    1. Can raise an exception.\n+    2. May try to access the traceback.\n+    \"\"\"\n+    def __init__(self):\n+        self.uses_no_exceptions = True\n+        self.assignment_lhs = None\n+        super().__init__()\n+\n+    def __call__(self, node) -> bool:\n+        self.visit(node)\n+        return self.uses_no_exceptions\n+\n+    def visit_Node(self, node):\n+        self.uses_no_exceptions = False  # In general, nodes use exceptions\n+\n+    def visit_ExprStatNode(self, node):\n+        self.visitchildren(node)\n+\n+    def visit_StatListNode(self, node):\n+        self.visitchildren(node)\n+\n+    def visit_ExprNode(self, node):\n+        if not node.is_literal:\n+            self.uses_no_exceptions = False\n+\n+    def visit_CallNode(self, node):\n+        # Implement this to make the behaviour as explicit as possible.\n+        # Even noexcept functions might end up printing a traceback.\n+        self.uses_no_exceptions = False\n+\n+    def visit_PassStatNode(self, node):\n+        pass  # Does nothing.  Good.\n+\n+    def visit_ReturnStatNode(self, node):\n+        if not self.uses_no_exceptions:\n+            return  # shortcut\n+        self.visitchildren(node)\n+\n+    def visit_SingleAssignmentNode(self, node):\n+        if not self.uses_no_exceptions:\n+            return  # shortcut\n+        node_lhs = self.assignment_lhs = node.lhs\n+        if ((not node_lhs.is_name or not node_lhs.cf_is_null) and\n+                (node_lhs.type.needs_refcounting or node_lhs.type.is_cpp_class)):\n+            # There's a small (maybe non-exhaustive) list of builtin types that we can be confident\n+            # don't do anything interesting on destruction.\n+            if not (node_lhs.type in [Builtin.bytes_type, Builtin.unicode_type, Builtin.bytearray_type,\n+                                      Builtin.range_type,\n+                                      Builtin.bool_type, Builtin.float_type,\n+                                      Builtin.int_type, Builtin.complex_type]):\n+                # May trigger non-trivial destructor - potentially dubious\n+                self.uses_no_exceptions = False\n+            return\n+        self.visit(node_lhs)\n+        self.assignment_lhs = None\n+        rhs_type = node.rhs.type\n+        if not (rhs_type.is_numeric or rhs_type.is_pyobject or rhs_type.is_memoryviewslice):\n+            # Treat everything we haven't explicitly thought about as potentially dubious.\n+            # cpp classes may non-trivial assignment operators for example.\n+            self.uses_no_exceptions = False\n+        if not self.uses_no_exceptions:\n+            return\n+        self.visitchildren(node, exclude=[\"lhs\"])\n+\n+    def visit_NameNode(self, node):\n+        if not self.uses_no_exceptions:\n+            return  # shortcut\n+        entry = node.entry\n+        if self.assignment_lhs == node:\n+            if not (entry.is_cglobal or entry.is_arg or\n+                    entry.is_local or entry.in_closure or entry.from_closure):\n+                self.uses_no_exceptions = False\n+                return\n+        else:\n+            if entry.is_cglobal:\n+                if entry.is_cpp_optional and node.initialized_check:\n+                    # Otherwise, C globals should be safe.",
            "html_url": "https://github.com/cython/cython/pull/7021#discussion_r2216891823",
            "id": 2216891823,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc6EIxWv",
            "original_commit_id": "5c0c11afa07b33987994d753375856f94ce0236d",
            "original_line": 4593,
            "original_position": 87,
            "original_start_line": null,
            "path": "Cython/Compiler/ParseTreeTransforms.py",
            "position": null,
            "pull_request_review_id": 3034768520,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7021",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2216891823/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-18T20:56:47Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2216891823",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7021#discussion_r2216909582"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7021"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2216909582"
                }
            },
            "author_association": "MEMBER",
            "body": "Is destruction really an issue for exception handling? AFAIK, deallocation with decref ignores the outer exception context and swallows the exception. It doesn't even do exception chaining or appends to the traceback, I think.",
            "commit_id": "662dfad664c7a7f77e29ac28083ff75065170815",
            "created_at": "2025-07-18T20:55:16Z",
            "diff_hunk": "@@ -0,0 +1,156 @@\n+# mode: compile\n+# tag: cpp, cpp17, no-cpp-locals\n+\n+# This test tests a small optimization for except clauses where they can\n+# potentially omit some exception handling code if sufficiently simple.\n+# The optimization is performed explicitly because it's completely\n+# unobservable. Therefore, it's hard to test behaviourally.\n+#\n+# Restrict to c++17 just because to use cpp_locals in the test.\n+\n+cimport cython\n+\n+cdef cppclass CppClass:\n+    int attr\n+    CppClass():\n+        pass\n+\n+def return_empty():\n+    with cython.test_body_needs_exception_handling(False):\n+        return\n+\n+def return_none():\n+    with cython.test_body_needs_exception_handling(False):\n+        return None\n+\n+def return_int():\n+    with cython.test_body_needs_exception_handling(False):\n+        return 100\n+\n+def return_str_literal():\n+    with cython.test_body_needs_exception_handling(False):\n+        return \"I'm always in the module cache!\"\n+\n+def return_arg(arg):\n+    with cython.test_body_needs_exception_handling(False):\n+        return arg\n+\n+def return_assigned():\n+    x = object()\n+    with cython.test_body_needs_exception_handling(False):\n+        return x\n+\n+def result_maybe_unassigned(arg):\n+    if arg:\n+        x = object\n+    with cython.test_body_needs_exception_handling(True):\n+        return x\n+\n+py_global = None\n+cdef int c_global = 0\n+\n+def return_py_global():\n+    with cython.test_body_needs_exception_handling(True):\n+        return py_global\n+\n+def return_c_global():\n+    with cython.test_body_needs_exception_handling(True):\n+        return c_global\n+\n+def test_pass():\n+    with cython.test_body_needs_exception_handling(False):\n+        pass\n+\n+cdef void noexcept_func() noexcept:\n+    pass\n+\n+def call_noexcept_func():\n+    with cython.test_body_needs_exception_handling(True):\n+        noexcept_func()\n+\n+def test_assignment(arg):\n+    global py_global, c_global\n+\n+    cdef str typed_as_string = \"hello\"\n+\n+    some_value = 5\n+    with cython.test_body_needs_exception_handling(False):\n+        a = 2\n+        b = None\n+        c = some_value\n+        d = arg\n+        typed_as_string = \"goodbye\"  # string destructor is safe",
            "html_url": "https://github.com/cython/cython/pull/7021#discussion_r2216909582",
            "id": 2216909582,
            "line": 84,
            "node_id": "PRRC_kwDOABDGAc6EI1sO",
            "original_commit_id": "5c0c11afa07b33987994d753375856f94ce0236d",
            "original_line": 82,
            "original_position": 82,
            "original_start_line": null,
            "path": "tests/compile/except_clause_needs_exception.pyx",
            "position": 84,
            "pull_request_review_id": 3034768520,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7021",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2216909582/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-18T20:56:47Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2216909582",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7021#discussion_r2217338889"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7021"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2217338889"
                }
            },
            "author_association": "MEMBER",
            "body": "When I test this\r\n\r\n```\r\n>>> class C:\r\n...   def __del__(self):\r\n...     print(\"C.__del__\")\r\n...     traceback.print_exc()\r\n... \r\n>>> a = C()\r\n>>> try:\r\n...   raise RuntimeError\r\n... except:\r\n...   a = None\r\n... \r\nC.__del__\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 2, in <module>\r\n    raise RuntimeError\r\nRuntimeError\r\n```\r\n\r\nSo it definitely looks observable.\r\n\r\nHowever, I could be persuaded that the exact timing of destruction is sufficiently implementation defined that we could chose not to care (even on CPython freethreading, objects are shared between threads so it isn't just a PyPy/Graal difference).\r\n\r\nIt'd definitely simplify this if we ignored it.",
            "commit_id": "662dfad664c7a7f77e29ac28083ff75065170815",
            "created_at": "2025-07-19T14:50:35Z",
            "diff_hunk": "@@ -0,0 +1,156 @@\n+# mode: compile\n+# tag: cpp, cpp17, no-cpp-locals\n+\n+# This test tests a small optimization for except clauses where they can\n+# potentially omit some exception handling code if sufficiently simple.\n+# The optimization is performed explicitly because it's completely\n+# unobservable. Therefore, it's hard to test behaviourally.\n+#\n+# Restrict to c++17 just because to use cpp_locals in the test.\n+\n+cimport cython\n+\n+cdef cppclass CppClass:\n+    int attr\n+    CppClass():\n+        pass\n+\n+def return_empty():\n+    with cython.test_body_needs_exception_handling(False):\n+        return\n+\n+def return_none():\n+    with cython.test_body_needs_exception_handling(False):\n+        return None\n+\n+def return_int():\n+    with cython.test_body_needs_exception_handling(False):\n+        return 100\n+\n+def return_str_literal():\n+    with cython.test_body_needs_exception_handling(False):\n+        return \"I'm always in the module cache!\"\n+\n+def return_arg(arg):\n+    with cython.test_body_needs_exception_handling(False):\n+        return arg\n+\n+def return_assigned():\n+    x = object()\n+    with cython.test_body_needs_exception_handling(False):\n+        return x\n+\n+def result_maybe_unassigned(arg):\n+    if arg:\n+        x = object\n+    with cython.test_body_needs_exception_handling(True):\n+        return x\n+\n+py_global = None\n+cdef int c_global = 0\n+\n+def return_py_global():\n+    with cython.test_body_needs_exception_handling(True):\n+        return py_global\n+\n+def return_c_global():\n+    with cython.test_body_needs_exception_handling(True):\n+        return c_global\n+\n+def test_pass():\n+    with cython.test_body_needs_exception_handling(False):\n+        pass\n+\n+cdef void noexcept_func() noexcept:\n+    pass\n+\n+def call_noexcept_func():\n+    with cython.test_body_needs_exception_handling(True):\n+        noexcept_func()\n+\n+def test_assignment(arg):\n+    global py_global, c_global\n+\n+    cdef str typed_as_string = \"hello\"\n+\n+    some_value = 5\n+    with cython.test_body_needs_exception_handling(False):\n+        a = 2\n+        b = None\n+        c = some_value\n+        d = arg\n+        typed_as_string = \"goodbye\"  # string destructor is safe",
            "html_url": "https://github.com/cython/cython/pull/7021#discussion_r2217338889",
            "id": 2217338889,
            "in_reply_to_id": 2216909582,
            "line": 84,
            "node_id": "PRRC_kwDOABDGAc6EKegJ",
            "original_commit_id": "5c0c11afa07b33987994d753375856f94ce0236d",
            "original_line": 82,
            "original_position": 82,
            "original_start_line": null,
            "path": "tests/compile/except_clause_needs_exception.pyx",
            "position": 84,
            "pull_request_review_id": 3035392261,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7021",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2217338889/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-19T14:50:35Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2217338889",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7021#discussion_r2217340039"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7021"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2217340039"
                }
            },
            "author_association": "MEMBER",
            "body": "I'm fairly sure this generates a `TypecastNode` or something similar and so that will fail. I'll add a test though.",
            "commit_id": "662dfad664c7a7f77e29ac28083ff75065170815",
            "created_at": "2025-07-19T14:53:02Z",
            "diff_hunk": "@@ -4507,3 +4507,111 @@ def serialize_local_variables(self, entries):\n \n             self.tb.start('LocalVar', attrs)\n             self.tb.end('LocalVar')\n+\n+\n+class HasNoExceptionHandlingVisitor(TreeVisitor):\n+    \"\"\"\n+    Used by finalExceptClauseNode to work out if the body\n+    needs to handle exceptions at all. This includes:\n+\n+    1. Can raise an exception.\n+    2. May try to access the traceback.\n+    \"\"\"\n+    def __init__(self):\n+        self.uses_no_exceptions = True\n+        self.assignment_lhs = None\n+        super().__init__()\n+\n+    def __call__(self, node) -> bool:\n+        self.visit(node)\n+        return self.uses_no_exceptions\n+\n+    def visit_Node(self, node):\n+        self.uses_no_exceptions = False  # In general, nodes use exceptions\n+\n+    def visit_ExprStatNode(self, node):\n+        self.visitchildren(node)\n+\n+    def visit_StatListNode(self, node):\n+        self.visitchildren(node)\n+\n+    def visit_ExprNode(self, node):\n+        if not node.is_literal:\n+            self.uses_no_exceptions = False\n+\n+    def visit_CallNode(self, node):\n+        # Implement this to make the behaviour as explicit as possible.\n+        # Even noexcept functions might end up printing a traceback.\n+        self.uses_no_exceptions = False\n+\n+    def visit_PassStatNode(self, node):\n+        pass  # Does nothing.  Good.\n+\n+    def visit_ReturnStatNode(self, node):\n+        if not self.uses_no_exceptions:\n+            return  # shortcut\n+        self.visitchildren(node)\n+\n+    def visit_SingleAssignmentNode(self, node):\n+        if not self.uses_no_exceptions:\n+            return  # shortcut\n+        node_lhs = self.assignment_lhs = node.lhs\n+        if ((not node_lhs.is_name or not node_lhs.cf_is_null) and\n+                (node_lhs.type.needs_refcounting or node_lhs.type.is_cpp_class)):\n+            # There's a small (maybe non-exhaustive) list of builtin types that we can be confident\n+            # don't do anything interesting on destruction.\n+            if not (node_lhs.type in [Builtin.bytes_type, Builtin.unicode_type, Builtin.bytearray_type,\n+                                      Builtin.range_type,\n+                                      Builtin.bool_type, Builtin.float_type,\n+                                      Builtin.int_type, Builtin.complex_type]):\n+                # May trigger non-trivial destructor - potentially dubious\n+                self.uses_no_exceptions = False\n+            return\n+        self.visit(node_lhs)\n+        self.assignment_lhs = None\n+        rhs_type = node.rhs.type\n+        if not (rhs_type.is_numeric or rhs_type.is_pyobject or rhs_type.is_memoryviewslice):",
            "html_url": "https://github.com/cython/cython/pull/7021#discussion_r2217340039",
            "id": 2217340039,
            "in_reply_to_id": 2216886146,
            "line": 4562,
            "node_id": "PRRC_kwDOABDGAc6EKeyH",
            "original_commit_id": "5c0c11afa07b33987994d753375856f94ce0236d",
            "original_line": 4573,
            "original_position": 67,
            "original_start_line": null,
            "path": "Cython/Compiler/ParseTreeTransforms.py",
            "position": 56,
            "pull_request_review_id": 3035393490,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7021",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2217340039/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-19T14:53:02Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2217340039",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7021#discussion_r2217435712"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7021"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2217435712"
                }
            },
            "author_association": "MEMBER",
            "body": "Any thoughts on the destructors? I'm heading to the opinion that we should treat it as an implementation detail, and not exclude `object` assignments just because a destructor might be called?",
            "commit_id": "662dfad664c7a7f77e29ac28083ff75065170815",
            "created_at": "2025-07-19T19:52:00Z",
            "diff_hunk": "@@ -0,0 +1,156 @@\n+# mode: compile\n+# tag: cpp, cpp17, no-cpp-locals\n+\n+# This test tests a small optimization for except clauses where they can\n+# potentially omit some exception handling code if sufficiently simple.\n+# The optimization is performed explicitly because it's completely\n+# unobservable. Therefore, it's hard to test behaviourally.\n+#\n+# Restrict to c++17 just because to use cpp_locals in the test.\n+\n+cimport cython\n+\n+cdef cppclass CppClass:\n+    int attr\n+    CppClass():\n+        pass\n+\n+def return_empty():\n+    with cython.test_body_needs_exception_handling(False):\n+        return\n+\n+def return_none():\n+    with cython.test_body_needs_exception_handling(False):\n+        return None\n+\n+def return_int():\n+    with cython.test_body_needs_exception_handling(False):\n+        return 100\n+\n+def return_str_literal():\n+    with cython.test_body_needs_exception_handling(False):\n+        return \"I'm always in the module cache!\"\n+\n+def return_arg(arg):\n+    with cython.test_body_needs_exception_handling(False):\n+        return arg\n+\n+def return_assigned():\n+    x = object()\n+    with cython.test_body_needs_exception_handling(False):\n+        return x\n+\n+def result_maybe_unassigned(arg):\n+    if arg:\n+        x = object\n+    with cython.test_body_needs_exception_handling(True):\n+        return x\n+\n+py_global = None\n+cdef int c_global = 0\n+\n+def return_py_global():\n+    with cython.test_body_needs_exception_handling(True):\n+        return py_global\n+\n+def return_c_global():\n+    with cython.test_body_needs_exception_handling(True):\n+        return c_global\n+\n+def test_pass():\n+    with cython.test_body_needs_exception_handling(False):\n+        pass\n+\n+cdef void noexcept_func() noexcept:\n+    pass\n+\n+def call_noexcept_func():\n+    with cython.test_body_needs_exception_handling(True):\n+        noexcept_func()\n+\n+def test_assignment(arg):\n+    global py_global, c_global\n+\n+    cdef str typed_as_string = \"hello\"\n+\n+    some_value = 5\n+    with cython.test_body_needs_exception_handling(False):\n+        a = 2\n+        b = None\n+        c = some_value\n+        d = arg\n+        typed_as_string = \"goodbye\"  # string destructor is safe",
            "html_url": "https://github.com/cython/cython/pull/7021#discussion_r2217435712",
            "id": 2217435712,
            "in_reply_to_id": 2216909582,
            "line": 84,
            "node_id": "PRRC_kwDOABDGAc6EK2JA",
            "original_commit_id": "5c0c11afa07b33987994d753375856f94ce0236d",
            "original_line": 82,
            "original_position": 82,
            "original_start_line": null,
            "path": "tests/compile/except_clause_needs_exception.pyx",
            "position": 84,
            "pull_request_review_id": 3035525748,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7021",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2217435712/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-19T19:52:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2217435712",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7021#discussion_r2217446460"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7021"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2217446460"
                }
            },
            "author_association": "MEMBER",
            "body": "> I could be persuaded that the exact timing of destruction is sufficiently implementation defined that we could chose not to care\r\n\r\nSounds reasonable. We're avoiding the traceback in a situation in which even Python doesn't give a hard guarantee (e.g. due to cyclic references). Users are much more likely to benefit from that choice than from the alternative 'strict' semantics.",
            "commit_id": "662dfad664c7a7f77e29ac28083ff75065170815",
            "created_at": "2025-07-19T20:24:52Z",
            "diff_hunk": "@@ -0,0 +1,156 @@\n+# mode: compile\n+# tag: cpp, cpp17, no-cpp-locals\n+\n+# This test tests a small optimization for except clauses where they can\n+# potentially omit some exception handling code if sufficiently simple.\n+# The optimization is performed explicitly because it's completely\n+# unobservable. Therefore, it's hard to test behaviourally.\n+#\n+# Restrict to c++17 just because to use cpp_locals in the test.\n+\n+cimport cython\n+\n+cdef cppclass CppClass:\n+    int attr\n+    CppClass():\n+        pass\n+\n+def return_empty():\n+    with cython.test_body_needs_exception_handling(False):\n+        return\n+\n+def return_none():\n+    with cython.test_body_needs_exception_handling(False):\n+        return None\n+\n+def return_int():\n+    with cython.test_body_needs_exception_handling(False):\n+        return 100\n+\n+def return_str_literal():\n+    with cython.test_body_needs_exception_handling(False):\n+        return \"I'm always in the module cache!\"\n+\n+def return_arg(arg):\n+    with cython.test_body_needs_exception_handling(False):\n+        return arg\n+\n+def return_assigned():\n+    x = object()\n+    with cython.test_body_needs_exception_handling(False):\n+        return x\n+\n+def result_maybe_unassigned(arg):\n+    if arg:\n+        x = object\n+    with cython.test_body_needs_exception_handling(True):\n+        return x\n+\n+py_global = None\n+cdef int c_global = 0\n+\n+def return_py_global():\n+    with cython.test_body_needs_exception_handling(True):\n+        return py_global\n+\n+def return_c_global():\n+    with cython.test_body_needs_exception_handling(True):\n+        return c_global\n+\n+def test_pass():\n+    with cython.test_body_needs_exception_handling(False):\n+        pass\n+\n+cdef void noexcept_func() noexcept:\n+    pass\n+\n+def call_noexcept_func():\n+    with cython.test_body_needs_exception_handling(True):\n+        noexcept_func()\n+\n+def test_assignment(arg):\n+    global py_global, c_global\n+\n+    cdef str typed_as_string = \"hello\"\n+\n+    some_value = 5\n+    with cython.test_body_needs_exception_handling(False):\n+        a = 2\n+        b = None\n+        c = some_value\n+        d = arg\n+        typed_as_string = \"goodbye\"  # string destructor is safe",
            "html_url": "https://github.com/cython/cython/pull/7021#discussion_r2217446460",
            "id": 2217446460,
            "in_reply_to_id": 2216909582,
            "line": 84,
            "node_id": "PRRC_kwDOABDGAc6EK4w8",
            "original_commit_id": "5c0c11afa07b33987994d753375856f94ce0236d",
            "original_line": 82,
            "original_position": 82,
            "original_start_line": null,
            "path": "tests/compile/except_clause_needs_exception.pyx",
            "position": 84,
            "pull_request_review_id": 3035537187,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7021",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2217446460/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-19T20:24:53Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2217446460",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/cython/cython/issues/7021/comments",
    "commit_data": [
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/31e9ec4f74eae299cb09d1e63614cda05da781da/comments",
            "commit": {
                "author": {
                    "date": "2025-07-17T20:33:49Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-07-17T20:37:39Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Avoid creating traceback in more except clauses\n\nIn addition to just \"returning literals\", also avoid\ncreating a traceback for a lot of simple assignments, and\nsome safe variable reads.",
                "tree": {
                    "sha": "3a1d73cb4f900af5e47703b708ba9add0c8b4ee4",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/3a1d73cb4f900af5e47703b708ba9add0c8b4ee4"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/31e9ec4f74eae299cb09d1e63614cda05da781da",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/31e9ec4f74eae299cb09d1e63614cda05da781da",
            "node_id": "C_kwDOAhr4b9oAKDMxZTllYzRmNzRlYWUyOTljYjA5ZDFlNjM2MTRjZGEwNWRhNzgxZGE",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/e53273edc7c0eb1a4ab461ad8facdc27d8a2ece4",
                    "sha": "e53273edc7c0eb1a4ab461ad8facdc27d8a2ece4",
                    "url": "https://api.github.com/repos/cython/cython/commits/e53273edc7c0eb1a4ab461ad8facdc27d8a2ece4"
                }
            ],
            "sha": "31e9ec4f74eae299cb09d1e63614cda05da781da",
            "url": "https://api.github.com/repos/cython/cython/commits/31e9ec4f74eae299cb09d1e63614cda05da781da"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/9a0b431b4d949f14231517a8a7e42428824f3aea/comments",
            "commit": {
                "author": {
                    "date": "2025-07-17T21:00:53Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-07-17T21:00:53Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Restrict to c++17",
                "tree": {
                    "sha": "49c46cdc21db1aae087876018688ff11da061e33",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/49c46cdc21db1aae087876018688ff11da061e33"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/9a0b431b4d949f14231517a8a7e42428824f3aea",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/9a0b431b4d949f14231517a8a7e42428824f3aea",
            "node_id": "C_kwDOAhr4b9oAKDlhMGI0MzFiNGQ5NDlmMTQyMzE1MTdhOGE3ZTQyNDI4ODI0ZjNhZWE",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/31e9ec4f74eae299cb09d1e63614cda05da781da",
                    "sha": "31e9ec4f74eae299cb09d1e63614cda05da781da",
                    "url": "https://api.github.com/repos/cython/cython/commits/31e9ec4f74eae299cb09d1e63614cda05da781da"
                }
            ],
            "sha": "9a0b431b4d949f14231517a8a7e42428824f3aea",
            "url": "https://api.github.com/repos/cython/cython/commits/9a0b431b4d949f14231517a8a7e42428824f3aea"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/d1b47d7ca731ce25a4c26d8336231ef298618496/comments",
            "commit": {
                "author": {
                    "date": "2025-07-18T05:24:41Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-07-18T05:24:41Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "One more improvement",
                "tree": {
                    "sha": "08e9381edf1249a8d871ad0191a646664359fd64",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/08e9381edf1249a8d871ad0191a646664359fd64"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/d1b47d7ca731ce25a4c26d8336231ef298618496",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/d1b47d7ca731ce25a4c26d8336231ef298618496",
            "node_id": "C_kwDOAhr4b9oAKGQxYjQ3ZDdjYTczMWNlMjVhNGMyNmQ4MzM2MjMxZWYyOTg2MTg0OTY",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/9a0b431b4d949f14231517a8a7e42428824f3aea",
                    "sha": "9a0b431b4d949f14231517a8a7e42428824f3aea",
                    "url": "https://api.github.com/repos/cython/cython/commits/9a0b431b4d949f14231517a8a7e42428824f3aea"
                }
            ],
            "sha": "d1b47d7ca731ce25a4c26d8336231ef298618496",
            "url": "https://api.github.com/repos/cython/cython/commits/d1b47d7ca731ce25a4c26d8336231ef298618496"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/8705a77213390d551a0e541e81b464b78de26508/comments",
            "commit": {
                "author": {
                    "date": "2025-07-18T17:44:23Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-07-18T17:44:23Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Apply suggestions from code review\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                "tree": {
                    "sha": "1d9a451cdbfeee90383d75267c8280fef71db495",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/1d9a451cdbfeee90383d75267c8280fef71db495"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/8705a77213390d551a0e541e81b464b78de26508",
                "verification": {
                    "payload": "tree 1d9a451cdbfeee90383d75267c8280fef71db495\nparent d1b47d7ca731ce25a4c26d8336231ef298618496\nauthor da-woods <dw-git@d-woods.co.uk> 1752860663 +0100\ncommitter GitHub <noreply@github.com> 1752860663 +0100\n\nApply suggestions from code review\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJoeof3CRC1aQ7uu5UhlAAAoskQAIQdIqNnJDpawgNGwSVjvGQl\nco6tFS0JHs0QKGbShZVJlctT3qsZ7FqUEjG3yE64YEAguBXcOCHw9FKI55enk9JK\nVhvHbY8WfLJZ6FAhSOCfrt45EBhXTbke+0SdD+/cTPIdFmhY21DCuRBsRVVZQinw\nCgwFvtfjnIxI0Ix+YkO+AnFWihE9xH8yy46bD+RWMWQeAvt0smIr7+FiRnLkneAh\nu+plwiukFiXFV1rv2ydBKaKE26oP1xZIgLwVBnEXyZ9CGgM9acrfe5w5cnQwJiSP\nVxM7VpWDQpdko8ko502KPZYoZ+ommpV42+k/E8JF+ZRr5cYP8LT6tIhijSN3K0vZ\n2brWpsMLiE91nvqNVquPH32DlApu4dzNKekTvra1P/EQ0YGw/qgNFlPjj31ogdB+\naWlGtalK1NcTdzO2mO/Uk2OXEr8OjNdjeRd3XX0Rc9ZhSq0AfOvpZwyCf/b1eqwY\nJ8jzMr6oE+2rFxFkp3DcWsLh3EBMauGMcZX5TMMmKsvY7ctvh9VADvXd/vk4lgyK\njMolrpTUsa9RPcNZ4HmKQbQr87w8Uyz7A4UxlTz6/tQSbHMhHUCFFNUn56ozQCCH\nh/GitY9tCESzZQab5N6fbX0eS2/nZnmQ4EAnFds53PXZbWrLqNS6K6hCXG6+FJID\nXIL+CWViSnWNtoteFRD4\n=GGXO\n-----END PGP SIGNATURE-----\n",
                    "verified": true,
                    "verified_at": "2025-07-18T17:44:24Z"
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/8705a77213390d551a0e541e81b464b78de26508",
            "node_id": "C_kwDOAhr4b9oAKDg3MDVhNzcyMTMzOTBkNTUxYTBlNTQxZTgxYjQ2NGI3OGRlMjY1MDg",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/d1b47d7ca731ce25a4c26d8336231ef298618496",
                    "sha": "d1b47d7ca731ce25a4c26d8336231ef298618496",
                    "url": "https://api.github.com/repos/cython/cython/commits/d1b47d7ca731ce25a4c26d8336231ef298618496"
                }
            ],
            "sha": "8705a77213390d551a0e541e81b464b78de26508",
            "url": "https://api.github.com/repos/cython/cython/commits/8705a77213390d551a0e541e81b464b78de26508"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/5c0c11afa07b33987994d753375856f94ce0236d/comments",
            "commit": {
                "author": {
                    "date": "2025-07-18T18:06:03Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-07-18T18:06:03Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Comments from review",
                "tree": {
                    "sha": "3d8c073f5c9a43c1ef38dd68e10ae058b91007a4",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/3d8c073f5c9a43c1ef38dd68e10ae058b91007a4"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/5c0c11afa07b33987994d753375856f94ce0236d",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/5c0c11afa07b33987994d753375856f94ce0236d",
            "node_id": "C_kwDOAhr4b9oAKDVjMGMxMWFmYTA3YjMzOTg3OTk0ZDc1MzM3NTg1NmY5NGNlMDIzNmQ",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/8705a77213390d551a0e541e81b464b78de26508",
                    "sha": "8705a77213390d551a0e541e81b464b78de26508",
                    "url": "https://api.github.com/repos/cython/cython/commits/8705a77213390d551a0e541e81b464b78de26508"
                }
            ],
            "sha": "5c0c11afa07b33987994d753375856f94ce0236d",
            "url": "https://api.github.com/repos/cython/cython/commits/5c0c11afa07b33987994d753375856f94ce0236d"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/b8c768de145d7755962414f30235c42718e58057/comments",
            "commit": {
                "author": {
                    "date": "2025-07-19T14:53:20Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-07-19T14:53:20Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Apply suggestions from code review\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                "tree": {
                    "sha": "6ace49f7fb6070dec8bab5c65a7034c4ffb036c9",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/6ace49f7fb6070dec8bab5c65a7034c4ffb036c9"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/b8c768de145d7755962414f30235c42718e58057",
                "verification": {
                    "payload": "tree 6ace49f7fb6070dec8bab5c65a7034c4ffb036c9\nparent 5c0c11afa07b33987994d753375856f94ce0236d\nauthor da-woods <dw-git@d-woods.co.uk> 1752936800 +0100\ncommitter GitHub <noreply@github.com> 1752936800 +0100\n\nApply suggestions from code review\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJoe7FgCRC1aQ7uu5UhlAAAJI0QACPXjr2eIC49WJQ6bKWdHFoT\n0aaHHIWUaRUXmmP4YgIGq/9KIsIrcexuUcxyO1HBTp08GtKPPXxIugBC/YNG8Cjm\nhOev/xi7xmdqu1FvXhCovJEl/xOFqSp5JeAXmBgBurDQCgHdvx31KNIHMFaom7j4\nZqfzRHFi750XbUBAl26r1vdOvJa8wh54RPcNUavCIn3HmtO2f3n0W1882/xVZsXp\nK4esHV/XXa25O9Qu4RT2aWSa6EPIOrcDQvCu9cBn24pPcPS4vosATjmMv0z6wpa3\nVSnDgTi9luvYK9jO0oGQhug5pDBIL03xAH5R73368HJTRmnFex+dlCN1Mai0NbxM\nBX5TIr1rlDMnRKMk608ukBWhbfZx6qiiWBsw5pFpNyafFL8TlbXI5+FHhgCC791O\n0n/3CyZDno8wM1/kxHungUyzK2U76dwR+pVZjRegA0hCnr2V/kLugdasv6duq1Kf\nzFaS7geCHoiivDGktpLWqBJnO316SbNUakWLBG9XKvtrZpNDm+BNbMe2QHcGmRNA\n4itKZ+5z1zTzt2AvwNTbGAGWjDIcsoE/fJBRKjXxT28Q/xs7tSikm/G/LwVXly7n\nOGedTAVZg6N0KE0bm/SZUaIcMaaqgy0rRB4F8igJtoP0rYpTIyd+C7pvFGtkfYpw\nxVrgcIbkYvj9Ee7SZwgl\n=5pRz\n-----END PGP SIGNATURE-----\n",
                    "verified": true,
                    "verified_at": "2025-07-19T14:53:21Z"
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/b8c768de145d7755962414f30235c42718e58057",
            "node_id": "C_kwDOAhr4b9oAKGI4Yzc2OGRlMTQ1ZDc3NTU5NjI0MTRmMzAyMzVjNDI3MThlNTgwNTc",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/5c0c11afa07b33987994d753375856f94ce0236d",
                    "sha": "5c0c11afa07b33987994d753375856f94ce0236d",
                    "url": "https://api.github.com/repos/cython/cython/commits/5c0c11afa07b33987994d753375856f94ce0236d"
                }
            ],
            "sha": "b8c768de145d7755962414f30235c42718e58057",
            "url": "https://api.github.com/repos/cython/cython/commits/b8c768de145d7755962414f30235c42718e58057"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/6bc12f639a725e625d694060069364348fa9b79e/comments",
            "commit": {
                "author": {
                    "date": "2025-07-19T15:06:38Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-07-19T15:06:38Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Extra tests and handle index node",
                "tree": {
                    "sha": "fbe402a6b0a7b7ace602be4c946ca04216647a70",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/fbe402a6b0a7b7ace602be4c946ca04216647a70"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/6bc12f639a725e625d694060069364348fa9b79e",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/6bc12f639a725e625d694060069364348fa9b79e",
            "node_id": "C_kwDOAhr4b9oAKDZiYzEyZjYzOWE3MjVlNjI1ZDY5NDA2MDA2OTM2NDM0OGZhOWI3OWU",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/b8c768de145d7755962414f30235c42718e58057",
                    "sha": "b8c768de145d7755962414f30235c42718e58057",
                    "url": "https://api.github.com/repos/cython/cython/commits/b8c768de145d7755962414f30235c42718e58057"
                }
            ],
            "sha": "6bc12f639a725e625d694060069364348fa9b79e",
            "url": "https://api.github.com/repos/cython/cython/commits/6bc12f639a725e625d694060069364348fa9b79e"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/2daaaf3f277adc6c163e111777734987fe011896/comments",
            "commit": {
                "author": {
                    "date": "2025-07-20T10:23:27Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-07-20T10:23:27Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Don't worry about destruction.",
                "tree": {
                    "sha": "323cc1a8ad164122cc1f3c7d5a7eb32892e2bec1",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/323cc1a8ad164122cc1f3c7d5a7eb32892e2bec1"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/2daaaf3f277adc6c163e111777734987fe011896",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/2daaaf3f277adc6c163e111777734987fe011896",
            "node_id": "C_kwDOAhr4b9oAKDJkYWFhZjNmMjc3YWRjNmMxNjNlMTExNzc3NzM0OTg3ZmUwMTE4OTY",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/6bc12f639a725e625d694060069364348fa9b79e",
                    "sha": "6bc12f639a725e625d694060069364348fa9b79e",
                    "url": "https://api.github.com/repos/cython/cython/commits/6bc12f639a725e625d694060069364348fa9b79e"
                }
            ],
            "sha": "2daaaf3f277adc6c163e111777734987fe011896",
            "url": "https://api.github.com/repos/cython/cython/commits/2daaaf3f277adc6c163e111777734987fe011896"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/662dfad664c7a7f77e29ac28083ff75065170815/comments",
            "commit": {
                "author": {
                    "date": "2025-07-20T11:35:54Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-07-20T11:35:54Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "code style",
                "tree": {
                    "sha": "eb5aa5ac4494a794610787ca874054d0c1e7ba9e",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/eb5aa5ac4494a794610787ca874054d0c1e7ba9e"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/662dfad664c7a7f77e29ac28083ff75065170815",
                "verification": {
                    "payload": "tree eb5aa5ac4494a794610787ca874054d0c1e7ba9e\nparent 2daaaf3f277adc6c163e111777734987fe011896\nauthor da-woods <dw-git@d-woods.co.uk> 1753011354 +0100\ncommitter GitHub <noreply@github.com> 1753011354 +0100\n\ncode style",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJofNSaCRC1aQ7uu5UhlAAAvSwQAFml8c7hL90+WjCgMfhUiPQX\nv1XSRdDAhNhQIi9+Txsi2KWv3PP2nuiccHVgtLXaP8VY94HzOAG0CXcHqajutfM1\ngQR/tkhsvaGEhEU3xkD21yeW8SrZhCQu/D6jsufrx6gEy7Fw9q+LRn533MZv4d3g\nMlkSS5rrOrtiNuudS+3ThnDag+uYTHwUasVmBi1JizD0R0yvvYvwz33C0VM3SxSJ\noefjvxtQ6238ukCnj38CUV/TcPY8gtjofMraKi/oYqaNWsZPSANHFu/Z2bXE/2xj\n9mdC6oHRtQnp3U/TPyihoqTjFVPjq5QkDL7krRn4isUwJ9bgFpy27oGl30NJ4E7i\nX6/ReNxR32+/nAm11fsX2IteWD+vrdQHNjno4T1TY7RViUJvKhAm9Mil3P5z1Gf1\nzyxM9K0McmcCBMYj+SU4FZY56G0CvH1aVaQfxD6e12UZLsh30qCfnFd3aVpV9sop\nlpy/6BtttzKbs1sIju8br6igZqTFsSgBIm3Vck/d+RNmuOMDTISg1ktvHVKai+Ol\nJnETqlINdTkS0M0eYgm+oi1XmRM2TbbRCRYKbe3VadmrAbFJT6j0CfNlmiTrrSeD\nicPqwTIAl5su+/ew2vCVIv4hNR8n+LlHNOABFPmeJLPIA5BbL40vX491OKzUErYa\nXZzABypF7mdsu9zHmMBj\n=trl2\n-----END PGP SIGNATURE-----\n",
                    "verified": true,
                    "verified_at": "2025-07-20T11:35:55Z"
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/662dfad664c7a7f77e29ac28083ff75065170815",
            "node_id": "C_kwDOAhr4b9oAKDY2MmRmYWQ2NjRjN2E3Zjc3ZTI5YWMyODA4M2ZmNzUwNjUxNzA4MTU",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/2daaaf3f277adc6c163e111777734987fe011896",
                    "sha": "2daaaf3f277adc6c163e111777734987fe011896",
                    "url": "https://api.github.com/repos/cython/cython/commits/2daaaf3f277adc6c163e111777734987fe011896"
                }
            ],
            "sha": "662dfad664c7a7f77e29ac28083ff75065170815",
            "url": "https://api.github.com/repos/cython/cython/commits/662dfad664c7a7f77e29ac28083ff75065170815"
        }
    ],
    "commits_url": "https://api.github.com/repos/cython/cython/pulls/7021/commits",
    "created_at": "2025-07-17T20:38:20Z",
    "diff_url": "https://github.com/cython/cython/pull/7021.diff",
    "draft": false,
    "head": {
        "label": "da-woods:more-skip-exception-handling",
        "ref": "more-skip-exception-handling",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/da-woods/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/da-woods/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/da-woods/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/da-woods/cython/branches{/branch}",
            "clone_url": "https://github.com/da-woods/cython.git",
            "collaborators_url": "https://api.github.com/repos/da-woods/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/da-woods/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/da-woods/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/da-woods/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/da-woods/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/da-woods/cython/contributors",
            "created_at": "2015-05-09T08:55:00Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/da-woods/cython/deployments",
            "description": "A Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/da-woods/cython/downloads",
            "events_url": "https://api.github.com/repos/da-woods/cython/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/da-woods/cython/forks",
            "full_name": "da-woods/cython",
            "git_commits_url": "https://api.github.com/repos/da-woods/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/da-woods/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/da-woods/cython/git/tags{/sha}",
            "git_url": "git://github.com/da-woods/cython.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "http://cython.org",
            "hooks_url": "https://api.github.com/repos/da-woods/cython/hooks",
            "html_url": "https://github.com/da-woods/cython",
            "id": 35321967,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/da-woods/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/da-woods/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/da-woods/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/da-woods/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/da-woods/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/da-woods/cython/languages",
            "license": {
                "key": "apache-2.0",
                "name": "Apache License 2.0",
                "node_id": "MDc6TGljZW5zZTI=",
                "spdx_id": "Apache-2.0",
                "url": "https://api.github.com/licenses/apache-2.0"
            },
            "merges_url": "https://api.github.com/repos/da-woods/cython/merges",
            "milestones_url": "https://api.github.com/repos/da-woods/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkzNTMyMTk2Nw==",
            "notifications_url": "https://api.github.com/repos/da-woods/cython/notifications{?since,all,participating}",
            "open_issues": 2,
            "open_issues_count": 2,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/da-woods/cython/pulls{/number}",
            "pushed_at": "2025-07-22T09:42:27Z",
            "releases_url": "https://api.github.com/repos/da-woods/cython/releases{/id}",
            "size": 79232,
            "ssh_url": "git@github.com:da-woods/cython.git",
            "stargazers_count": 2,
            "stargazers_url": "https://api.github.com/repos/da-woods/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/da-woods/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/da-woods/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/da-woods/cython/subscription",
            "svn_url": "https://github.com/da-woods/cython",
            "tags_url": "https://api.github.com/repos/da-woods/cython/tags",
            "teams_url": "https://api.github.com/repos/da-woods/cython/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/da-woods/cython/git/trees{/sha}",
            "updated_at": "2025-06-04T22:39:56Z",
            "url": "https://api.github.com/repos/da-woods/cython",
            "visibility": "public",
            "watchers": 2,
            "watchers_count": 2,
            "web_commit_signoff_required": false
        },
        "sha": "662dfad664c7a7f77e29ac28083ff75065170815",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
            "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
            "followers_url": "https://api.github.com/users/da-woods/followers",
            "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
            "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/da-woods",
            "id": 10536947,
            "login": "da-woods",
            "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
            "organizations_url": "https://api.github.com/users/da-woods/orgs",
            "received_events_url": "https://api.github.com/users/da-woods/received_events",
            "repos_url": "https://api.github.com/users/da-woods/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/da-woods",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/cython/cython/pull/7021",
    "id": 2675089508,
    "issue_url": "https://api.github.com/repos/cython/cython/issues/7021",
    "labels": [
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425556272,
            "name": "Optimization",
            "node_id": "MDU6TGFiZWw0MjU1NTYyNzI=",
            "url": "https://api.github.com/repos/cython/cython/labels/Optimization"
        }
    ],
    "locked": false,
    "merge_commit_sha": "31d5ac272ac72248b0b68db6f6a72d4be2a11a21",
    "merged_at": "2025-07-20T13:50:01Z",
    "milestone": {
        "closed_at": null,
        "closed_issues": 67,
        "created_at": "2020-02-09T13:21:48Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
            "events_url": "https://api.github.com/users/scoder/events{/privacy}",
            "followers_url": "https://api.github.com/users/scoder/followers",
            "following_url": "https://api.github.com/users/scoder/following{/other_user}",
            "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/scoder",
            "id": 491659,
            "login": "scoder",
            "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
            "organizations_url": "https://api.github.com/users/scoder/orgs",
            "received_events_url": "https://api.github.com/users/scoder/received_events",
            "repos_url": "https://api.github.com/users/scoder/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/scoder",
            "user_view_type": "public"
        },
        "description": "First feature release after the cleanup releases 3.0 and 3.1.",
        "due_on": null,
        "html_url": "https://github.com/cython/cython/milestone/75",
        "id": 5085425,
        "labels_url": "https://api.github.com/repos/cython/cython/milestones/75/labels",
        "node_id": "MDk6TWlsZXN0b25lNTA4NTQyNQ==",
        "number": 75,
        "open_issues": 18,
        "state": "open",
        "title": "3.2",
        "updated_at": "2025-07-21T21:15:29Z",
        "url": "https://api.github.com/repos/cython/cython/milestones/75"
    },
    "node_id": "PR_kwDOABDGAc6fcqBk",
    "number": 7021,
    "patch_url": "https://github.com/cython/cython/pull/7021.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/cython/cython/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/cython/cython/pulls/7021/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/cython/cython/statuses/662dfad664c7a7f77e29ac28083ff75065170815",
    "title": "Avoid creating traceback in more except clauses",
    "updated_at": "2025-07-22T06:14:14Z",
    "url": "https://api.github.com/repos/cython/cython/pulls/7021",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
        "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
        "followers_url": "https://api.github.com/users/da-woods/followers",
        "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
        "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/da-woods",
        "id": 10536947,
        "login": "da-woods",
        "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
        "organizations_url": "https://api.github.com/users/da-woods/orgs",
        "received_events_url": "https://api.github.com/users/da-woods/received_events",
        "repos_url": "https://api.github.com/users/da-woods/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/da-woods",
        "user_view_type": "public"
    }
}