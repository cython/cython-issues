{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/cython/cython/issues/6463/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/cython/cython/pulls/6463/commits"
        },
        "html": {
            "href": "https://github.com/cython/cython/pull/6463"
        },
        "issue": {
            "href": "https://api.github.com/repos/cython/cython/issues/6463"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/cython/cython/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/cython/cython/pulls/6463/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/cython/cython/pulls/6463"
        },
        "statuses": {
            "href": "https://api.github.com/repos/cython/cython/statuses/59b29a38a2baa811f6707f202e8a6b03d9eda0b7"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "cython:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/cython/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/cython/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/cython/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/cython/cython/branches{/branch}",
            "clone_url": "https://github.com/cython/cython.git",
            "collaborators_url": "https://api.github.com/repos/cython/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/cython/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/cython/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/cython/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/cython/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/cython/cython/contributors",
            "created_at": "2010-11-21T07:44:20Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/cython/cython/deployments",
            "description": "The most widely used Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/cython/cython/downloads",
            "events_url": "https://api.github.com/repos/cython/cython/events",
            "fork": false,
            "forks": 1488,
            "forks_count": 1488,
            "forks_url": "https://api.github.com/repos/cython/cython/forks",
            "full_name": "cython/cython",
            "git_commits_url": "https://api.github.com/repos/cython/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/cython/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/cython/cython/git/tags{/sha}",
            "git_url": "git://github.com/cython/cython.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": false,
            "has_wiki": true,
            "homepage": "https://cython.org",
            "hooks_url": "https://api.github.com/repos/cython/cython/hooks",
            "html_url": "https://github.com/cython/cython",
            "id": 1099265,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/cython/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/cython/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/cython/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/cython/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/cython/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/cython/cython/languages",
            "license": {
                "key": "apache-2.0",
                "name": "Apache License 2.0",
                "node_id": "MDc6TGljZW5zZTI=",
                "spdx_id": "Apache-2.0",
                "url": "https://api.github.com/licenses/apache-2.0"
            },
            "merges_url": "https://api.github.com/repos/cython/cython/merges",
            "milestones_url": "https://api.github.com/repos/cython/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkxMDk5MjY1",
            "notifications_url": "https://api.github.com/repos/cython/cython/notifications{?since,all,participating}",
            "open_issues": 1373,
            "open_issues_count": 1373,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/486082?v=4",
                "events_url": "https://api.github.com/users/cython/events{/privacy}",
                "followers_url": "https://api.github.com/users/cython/followers",
                "following_url": "https://api.github.com/users/cython/following{/other_user}",
                "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/cython",
                "id": 486082,
                "login": "cython",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
                "organizations_url": "https://api.github.com/users/cython/orgs",
                "received_events_url": "https://api.github.com/users/cython/received_events",
                "repos_url": "https://api.github.com/users/cython/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/cython",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/cython/cython/pulls{/number}",
            "pushed_at": "2024-11-19T08:23:40Z",
            "releases_url": "https://api.github.com/repos/cython/cython/releases{/id}",
            "size": 74793,
            "ssh_url": "git@github.com:cython/cython.git",
            "stargazers_count": 9534,
            "stargazers_url": "https://api.github.com/repos/cython/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/cython/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/cython/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/cython/cython/subscription",
            "svn_url": "https://github.com/cython/cython",
            "tags_url": "https://api.github.com/repos/cython/cython/tags",
            "teams_url": "https://api.github.com/repos/cython/cython/teams",
            "topics": [
                "big-data",
                "c",
                "cpp",
                "cpython",
                "cpython-extensions",
                "cython",
                "performance",
                "python"
            ],
            "trees_url": "https://api.github.com/repos/cython/cython/git/trees{/sha}",
            "updated_at": "2024-11-19T10:18:34Z",
            "url": "https://api.github.com/repos/cython/cython",
            "visibility": "public",
            "watchers": 9534,
            "watchers_count": 9534,
            "web_commit_signoff_required": false
        },
        "sha": "b1a0f98b14fef664d94fadcdacccc833b84dd78c",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/486082?v=4",
            "events_url": "https://api.github.com/users/cython/events{/privacy}",
            "followers_url": "https://api.github.com/users/cython/followers",
            "following_url": "https://api.github.com/users/cython/following{/other_user}",
            "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/cython",
            "id": 486082,
            "login": "cython",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
            "organizations_url": "https://api.github.com/users/cython/orgs",
            "received_events_url": "https://api.github.com/users/cython/received_events",
            "repos_url": "https://api.github.com/users/cython/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/cython",
            "user_view_type": "public"
        }
    },
    "body": "Essentially I've reimplemented the PyState_GetModule function to provide a base-line fallback which will work (at least while the GIL is held). Long-term I think we want to use the proper mechanisms for isolating modules to get the state from the class or the functions. However this achieves a base level of functionality.\r\n\r\nI've used binary-search in a list of thread ids. This is probably needlessly inefficient (since practically the thread ids are low sequential integers). However it should at least be fairly general.",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6463#discussion_r1818067751"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6463"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1818067751"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n        # In this case we have to remove the module from our lookup table ourself\r\n        # because Python isn't going to do it.\r\n```",
            "commit_id": "59b29a38a2baa811f6707f202e8a6b03d9eda0b7",
            "created_at": "2024-10-27T11:30:38Z",
            "diff_hunk": "@@ -2984,6 +2987,11 @@ def generate_module_state_clear(self, env, code):\n         code.putln('Py_CLEAR(clear_module_state->%s);' %\n             Naming.fusedfunction_type_cname)\n         code.putln('#endif')\n+        code.putln(\"#if CYTHON_PEP489_MULTI_PHASE_INIT\")\n+        # In this case we have to remove the module from our lookup table ourself\n+        # because Python isn't going to do it",
            "html_url": "https://github.com/cython/cython/pull/6463#discussion_r1818067751",
            "id": 1818067751,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5sXYMn",
            "original_commit_id": "52c3295ac58c94b355e286436c86d859e847a2d7",
            "original_line": 2992,
            "original_position": 30,
            "original_start_line": 2991,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": null,
            "pull_request_review_id": 2397510388,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6463",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1818067751/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-10-27T13:14:43Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1818067751",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6463#discussion_r1818068196"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6463"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1818068196"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n        # manage_ref is False (and refnanny calls are omitted) because refnanny isn't yet initialized.\r\n```",
            "commit_id": "59b29a38a2baa811f6707f202e8a6b03d9eda0b7",
            "created_at": "2024-10-27T11:33:00Z",
            "diff_hunk": "@@ -3619,23 +3627,25 @@ def generate_module_creation_code(self, env, code):\n         else:\n             doc = \"0\"\n \n+        # manage_ref is False (and refnanny calls are omitted) because refnanny isn't yet initialized",
            "html_url": "https://github.com/cython/cython/pull/6463#discussion_r1818068196",
            "id": 1818068196,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5sXYTk",
            "original_commit_id": "52c3295ac58c94b355e286436c86d859e847a2d7",
            "original_line": 3630,
            "original_position": 75,
            "original_start_line": null,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": null,
            "pull_request_review_id": 2397510388,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6463",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1818068196/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-27T13:14:43Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1818068196",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6463#discussion_r1818068998"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6463"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1818068998"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n#if CYTHON_PEP489_MULTI_PHASE_INIT && CYTHON_USE_MODULE_STATE\r\n// This defines an ad-hoc, single module version of PyState_FindModule that\r\n// works for multi-phase init modules. It's intended to be the last option\r\n// when all the other official ways of getting the module are unavailable.\r\nstatic PyObject *__Pyx_State_FindModule(void*); /* proto */\r\nstatic int __Pyx_State_AddModule(PyObject* module, void*); /* proto */\r\nstatic int __Pyx_State_RemoveModule(void*); /* proto */\r\n\r\n#elif CYTHON_USE_MODULE_STATE\r\n#define __Pyx_State_FindModule PyState_FindModule\r\n#define __Pyx_State_AddModule PyState_AddModule\r\n#define __Pyx_State_RemoveModule PyState_RemoveModule\r\n#endif\r\n```",
            "commit_id": "59b29a38a2baa811f6707f202e8a6b03d9eda0b7",
            "created_at": "2024-10-27T11:37:43Z",
            "diff_hunk": "@@ -2484,3 +2488,259 @@ static int __Pyx_VersionSanityCheck(void) {\n #else\n #define __Pyx_shared_in_cpython_freethreading(x)\n #endif\n+\n+////////////////////////// MultiPhaseInitModuleState.proto /////////////\n+\n+#if CYTHON_PEP489_MULTI_PHASE_INIT && CYTHON_USE_MODULE_STATE\n+// This defines an ad-hoc, single module version of PyState_FindModule that\n+// works for multi-phase init modules. It's intended to be the last option\n+// when all the other official ways of getting the module are unavailble.\n+static PyObject *__Pyx_State_FindModule(void*); /* proto */\n+static int __Pyx_State_AddModule(PyObject* module, void*); /* proto */\n+static int __Pyx_State_RemoveModule(void*); /* proto */\n+#elif CYTHON_USE_MODULE_STATE\n+#define __Pyx_State_FindModule PyState_FindModule\n+#define __Pyx_State_AddModule PyState_AddModule\n+#define __Pyx_State_RemoveModule PyState_RemoveModule\n+#endif",
            "html_url": "https://github.com/cython/cython/pull/6463#discussion_r1818068998",
            "id": 1818068998,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5sXYgG",
            "original_commit_id": "52c3295ac58c94b355e286436c86d859e847a2d7",
            "original_line": 2505,
            "original_position": 46,
            "original_start_line": 2494,
            "path": "Cython/Utility/ModuleSetupCode.c",
            "position": null,
            "pull_request_review_id": 2397510388,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6463",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1818068998/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-10-27T13:14:43Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1818068998",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6463#discussion_r1818069604"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6463"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1818069604"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n#error \"No suitable thread safety primitives are available for CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE. \" \\\r\n```",
            "commit_id": "59b29a38a2baa811f6707f202e8a6b03d9eda0b7",
            "created_at": "2024-10-27T11:40:45Z",
            "diff_hunk": "@@ -2484,3 +2488,259 @@ static int __Pyx_VersionSanityCheck(void) {\n #else\n #define __Pyx_shared_in_cpython_freethreading(x)\n #endif\n+\n+////////////////////////// MultiPhaseInitModuleState.proto /////////////\n+\n+#if CYTHON_PEP489_MULTI_PHASE_INIT && CYTHON_USE_MODULE_STATE\n+// This defines an ad-hoc, single module version of PyState_FindModule that\n+// works for multi-phase init modules. It's intended to be the last option\n+// when all the other official ways of getting the module are unavailble.\n+static PyObject *__Pyx_State_FindModule(void*); /* proto */\n+static int __Pyx_State_AddModule(PyObject* module, void*); /* proto */\n+static int __Pyx_State_RemoveModule(void*); /* proto */\n+#elif CYTHON_USE_MODULE_STATE\n+#define __Pyx_State_FindModule PyState_FindModule\n+#define __Pyx_State_AddModule PyState_AddModule\n+#define __Pyx_State_RemoveModule PyState_RemoveModule\n+#endif\n+\n+////////////////////////// MultiPhaseInitModuleState /////////////\n+\n+#if CYTHON_PEP489_MULTI_PHASE_INIT && CYTHON_USE_MODULE_STATE\n+\n+#ifndef CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\n+// If you're using multiple interpreters but a single GIL then\n+// this can be undefined for a bit of speed.\n+// Isolated subinterpreters were added in 3.12, and nogil in 3.13, so before that\n+// we can safely assume that we're protected by the GIL.\n+// TODO - turn this off as appropriate when the user is able to set\n+// Py_MOD_PER_INTERPRETER_GIL_SUPPORTED explicitly.\n+#if (CYTHON_COMPILING_IN_LIMITED_API || PY_VERSION_HEX >= 0x030C0000)\n+  // Numbers greater 1 can be used to force an implementation\n+  #define CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE 1\n+#else\n+  #define CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE 0\n+#endif\n+#endif\n+\n+// In order of preference \n+// - use a shared lock if available (from language std library if possible)\n+// - use PyMutex\n+// - use a language standard library non-shared mutex\n+// - PyThread_lock isn't acceptable since we can't initialize it in a thread safe way\n+#if !CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\n+#define __Pyx_ModuleStateLookup_LockForRead()\n+#define __Pyx_ModuleStateLookup_UnlockForRead()\n+#define __Pyx_ModuleStateLookup_LockForWrite()\n+#define __Pyx_ModuleStateLookup_UnlockForWrite()\n+#elif (CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE==1 && defined(__cplusplus) && __cplusplus >= 201703L) || \\\n+    CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE == 2\n+#include <shared_mutex>\n+static std::shared_mutex __Pyx_ModuleStateLookup_mutex;\n+#define __Pyx_ModuleStateLookup_LockForRead() __Pyx_ModuleStateLookup_mutex.lock_shared()\n+#define __Pyx_ModuleStateLookup_UnlockForRead() __Pyx_ModuleStateLookup_mutex.unlock_shared()\n+#define __Pyx_ModuleStateLookup_LockForWrite() __Pyx_ModuleStateLookup_mutex.lock()\n+#define __Pyx_ModuleStateLookup_UnlockForWrite() __Pyx_ModuleStateLookup_mutex.unlock()\n+// HAVE_PTHREAD_H comes from pyconfig.h\n+#elif (CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE==1 && defined(HAVE_PTHREAD_H)) || \\\n+    CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE==3\n+#include <pthread.h>\n+static pthread_rwlock_t __Pyx_ModuleStateLookup_mutex = PTHREAD_RWLOCK_INITIALIZER;\n+#define __Pyx_ModuleStateLookup_LockForRead() pthread_rwlock_rdlock(&__Pyx_ModuleStateLookup_mutex)\n+#define __Pyx_ModuleStateLookup_UnlockForRead() pthread_rwlock_unlock(&__Pyx_ModuleStateLookup_mutex)\n+#define __Pyx_ModuleStateLookup_LockForWrite() pthread_rwlock_wrlock(&__Pyx_ModuleStateLookup_mutex)\n+#define __Pyx_ModuleStateLookup_UnlockForWrite() pthread_rwlock_unlock(&__Pyx_ModuleStateLookup_mutex)\n+#elif (CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE==1 && defined(_WIN32)) || \\\n+    CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE==4\n+#include <synchapi.h>  // windows\n+static SRWLock __Pyx_ModuleStateLookup_mutex = SRWLOCK_INIT;\n+#define __Pyx_ModuleStateLookup_LockForRead() AcquireSRWLockExclusive(&__Pyx_ModuleStateLookup_mutex)\n+#define __Pyx_ModuleStateLookup_UnlockForRead() pthread_rwlock_unlock(&__Pyx_ModuleStateLookup_mutex)\n+#define __Pyx_ModuleStateLookup_LockForWrite() AcquireSRWLockExclusive(&__Pyx_ModuleStateLookup_mutex)\n+#define __Pyx_ModuleStateLookup_UnlockForWrite() ReleaseSRWLockExclusive(&__Pyx_ModuleStateLookup_mutex)\n+#elif (CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE==5 && !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d0000) || \\\n+    CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE==5\n+static PyMutex __Pyx_ModuleStateLookup_mutex = {0};\n+#define __Pyx_ModuleStateLookup_LockForRead() PyMutex_Lock(&__Pyx_ModuleStateLookup_mutex)\n+#define __Pyx_ModuleStateLookup_UnlockForRead() PyMutex_Unlock(&__Pyx_ModuleStateLookup_mutex)\n+#define __Pyx_ModuleStateLookup_LockForWrite() PyMutex_Lock(&__Pyx_ModuleStateLookup_mutex)\n+#define __Pyx_ModuleStateLookup_UnlockForWrite() PyMutex_Unlock(&__Pyx_ModuleStateLookup_mutex)\n+#elif (CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE==1 && defined(__cplusplus) && __cplusplus >= 201103L) || \\\n+    CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE==6\n+#include <mutex>\n+static std::mutex __Pyx_ModuleStateLookup_mutex{};\n+#define __Pyx_ModuleStateLookup_LockForRead() __Pyx_ModuleStateLookup_mutex.lock()\n+#define __Pyx_ModuleStateLookup_UnlockForRead() __Pyx_ModuleStateLookup_mutex.unlock()\n+#define __Pyx_ModuleStateLookup_LockForWrite() __Pyx_ModuleStateLookup_mutex.lock()\n+#define __Pyx_ModuleStateLookup_UnlockForWrite() __Pyx_ModuleStateLookup_mutex.unlock()\n+#elif (CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE==1 && \\\n+    defined(__STDC_VERSION__) && (__STDC_VERSION__ > 201112L) && !defined(__STDC_NO_THREADS__)) || \\\n+    CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE==7\n+#include <threads.h>\n+static mtx_t __Pyx_ModuleStateLookup_mutex;\n+static once_flag __Pyx_ModuleStateLookup_mutex_once_flag = ONCE_FLAG_INIT;\n+static void __Pyx_ModuleStateLookup_initialize_mutex(void) {\n+    mtx_init(&__Pyx_ModuleStateLookup_mutex, mtx_plain);\n+}\n+#define __Pyx_ModuleStateLookup_LockForRead() \\\n+  call_once(&__Pyx_ModuleStateLookup_mutex_once_flag, __Pyx_ModuleStateLookup_initialize_mutex); \\\n+  mtx_lock(&__Pyx_ModuleStateLookup_mutex)\n+#define __Pyx_ModuleStateLookup_UnlockForRead() mtx_unlock(&__Pyx_ModuleStateLookup_mutex)\n+#define __Pyx_ModuleStateLookup_LockForWrite() \\\n+  call_once(&__Pyx_ModuleStateLookup_mutex_once_flag, __Pyx_ModuleStateLookup_initialize_mutex); \\\n+  mtx_lock(&__Pyx_ModuleStateLookup_mutex)\n+#define __Pyx_ModuleStateLookup_UnlockForWrite() mtx_unlock(&__Pyx_ModuleStateLookup_mutex)\n+#else\n+#error \"No suitable thread safety primatives are available for CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE. \" \\",
            "html_url": "https://github.com/cython/cython/pull/6463#discussion_r1818069604",
            "id": 1818069604,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5sXYpk",
            "original_commit_id": "52c3295ac58c94b355e286436c86d859e847a2d7",
            "original_line": 2594,
            "original_position": 135,
            "original_start_line": null,
            "path": "Cython/Utility/ModuleSetupCode.c",
            "position": null,
            "pull_request_review_id": 2397510388,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6463",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1818069604/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-27T13:14:43Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1818069604",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6463#discussion_r1818070171"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6463"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1818070171"
                }
            },
            "author_association": "MEMBER",
            "body": "Is this something you came up with or based on an implementation in CPython (that you could link to in a comment)?",
            "commit_id": "59b29a38a2baa811f6707f202e8a6b03d9eda0b7",
            "created_at": "2024-10-27T11:43:34Z",
            "diff_hunk": "@@ -2484,3 +2488,259 @@ static int __Pyx_VersionSanityCheck(void) {\n #else\n #define __Pyx_shared_in_cpython_freethreading(x)\n #endif\n+\n+////////////////////////// MultiPhaseInitModuleState.proto /////////////\n+\n+#if CYTHON_PEP489_MULTI_PHASE_INIT && CYTHON_USE_MODULE_STATE\n+// This defines an ad-hoc, single module version of PyState_FindModule that\n+// works for multi-phase init modules. It's intended to be the last option\n+// when all the other official ways of getting the module are unavailble.\n+static PyObject *__Pyx_State_FindModule(void*); /* proto */\n+static int __Pyx_State_AddModule(PyObject* module, void*); /* proto */\n+static int __Pyx_State_RemoveModule(void*); /* proto */\n+#elif CYTHON_USE_MODULE_STATE\n+#define __Pyx_State_FindModule PyState_FindModule\n+#define __Pyx_State_AddModule PyState_AddModule\n+#define __Pyx_State_RemoveModule PyState_RemoveModule\n+#endif\n+\n+////////////////////////// MultiPhaseInitModuleState /////////////\n+\n+#if CYTHON_PEP489_MULTI_PHASE_INIT && CYTHON_USE_MODULE_STATE\n+\n+#ifndef CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\n+// If you're using multiple interpreters but a single GIL then\n+// this can be undefined for a bit of speed.\n+// Isolated subinterpreters were added in 3.12, and nogil in 3.13, so before that\n+// we can safely assume that we're protected by the GIL.\n+// TODO - turn this off as appropriate when the user is able to set\n+// Py_MOD_PER_INTERPRETER_GIL_SUPPORTED explicitly.\n+#if (CYTHON_COMPILING_IN_LIMITED_API || PY_VERSION_HEX >= 0x030C0000)\n+  // Numbers greater 1 can be used to force an implementation\n+  #define CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE 1\n+#else\n+  #define CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE 0\n+#endif\n+#endif\n+\n+// In order of preference \n+// - use a shared lock if available (from language std library if possible)\n+// - use PyMutex\n+// - use a language standard library non-shared mutex\n+// - PyThread_lock isn't acceptable since we can't initialize it in a thread safe way",
            "html_url": "https://github.com/cython/cython/pull/6463#discussion_r1818070171",
            "id": 1818070171,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5sXYyb",
            "original_commit_id": "52c3295ac58c94b355e286436c86d859e847a2d7",
            "original_line": 2530,
            "original_position": 71,
            "original_start_line": 2526,
            "path": "Cython/Utility/ModuleSetupCode.c",
            "position": null,
            "pull_request_review_id": 2397510388,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6463",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1818070171/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-10-27T13:14:43Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1818070171",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6463#discussion_r1818072519"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6463"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1818072519"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n// A sorted list of (sub)interpreter IDs and the module that was imported into that interpreter.\r\n```",
            "commit_id": "59b29a38a2baa811f6707f202e8a6b03d9eda0b7",
            "created_at": "2024-10-27T11:56:52Z",
            "diff_hunk": "@@ -2484,3 +2488,259 @@ static int __Pyx_VersionSanityCheck(void) {\n #else\n #define __Pyx_shared_in_cpython_freethreading(x)\n #endif\n+\n+////////////////////////// MultiPhaseInitModuleState.proto /////////////\n+\n+#if CYTHON_PEP489_MULTI_PHASE_INIT && CYTHON_USE_MODULE_STATE\n+// This defines an ad-hoc, single module version of PyState_FindModule that\n+// works for multi-phase init modules. It's intended to be the last option\n+// when all the other official ways of getting the module are unavailble.\n+static PyObject *__Pyx_State_FindModule(void*); /* proto */\n+static int __Pyx_State_AddModule(PyObject* module, void*); /* proto */\n+static int __Pyx_State_RemoveModule(void*); /* proto */\n+#elif CYTHON_USE_MODULE_STATE\n+#define __Pyx_State_FindModule PyState_FindModule\n+#define __Pyx_State_AddModule PyState_AddModule\n+#define __Pyx_State_RemoveModule PyState_RemoveModule\n+#endif\n+\n+////////////////////////// MultiPhaseInitModuleState /////////////\n+\n+#if CYTHON_PEP489_MULTI_PHASE_INIT && CYTHON_USE_MODULE_STATE\n+\n+#ifndef CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\n+// If you're using multiple interpreters but a single GIL then\n+// this can be undefined for a bit of speed.\n+// Isolated subinterpreters were added in 3.12, and nogil in 3.13, so before that\n+// we can safely assume that we're protected by the GIL.\n+// TODO - turn this off as appropriate when the user is able to set\n+// Py_MOD_PER_INTERPRETER_GIL_SUPPORTED explicitly.\n+#if (CYTHON_COMPILING_IN_LIMITED_API || PY_VERSION_HEX >= 0x030C0000)\n+  // Numbers greater 1 can be used to force an implementation\n+  #define CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE 1\n+#else\n+  #define CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE 0\n+#endif\n+#endif\n+\n+// In order of preference \n+// - use a shared lock if available (from language std library if possible)\n+// - use PyMutex\n+// - use a language standard library non-shared mutex\n+// - PyThread_lock isn't acceptable since we can't initialize it in a thread safe way\n+#if !CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\n+#define __Pyx_ModuleStateLookup_LockForRead()\n+#define __Pyx_ModuleStateLookup_UnlockForRead()\n+#define __Pyx_ModuleStateLookup_LockForWrite()\n+#define __Pyx_ModuleStateLookup_UnlockForWrite()\n+#elif (CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE==1 && defined(__cplusplus) && __cplusplus >= 201703L) || \\\n+    CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE == 2\n+#include <shared_mutex>\n+static std::shared_mutex __Pyx_ModuleStateLookup_mutex;\n+#define __Pyx_ModuleStateLookup_LockForRead() __Pyx_ModuleStateLookup_mutex.lock_shared()\n+#define __Pyx_ModuleStateLookup_UnlockForRead() __Pyx_ModuleStateLookup_mutex.unlock_shared()\n+#define __Pyx_ModuleStateLookup_LockForWrite() __Pyx_ModuleStateLookup_mutex.lock()\n+#define __Pyx_ModuleStateLookup_UnlockForWrite() __Pyx_ModuleStateLookup_mutex.unlock()\n+// HAVE_PTHREAD_H comes from pyconfig.h\n+#elif (CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE==1 && defined(HAVE_PTHREAD_H)) || \\\n+    CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE==3\n+#include <pthread.h>\n+static pthread_rwlock_t __Pyx_ModuleStateLookup_mutex = PTHREAD_RWLOCK_INITIALIZER;\n+#define __Pyx_ModuleStateLookup_LockForRead() pthread_rwlock_rdlock(&__Pyx_ModuleStateLookup_mutex)\n+#define __Pyx_ModuleStateLookup_UnlockForRead() pthread_rwlock_unlock(&__Pyx_ModuleStateLookup_mutex)\n+#define __Pyx_ModuleStateLookup_LockForWrite() pthread_rwlock_wrlock(&__Pyx_ModuleStateLookup_mutex)\n+#define __Pyx_ModuleStateLookup_UnlockForWrite() pthread_rwlock_unlock(&__Pyx_ModuleStateLookup_mutex)\n+#elif (CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE==1 && defined(_WIN32)) || \\\n+    CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE==4\n+#include <synchapi.h>  // windows\n+static SRWLock __Pyx_ModuleStateLookup_mutex = SRWLOCK_INIT;\n+#define __Pyx_ModuleStateLookup_LockForRead() AcquireSRWLockExclusive(&__Pyx_ModuleStateLookup_mutex)\n+#define __Pyx_ModuleStateLookup_UnlockForRead() pthread_rwlock_unlock(&__Pyx_ModuleStateLookup_mutex)\n+#define __Pyx_ModuleStateLookup_LockForWrite() AcquireSRWLockExclusive(&__Pyx_ModuleStateLookup_mutex)\n+#define __Pyx_ModuleStateLookup_UnlockForWrite() ReleaseSRWLockExclusive(&__Pyx_ModuleStateLookup_mutex)\n+#elif (CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE==5 && !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d0000) || \\\n+    CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE==5\n+static PyMutex __Pyx_ModuleStateLookup_mutex = {0};\n+#define __Pyx_ModuleStateLookup_LockForRead() PyMutex_Lock(&__Pyx_ModuleStateLookup_mutex)\n+#define __Pyx_ModuleStateLookup_UnlockForRead() PyMutex_Unlock(&__Pyx_ModuleStateLookup_mutex)\n+#define __Pyx_ModuleStateLookup_LockForWrite() PyMutex_Lock(&__Pyx_ModuleStateLookup_mutex)\n+#define __Pyx_ModuleStateLookup_UnlockForWrite() PyMutex_Unlock(&__Pyx_ModuleStateLookup_mutex)\n+#elif (CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE==1 && defined(__cplusplus) && __cplusplus >= 201103L) || \\\n+    CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE==6\n+#include <mutex>\n+static std::mutex __Pyx_ModuleStateLookup_mutex{};\n+#define __Pyx_ModuleStateLookup_LockForRead() __Pyx_ModuleStateLookup_mutex.lock()\n+#define __Pyx_ModuleStateLookup_UnlockForRead() __Pyx_ModuleStateLookup_mutex.unlock()\n+#define __Pyx_ModuleStateLookup_LockForWrite() __Pyx_ModuleStateLookup_mutex.lock()\n+#define __Pyx_ModuleStateLookup_UnlockForWrite() __Pyx_ModuleStateLookup_mutex.unlock()\n+#elif (CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE==1 && \\\n+    defined(__STDC_VERSION__) && (__STDC_VERSION__ > 201112L) && !defined(__STDC_NO_THREADS__)) || \\\n+    CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE==7\n+#include <threads.h>\n+static mtx_t __Pyx_ModuleStateLookup_mutex;\n+static once_flag __Pyx_ModuleStateLookup_mutex_once_flag = ONCE_FLAG_INIT;\n+static void __Pyx_ModuleStateLookup_initialize_mutex(void) {\n+    mtx_init(&__Pyx_ModuleStateLookup_mutex, mtx_plain);\n+}\n+#define __Pyx_ModuleStateLookup_LockForRead() \\\n+  call_once(&__Pyx_ModuleStateLookup_mutex_once_flag, __Pyx_ModuleStateLookup_initialize_mutex); \\\n+  mtx_lock(&__Pyx_ModuleStateLookup_mutex)\n+#define __Pyx_ModuleStateLookup_UnlockForRead() mtx_unlock(&__Pyx_ModuleStateLookup_mutex)\n+#define __Pyx_ModuleStateLookup_LockForWrite() \\\n+  call_once(&__Pyx_ModuleStateLookup_mutex_once_flag, __Pyx_ModuleStateLookup_initialize_mutex); \\\n+  mtx_lock(&__Pyx_ModuleStateLookup_mutex)\n+#define __Pyx_ModuleStateLookup_UnlockForWrite() mtx_unlock(&__Pyx_ModuleStateLookup_mutex)\n+#else\n+#error \"No suitable thread safety primatives are available for CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE. \" \\\n+  \"Requires C standard >= C11, or C++ standard >= C++11, \" \\\n+  \"or pthreads, or the Windows 32 API, or Python >= 3.13.\"\n+#endif\n+\n+\n+typedef struct {\n+    int64_t id;\n+    PyObject *module;\n+} __Pyx_InterpreterIdAndModule;\n+\n+static Py_ssize_t __Pyx_ModuleStateLookup_count = 0;\n+static Py_ssize_t __Pyx_ModuleStateLookup_allocated = 0;\n+// A sorted list of interpreter IDs and the module they correspond to.",
            "html_url": "https://github.com/cython/cython/pull/6463#discussion_r1818072519",
            "id": 1818072519,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5sXZXH",
            "original_commit_id": "52c3295ac58c94b355e286436c86d859e847a2d7",
            "original_line": 2607,
            "original_position": 148,
            "original_start_line": null,
            "path": "Cython/Utility/ModuleSetupCode.c",
            "position": null,
            "pull_request_review_id": 2397510388,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6463",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1818072519/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-27T13:14:43Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1818072519",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6463#discussion_r1818072960"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6463"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1818072960"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n\r\n// Code to maintain a mapping between (sub)interpreters and the module instance that they imported.\r\n// This is used to find the correct module state for the current interpreter.\r\n\r\n```",
            "commit_id": "59b29a38a2baa811f6707f202e8a6b03d9eda0b7",
            "created_at": "2024-10-27T11:59:35Z",
            "diff_hunk": "@@ -2484,3 +2488,259 @@ static int __Pyx_VersionSanityCheck(void) {\n #else\n #define __Pyx_shared_in_cpython_freethreading(x)\n #endif\n+\n+////////////////////////// MultiPhaseInitModuleState.proto /////////////\n+\n+#if CYTHON_PEP489_MULTI_PHASE_INIT && CYTHON_USE_MODULE_STATE\n+// This defines an ad-hoc, single module version of PyState_FindModule that\n+// works for multi-phase init modules. It's intended to be the last option\n+// when all the other official ways of getting the module are unavailble.\n+static PyObject *__Pyx_State_FindModule(void*); /* proto */\n+static int __Pyx_State_AddModule(PyObject* module, void*); /* proto */\n+static int __Pyx_State_RemoveModule(void*); /* proto */\n+#elif CYTHON_USE_MODULE_STATE\n+#define __Pyx_State_FindModule PyState_FindModule\n+#define __Pyx_State_AddModule PyState_AddModule\n+#define __Pyx_State_RemoveModule PyState_RemoveModule\n+#endif\n+\n+////////////////////////// MultiPhaseInitModuleState /////////////\n+",
            "html_url": "https://github.com/cython/cython/pull/6463#discussion_r1818072960",
            "id": 1818072960,
            "line": 2520,
            "node_id": "PRRC_kwDOABDGAc5sXZeA",
            "original_commit_id": "52c3295ac58c94b355e286436c86d859e847a2d7",
            "original_line": 2508,
            "original_position": 49,
            "original_start_line": null,
            "path": "Cython/Utility/ModuleSetupCode.c",
            "position": 68,
            "pull_request_review_id": 2397510388,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6463",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1818072960/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-27T13:14:43Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1818072960",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6463#discussion_r1818105784"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6463"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1818105784"
                }
            },
            "author_association": "MEMBER",
            "body": "Came up with. The implementation of `PyState_AddModule` in Python isn't too similar. Each single-phase module object has an attribute that stores that module index, and the interpreter state has a table of module indices. So it requires structure in Python to book-keep it. I don't think that applies to multiphase\r\n\r\nThe order of preference is largely based on \r\n* strongly prefer a lock that allows many simultaneous reads. But any lock will work.\r\n* weakly prefer things that are in Python.h, otherwise prefer things that are in the language standard library, otherwise whatever else is around.",
            "commit_id": "59b29a38a2baa811f6707f202e8a6b03d9eda0b7",
            "created_at": "2024-10-27T13:58:22Z",
            "diff_hunk": "@@ -2484,3 +2488,259 @@ static int __Pyx_VersionSanityCheck(void) {\n #else\n #define __Pyx_shared_in_cpython_freethreading(x)\n #endif\n+\n+////////////////////////// MultiPhaseInitModuleState.proto /////////////\n+\n+#if CYTHON_PEP489_MULTI_PHASE_INIT && CYTHON_USE_MODULE_STATE\n+// This defines an ad-hoc, single module version of PyState_FindModule that\n+// works for multi-phase init modules. It's intended to be the last option\n+// when all the other official ways of getting the module are unavailble.\n+static PyObject *__Pyx_State_FindModule(void*); /* proto */\n+static int __Pyx_State_AddModule(PyObject* module, void*); /* proto */\n+static int __Pyx_State_RemoveModule(void*); /* proto */\n+#elif CYTHON_USE_MODULE_STATE\n+#define __Pyx_State_FindModule PyState_FindModule\n+#define __Pyx_State_AddModule PyState_AddModule\n+#define __Pyx_State_RemoveModule PyState_RemoveModule\n+#endif\n+\n+////////////////////////// MultiPhaseInitModuleState /////////////\n+\n+#if CYTHON_PEP489_MULTI_PHASE_INIT && CYTHON_USE_MODULE_STATE\n+\n+#ifndef CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\n+// If you're using multiple interpreters but a single GIL then\n+// this can be undefined for a bit of speed.\n+// Isolated subinterpreters were added in 3.12, and nogil in 3.13, so before that\n+// we can safely assume that we're protected by the GIL.\n+// TODO - turn this off as appropriate when the user is able to set\n+// Py_MOD_PER_INTERPRETER_GIL_SUPPORTED explicitly.\n+#if (CYTHON_COMPILING_IN_LIMITED_API || PY_VERSION_HEX >= 0x030C0000)\n+  // Numbers greater 1 can be used to force an implementation\n+  #define CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE 1\n+#else\n+  #define CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE 0\n+#endif\n+#endif\n+\n+// In order of preference \n+// - use a shared lock if available (from language std library if possible)\n+// - use PyMutex\n+// - use a language standard library non-shared mutex\n+// - PyThread_lock isn't acceptable since we can't initialize it in a thread safe way",
            "html_url": "https://github.com/cython/cython/pull/6463#discussion_r1818105784",
            "id": 1818105784,
            "in_reply_to_id": 1818070171,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5sXhe4",
            "original_commit_id": "52c3295ac58c94b355e286436c86d859e847a2d7",
            "original_line": 2530,
            "original_position": 71,
            "original_start_line": 2526,
            "path": "Cython/Utility/ModuleSetupCode.c",
            "position": null,
            "pull_request_review_id": 2397558699,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6463",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1818105784/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-10-27T13:58:22Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1818105784",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6463#discussion_r1818106220"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6463"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1818106220"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n// when all the other official ways of getting the module are unavailable.\r\n```",
            "commit_id": "59b29a38a2baa811f6707f202e8a6b03d9eda0b7",
            "created_at": "2024-10-27T14:00:41Z",
            "diff_hunk": "@@ -2484,3 +2488,259 @@ static int __Pyx_VersionSanityCheck(void) {\n #else\n #define __Pyx_shared_in_cpython_freethreading(x)\n #endif\n+\n+////////////////////////// MultiPhaseInitModuleState.proto /////////////\n+\n+#if CYTHON_PEP489_MULTI_PHASE_INIT && CYTHON_USE_MODULE_STATE\n+// This defines an ad-hoc, single module version of PyState_FindModule that\n+// works for multi-phase init modules. It's intended to be the last option\n+// when all the other official ways of getting the module are unavailble.",
            "html_url": "https://github.com/cython/cython/pull/6463#discussion_r1818106220",
            "id": 1818106220,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5sXhls",
            "original_commit_id": "52c3295ac58c94b355e286436c86d859e847a2d7",
            "original_line": 2497,
            "original_position": 38,
            "original_start_line": null,
            "path": "Cython/Utility/ModuleSetupCode.c",
            "position": null,
            "pull_request_review_id": 2397559161,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6463",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1818106220/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-27T14:02:38Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1818106220",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6463#discussion_r1846086848"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6463"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1846086848"
                }
            },
            "author_association": "MEMBER",
            "body": "This is a user definable macro, so let's reduce the chance of getting weird errors etc.\r\n```suggestion\r\n        code.putln(\"  (CYTHON_PEP489_MULTI_PHASE_INIT) ? 0 : -1, /* m_size */\")\r\n```\r\nAlthough, in the end, duplicating the declaration with `#elif` might still seem cleaner.",
            "commit_id": "59b29a38a2baa811f6707f202e8a6b03d9eda0b7",
            "created_at": "2024-11-18T08:36:34Z",
            "diff_hunk": "@@ -3584,12 +3594,10 @@ def generate_pymoduledef_struct(self, env, code):\n         code.putln(\"  PyModuleDef_HEAD_INIT,\")\n         code.putln('  %s,' % env.module_name.as_c_string_literal())\n         code.putln(\"  %s, /* m_doc */\" % doc)\n-        code.putln(\"#if CYTHON_PEP489_MULTI_PHASE_INIT\")\n-        code.putln(\"  0, /* m_size */\")\n-        code.putln(\"#elif CYTHON_USE_MODULE_STATE\")  # FIXME: should allow combination with PEP-489\n+        code.putln(\"#if CYTHON_USE_MODULE_STATE\")\n         code.putln(f\"  sizeof({Naming.modulestatetype_cname}), /* m_size */\")\n         code.putln(\"#else\")\n-        code.putln(\"  -1, /* m_size */\")\n+        code.putln(\"  CYTHON_PEP489_MULTI_PHASE_INIT ? 0 :-1, /* m_size */\")",
            "html_url": "https://github.com/cython/cython/pull/6463#discussion_r1846086848",
            "id": 1846086848,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5uCQzA",
            "original_commit_id": "9f099b46eefa6108e862d9b3b7ec1f8a2e7ac1d5",
            "original_line": 3600,
            "original_position": 67,
            "original_start_line": null,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": null,
            "pull_request_review_id": 2441857624,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6463",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1846086848/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-11-18T09:24:48Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1846086848",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6463#discussion_r1846114065"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6463"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1846114065"
                }
            },
            "author_association": "MEMBER",
            "body": "Have you looked at the error output here? `#error` does not need quotes on the message and just prints them as part of the message IIRC. So string concatenation might actually not happen here. Not sure about the line breaks.",
            "commit_id": "59b29a38a2baa811f6707f202e8a6b03d9eda0b7",
            "created_at": "2024-11-18T08:55:44Z",
            "diff_hunk": "@@ -2484,3 +2494,441 @@ static int __Pyx_VersionSanityCheck(void) {\n #else\n #define __Pyx_shared_in_cpython_freethreading(x)\n #endif\n+\n+////////////////////////// MultiPhaseInitModuleState.proto /////////////\n+\n+#if CYTHON_PEP489_MULTI_PHASE_INIT && CYTHON_USE_MODULE_STATE\n+// This defines an ad-hoc, single module version of PyState_FindModule that\n+// works for multi-phase init modules. It's intended to be the last option\n+// when all the other official ways of getting the module are unavailable.\n+static PyObject *__Pyx_State_FindModule(void*); /* proto */\n+static int __Pyx_State_AddModule(PyObject* module, void*); /* proto */\n+static int __Pyx_State_RemoveModule(void*); /* proto */\n+\n+#elif CYTHON_USE_MODULE_STATE\n+#define __Pyx_State_FindModule PyState_FindModule\n+#define __Pyx_State_AddModule PyState_AddModule\n+#define __Pyx_State_RemoveModule PyState_RemoveModule\n+#endif\n+\n+////////////////////////// MultiPhaseInitModuleState /////////////\n+//@requires: MemoryView_C.c::Atomics\n+\n+\n+// Code to maintain a mapping between (sub)interpreters and the module instance that they imported.\n+// This is used to find the correct module state for the current interpreter.\n+\n+#if CYTHON_PEP489_MULTI_PHASE_INIT && CYTHON_USE_MODULE_STATE\n+\n+#ifndef CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\n+// If you're using multiple interpreters but a single GIL then\n+// this can be undefined for a bit of speed.\n+// Isolated subinterpreters were added in 3.12, and nogil in 3.13, so before that\n+// we can safely assume that we're protected by the GIL.\n+// TODO - turn this off as appropriate when the user is able to set\n+// Py_MOD_PER_INTERPRETER_GIL_SUPPORTED explicitly.\n+#if (CYTHON_COMPILING_IN_LIMITED_API || PY_VERSION_HEX >= 0x030C0000)\n+  #define CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE 1\n+#else\n+  #define CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE 0\n+#endif\n+#endif\n+\n+#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE && !CYTHON_ATOMICS\n+  #error \"Module state with PEP489 requires atomics. Currently that's one of \" \\\n+    \"C11, C++11, gcc atomic intrinsics or MSVC atomic intrinsics\"\n+#endif\n+\n+// We also need a lock. In order of preference:\n+// - PyMutex\n+// - a language standard library\n+// - pthreads\n+// - msvc\n+// - PyThread_lock isn't acceptable since we can't initialize it in a thread safe way\n+#if !CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\n+\n+#define __Pyx_ModuleStateLookup_Lock()\n+#define __Pyx_ModuleStateLookup_Unlock()\n+\n+#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d0000\n+\n+static PyMutex __Pyx_ModuleStateLookup_mutex = {0};\n+#define __Pyx_ModuleStateLookup_Lock() PyMutex_Lock(&__Pyx_ModuleStateLookup_mutex)\n+#define __Pyx_ModuleStateLookup_Unlock() PyMutex_Unlock(&__Pyx_ModuleStateLookup_mutex)\n+\n+#elif defined(__cplusplus) && __cplusplus >= 201103L\n+\n+#include <mutex>\n+static std::mutex __Pyx_ModuleStateLookup_mutex;\n+#define __Pyx_ModuleStateLookup_Lock() __Pyx_ModuleStateLookup_mutex.lock()\n+#define __Pyx_ModuleStateLookup_Unlock() __Pyx_ModuleStateLookup_mutex.unlock()\n+\n+#elif defined(__STDC_VERSION__) && (__STDC_VERSION__ > 201112L) && !defined(__STDC_NO_THREADS__)\n+#include <threads.h>\n+static mtx_t __Pyx_ModuleStateLookup_mutex;\n+static once_flag __Pyx_ModuleStateLookup_mutex_once_flag = ONCE_FLAG_INIT;\n+static void __Pyx_ModuleStateLookup_initialize_mutex(void) {\n+    mtx_init(&__Pyx_ModuleStateLookup_mutex, mtx_plain);\n+}\n+#define __Pyx_ModuleStateLookup_Lock() \\\n+  call_once(&__Pyx_ModuleStateLookup_mutex_once_flag, __Pyx_ModuleStateLookup_initialize_mutex); \\\n+  mtx_lock(&__Pyx_ModuleStateLookup_mutex)\n+#define __Pyx_ModuleStateLookup_Unlock() mtx_unlock(&__Pyx_ModuleStateLookup_mutex)\n+\n+// HAVE_PTHREAD_H comes from pyconfig.h\n+#elif defined(HAVE_PTHREAD_H)\n+\n+#include <pthread.h>\n+static pthread_mutex_t __Pyx_ModuleStateLookup_mutex = PTHREAD_MUTEX_INITIALIZER;\n+#define __Pyx_ModuleStateLookup_Lock() pthread_mutex_lock(&__Pyx_ModuleStateLookup_mutex)\n+#define __Pyx_ModuleStateLookup_Unlock() pthread_mutex_unlock(&__Pyx_ModuleStateLookup_mutex)\n+\n+#elif defined(_WIN32)\n+\n+#include <Windows.h>  // synchapi.h on its own doesn't work\n+\n+// Using a slim-read-write lock (instead of a mutex/critical section)\n+// because it can be statically initialized.\n+static SRWLOCK __Pyx_ModuleStateLookup_mutex = SRWLOCK_INIT;\n+#define __Pyx_ModuleStateLookup_Lock() AcquireSRWLockExclusive(&__Pyx_ModuleStateLookup_mutex)\n+#define __Pyx_ModuleStateLookup_Unlock() ReleaseSRWLockExclusive(&__Pyx_ModuleStateLookup_mutex)\n+\n+#else\n+#error \"No suitable lock available for CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE. \" \\\n+  \"Requires C standard >= C11, or C++ standard >= C++11, \" \\\n+  \"or pthreads, or the Windows 32 API, or Python >= 3.13.\"\n+#endif",
            "html_url": "https://github.com/cython/cython/pull/6463#discussion_r1846114065",
            "id": 1846114065,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5uCXcR",
            "original_commit_id": "9f099b46eefa6108e862d9b3b7ec1f8a2e7ac1d5",
            "original_line": 2600,
            "original_position": 148,
            "original_start_line": 2597,
            "path": "Cython/Utility/ModuleSetupCode.c",
            "position": null,
            "pull_request_review_id": 2441857624,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6463",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1846114065/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-11-18T09:24:48Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1846114065",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6463#discussion_r1846117318"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6463"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1846117318"
                }
            },
            "author_association": "MEMBER",
            "body": "Did you mean \"really small\" as in \"very small\" here? And refer to `really_small` above?\r\n```suggestion\r\n// \"Really small\" above means \"the maximum interpreter ID ever seen is smaller than\r\n```",
            "commit_id": "59b29a38a2baa811f6707f202e8a6b03d9eda0b7",
            "created_at": "2024-11-18T08:57:48Z",
            "diff_hunk": "@@ -2484,3 +2494,441 @@ static int __Pyx_VersionSanityCheck(void) {\n #else\n #define __Pyx_shared_in_cpython_freethreading(x)\n #endif\n+\n+////////////////////////// MultiPhaseInitModuleState.proto /////////////\n+\n+#if CYTHON_PEP489_MULTI_PHASE_INIT && CYTHON_USE_MODULE_STATE\n+// This defines an ad-hoc, single module version of PyState_FindModule that\n+// works for multi-phase init modules. It's intended to be the last option\n+// when all the other official ways of getting the module are unavailable.\n+static PyObject *__Pyx_State_FindModule(void*); /* proto */\n+static int __Pyx_State_AddModule(PyObject* module, void*); /* proto */\n+static int __Pyx_State_RemoveModule(void*); /* proto */\n+\n+#elif CYTHON_USE_MODULE_STATE\n+#define __Pyx_State_FindModule PyState_FindModule\n+#define __Pyx_State_AddModule PyState_AddModule\n+#define __Pyx_State_RemoveModule PyState_RemoveModule\n+#endif\n+\n+////////////////////////// MultiPhaseInitModuleState /////////////\n+//@requires: MemoryView_C.c::Atomics\n+\n+\n+// Code to maintain a mapping between (sub)interpreters and the module instance that they imported.\n+// This is used to find the correct module state for the current interpreter.\n+\n+#if CYTHON_PEP489_MULTI_PHASE_INIT && CYTHON_USE_MODULE_STATE\n+\n+#ifndef CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\n+// If you're using multiple interpreters but a single GIL then\n+// this can be undefined for a bit of speed.\n+// Isolated subinterpreters were added in 3.12, and nogil in 3.13, so before that\n+// we can safely assume that we're protected by the GIL.\n+// TODO - turn this off as appropriate when the user is able to set\n+// Py_MOD_PER_INTERPRETER_GIL_SUPPORTED explicitly.\n+#if (CYTHON_COMPILING_IN_LIMITED_API || PY_VERSION_HEX >= 0x030C0000)\n+  #define CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE 1\n+#else\n+  #define CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE 0\n+#endif\n+#endif\n+\n+#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE && !CYTHON_ATOMICS\n+  #error \"Module state with PEP489 requires atomics. Currently that's one of \" \\\n+    \"C11, C++11, gcc atomic intrinsics or MSVC atomic intrinsics\"\n+#endif\n+\n+// We also need a lock. In order of preference:\n+// - PyMutex\n+// - a language standard library\n+// - pthreads\n+// - msvc\n+// - PyThread_lock isn't acceptable since we can't initialize it in a thread safe way\n+#if !CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\n+\n+#define __Pyx_ModuleStateLookup_Lock()\n+#define __Pyx_ModuleStateLookup_Unlock()\n+\n+#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d0000\n+\n+static PyMutex __Pyx_ModuleStateLookup_mutex = {0};\n+#define __Pyx_ModuleStateLookup_Lock() PyMutex_Lock(&__Pyx_ModuleStateLookup_mutex)\n+#define __Pyx_ModuleStateLookup_Unlock() PyMutex_Unlock(&__Pyx_ModuleStateLookup_mutex)\n+\n+#elif defined(__cplusplus) && __cplusplus >= 201103L\n+\n+#include <mutex>\n+static std::mutex __Pyx_ModuleStateLookup_mutex;\n+#define __Pyx_ModuleStateLookup_Lock() __Pyx_ModuleStateLookup_mutex.lock()\n+#define __Pyx_ModuleStateLookup_Unlock() __Pyx_ModuleStateLookup_mutex.unlock()\n+\n+#elif defined(__STDC_VERSION__) && (__STDC_VERSION__ > 201112L) && !defined(__STDC_NO_THREADS__)\n+#include <threads.h>\n+static mtx_t __Pyx_ModuleStateLookup_mutex;\n+static once_flag __Pyx_ModuleStateLookup_mutex_once_flag = ONCE_FLAG_INIT;\n+static void __Pyx_ModuleStateLookup_initialize_mutex(void) {\n+    mtx_init(&__Pyx_ModuleStateLookup_mutex, mtx_plain);\n+}\n+#define __Pyx_ModuleStateLookup_Lock() \\\n+  call_once(&__Pyx_ModuleStateLookup_mutex_once_flag, __Pyx_ModuleStateLookup_initialize_mutex); \\\n+  mtx_lock(&__Pyx_ModuleStateLookup_mutex)\n+#define __Pyx_ModuleStateLookup_Unlock() mtx_unlock(&__Pyx_ModuleStateLookup_mutex)\n+\n+// HAVE_PTHREAD_H comes from pyconfig.h\n+#elif defined(HAVE_PTHREAD_H)\n+\n+#include <pthread.h>\n+static pthread_mutex_t __Pyx_ModuleStateLookup_mutex = PTHREAD_MUTEX_INITIALIZER;\n+#define __Pyx_ModuleStateLookup_Lock() pthread_mutex_lock(&__Pyx_ModuleStateLookup_mutex)\n+#define __Pyx_ModuleStateLookup_Unlock() pthread_mutex_unlock(&__Pyx_ModuleStateLookup_mutex)\n+\n+#elif defined(_WIN32)\n+\n+#include <Windows.h>  // synchapi.h on its own doesn't work\n+\n+// Using a slim-read-write lock (instead of a mutex/critical section)\n+// because it can be statically initialized.\n+static SRWLOCK __Pyx_ModuleStateLookup_mutex = SRWLOCK_INIT;\n+#define __Pyx_ModuleStateLookup_Lock() AcquireSRWLockExclusive(&__Pyx_ModuleStateLookup_mutex)\n+#define __Pyx_ModuleStateLookup_Unlock() ReleaseSRWLockExclusive(&__Pyx_ModuleStateLookup_mutex)\n+\n+#else\n+#error \"No suitable lock available for CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE. \" \\\n+  \"Requires C standard >= C11, or C++ standard >= C++11, \" \\\n+  \"or pthreads, or the Windows 32 API, or Python >= 3.13.\"\n+#endif\n+\n+\n+typedef struct {\n+    int64_t id;\n+    PyObject *module;\n+} __Pyx_InterpreterIdAndModule;\n+\n+typedef struct {\n+    char really_small;\n+    Py_ssize_t count;\n+    Py_ssize_t allocated;\n+    __Pyx_InterpreterIdAndModule table[1];\n+} __Pyx_ModuleStateLookupData;\n+\n+#define __PYX_MODULE_STATE_LOOKUP_SMALL_SIZE 32\n+// Really small means \"the maximum interpreter ID ever seen is smaller than",
            "html_url": "https://github.com/cython/cython/pull/6463#discussion_r1846117318",
            "id": 1846117318,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5uCYPG",
            "original_commit_id": "9f099b46eefa6108e862d9b3b7ec1f8a2e7ac1d5",
            "original_line": 2616,
            "original_position": 164,
            "original_start_line": null,
            "path": "Cython/Utility/ModuleSetupCode.c",
            "position": null,
            "pull_request_review_id": 2441857624,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6463",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1846117318/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-11-18T09:24:48Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1846117318",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6463#discussion_r1846119977"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6463"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1846119977"
                }
            },
            "author_association": "MEMBER",
            "body": "On first sight, I read this as one name, like `end_begin`, and was confused by the parentheses.\r\n```suggestion\r\n    while ((end - begin) > __PYX_MODULE_STATE_LOOKUP_SMALL_SIZE) {\r\n```",
            "commit_id": "59b29a38a2baa811f6707f202e8a6b03d9eda0b7",
            "created_at": "2024-11-18T08:59:17Z",
            "diff_hunk": "@@ -2484,3 +2494,441 @@ static int __Pyx_VersionSanityCheck(void) {\n #else\n #define __Pyx_shared_in_cpython_freethreading(x)\n #endif\n+\n+////////////////////////// MultiPhaseInitModuleState.proto /////////////\n+\n+#if CYTHON_PEP489_MULTI_PHASE_INIT && CYTHON_USE_MODULE_STATE\n+// This defines an ad-hoc, single module version of PyState_FindModule that\n+// works for multi-phase init modules. It's intended to be the last option\n+// when all the other official ways of getting the module are unavailable.\n+static PyObject *__Pyx_State_FindModule(void*); /* proto */\n+static int __Pyx_State_AddModule(PyObject* module, void*); /* proto */\n+static int __Pyx_State_RemoveModule(void*); /* proto */\n+\n+#elif CYTHON_USE_MODULE_STATE\n+#define __Pyx_State_FindModule PyState_FindModule\n+#define __Pyx_State_AddModule PyState_AddModule\n+#define __Pyx_State_RemoveModule PyState_RemoveModule\n+#endif\n+\n+////////////////////////// MultiPhaseInitModuleState /////////////\n+//@requires: MemoryView_C.c::Atomics\n+\n+\n+// Code to maintain a mapping between (sub)interpreters and the module instance that they imported.\n+// This is used to find the correct module state for the current interpreter.\n+\n+#if CYTHON_PEP489_MULTI_PHASE_INIT && CYTHON_USE_MODULE_STATE\n+\n+#ifndef CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\n+// If you're using multiple interpreters but a single GIL then\n+// this can be undefined for a bit of speed.\n+// Isolated subinterpreters were added in 3.12, and nogil in 3.13, so before that\n+// we can safely assume that we're protected by the GIL.\n+// TODO - turn this off as appropriate when the user is able to set\n+// Py_MOD_PER_INTERPRETER_GIL_SUPPORTED explicitly.\n+#if (CYTHON_COMPILING_IN_LIMITED_API || PY_VERSION_HEX >= 0x030C0000)\n+  #define CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE 1\n+#else\n+  #define CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE 0\n+#endif\n+#endif\n+\n+#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE && !CYTHON_ATOMICS\n+  #error \"Module state with PEP489 requires atomics. Currently that's one of \" \\\n+    \"C11, C++11, gcc atomic intrinsics or MSVC atomic intrinsics\"\n+#endif\n+\n+// We also need a lock. In order of preference:\n+// - PyMutex\n+// - a language standard library\n+// - pthreads\n+// - msvc\n+// - PyThread_lock isn't acceptable since we can't initialize it in a thread safe way\n+#if !CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\n+\n+#define __Pyx_ModuleStateLookup_Lock()\n+#define __Pyx_ModuleStateLookup_Unlock()\n+\n+#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d0000\n+\n+static PyMutex __Pyx_ModuleStateLookup_mutex = {0};\n+#define __Pyx_ModuleStateLookup_Lock() PyMutex_Lock(&__Pyx_ModuleStateLookup_mutex)\n+#define __Pyx_ModuleStateLookup_Unlock() PyMutex_Unlock(&__Pyx_ModuleStateLookup_mutex)\n+\n+#elif defined(__cplusplus) && __cplusplus >= 201103L\n+\n+#include <mutex>\n+static std::mutex __Pyx_ModuleStateLookup_mutex;\n+#define __Pyx_ModuleStateLookup_Lock() __Pyx_ModuleStateLookup_mutex.lock()\n+#define __Pyx_ModuleStateLookup_Unlock() __Pyx_ModuleStateLookup_mutex.unlock()\n+\n+#elif defined(__STDC_VERSION__) && (__STDC_VERSION__ > 201112L) && !defined(__STDC_NO_THREADS__)\n+#include <threads.h>\n+static mtx_t __Pyx_ModuleStateLookup_mutex;\n+static once_flag __Pyx_ModuleStateLookup_mutex_once_flag = ONCE_FLAG_INIT;\n+static void __Pyx_ModuleStateLookup_initialize_mutex(void) {\n+    mtx_init(&__Pyx_ModuleStateLookup_mutex, mtx_plain);\n+}\n+#define __Pyx_ModuleStateLookup_Lock() \\\n+  call_once(&__Pyx_ModuleStateLookup_mutex_once_flag, __Pyx_ModuleStateLookup_initialize_mutex); \\\n+  mtx_lock(&__Pyx_ModuleStateLookup_mutex)\n+#define __Pyx_ModuleStateLookup_Unlock() mtx_unlock(&__Pyx_ModuleStateLookup_mutex)\n+\n+// HAVE_PTHREAD_H comes from pyconfig.h\n+#elif defined(HAVE_PTHREAD_H)\n+\n+#include <pthread.h>\n+static pthread_mutex_t __Pyx_ModuleStateLookup_mutex = PTHREAD_MUTEX_INITIALIZER;\n+#define __Pyx_ModuleStateLookup_Lock() pthread_mutex_lock(&__Pyx_ModuleStateLookup_mutex)\n+#define __Pyx_ModuleStateLookup_Unlock() pthread_mutex_unlock(&__Pyx_ModuleStateLookup_mutex)\n+\n+#elif defined(_WIN32)\n+\n+#include <Windows.h>  // synchapi.h on its own doesn't work\n+\n+// Using a slim-read-write lock (instead of a mutex/critical section)\n+// because it can be statically initialized.\n+static SRWLOCK __Pyx_ModuleStateLookup_mutex = SRWLOCK_INIT;\n+#define __Pyx_ModuleStateLookup_Lock() AcquireSRWLockExclusive(&__Pyx_ModuleStateLookup_mutex)\n+#define __Pyx_ModuleStateLookup_Unlock() ReleaseSRWLockExclusive(&__Pyx_ModuleStateLookup_mutex)\n+\n+#else\n+#error \"No suitable lock available for CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE. \" \\\n+  \"Requires C standard >= C11, or C++ standard >= C++11, \" \\\n+  \"or pthreads, or the Windows 32 API, or Python >= 3.13.\"\n+#endif\n+\n+\n+typedef struct {\n+    int64_t id;\n+    PyObject *module;\n+} __Pyx_InterpreterIdAndModule;\n+\n+typedef struct {\n+    char really_small;\n+    Py_ssize_t count;\n+    Py_ssize_t allocated;\n+    __Pyx_InterpreterIdAndModule table[1];\n+} __Pyx_ModuleStateLookupData;\n+\n+#define __PYX_MODULE_STATE_LOOKUP_SMALL_SIZE 32\n+// Really small means \"the maximum interpreter ID ever seen is smaller than\n+// __PYX_MODULE_STATE_LOOKUP_SMALL_SIZE and thus they're stored in an array\n+// where the index corresponds to interpreter ID, and __Pyx_ModuleStateLookup_count\n+// is the size of the array.\n+\n+#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\n+static __pyx_atomic_int_type __Pyx_ModuleStateLookup_read_counter = 0;\n+#endif\n+\n+// A sorted list of (sub)interpreter IDs and the module that was imported into that interpreter.\n+// For now look this up via binary search.\n+#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\n+static __pyx_atomic_ptr_type __Pyx_ModuleStateLookup_data = 0;\n+#else\n+static __Pyx_ModuleStateLookupData* __Pyx_ModuleStateLookup_data = NULL;\n+#endif\n+\n+\n+static __Pyx_InterpreterIdAndModule* __Pyx_State_FindModuleStateLookupTableLowerBound(\n+        __Pyx_InterpreterIdAndModule* table,\n+        Py_ssize_t count,\n+        int64_t interpreterId) {\n+    __Pyx_InterpreterIdAndModule* begin = table;\n+    __Pyx_InterpreterIdAndModule* end = begin + count;\n+\n+    // fairly likely - e.g. single interpreter\n+    if (begin->id == interpreterId) {\n+        return begin;\n+    }\n+\n+    while ((end-begin) > __PYX_MODULE_STATE_LOOKUP_SMALL_SIZE) {",
            "html_url": "https://github.com/cython/cython/pull/6463#discussion_r1846119977",
            "id": 1846119977,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5uCY4p",
            "original_commit_id": "9f099b46eefa6108e862d9b3b7ec1f8a2e7ac1d5",
            "original_line": 2646,
            "original_position": 194,
            "original_start_line": null,
            "path": "Cython/Utility/ModuleSetupCode.c",
            "position": null,
            "pull_request_review_id": 2441857624,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6463",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1846119977/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-11-18T09:24:48Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1846119977",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6463#discussion_r1846121200"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6463"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1846121200"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    for (; begin < end; ++begin) {\r\n```",
            "commit_id": "59b29a38a2baa811f6707f202e8a6b03d9eda0b7",
            "created_at": "2024-11-18T08:59:54Z",
            "diff_hunk": "@@ -2484,3 +2494,441 @@ static int __Pyx_VersionSanityCheck(void) {\n #else\n #define __Pyx_shared_in_cpython_freethreading(x)\n #endif\n+\n+////////////////////////// MultiPhaseInitModuleState.proto /////////////\n+\n+#if CYTHON_PEP489_MULTI_PHASE_INIT && CYTHON_USE_MODULE_STATE\n+// This defines an ad-hoc, single module version of PyState_FindModule that\n+// works for multi-phase init modules. It's intended to be the last option\n+// when all the other official ways of getting the module are unavailable.\n+static PyObject *__Pyx_State_FindModule(void*); /* proto */\n+static int __Pyx_State_AddModule(PyObject* module, void*); /* proto */\n+static int __Pyx_State_RemoveModule(void*); /* proto */\n+\n+#elif CYTHON_USE_MODULE_STATE\n+#define __Pyx_State_FindModule PyState_FindModule\n+#define __Pyx_State_AddModule PyState_AddModule\n+#define __Pyx_State_RemoveModule PyState_RemoveModule\n+#endif\n+\n+////////////////////////// MultiPhaseInitModuleState /////////////\n+//@requires: MemoryView_C.c::Atomics\n+\n+\n+// Code to maintain a mapping between (sub)interpreters and the module instance that they imported.\n+// This is used to find the correct module state for the current interpreter.\n+\n+#if CYTHON_PEP489_MULTI_PHASE_INIT && CYTHON_USE_MODULE_STATE\n+\n+#ifndef CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\n+// If you're using multiple interpreters but a single GIL then\n+// this can be undefined for a bit of speed.\n+// Isolated subinterpreters were added in 3.12, and nogil in 3.13, so before that\n+// we can safely assume that we're protected by the GIL.\n+// TODO - turn this off as appropriate when the user is able to set\n+// Py_MOD_PER_INTERPRETER_GIL_SUPPORTED explicitly.\n+#if (CYTHON_COMPILING_IN_LIMITED_API || PY_VERSION_HEX >= 0x030C0000)\n+  #define CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE 1\n+#else\n+  #define CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE 0\n+#endif\n+#endif\n+\n+#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE && !CYTHON_ATOMICS\n+  #error \"Module state with PEP489 requires atomics. Currently that's one of \" \\\n+    \"C11, C++11, gcc atomic intrinsics or MSVC atomic intrinsics\"\n+#endif\n+\n+// We also need a lock. In order of preference:\n+// - PyMutex\n+// - a language standard library\n+// - pthreads\n+// - msvc\n+// - PyThread_lock isn't acceptable since we can't initialize it in a thread safe way\n+#if !CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\n+\n+#define __Pyx_ModuleStateLookup_Lock()\n+#define __Pyx_ModuleStateLookup_Unlock()\n+\n+#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d0000\n+\n+static PyMutex __Pyx_ModuleStateLookup_mutex = {0};\n+#define __Pyx_ModuleStateLookup_Lock() PyMutex_Lock(&__Pyx_ModuleStateLookup_mutex)\n+#define __Pyx_ModuleStateLookup_Unlock() PyMutex_Unlock(&__Pyx_ModuleStateLookup_mutex)\n+\n+#elif defined(__cplusplus) && __cplusplus >= 201103L\n+\n+#include <mutex>\n+static std::mutex __Pyx_ModuleStateLookup_mutex;\n+#define __Pyx_ModuleStateLookup_Lock() __Pyx_ModuleStateLookup_mutex.lock()\n+#define __Pyx_ModuleStateLookup_Unlock() __Pyx_ModuleStateLookup_mutex.unlock()\n+\n+#elif defined(__STDC_VERSION__) && (__STDC_VERSION__ > 201112L) && !defined(__STDC_NO_THREADS__)\n+#include <threads.h>\n+static mtx_t __Pyx_ModuleStateLookup_mutex;\n+static once_flag __Pyx_ModuleStateLookup_mutex_once_flag = ONCE_FLAG_INIT;\n+static void __Pyx_ModuleStateLookup_initialize_mutex(void) {\n+    mtx_init(&__Pyx_ModuleStateLookup_mutex, mtx_plain);\n+}\n+#define __Pyx_ModuleStateLookup_Lock() \\\n+  call_once(&__Pyx_ModuleStateLookup_mutex_once_flag, __Pyx_ModuleStateLookup_initialize_mutex); \\\n+  mtx_lock(&__Pyx_ModuleStateLookup_mutex)\n+#define __Pyx_ModuleStateLookup_Unlock() mtx_unlock(&__Pyx_ModuleStateLookup_mutex)\n+\n+// HAVE_PTHREAD_H comes from pyconfig.h\n+#elif defined(HAVE_PTHREAD_H)\n+\n+#include <pthread.h>\n+static pthread_mutex_t __Pyx_ModuleStateLookup_mutex = PTHREAD_MUTEX_INITIALIZER;\n+#define __Pyx_ModuleStateLookup_Lock() pthread_mutex_lock(&__Pyx_ModuleStateLookup_mutex)\n+#define __Pyx_ModuleStateLookup_Unlock() pthread_mutex_unlock(&__Pyx_ModuleStateLookup_mutex)\n+\n+#elif defined(_WIN32)\n+\n+#include <Windows.h>  // synchapi.h on its own doesn't work\n+\n+// Using a slim-read-write lock (instead of a mutex/critical section)\n+// because it can be statically initialized.\n+static SRWLOCK __Pyx_ModuleStateLookup_mutex = SRWLOCK_INIT;\n+#define __Pyx_ModuleStateLookup_Lock() AcquireSRWLockExclusive(&__Pyx_ModuleStateLookup_mutex)\n+#define __Pyx_ModuleStateLookup_Unlock() ReleaseSRWLockExclusive(&__Pyx_ModuleStateLookup_mutex)\n+\n+#else\n+#error \"No suitable lock available for CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE. \" \\\n+  \"Requires C standard >= C11, or C++ standard >= C++11, \" \\\n+  \"or pthreads, or the Windows 32 API, or Python >= 3.13.\"\n+#endif\n+\n+\n+typedef struct {\n+    int64_t id;\n+    PyObject *module;\n+} __Pyx_InterpreterIdAndModule;\n+\n+typedef struct {\n+    char really_small;\n+    Py_ssize_t count;\n+    Py_ssize_t allocated;\n+    __Pyx_InterpreterIdAndModule table[1];\n+} __Pyx_ModuleStateLookupData;\n+\n+#define __PYX_MODULE_STATE_LOOKUP_SMALL_SIZE 32\n+// Really small means \"the maximum interpreter ID ever seen is smaller than\n+// __PYX_MODULE_STATE_LOOKUP_SMALL_SIZE and thus they're stored in an array\n+// where the index corresponds to interpreter ID, and __Pyx_ModuleStateLookup_count\n+// is the size of the array.\n+\n+#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\n+static __pyx_atomic_int_type __Pyx_ModuleStateLookup_read_counter = 0;\n+#endif\n+\n+// A sorted list of (sub)interpreter IDs and the module that was imported into that interpreter.\n+// For now look this up via binary search.\n+#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\n+static __pyx_atomic_ptr_type __Pyx_ModuleStateLookup_data = 0;\n+#else\n+static __Pyx_ModuleStateLookupData* __Pyx_ModuleStateLookup_data = NULL;\n+#endif\n+\n+\n+static __Pyx_InterpreterIdAndModule* __Pyx_State_FindModuleStateLookupTableLowerBound(\n+        __Pyx_InterpreterIdAndModule* table,\n+        Py_ssize_t count,\n+        int64_t interpreterId) {\n+    __Pyx_InterpreterIdAndModule* begin = table;\n+    __Pyx_InterpreterIdAndModule* end = begin + count;\n+\n+    // fairly likely - e.g. single interpreter\n+    if (begin->id == interpreterId) {\n+        return begin;\n+    }\n+\n+    while ((end-begin) > __PYX_MODULE_STATE_LOOKUP_SMALL_SIZE) {\n+        __Pyx_InterpreterIdAndModule* halfway = begin + (end - begin)/2;\n+        if (halfway->id == interpreterId) {\n+            return halfway;\n+        }\n+        if (halfway->id < interpreterId) {\n+            begin = halfway;\n+        } else {\n+            end = halfway;\n+        }\n+    }\n+\n+    // Assume that for small ranges, it's quicker to do a linear search\n+    for (; begin<end; ++begin) {",
            "html_url": "https://github.com/cython/cython/pull/6463#discussion_r1846121200",
            "id": 1846121200,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5uCZLw",
            "original_commit_id": "9f099b46eefa6108e862d9b3b7ec1f8a2e7ac1d5",
            "original_line": 2659,
            "original_position": 207,
            "original_start_line": null,
            "path": "Cython/Utility/ModuleSetupCode.c",
            "position": null,
            "pull_request_review_id": 2441857624,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6463",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1846121200/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-11-18T09:24:49Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1846121200",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6463#discussion_r1846130174"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6463"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1846130174"
                }
            },
            "author_association": "MEMBER",
            "body": "This will probably use 8 bytes on most systems due to alignment issues. Not that it matters to waste 7 bytes, but it feels uncomforting to do it. Can't we see it from the allocated size or count whether it's still \"really small\" or not?",
            "commit_id": "59b29a38a2baa811f6707f202e8a6b03d9eda0b7",
            "created_at": "2024-11-18T09:06:14Z",
            "diff_hunk": "@@ -2484,3 +2494,441 @@ static int __Pyx_VersionSanityCheck(void) {\n #else\n #define __Pyx_shared_in_cpython_freethreading(x)\n #endif\n+\n+////////////////////////// MultiPhaseInitModuleState.proto /////////////\n+\n+#if CYTHON_PEP489_MULTI_PHASE_INIT && CYTHON_USE_MODULE_STATE\n+// This defines an ad-hoc, single module version of PyState_FindModule that\n+// works for multi-phase init modules. It's intended to be the last option\n+// when all the other official ways of getting the module are unavailable.\n+static PyObject *__Pyx_State_FindModule(void*); /* proto */\n+static int __Pyx_State_AddModule(PyObject* module, void*); /* proto */\n+static int __Pyx_State_RemoveModule(void*); /* proto */\n+\n+#elif CYTHON_USE_MODULE_STATE\n+#define __Pyx_State_FindModule PyState_FindModule\n+#define __Pyx_State_AddModule PyState_AddModule\n+#define __Pyx_State_RemoveModule PyState_RemoveModule\n+#endif\n+\n+////////////////////////// MultiPhaseInitModuleState /////////////\n+//@requires: MemoryView_C.c::Atomics\n+\n+\n+// Code to maintain a mapping between (sub)interpreters and the module instance that they imported.\n+// This is used to find the correct module state for the current interpreter.\n+\n+#if CYTHON_PEP489_MULTI_PHASE_INIT && CYTHON_USE_MODULE_STATE\n+\n+#ifndef CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\n+// If you're using multiple interpreters but a single GIL then\n+// this can be undefined for a bit of speed.\n+// Isolated subinterpreters were added in 3.12, and nogil in 3.13, so before that\n+// we can safely assume that we're protected by the GIL.\n+// TODO - turn this off as appropriate when the user is able to set\n+// Py_MOD_PER_INTERPRETER_GIL_SUPPORTED explicitly.\n+#if (CYTHON_COMPILING_IN_LIMITED_API || PY_VERSION_HEX >= 0x030C0000)\n+  #define CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE 1\n+#else\n+  #define CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE 0\n+#endif\n+#endif\n+\n+#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE && !CYTHON_ATOMICS\n+  #error \"Module state with PEP489 requires atomics. Currently that's one of \" \\\n+    \"C11, C++11, gcc atomic intrinsics or MSVC atomic intrinsics\"\n+#endif\n+\n+// We also need a lock. In order of preference:\n+// - PyMutex\n+// - a language standard library\n+// - pthreads\n+// - msvc\n+// - PyThread_lock isn't acceptable since we can't initialize it in a thread safe way\n+#if !CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\n+\n+#define __Pyx_ModuleStateLookup_Lock()\n+#define __Pyx_ModuleStateLookup_Unlock()\n+\n+#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d0000\n+\n+static PyMutex __Pyx_ModuleStateLookup_mutex = {0};\n+#define __Pyx_ModuleStateLookup_Lock() PyMutex_Lock(&__Pyx_ModuleStateLookup_mutex)\n+#define __Pyx_ModuleStateLookup_Unlock() PyMutex_Unlock(&__Pyx_ModuleStateLookup_mutex)\n+\n+#elif defined(__cplusplus) && __cplusplus >= 201103L\n+\n+#include <mutex>\n+static std::mutex __Pyx_ModuleStateLookup_mutex;\n+#define __Pyx_ModuleStateLookup_Lock() __Pyx_ModuleStateLookup_mutex.lock()\n+#define __Pyx_ModuleStateLookup_Unlock() __Pyx_ModuleStateLookup_mutex.unlock()\n+\n+#elif defined(__STDC_VERSION__) && (__STDC_VERSION__ > 201112L) && !defined(__STDC_NO_THREADS__)\n+#include <threads.h>\n+static mtx_t __Pyx_ModuleStateLookup_mutex;\n+static once_flag __Pyx_ModuleStateLookup_mutex_once_flag = ONCE_FLAG_INIT;\n+static void __Pyx_ModuleStateLookup_initialize_mutex(void) {\n+    mtx_init(&__Pyx_ModuleStateLookup_mutex, mtx_plain);\n+}\n+#define __Pyx_ModuleStateLookup_Lock() \\\n+  call_once(&__Pyx_ModuleStateLookup_mutex_once_flag, __Pyx_ModuleStateLookup_initialize_mutex); \\\n+  mtx_lock(&__Pyx_ModuleStateLookup_mutex)\n+#define __Pyx_ModuleStateLookup_Unlock() mtx_unlock(&__Pyx_ModuleStateLookup_mutex)\n+\n+// HAVE_PTHREAD_H comes from pyconfig.h\n+#elif defined(HAVE_PTHREAD_H)\n+\n+#include <pthread.h>\n+static pthread_mutex_t __Pyx_ModuleStateLookup_mutex = PTHREAD_MUTEX_INITIALIZER;\n+#define __Pyx_ModuleStateLookup_Lock() pthread_mutex_lock(&__Pyx_ModuleStateLookup_mutex)\n+#define __Pyx_ModuleStateLookup_Unlock() pthread_mutex_unlock(&__Pyx_ModuleStateLookup_mutex)\n+\n+#elif defined(_WIN32)\n+\n+#include <Windows.h>  // synchapi.h on its own doesn't work\n+\n+// Using a slim-read-write lock (instead of a mutex/critical section)\n+// because it can be statically initialized.\n+static SRWLOCK __Pyx_ModuleStateLookup_mutex = SRWLOCK_INIT;\n+#define __Pyx_ModuleStateLookup_Lock() AcquireSRWLockExclusive(&__Pyx_ModuleStateLookup_mutex)\n+#define __Pyx_ModuleStateLookup_Unlock() ReleaseSRWLockExclusive(&__Pyx_ModuleStateLookup_mutex)\n+\n+#else\n+#error \"No suitable lock available for CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE. \" \\\n+  \"Requires C standard >= C11, or C++ standard >= C++11, \" \\\n+  \"or pthreads, or the Windows 32 API, or Python >= 3.13.\"\n+#endif\n+\n+\n+typedef struct {\n+    int64_t id;\n+    PyObject *module;\n+} __Pyx_InterpreterIdAndModule;\n+\n+typedef struct {\n+    char really_small;",
            "html_url": "https://github.com/cython/cython/pull/6463#discussion_r1846130174",
            "id": 1846130174,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5uCbX-",
            "original_commit_id": "9f099b46eefa6108e862d9b3b7ec1f8a2e7ac1d5",
            "original_line": 2609,
            "original_position": 157,
            "original_start_line": 2608,
            "path": "Cython/Utility/ModuleSetupCode.c",
            "position": null,
            "pull_request_review_id": 2441857624,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6463",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1846130174/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-11-18T09:24:49Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1846130174",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6463#discussion_r1846141292"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6463"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1846141292"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    // fine because readers should be much faster than memory allocation.\r\n```",
            "commit_id": "59b29a38a2baa811f6707f202e8a6b03d9eda0b7",
            "created_at": "2024-11-18T09:13:30Z",
            "diff_hunk": "@@ -2484,3 +2494,441 @@ static int __Pyx_VersionSanityCheck(void) {\n #else\n #define __Pyx_shared_in_cpython_freethreading(x)\n #endif\n+\n+////////////////////////// MultiPhaseInitModuleState.proto /////////////\n+\n+#if CYTHON_PEP489_MULTI_PHASE_INIT && CYTHON_USE_MODULE_STATE\n+// This defines an ad-hoc, single module version of PyState_FindModule that\n+// works for multi-phase init modules. It's intended to be the last option\n+// when all the other official ways of getting the module are unavailable.\n+static PyObject *__Pyx_State_FindModule(void*); /* proto */\n+static int __Pyx_State_AddModule(PyObject* module, void*); /* proto */\n+static int __Pyx_State_RemoveModule(void*); /* proto */\n+\n+#elif CYTHON_USE_MODULE_STATE\n+#define __Pyx_State_FindModule PyState_FindModule\n+#define __Pyx_State_AddModule PyState_AddModule\n+#define __Pyx_State_RemoveModule PyState_RemoveModule\n+#endif\n+\n+////////////////////////// MultiPhaseInitModuleState /////////////\n+//@requires: MemoryView_C.c::Atomics\n+\n+\n+// Code to maintain a mapping between (sub)interpreters and the module instance that they imported.\n+// This is used to find the correct module state for the current interpreter.\n+\n+#if CYTHON_PEP489_MULTI_PHASE_INIT && CYTHON_USE_MODULE_STATE\n+\n+#ifndef CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\n+// If you're using multiple interpreters but a single GIL then\n+// this can be undefined for a bit of speed.\n+// Isolated subinterpreters were added in 3.12, and nogil in 3.13, so before that\n+// we can safely assume that we're protected by the GIL.\n+// TODO - turn this off as appropriate when the user is able to set\n+// Py_MOD_PER_INTERPRETER_GIL_SUPPORTED explicitly.\n+#if (CYTHON_COMPILING_IN_LIMITED_API || PY_VERSION_HEX >= 0x030C0000)\n+  #define CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE 1\n+#else\n+  #define CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE 0\n+#endif\n+#endif\n+\n+#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE && !CYTHON_ATOMICS\n+  #error \"Module state with PEP489 requires atomics. Currently that's one of \" \\\n+    \"C11, C++11, gcc atomic intrinsics or MSVC atomic intrinsics\"\n+#endif\n+\n+// We also need a lock. In order of preference:\n+// - PyMutex\n+// - a language standard library\n+// - pthreads\n+// - msvc\n+// - PyThread_lock isn't acceptable since we can't initialize it in a thread safe way\n+#if !CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\n+\n+#define __Pyx_ModuleStateLookup_Lock()\n+#define __Pyx_ModuleStateLookup_Unlock()\n+\n+#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d0000\n+\n+static PyMutex __Pyx_ModuleStateLookup_mutex = {0};\n+#define __Pyx_ModuleStateLookup_Lock() PyMutex_Lock(&__Pyx_ModuleStateLookup_mutex)\n+#define __Pyx_ModuleStateLookup_Unlock() PyMutex_Unlock(&__Pyx_ModuleStateLookup_mutex)\n+\n+#elif defined(__cplusplus) && __cplusplus >= 201103L\n+\n+#include <mutex>\n+static std::mutex __Pyx_ModuleStateLookup_mutex;\n+#define __Pyx_ModuleStateLookup_Lock() __Pyx_ModuleStateLookup_mutex.lock()\n+#define __Pyx_ModuleStateLookup_Unlock() __Pyx_ModuleStateLookup_mutex.unlock()\n+\n+#elif defined(__STDC_VERSION__) && (__STDC_VERSION__ > 201112L) && !defined(__STDC_NO_THREADS__)\n+#include <threads.h>\n+static mtx_t __Pyx_ModuleStateLookup_mutex;\n+static once_flag __Pyx_ModuleStateLookup_mutex_once_flag = ONCE_FLAG_INIT;\n+static void __Pyx_ModuleStateLookup_initialize_mutex(void) {\n+    mtx_init(&__Pyx_ModuleStateLookup_mutex, mtx_plain);\n+}\n+#define __Pyx_ModuleStateLookup_Lock() \\\n+  call_once(&__Pyx_ModuleStateLookup_mutex_once_flag, __Pyx_ModuleStateLookup_initialize_mutex); \\\n+  mtx_lock(&__Pyx_ModuleStateLookup_mutex)\n+#define __Pyx_ModuleStateLookup_Unlock() mtx_unlock(&__Pyx_ModuleStateLookup_mutex)\n+\n+// HAVE_PTHREAD_H comes from pyconfig.h\n+#elif defined(HAVE_PTHREAD_H)\n+\n+#include <pthread.h>\n+static pthread_mutex_t __Pyx_ModuleStateLookup_mutex = PTHREAD_MUTEX_INITIALIZER;\n+#define __Pyx_ModuleStateLookup_Lock() pthread_mutex_lock(&__Pyx_ModuleStateLookup_mutex)\n+#define __Pyx_ModuleStateLookup_Unlock() pthread_mutex_unlock(&__Pyx_ModuleStateLookup_mutex)\n+\n+#elif defined(_WIN32)\n+\n+#include <Windows.h>  // synchapi.h on its own doesn't work\n+\n+// Using a slim-read-write lock (instead of a mutex/critical section)\n+// because it can be statically initialized.\n+static SRWLOCK __Pyx_ModuleStateLookup_mutex = SRWLOCK_INIT;\n+#define __Pyx_ModuleStateLookup_Lock() AcquireSRWLockExclusive(&__Pyx_ModuleStateLookup_mutex)\n+#define __Pyx_ModuleStateLookup_Unlock() ReleaseSRWLockExclusive(&__Pyx_ModuleStateLookup_mutex)\n+\n+#else\n+#error \"No suitable lock available for CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE. \" \\\n+  \"Requires C standard >= C11, or C++ standard >= C++11, \" \\\n+  \"or pthreads, or the Windows 32 API, or Python >= 3.13.\"\n+#endif\n+\n+\n+typedef struct {\n+    int64_t id;\n+    PyObject *module;\n+} __Pyx_InterpreterIdAndModule;\n+\n+typedef struct {\n+    char really_small;\n+    Py_ssize_t count;\n+    Py_ssize_t allocated;\n+    __Pyx_InterpreterIdAndModule table[1];\n+} __Pyx_ModuleStateLookupData;\n+\n+#define __PYX_MODULE_STATE_LOOKUP_SMALL_SIZE 32\n+// Really small means \"the maximum interpreter ID ever seen is smaller than\n+// __PYX_MODULE_STATE_LOOKUP_SMALL_SIZE and thus they're stored in an array\n+// where the index corresponds to interpreter ID, and __Pyx_ModuleStateLookup_count\n+// is the size of the array.\n+\n+#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\n+static __pyx_atomic_int_type __Pyx_ModuleStateLookup_read_counter = 0;\n+#endif\n+\n+// A sorted list of (sub)interpreter IDs and the module that was imported into that interpreter.\n+// For now look this up via binary search.\n+#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\n+static __pyx_atomic_ptr_type __Pyx_ModuleStateLookup_data = 0;\n+#else\n+static __Pyx_ModuleStateLookupData* __Pyx_ModuleStateLookup_data = NULL;\n+#endif\n+\n+\n+static __Pyx_InterpreterIdAndModule* __Pyx_State_FindModuleStateLookupTableLowerBound(\n+        __Pyx_InterpreterIdAndModule* table,\n+        Py_ssize_t count,\n+        int64_t interpreterId) {\n+    __Pyx_InterpreterIdAndModule* begin = table;\n+    __Pyx_InterpreterIdAndModule* end = begin + count;\n+\n+    // fairly likely - e.g. single interpreter\n+    if (begin->id == interpreterId) {\n+        return begin;\n+    }\n+\n+    while ((end-begin) > __PYX_MODULE_STATE_LOOKUP_SMALL_SIZE) {\n+        __Pyx_InterpreterIdAndModule* halfway = begin + (end - begin)/2;\n+        if (halfway->id == interpreterId) {\n+            return halfway;\n+        }\n+        if (halfway->id < interpreterId) {\n+            begin = halfway;\n+        } else {\n+            end = halfway;\n+        }\n+    }\n+\n+    // Assume that for small ranges, it's quicker to do a linear search\n+    for (; begin<end; ++begin) {\n+        if (begin->id >= interpreterId) return begin;\n+    }\n+    return begin;\n+}\n+\n+static PyObject *__Pyx_State_FindModule(CYTHON_UNUSED void* dummy) {\n+    int64_t interpreter_id = PyInterpreterState_GetID(__Pyx_PyInterpreterState_Get());\n+    if (interpreter_id == -1) return NULL;\n+\n+#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\n+    __Pyx_ModuleStateLookupData* data = (__Pyx_ModuleStateLookupData*)__pyx_atomic_pointer_load_relaxed(&__Pyx_ModuleStateLookup_data);\n+    {\n+        // Thread sanitizer says that this is OK relaxed, but I think it needs to be acquire-release\n+        __pyx_atomic_incr_acq_rel(&__Pyx_ModuleStateLookup_read_counter);\n+        // data == NULL can either mean we're writing, or it's uninitialized.\n+        // Uninitialized only happens infrequently on the first few calls, so it's fine\n+        // to be on the slow path.\n+        if (likely(data)) {\n+            __Pyx_ModuleStateLookupData* new_data = (__Pyx_ModuleStateLookupData*)__pyx_atomic_pointer_load_acquire(&__Pyx_ModuleStateLookup_data);\n+            if (likely(data == new_data)) {\n+                // Nothing has written the data between incrementing the read counter and loading the pointer.\n+                goto read_finished;\n+            }\n+        }\n+        // In principle DW believes this could be \"relaxed\", but it's on the unlikely slow path anyway\n+        // so let's not add more macros.\n+        // Undo our addition to the read counter.\n+        __pyx_atomic_decr_acq_rel(&__Pyx_ModuleStateLookup_read_counter);\n+        // Wait for the write to finish and try again\n+        __Pyx_ModuleStateLookup_Lock();\n+        __pyx_atomic_incr_relaxed(&__Pyx_ModuleStateLookup_read_counter);\n+        data = (__Pyx_ModuleStateLookupData*)__pyx_atomic_pointer_load_relaxed(&__Pyx_ModuleStateLookup_data);\n+        __Pyx_ModuleStateLookup_Unlock();\n+    }\n+  read_finished:;\n+\n+#else\n+    __Pyx_ModuleStateLookupData* data = __Pyx_ModuleStateLookup_data;\n+#endif\n+\n+    __Pyx_InterpreterIdAndModule* found = NULL;\n+\n+    // There's one \"already imported\" check that'll hit this\n+    if (unlikely(!data)) goto end;\n+\n+    if (data->really_small) {\n+        if (interpreter_id < data->count) {\n+            found = data->table+interpreter_id;\n+        }\n+    } else {\n+        found = __Pyx_State_FindModuleStateLookupTableLowerBound(\n+            data->table, data->count, interpreter_id);\n+    }\n+\n+  end:\n+#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\n+    __pyx_atomic_decr_acq_rel(&__Pyx_ModuleStateLookup_read_counter);\n+#endif\n+\n+    if (found && found->id == interpreter_id) {\n+        return found->module;\n+    }\n+    return NULL;\n+}\n+\n+#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\n+void __Pyx_ModuleStateLookup_wait_until_no_readers(void) {\n+    // Wait for any readers will working on the old data. Spin-lock is\n+    // fine because readers should be much faster that memory allocation.",
            "html_url": "https://github.com/cython/cython/pull/6463#discussion_r1846141292",
            "id": 1846141292,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5uCeFs",
            "original_commit_id": "9f099b46eefa6108e862d9b3b7ec1f8a2e7ac1d5",
            "original_line": 2728,
            "original_position": 276,
            "original_start_line": null,
            "path": "Cython/Utility/ModuleSetupCode.c",
            "position": null,
            "pull_request_review_id": 2441857624,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6463",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1846141292/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-11-18T09:24:49Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1846141292",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6463#discussion_r1846156418"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6463"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1846156418"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    this is experimental and not all data has been moved.  Specifically, ``cdef``\r\n    globals have not been moved.\r\n```",
            "commit_id": "59b29a38a2baa811f6707f202e8a6b03d9eda0b7",
            "created_at": "2024-11-18T09:22:34Z",
            "diff_hunk": "@@ -1220,9 +1220,8 @@ most important to least important:\n     Stores module data on a struct associated with the module object rather than as\n     C global variables.  The advantage is that it should be possible to import the\n     same module more than once (e.g. in different sub-interpreters).  At the moment\n-    this is experimental and not all data has been moved.  It also requires that\n-    ``CYTHON_PEP489_MULTI_PHASE_INIT`` is off - we plan to remove this limitation\n-    in the future.\n+    this is experimental and not all data has been moved.  Specifically ``cdef``\n+    globals have not been moved.",
            "html_url": "https://github.com/cython/cython/pull/6463#discussion_r1846156418",
            "id": 1846156418,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5uChyC",
            "original_commit_id": "9f099b46eefa6108e862d9b3b7ec1f8a2e7ac1d5",
            "original_line": 1224,
            "original_position": 8,
            "original_start_line": 1223,
            "path": "docs/src/userguide/source_files_and_compilation.rst",
            "position": null,
            "pull_request_review_id": 2441857624,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6463",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1846156418/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-11-18T09:24:49Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1846156418",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6463#discussion_r1847093963"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6463"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1847093963"
                }
            },
            "author_association": "MEMBER",
            "body": "The line breaks look to work fine. Agree with you about the string concatenation - I'll fix it.",
            "commit_id": "59b29a38a2baa811f6707f202e8a6b03d9eda0b7",
            "created_at": "2024-11-18T18:51:09Z",
            "diff_hunk": "@@ -2484,3 +2494,441 @@ static int __Pyx_VersionSanityCheck(void) {\n #else\n #define __Pyx_shared_in_cpython_freethreading(x)\n #endif\n+\n+////////////////////////// MultiPhaseInitModuleState.proto /////////////\n+\n+#if CYTHON_PEP489_MULTI_PHASE_INIT && CYTHON_USE_MODULE_STATE\n+// This defines an ad-hoc, single module version of PyState_FindModule that\n+// works for multi-phase init modules. It's intended to be the last option\n+// when all the other official ways of getting the module are unavailable.\n+static PyObject *__Pyx_State_FindModule(void*); /* proto */\n+static int __Pyx_State_AddModule(PyObject* module, void*); /* proto */\n+static int __Pyx_State_RemoveModule(void*); /* proto */\n+\n+#elif CYTHON_USE_MODULE_STATE\n+#define __Pyx_State_FindModule PyState_FindModule\n+#define __Pyx_State_AddModule PyState_AddModule\n+#define __Pyx_State_RemoveModule PyState_RemoveModule\n+#endif\n+\n+////////////////////////// MultiPhaseInitModuleState /////////////\n+//@requires: MemoryView_C.c::Atomics\n+\n+\n+// Code to maintain a mapping between (sub)interpreters and the module instance that they imported.\n+// This is used to find the correct module state for the current interpreter.\n+\n+#if CYTHON_PEP489_MULTI_PHASE_INIT && CYTHON_USE_MODULE_STATE\n+\n+#ifndef CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\n+// If you're using multiple interpreters but a single GIL then\n+// this can be undefined for a bit of speed.\n+// Isolated subinterpreters were added in 3.12, and nogil in 3.13, so before that\n+// we can safely assume that we're protected by the GIL.\n+// TODO - turn this off as appropriate when the user is able to set\n+// Py_MOD_PER_INTERPRETER_GIL_SUPPORTED explicitly.\n+#if (CYTHON_COMPILING_IN_LIMITED_API || PY_VERSION_HEX >= 0x030C0000)\n+  #define CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE 1\n+#else\n+  #define CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE 0\n+#endif\n+#endif\n+\n+#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE && !CYTHON_ATOMICS\n+  #error \"Module state with PEP489 requires atomics. Currently that's one of \" \\\n+    \"C11, C++11, gcc atomic intrinsics or MSVC atomic intrinsics\"\n+#endif\n+\n+// We also need a lock. In order of preference:\n+// - PyMutex\n+// - a language standard library\n+// - pthreads\n+// - msvc\n+// - PyThread_lock isn't acceptable since we can't initialize it in a thread safe way\n+#if !CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\n+\n+#define __Pyx_ModuleStateLookup_Lock()\n+#define __Pyx_ModuleStateLookup_Unlock()\n+\n+#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d0000\n+\n+static PyMutex __Pyx_ModuleStateLookup_mutex = {0};\n+#define __Pyx_ModuleStateLookup_Lock() PyMutex_Lock(&__Pyx_ModuleStateLookup_mutex)\n+#define __Pyx_ModuleStateLookup_Unlock() PyMutex_Unlock(&__Pyx_ModuleStateLookup_mutex)\n+\n+#elif defined(__cplusplus) && __cplusplus >= 201103L\n+\n+#include <mutex>\n+static std::mutex __Pyx_ModuleStateLookup_mutex;\n+#define __Pyx_ModuleStateLookup_Lock() __Pyx_ModuleStateLookup_mutex.lock()\n+#define __Pyx_ModuleStateLookup_Unlock() __Pyx_ModuleStateLookup_mutex.unlock()\n+\n+#elif defined(__STDC_VERSION__) && (__STDC_VERSION__ > 201112L) && !defined(__STDC_NO_THREADS__)\n+#include <threads.h>\n+static mtx_t __Pyx_ModuleStateLookup_mutex;\n+static once_flag __Pyx_ModuleStateLookup_mutex_once_flag = ONCE_FLAG_INIT;\n+static void __Pyx_ModuleStateLookup_initialize_mutex(void) {\n+    mtx_init(&__Pyx_ModuleStateLookup_mutex, mtx_plain);\n+}\n+#define __Pyx_ModuleStateLookup_Lock() \\\n+  call_once(&__Pyx_ModuleStateLookup_mutex_once_flag, __Pyx_ModuleStateLookup_initialize_mutex); \\\n+  mtx_lock(&__Pyx_ModuleStateLookup_mutex)\n+#define __Pyx_ModuleStateLookup_Unlock() mtx_unlock(&__Pyx_ModuleStateLookup_mutex)\n+\n+// HAVE_PTHREAD_H comes from pyconfig.h\n+#elif defined(HAVE_PTHREAD_H)\n+\n+#include <pthread.h>\n+static pthread_mutex_t __Pyx_ModuleStateLookup_mutex = PTHREAD_MUTEX_INITIALIZER;\n+#define __Pyx_ModuleStateLookup_Lock() pthread_mutex_lock(&__Pyx_ModuleStateLookup_mutex)\n+#define __Pyx_ModuleStateLookup_Unlock() pthread_mutex_unlock(&__Pyx_ModuleStateLookup_mutex)\n+\n+#elif defined(_WIN32)\n+\n+#include <Windows.h>  // synchapi.h on its own doesn't work\n+\n+// Using a slim-read-write lock (instead of a mutex/critical section)\n+// because it can be statically initialized.\n+static SRWLOCK __Pyx_ModuleStateLookup_mutex = SRWLOCK_INIT;\n+#define __Pyx_ModuleStateLookup_Lock() AcquireSRWLockExclusive(&__Pyx_ModuleStateLookup_mutex)\n+#define __Pyx_ModuleStateLookup_Unlock() ReleaseSRWLockExclusive(&__Pyx_ModuleStateLookup_mutex)\n+\n+#else\n+#error \"No suitable lock available for CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE. \" \\\n+  \"Requires C standard >= C11, or C++ standard >= C++11, \" \\\n+  \"or pthreads, or the Windows 32 API, or Python >= 3.13.\"\n+#endif",
            "html_url": "https://github.com/cython/cython/pull/6463#discussion_r1847093963",
            "id": 1847093963,
            "in_reply_to_id": 1846114065,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5uGGrL",
            "original_commit_id": "9f099b46eefa6108e862d9b3b7ec1f8a2e7ac1d5",
            "original_line": 2600,
            "original_position": 148,
            "original_start_line": 2597,
            "path": "Cython/Utility/ModuleSetupCode.c",
            "position": null,
            "pull_request_review_id": 2443442513,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6463",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1847093963/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-11-18T18:51:09Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1847093963",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6463#discussion_r1847098014"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6463"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1847098014"
                }
            },
            "author_association": "MEMBER",
            "body": "Not easily. ",
            "commit_id": "59b29a38a2baa811f6707f202e8a6b03d9eda0b7",
            "created_at": "2024-11-18T18:54:32Z",
            "diff_hunk": "@@ -2484,3 +2494,441 @@ static int __Pyx_VersionSanityCheck(void) {\n #else\n #define __Pyx_shared_in_cpython_freethreading(x)\n #endif\n+\n+////////////////////////// MultiPhaseInitModuleState.proto /////////////\n+\n+#if CYTHON_PEP489_MULTI_PHASE_INIT && CYTHON_USE_MODULE_STATE\n+// This defines an ad-hoc, single module version of PyState_FindModule that\n+// works for multi-phase init modules. It's intended to be the last option\n+// when all the other official ways of getting the module are unavailable.\n+static PyObject *__Pyx_State_FindModule(void*); /* proto */\n+static int __Pyx_State_AddModule(PyObject* module, void*); /* proto */\n+static int __Pyx_State_RemoveModule(void*); /* proto */\n+\n+#elif CYTHON_USE_MODULE_STATE\n+#define __Pyx_State_FindModule PyState_FindModule\n+#define __Pyx_State_AddModule PyState_AddModule\n+#define __Pyx_State_RemoveModule PyState_RemoveModule\n+#endif\n+\n+////////////////////////// MultiPhaseInitModuleState /////////////\n+//@requires: MemoryView_C.c::Atomics\n+\n+\n+// Code to maintain a mapping between (sub)interpreters and the module instance that they imported.\n+// This is used to find the correct module state for the current interpreter.\n+\n+#if CYTHON_PEP489_MULTI_PHASE_INIT && CYTHON_USE_MODULE_STATE\n+\n+#ifndef CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\n+// If you're using multiple interpreters but a single GIL then\n+// this can be undefined for a bit of speed.\n+// Isolated subinterpreters were added in 3.12, and nogil in 3.13, so before that\n+// we can safely assume that we're protected by the GIL.\n+// TODO - turn this off as appropriate when the user is able to set\n+// Py_MOD_PER_INTERPRETER_GIL_SUPPORTED explicitly.\n+#if (CYTHON_COMPILING_IN_LIMITED_API || PY_VERSION_HEX >= 0x030C0000)\n+  #define CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE 1\n+#else\n+  #define CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE 0\n+#endif\n+#endif\n+\n+#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE && !CYTHON_ATOMICS\n+  #error \"Module state with PEP489 requires atomics. Currently that's one of \" \\\n+    \"C11, C++11, gcc atomic intrinsics or MSVC atomic intrinsics\"\n+#endif\n+\n+// We also need a lock. In order of preference:\n+// - PyMutex\n+// - a language standard library\n+// - pthreads\n+// - msvc\n+// - PyThread_lock isn't acceptable since we can't initialize it in a thread safe way\n+#if !CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\n+\n+#define __Pyx_ModuleStateLookup_Lock()\n+#define __Pyx_ModuleStateLookup_Unlock()\n+\n+#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d0000\n+\n+static PyMutex __Pyx_ModuleStateLookup_mutex = {0};\n+#define __Pyx_ModuleStateLookup_Lock() PyMutex_Lock(&__Pyx_ModuleStateLookup_mutex)\n+#define __Pyx_ModuleStateLookup_Unlock() PyMutex_Unlock(&__Pyx_ModuleStateLookup_mutex)\n+\n+#elif defined(__cplusplus) && __cplusplus >= 201103L\n+\n+#include <mutex>\n+static std::mutex __Pyx_ModuleStateLookup_mutex;\n+#define __Pyx_ModuleStateLookup_Lock() __Pyx_ModuleStateLookup_mutex.lock()\n+#define __Pyx_ModuleStateLookup_Unlock() __Pyx_ModuleStateLookup_mutex.unlock()\n+\n+#elif defined(__STDC_VERSION__) && (__STDC_VERSION__ > 201112L) && !defined(__STDC_NO_THREADS__)\n+#include <threads.h>\n+static mtx_t __Pyx_ModuleStateLookup_mutex;\n+static once_flag __Pyx_ModuleStateLookup_mutex_once_flag = ONCE_FLAG_INIT;\n+static void __Pyx_ModuleStateLookup_initialize_mutex(void) {\n+    mtx_init(&__Pyx_ModuleStateLookup_mutex, mtx_plain);\n+}\n+#define __Pyx_ModuleStateLookup_Lock() \\\n+  call_once(&__Pyx_ModuleStateLookup_mutex_once_flag, __Pyx_ModuleStateLookup_initialize_mutex); \\\n+  mtx_lock(&__Pyx_ModuleStateLookup_mutex)\n+#define __Pyx_ModuleStateLookup_Unlock() mtx_unlock(&__Pyx_ModuleStateLookup_mutex)\n+\n+// HAVE_PTHREAD_H comes from pyconfig.h\n+#elif defined(HAVE_PTHREAD_H)\n+\n+#include <pthread.h>\n+static pthread_mutex_t __Pyx_ModuleStateLookup_mutex = PTHREAD_MUTEX_INITIALIZER;\n+#define __Pyx_ModuleStateLookup_Lock() pthread_mutex_lock(&__Pyx_ModuleStateLookup_mutex)\n+#define __Pyx_ModuleStateLookup_Unlock() pthread_mutex_unlock(&__Pyx_ModuleStateLookup_mutex)\n+\n+#elif defined(_WIN32)\n+\n+#include <Windows.h>  // synchapi.h on its own doesn't work\n+\n+// Using a slim-read-write lock (instead of a mutex/critical section)\n+// because it can be statically initialized.\n+static SRWLOCK __Pyx_ModuleStateLookup_mutex = SRWLOCK_INIT;\n+#define __Pyx_ModuleStateLookup_Lock() AcquireSRWLockExclusive(&__Pyx_ModuleStateLookup_mutex)\n+#define __Pyx_ModuleStateLookup_Unlock() ReleaseSRWLockExclusive(&__Pyx_ModuleStateLookup_mutex)\n+\n+#else\n+#error \"No suitable lock available for CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE. \" \\\n+  \"Requires C standard >= C11, or C++ standard >= C++11, \" \\\n+  \"or pthreads, or the Windows 32 API, or Python >= 3.13.\"\n+#endif\n+\n+\n+typedef struct {\n+    int64_t id;\n+    PyObject *module;\n+} __Pyx_InterpreterIdAndModule;\n+\n+typedef struct {\n+    char really_small;",
            "html_url": "https://github.com/cython/cython/pull/6463#discussion_r1847098014",
            "id": 1847098014,
            "in_reply_to_id": 1846130174,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5uGHqe",
            "original_commit_id": "9f099b46eefa6108e862d9b3b7ec1f8a2e7ac1d5",
            "original_line": 2609,
            "original_position": 157,
            "original_start_line": 2608,
            "path": "Cython/Utility/ModuleSetupCode.c",
            "position": null,
            "pull_request_review_id": 2443448769,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6463",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1847098014/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-11-18T18:54:32Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1847098014",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6463#discussion_r1847103755"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6463"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1847103755"
                }
            },
            "author_association": "MEMBER",
            "body": "Sorry... incomplete comment.\r\n\r\nNot easily. \"really_small\" also depends on the range of interpreter IDs seen. So it's not just the size of the array, but also if we've seen an interpreter ID greater than 32.\r\n\r\nIt's the difference between:\r\n\r\n```\r\nindex       0      1       2      3      4  ....   \r\nID          0      1       2      3      4 ....\r\npointer    ptr   null      ptr   ptr  null ...\r\n```\r\n\r\nand \r\n```\r\nindex       0     1       2     3      4 ....\r\nID          0     2       4\r\nptr         ptr  ptr     ptr\r\n```",
            "commit_id": "59b29a38a2baa811f6707f202e8a6b03d9eda0b7",
            "created_at": "2024-11-18T18:59:11Z",
            "diff_hunk": "@@ -2484,3 +2494,441 @@ static int __Pyx_VersionSanityCheck(void) {\n #else\n #define __Pyx_shared_in_cpython_freethreading(x)\n #endif\n+\n+////////////////////////// MultiPhaseInitModuleState.proto /////////////\n+\n+#if CYTHON_PEP489_MULTI_PHASE_INIT && CYTHON_USE_MODULE_STATE\n+// This defines an ad-hoc, single module version of PyState_FindModule that\n+// works for multi-phase init modules. It's intended to be the last option\n+// when all the other official ways of getting the module are unavailable.\n+static PyObject *__Pyx_State_FindModule(void*); /* proto */\n+static int __Pyx_State_AddModule(PyObject* module, void*); /* proto */\n+static int __Pyx_State_RemoveModule(void*); /* proto */\n+\n+#elif CYTHON_USE_MODULE_STATE\n+#define __Pyx_State_FindModule PyState_FindModule\n+#define __Pyx_State_AddModule PyState_AddModule\n+#define __Pyx_State_RemoveModule PyState_RemoveModule\n+#endif\n+\n+////////////////////////// MultiPhaseInitModuleState /////////////\n+//@requires: MemoryView_C.c::Atomics\n+\n+\n+// Code to maintain a mapping between (sub)interpreters and the module instance that they imported.\n+// This is used to find the correct module state for the current interpreter.\n+\n+#if CYTHON_PEP489_MULTI_PHASE_INIT && CYTHON_USE_MODULE_STATE\n+\n+#ifndef CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\n+// If you're using multiple interpreters but a single GIL then\n+// this can be undefined for a bit of speed.\n+// Isolated subinterpreters were added in 3.12, and nogil in 3.13, so before that\n+// we can safely assume that we're protected by the GIL.\n+// TODO - turn this off as appropriate when the user is able to set\n+// Py_MOD_PER_INTERPRETER_GIL_SUPPORTED explicitly.\n+#if (CYTHON_COMPILING_IN_LIMITED_API || PY_VERSION_HEX >= 0x030C0000)\n+  #define CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE 1\n+#else\n+  #define CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE 0\n+#endif\n+#endif\n+\n+#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE && !CYTHON_ATOMICS\n+  #error \"Module state with PEP489 requires atomics. Currently that's one of \" \\\n+    \"C11, C++11, gcc atomic intrinsics or MSVC atomic intrinsics\"\n+#endif\n+\n+// We also need a lock. In order of preference:\n+// - PyMutex\n+// - a language standard library\n+// - pthreads\n+// - msvc\n+// - PyThread_lock isn't acceptable since we can't initialize it in a thread safe way\n+#if !CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\n+\n+#define __Pyx_ModuleStateLookup_Lock()\n+#define __Pyx_ModuleStateLookup_Unlock()\n+\n+#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d0000\n+\n+static PyMutex __Pyx_ModuleStateLookup_mutex = {0};\n+#define __Pyx_ModuleStateLookup_Lock() PyMutex_Lock(&__Pyx_ModuleStateLookup_mutex)\n+#define __Pyx_ModuleStateLookup_Unlock() PyMutex_Unlock(&__Pyx_ModuleStateLookup_mutex)\n+\n+#elif defined(__cplusplus) && __cplusplus >= 201103L\n+\n+#include <mutex>\n+static std::mutex __Pyx_ModuleStateLookup_mutex;\n+#define __Pyx_ModuleStateLookup_Lock() __Pyx_ModuleStateLookup_mutex.lock()\n+#define __Pyx_ModuleStateLookup_Unlock() __Pyx_ModuleStateLookup_mutex.unlock()\n+\n+#elif defined(__STDC_VERSION__) && (__STDC_VERSION__ > 201112L) && !defined(__STDC_NO_THREADS__)\n+#include <threads.h>\n+static mtx_t __Pyx_ModuleStateLookup_mutex;\n+static once_flag __Pyx_ModuleStateLookup_mutex_once_flag = ONCE_FLAG_INIT;\n+static void __Pyx_ModuleStateLookup_initialize_mutex(void) {\n+    mtx_init(&__Pyx_ModuleStateLookup_mutex, mtx_plain);\n+}\n+#define __Pyx_ModuleStateLookup_Lock() \\\n+  call_once(&__Pyx_ModuleStateLookup_mutex_once_flag, __Pyx_ModuleStateLookup_initialize_mutex); \\\n+  mtx_lock(&__Pyx_ModuleStateLookup_mutex)\n+#define __Pyx_ModuleStateLookup_Unlock() mtx_unlock(&__Pyx_ModuleStateLookup_mutex)\n+\n+// HAVE_PTHREAD_H comes from pyconfig.h\n+#elif defined(HAVE_PTHREAD_H)\n+\n+#include <pthread.h>\n+static pthread_mutex_t __Pyx_ModuleStateLookup_mutex = PTHREAD_MUTEX_INITIALIZER;\n+#define __Pyx_ModuleStateLookup_Lock() pthread_mutex_lock(&__Pyx_ModuleStateLookup_mutex)\n+#define __Pyx_ModuleStateLookup_Unlock() pthread_mutex_unlock(&__Pyx_ModuleStateLookup_mutex)\n+\n+#elif defined(_WIN32)\n+\n+#include <Windows.h>  // synchapi.h on its own doesn't work\n+\n+// Using a slim-read-write lock (instead of a mutex/critical section)\n+// because it can be statically initialized.\n+static SRWLOCK __Pyx_ModuleStateLookup_mutex = SRWLOCK_INIT;\n+#define __Pyx_ModuleStateLookup_Lock() AcquireSRWLockExclusive(&__Pyx_ModuleStateLookup_mutex)\n+#define __Pyx_ModuleStateLookup_Unlock() ReleaseSRWLockExclusive(&__Pyx_ModuleStateLookup_mutex)\n+\n+#else\n+#error \"No suitable lock available for CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE. \" \\\n+  \"Requires C standard >= C11, or C++ standard >= C++11, \" \\\n+  \"or pthreads, or the Windows 32 API, or Python >= 3.13.\"\n+#endif\n+\n+\n+typedef struct {\n+    int64_t id;\n+    PyObject *module;\n+} __Pyx_InterpreterIdAndModule;\n+\n+typedef struct {\n+    char really_small;",
            "html_url": "https://github.com/cython/cython/pull/6463#discussion_r1847103755",
            "id": 1847103755,
            "in_reply_to_id": 1846130174,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5uGJEL",
            "original_commit_id": "9f099b46eefa6108e862d9b3b7ec1f8a2e7ac1d5",
            "original_line": 2609,
            "original_position": 157,
            "original_start_line": 2608,
            "path": "Cython/Utility/ModuleSetupCode.c",
            "position": null,
            "pull_request_review_id": 2443462229,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6463",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1847103755/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-11-18T19:00:12Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1847103755",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6463#discussion_r1847105478"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6463"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1847105478"
                }
            },
            "author_association": "MEMBER",
            "body": "I'll find a more better name though.",
            "commit_id": "59b29a38a2baa811f6707f202e8a6b03d9eda0b7",
            "created_at": "2024-11-18T19:00:47Z",
            "diff_hunk": "@@ -2484,3 +2494,441 @@ static int __Pyx_VersionSanityCheck(void) {\n #else\n #define __Pyx_shared_in_cpython_freethreading(x)\n #endif\n+\n+////////////////////////// MultiPhaseInitModuleState.proto /////////////\n+\n+#if CYTHON_PEP489_MULTI_PHASE_INIT && CYTHON_USE_MODULE_STATE\n+// This defines an ad-hoc, single module version of PyState_FindModule that\n+// works for multi-phase init modules. It's intended to be the last option\n+// when all the other official ways of getting the module are unavailable.\n+static PyObject *__Pyx_State_FindModule(void*); /* proto */\n+static int __Pyx_State_AddModule(PyObject* module, void*); /* proto */\n+static int __Pyx_State_RemoveModule(void*); /* proto */\n+\n+#elif CYTHON_USE_MODULE_STATE\n+#define __Pyx_State_FindModule PyState_FindModule\n+#define __Pyx_State_AddModule PyState_AddModule\n+#define __Pyx_State_RemoveModule PyState_RemoveModule\n+#endif\n+\n+////////////////////////// MultiPhaseInitModuleState /////////////\n+//@requires: MemoryView_C.c::Atomics\n+\n+\n+// Code to maintain a mapping between (sub)interpreters and the module instance that they imported.\n+// This is used to find the correct module state for the current interpreter.\n+\n+#if CYTHON_PEP489_MULTI_PHASE_INIT && CYTHON_USE_MODULE_STATE\n+\n+#ifndef CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\n+// If you're using multiple interpreters but a single GIL then\n+// this can be undefined for a bit of speed.\n+// Isolated subinterpreters were added in 3.12, and nogil in 3.13, so before that\n+// we can safely assume that we're protected by the GIL.\n+// TODO - turn this off as appropriate when the user is able to set\n+// Py_MOD_PER_INTERPRETER_GIL_SUPPORTED explicitly.\n+#if (CYTHON_COMPILING_IN_LIMITED_API || PY_VERSION_HEX >= 0x030C0000)\n+  #define CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE 1\n+#else\n+  #define CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE 0\n+#endif\n+#endif\n+\n+#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE && !CYTHON_ATOMICS\n+  #error \"Module state with PEP489 requires atomics. Currently that's one of \" \\\n+    \"C11, C++11, gcc atomic intrinsics or MSVC atomic intrinsics\"\n+#endif\n+\n+// We also need a lock. In order of preference:\n+// - PyMutex\n+// - a language standard library\n+// - pthreads\n+// - msvc\n+// - PyThread_lock isn't acceptable since we can't initialize it in a thread safe way\n+#if !CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\n+\n+#define __Pyx_ModuleStateLookup_Lock()\n+#define __Pyx_ModuleStateLookup_Unlock()\n+\n+#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d0000\n+\n+static PyMutex __Pyx_ModuleStateLookup_mutex = {0};\n+#define __Pyx_ModuleStateLookup_Lock() PyMutex_Lock(&__Pyx_ModuleStateLookup_mutex)\n+#define __Pyx_ModuleStateLookup_Unlock() PyMutex_Unlock(&__Pyx_ModuleStateLookup_mutex)\n+\n+#elif defined(__cplusplus) && __cplusplus >= 201103L\n+\n+#include <mutex>\n+static std::mutex __Pyx_ModuleStateLookup_mutex;\n+#define __Pyx_ModuleStateLookup_Lock() __Pyx_ModuleStateLookup_mutex.lock()\n+#define __Pyx_ModuleStateLookup_Unlock() __Pyx_ModuleStateLookup_mutex.unlock()\n+\n+#elif defined(__STDC_VERSION__) && (__STDC_VERSION__ > 201112L) && !defined(__STDC_NO_THREADS__)\n+#include <threads.h>\n+static mtx_t __Pyx_ModuleStateLookup_mutex;\n+static once_flag __Pyx_ModuleStateLookup_mutex_once_flag = ONCE_FLAG_INIT;\n+static void __Pyx_ModuleStateLookup_initialize_mutex(void) {\n+    mtx_init(&__Pyx_ModuleStateLookup_mutex, mtx_plain);\n+}\n+#define __Pyx_ModuleStateLookup_Lock() \\\n+  call_once(&__Pyx_ModuleStateLookup_mutex_once_flag, __Pyx_ModuleStateLookup_initialize_mutex); \\\n+  mtx_lock(&__Pyx_ModuleStateLookup_mutex)\n+#define __Pyx_ModuleStateLookup_Unlock() mtx_unlock(&__Pyx_ModuleStateLookup_mutex)\n+\n+// HAVE_PTHREAD_H comes from pyconfig.h\n+#elif defined(HAVE_PTHREAD_H)\n+\n+#include <pthread.h>\n+static pthread_mutex_t __Pyx_ModuleStateLookup_mutex = PTHREAD_MUTEX_INITIALIZER;\n+#define __Pyx_ModuleStateLookup_Lock() pthread_mutex_lock(&__Pyx_ModuleStateLookup_mutex)\n+#define __Pyx_ModuleStateLookup_Unlock() pthread_mutex_unlock(&__Pyx_ModuleStateLookup_mutex)\n+\n+#elif defined(_WIN32)\n+\n+#include <Windows.h>  // synchapi.h on its own doesn't work\n+\n+// Using a slim-read-write lock (instead of a mutex/critical section)\n+// because it can be statically initialized.\n+static SRWLOCK __Pyx_ModuleStateLookup_mutex = SRWLOCK_INIT;\n+#define __Pyx_ModuleStateLookup_Lock() AcquireSRWLockExclusive(&__Pyx_ModuleStateLookup_mutex)\n+#define __Pyx_ModuleStateLookup_Unlock() ReleaseSRWLockExclusive(&__Pyx_ModuleStateLookup_mutex)\n+\n+#else\n+#error \"No suitable lock available for CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE. \" \\\n+  \"Requires C standard >= C11, or C++ standard >= C++11, \" \\\n+  \"or pthreads, or the Windows 32 API, or Python >= 3.13.\"\n+#endif\n+\n+\n+typedef struct {\n+    int64_t id;\n+    PyObject *module;\n+} __Pyx_InterpreterIdAndModule;\n+\n+typedef struct {\n+    char really_small;",
            "html_url": "https://github.com/cython/cython/pull/6463#discussion_r1847105478",
            "id": 1847105478,
            "in_reply_to_id": 1846130174,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5uGJfG",
            "original_commit_id": "9f099b46eefa6108e862d9b3b7ec1f8a2e7ac1d5",
            "original_line": 2609,
            "original_position": 157,
            "original_start_line": 2608,
            "path": "Cython/Utility/ModuleSetupCode.c",
            "position": null,
            "pull_request_review_id": 2443465149,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6463",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1847105478/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-11-18T19:00:47Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1847105478",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/cython/cython/issues/6463/comments",
    "commit_data": [
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/10f0a941569a1f356fbe5491ce6ab235e720d4ac/comments",
            "commit": {
                "author": {
                    "date": "2024-10-26T14:51:33Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2024-10-26T14:58:11Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Get module-state working on multi-phase init\n\nEssentially I've reimplemented the PyState_GetModule function\nto provide a base-line fallback which will work (at least while\nthe GIL is held). Long-term I think we want to use the\nproper mechanisms for isolating modules to get the state from\nthe class or the functions. However this achieves a base level\nof functionality.\n\nI've used binary-search in a list of thread ids. This is probably\nneedlessly inefficient (since practically the thread ids are\nlow sequential integers). However it should at least be fairly\ngeneral.",
                "tree": {
                    "sha": "2245ff1ba08e415433f8bd6cd91d201f8c74d11a",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/2245ff1ba08e415433f8bd6cd91d201f8c74d11a"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/10f0a941569a1f356fbe5491ce6ab235e720d4ac",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/10f0a941569a1f356fbe5491ce6ab235e720d4ac",
            "node_id": "C_kwDOAhr4b9oAKDEwZjBhOTQxNTY5YTFmMzU2ZmJlNTQ5MWNlNmFiMjM1ZTcyMGQ0YWM",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/18ad92814af4905ae24160f0d19ea5a9ac6847d6",
                    "sha": "18ad92814af4905ae24160f0d19ea5a9ac6847d6",
                    "url": "https://api.github.com/repos/cython/cython/commits/18ad92814af4905ae24160f0d19ea5a9ac6847d6"
                }
            ],
            "sha": "10f0a941569a1f356fbe5491ce6ab235e720d4ac",
            "url": "https://api.github.com/repos/cython/cython/commits/10f0a941569a1f356fbe5491ce6ab235e720d4ac"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/52c3295ac58c94b355e286436c86d859e847a2d7/comments",
            "commit": {
                "author": {
                    "date": "2024-10-26T16:11:17Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2024-10-26T16:11:17Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Fix cleanup without module state",
                "tree": {
                    "sha": "2135cad9365d655c647959506fcad8a83b8f7e16",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/2135cad9365d655c647959506fcad8a83b8f7e16"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/52c3295ac58c94b355e286436c86d859e847a2d7",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/52c3295ac58c94b355e286436c86d859e847a2d7",
            "node_id": "C_kwDOAhr4b9oAKDUyYzMyOTVhYzU4Yzk0YjM1NWUyODY0MzZjODZkODU5ZTg0N2EyZDc",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/10f0a941569a1f356fbe5491ce6ab235e720d4ac",
                    "sha": "10f0a941569a1f356fbe5491ce6ab235e720d4ac",
                    "url": "https://api.github.com/repos/cython/cython/commits/10f0a941569a1f356fbe5491ce6ab235e720d4ac"
                }
            ],
            "sha": "52c3295ac58c94b355e286436c86d859e847a2d7",
            "url": "https://api.github.com/repos/cython/cython/commits/52c3295ac58c94b355e286436c86d859e847a2d7"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/f0a3f5619ff1223a08ac1f1554b2acdc9501edcd/comments",
            "commit": {
                "author": {
                    "date": "2024-10-27T14:03:35Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2024-10-27T14:03:35Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Apply suggestions from code review\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                "tree": {
                    "sha": "10cc8c8758ce7f35e9ae52ac5770b0ce77296547",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/10cc8c8758ce7f35e9ae52ac5770b0ce77296547"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/f0a3f5619ff1223a08ac1f1554b2acdc9501edcd",
                "verification": {
                    "payload": "tree 10cc8c8758ce7f35e9ae52ac5770b0ce77296547\nparent 52c3295ac58c94b355e286436c86d859e847a2d7\nauthor da-woods <dw-git@d-woods.co.uk> 1730037815 +0000\ncommitter GitHub <noreply@github.com> 1730037815 +0000\n\nApply suggestions from code review\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJnHkg3CRC1aQ7uu5UhlAAA/t0QAGzU2YrWiUMYc1zTmNpEf9F4\nKAU6Nwt2BMUX8iaxtRVh5J3VHcGrVC7FUqYhFzq67OqmWsffmXRDvj0S8a1rqK/t\ndHhgHK/YZsc2M2LhttkKAkIm7Hd8kFZOzN8V+8MIKE6DPyeqNjfgw68dD8w5IsyH\nP8WVGHnYPYxD2KRPzsaKgwGFxI9k2i0THf/kVrDM0jjg6w/JSa078s/vhSOxslI8\nFXyrz3KIjDTVWYmDStT4oRctIsEVvelSvrMn8EzwCnb6oVVeSY0l7mci3AInVuMf\nwAbWwzMpMyTapbOiA/8hNR+XfN3uqidTckU1RmRUK8dn3MJciDzN/A77PRRl5VUk\n69p2Itzvx/4gfY+o1EikTslMNYSPEqX+HOZcM0HK2g6t2lK/sppg+EeDYGzYF+8g\nhVRpJSJXiCObN6cbcRcIZ1QNUT1+nco1mz+TEJKXQqTKTzCFzoGjGbBEElyvVRhg\nIsKF4fXOspZcyJMer1l/x7rQwfVDEUjk6FKYjT5se6hcP//yQUKDd9xUuz9Km7Wr\ntCDpOLw9gzR5S+/TtaEPjC91fWL5kuVdCBVMnOvZAjeM3GsuZQyIak+d+YceCQr7\nl8AE/txOp62AU96FTDyqkfE8kbOEIzCZ9L9Bd6/J9QDNB62Q6mUQkEMe0z8XQKWJ\n9sdLpdu3BEhibfXPuedt\n=JrX6\n-----END PGP SIGNATURE-----\n",
                    "verified": true,
                    "verified_at": "2024-11-09T00:18:13Z"
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/f0a3f5619ff1223a08ac1f1554b2acdc9501edcd",
            "node_id": "C_kwDOAhr4b9oAKGYwYTNmNTYxOWZmMTIyM2EwOGFjMWYxNTU0YjJhY2RjOTUwMWVkY2Q",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/52c3295ac58c94b355e286436c86d859e847a2d7",
                    "sha": "52c3295ac58c94b355e286436c86d859e847a2d7",
                    "url": "https://api.github.com/repos/cython/cython/commits/52c3295ac58c94b355e286436c86d859e847a2d7"
                }
            ],
            "sha": "f0a3f5619ff1223a08ac1f1554b2acdc9501edcd",
            "url": "https://api.github.com/repos/cython/cython/commits/f0a3f5619ff1223a08ac1f1554b2acdc9501edcd"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/a79227c5c6f7dd1970d2c6aa87919d4d72b8e673/comments",
            "commit": {
                "author": {
                    "date": "2024-10-27T16:54:15Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2024-10-27T16:54:15Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Optimize lookup",
                "tree": {
                    "sha": "2df73ee49bca66a54bd9bd5c3485a0b7b32965a9",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/2df73ee49bca66a54bd9bd5c3485a0b7b32965a9"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/a79227c5c6f7dd1970d2c6aa87919d4d72b8e673",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/a79227c5c6f7dd1970d2c6aa87919d4d72b8e673",
            "node_id": "C_kwDOAhr4b9oAKGE3OTIyN2M1YzZmN2RkMTk3MGQyYzZhYTg3OTE5ZDRkNzJiOGU2NzM",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/52c3295ac58c94b355e286436c86d859e847a2d7",
                    "sha": "52c3295ac58c94b355e286436c86d859e847a2d7",
                    "url": "https://api.github.com/repos/cython/cython/commits/52c3295ac58c94b355e286436c86d859e847a2d7"
                }
            ],
            "sha": "a79227c5c6f7dd1970d2c6aa87919d4d72b8e673",
            "url": "https://api.github.com/repos/cython/cython/commits/a79227c5c6f7dd1970d2c6aa87919d4d72b8e673"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/6ca2d692d5942b3599fd24d10e5cee19b2a6e82d/comments",
            "commit": {
                "author": {
                    "date": "2024-10-27T16:54:55Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2024-10-27T16:54:55Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Merge remote-tracking branch 'origin/multi-phase-module-state' into multi-phase-module-state",
                "tree": {
                    "sha": "67d6b6b53e13396edc3cb2ee7ed9e4420f331394",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/67d6b6b53e13396edc3cb2ee7ed9e4420f331394"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/6ca2d692d5942b3599fd24d10e5cee19b2a6e82d",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/6ca2d692d5942b3599fd24d10e5cee19b2a6e82d",
            "node_id": "C_kwDOAhr4b9oAKDZjYTJkNjkyZDU5NDJiMzU5OWZkMjRkMTBlNWNlZTE5YjJhNmU4MmQ",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/a79227c5c6f7dd1970d2c6aa87919d4d72b8e673",
                    "sha": "a79227c5c6f7dd1970d2c6aa87919d4d72b8e673",
                    "url": "https://api.github.com/repos/cython/cython/commits/a79227c5c6f7dd1970d2c6aa87919d4d72b8e673"
                },
                {
                    "html_url": "https://github.com/cython/cython/commit/f0a3f5619ff1223a08ac1f1554b2acdc9501edcd",
                    "sha": "f0a3f5619ff1223a08ac1f1554b2acdc9501edcd",
                    "url": "https://api.github.com/repos/cython/cython/commits/f0a3f5619ff1223a08ac1f1554b2acdc9501edcd"
                }
            ],
            "sha": "6ca2d692d5942b3599fd24d10e5cee19b2a6e82d",
            "url": "https://api.github.com/repos/cython/cython/commits/6ca2d692d5942b3599fd24d10e5cee19b2a6e82d"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/10fbe11f45dbe929b3777d6653a26e52ad1765c6/comments",
            "commit": {
                "author": {
                    "date": "2024-10-27T18:29:21Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2024-10-27T18:29:21Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Bug fixes and tests",
                "tree": {
                    "sha": "9af6188bbedf97b3cf3055985c79c27dba53b78b",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/9af6188bbedf97b3cf3055985c79c27dba53b78b"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/10fbe11f45dbe929b3777d6653a26e52ad1765c6",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/10fbe11f45dbe929b3777d6653a26e52ad1765c6",
            "node_id": "C_kwDOAhr4b9oAKDEwZmJlMTFmNDVkYmU5MjliMzc3N2Q2NjUzYTI2ZTUyYWQxNzY1YzY",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/6ca2d692d5942b3599fd24d10e5cee19b2a6e82d",
                    "sha": "6ca2d692d5942b3599fd24d10e5cee19b2a6e82d",
                    "url": "https://api.github.com/repos/cython/cython/commits/6ca2d692d5942b3599fd24d10e5cee19b2a6e82d"
                }
            ],
            "sha": "10fbe11f45dbe929b3777d6653a26e52ad1765c6",
            "url": "https://api.github.com/repos/cython/cython/commits/10fbe11f45dbe929b3777d6653a26e52ad1765c6"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/9b7ca4c14be4b67fe8514fb9ec31b76924fef6a2/comments",
            "commit": {
                "author": {
                    "date": "2024-10-27T18:34:34Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2024-10-27T18:34:34Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Add missing requirement",
                "tree": {
                    "sha": "6b52e020a95129990f93dd73b55be1724a1b7fa5",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/6b52e020a95129990f93dd73b55be1724a1b7fa5"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/9b7ca4c14be4b67fe8514fb9ec31b76924fef6a2",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/9b7ca4c14be4b67fe8514fb9ec31b76924fef6a2",
            "node_id": "C_kwDOAhr4b9oAKDliN2NhNGMxNGJlNGI2N2ZlODUxNGZiOWVjMzFiNzY5MjRmZWY2YTI",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/10fbe11f45dbe929b3777d6653a26e52ad1765c6",
                    "sha": "10fbe11f45dbe929b3777d6653a26e52ad1765c6",
                    "url": "https://api.github.com/repos/cython/cython/commits/10fbe11f45dbe929b3777d6653a26e52ad1765c6"
                }
            ],
            "sha": "9b7ca4c14be4b67fe8514fb9ec31b76924fef6a2",
            "url": "https://api.github.com/repos/cython/cython/commits/9b7ca4c14be4b67fe8514fb9ec31b76924fef6a2"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/e5ed0ba4b478d09d35032ff65e5f47ea26f557b3/comments",
            "commit": {
                "author": {
                    "date": "2024-10-27T19:56:16Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2024-10-27T19:58:18Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Fix unused args",
                "tree": {
                    "sha": "3df8050ecd071f370e656f4b07bb33713c6dca10",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/3df8050ecd071f370e656f4b07bb33713c6dca10"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/e5ed0ba4b478d09d35032ff65e5f47ea26f557b3",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/e5ed0ba4b478d09d35032ff65e5f47ea26f557b3",
            "node_id": "C_kwDOAhr4b9oAKGU1ZWQwYmE0YjQ3OGQwOWQzNTAzMmZmNjVlNWY0N2VhMjZmNTU3YjM",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/9b7ca4c14be4b67fe8514fb9ec31b76924fef6a2",
                    "sha": "9b7ca4c14be4b67fe8514fb9ec31b76924fef6a2",
                    "url": "https://api.github.com/repos/cython/cython/commits/9b7ca4c14be4b67fe8514fb9ec31b76924fef6a2"
                }
            ],
            "sha": "e5ed0ba4b478d09d35032ff65e5f47ea26f557b3",
            "url": "https://api.github.com/repos/cython/cython/commits/e5ed0ba4b478d09d35032ff65e5f47ea26f557b3"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/36ac6d5258110a3cafd95af899061381a838068b/comments",
            "commit": {
                "author": {
                    "date": "2024-10-27T20:26:51Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2024-10-27T20:26:51Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "PyInterpreterState_Get",
                "tree": {
                    "sha": "e2d5b7936320e8fe634353c3c906547cdf802200",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/e2d5b7936320e8fe634353c3c906547cdf802200"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/36ac6d5258110a3cafd95af899061381a838068b",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/36ac6d5258110a3cafd95af899061381a838068b",
            "node_id": "C_kwDOAhr4b9oAKDM2YWM2ZDUyNTgxMTBhM2NhZmQ5NWFmODk5MDYxMzgxYTgzODA2OGI",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/e5ed0ba4b478d09d35032ff65e5f47ea26f557b3",
                    "sha": "e5ed0ba4b478d09d35032ff65e5f47ea26f557b3",
                    "url": "https://api.github.com/repos/cython/cython/commits/e5ed0ba4b478d09d35032ff65e5f47ea26f557b3"
                }
            ],
            "sha": "36ac6d5258110a3cafd95af899061381a838068b",
            "url": "https://api.github.com/repos/cython/cython/commits/36ac6d5258110a3cafd95af899061381a838068b"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/6b8247d5b695957536841739d4835c0f237b5dda/comments",
            "commit": {
                "author": {
                    "date": "2024-10-28T06:33:54Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2024-10-28T06:33:54Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Change windows include",
                "tree": {
                    "sha": "227be8e0f9bdb9d0405d77dafd19354b382b33da",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/227be8e0f9bdb9d0405d77dafd19354b382b33da"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/6b8247d5b695957536841739d4835c0f237b5dda",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/6b8247d5b695957536841739d4835c0f237b5dda",
            "node_id": "C_kwDOAhr4b9oAKDZiODI0N2Q1YjY5NTk1NzUzNjg0MTczOWQ0ODM1YzBmMjM3YjVkZGE",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/36ac6d5258110a3cafd95af899061381a838068b",
                    "sha": "36ac6d5258110a3cafd95af899061381a838068b",
                    "url": "https://api.github.com/repos/cython/cython/commits/36ac6d5258110a3cafd95af899061381a838068b"
                }
            ],
            "sha": "6b8247d5b695957536841739d4835c0f237b5dda",
            "url": "https://api.github.com/repos/cython/cython/commits/6b8247d5b695957536841739d4835c0f237b5dda"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/69594e24079babddd709627f4b2bba9e9448e61d/comments",
            "commit": {
                "author": {
                    "date": "2024-10-28T07:17:27Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2024-10-28T07:17:27Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Windows capitalization",
                "tree": {
                    "sha": "cfc5d2c796dd55fdecaa4faa271030eb9d50d5f4",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/cfc5d2c796dd55fdecaa4faa271030eb9d50d5f4"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/69594e24079babddd709627f4b2bba9e9448e61d",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/69594e24079babddd709627f4b2bba9e9448e61d",
            "node_id": "C_kwDOAhr4b9oAKDY5NTk0ZTI0MDc5YmFiZGRkNzA5NjI3ZjRiMmJiYTllOTQ0OGU2MWQ",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/6b8247d5b695957536841739d4835c0f237b5dda",
                    "sha": "6b8247d5b695957536841739d4835c0f237b5dda",
                    "url": "https://api.github.com/repos/cython/cython/commits/6b8247d5b695957536841739d4835c0f237b5dda"
                }
            ],
            "sha": "69594e24079babddd709627f4b2bba9e9448e61d",
            "url": "https://api.github.com/repos/cython/cython/commits/69594e24079babddd709627f4b2bba9e9448e61d"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/54b610f710a1c942d18056d9e2d51ea8d34dfc86/comments",
            "commit": {
                "author": {
                    "date": "2024-10-29T07:25:58Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2024-10-29T07:25:58Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Lock-free version",
                "tree": {
                    "sha": "c9adea1dd5bbab202106160a5aff043c22fcfc65",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/c9adea1dd5bbab202106160a5aff043c22fcfc65"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/54b610f710a1c942d18056d9e2d51ea8d34dfc86",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/54b610f710a1c942d18056d9e2d51ea8d34dfc86",
            "node_id": "C_kwDOAhr4b9oAKDU0YjYxMGY3MTBhMWM5NDJkMTgwNTZkOWUyZDUxZWE4ZDM0ZGZjODY",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/69594e24079babddd709627f4b2bba9e9448e61d",
                    "sha": "69594e24079babddd709627f4b2bba9e9448e61d",
                    "url": "https://api.github.com/repos/cython/cython/commits/69594e24079babddd709627f4b2bba9e9448e61d"
                }
            ],
            "sha": "54b610f710a1c942d18056d9e2d51ea8d34dfc86",
            "url": "https://api.github.com/repos/cython/cython/commits/54b610f710a1c942d18056d9e2d51ea8d34dfc86"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/4879cc61a0f73fbb6b28326bd64140e3bce0ff20/comments",
            "commit": {
                "author": {
                    "date": "2024-10-29T08:00:31Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2024-10-29T08:00:31Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Typo in msvc",
                "tree": {
                    "sha": "bc483795383c7e5a08cfb8f6c82079600eea6f40",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/bc483795383c7e5a08cfb8f6c82079600eea6f40"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/4879cc61a0f73fbb6b28326bd64140e3bce0ff20",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/4879cc61a0f73fbb6b28326bd64140e3bce0ff20",
            "node_id": "C_kwDOAhr4b9oAKDQ4NzljYzYxYTBmNzNmYmI2YjI4MzI2YmQ2NDE0MGUzYmNlMGZmMjA",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/54b610f710a1c942d18056d9e2d51ea8d34dfc86",
                    "sha": "54b610f710a1c942d18056d9e2d51ea8d34dfc86",
                    "url": "https://api.github.com/repos/cython/cython/commits/54b610f710a1c942d18056d9e2d51ea8d34dfc86"
                }
            ],
            "sha": "4879cc61a0f73fbb6b28326bd64140e3bce0ff20",
            "url": "https://api.github.com/repos/cython/cython/commits/4879cc61a0f73fbb6b28326bd64140e3bce0ff20"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/81d1385d1ef79caf68899264b33851d9c8cf2d08/comments",
            "commit": {
                "author": {
                    "date": "2024-10-29T08:22:14Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2024-10-29T08:22:14Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "C syntax",
                "tree": {
                    "sha": "4e8bfa301c21564ec15a7126f85b05748526373f",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/4e8bfa301c21564ec15a7126f85b05748526373f"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/81d1385d1ef79caf68899264b33851d9c8cf2d08",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/81d1385d1ef79caf68899264b33851d9c8cf2d08",
            "node_id": "C_kwDOAhr4b9oAKDgxZDEzODVkMWVmNzljYWY2ODg5OTI2NGIzMzg1MWQ5YzhjZjJkMDg",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/4879cc61a0f73fbb6b28326bd64140e3bce0ff20",
                    "sha": "4879cc61a0f73fbb6b28326bd64140e3bce0ff20",
                    "url": "https://api.github.com/repos/cython/cython/commits/4879cc61a0f73fbb6b28326bd64140e3bce0ff20"
                }
            ],
            "sha": "81d1385d1ef79caf68899264b33851d9c8cf2d08",
            "url": "https://api.github.com/repos/cython/cython/commits/81d1385d1ef79caf68899264b33851d9c8cf2d08"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/5be538af1140e6a17d2b8d3d51c471574f3ebcb2/comments",
            "commit": {
                "author": {
                    "date": "2024-11-02T16:49:40Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2024-11-02T16:49:40Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Make atomics stricter\n\n(after further consideration)",
                "tree": {
                    "sha": "60360a881a51d0bf8824ee9949157fc3ffd419da",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/60360a881a51d0bf8824ee9949157fc3ffd419da"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/5be538af1140e6a17d2b8d3d51c471574f3ebcb2",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/5be538af1140e6a17d2b8d3d51c471574f3ebcb2",
            "node_id": "C_kwDOAhr4b9oAKDViZTUzOGFmMTE0MGU2YTE3ZDJiOGQzZDUxYzQ3MTU3NGYzZWJjYjI",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/81d1385d1ef79caf68899264b33851d9c8cf2d08",
                    "sha": "81d1385d1ef79caf68899264b33851d9c8cf2d08",
                    "url": "https://api.github.com/repos/cython/cython/commits/81d1385d1ef79caf68899264b33851d9c8cf2d08"
                }
            ],
            "sha": "5be538af1140e6a17d2b8d3d51c471574f3ebcb2",
            "url": "https://api.github.com/repos/cython/cython/commits/5be538af1140e6a17d2b8d3d51c471574f3ebcb2"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/9f099b46eefa6108e862d9b3b7ec1f8a2e7ac1d5/comments",
            "commit": {
                "author": {
                    "date": "2024-11-03T08:35:44Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2024-11-03T08:35:44Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Fix Windows hopefully",
                "tree": {
                    "sha": "317072b09ef42fdbde2434d0011bbf33f175f39b",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/317072b09ef42fdbde2434d0011bbf33f175f39b"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/9f099b46eefa6108e862d9b3b7ec1f8a2e7ac1d5",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/9f099b46eefa6108e862d9b3b7ec1f8a2e7ac1d5",
            "node_id": "C_kwDOAhr4b9oAKDlmMDk5YjQ2ZWVmYTYxMDhlODYyZDliM2I3ZWMxZjhhMmU3YWMxZDU",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/5be538af1140e6a17d2b8d3d51c471574f3ebcb2",
                    "sha": "5be538af1140e6a17d2b8d3d51c471574f3ebcb2",
                    "url": "https://api.github.com/repos/cython/cython/commits/5be538af1140e6a17d2b8d3d51c471574f3ebcb2"
                }
            ],
            "sha": "9f099b46eefa6108e862d9b3b7ec1f8a2e7ac1d5",
            "url": "https://api.github.com/repos/cython/cython/commits/9f099b46eefa6108e862d9b3b7ec1f8a2e7ac1d5"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/0c49e9eb134735125fad2fb0ff134566a1e44154/comments",
            "commit": {
                "author": {
                    "date": "2024-11-18T19:01:38Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2024-11-18T19:01:38Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Apply suggestions from code review\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                "tree": {
                    "sha": "edc74f2cff825aa3726685c91f7663e63f226490",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/edc74f2cff825aa3726685c91f7663e63f226490"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/0c49e9eb134735125fad2fb0ff134566a1e44154",
                "verification": {
                    "payload": "tree edc74f2cff825aa3726685c91f7663e63f226490\nparent 9f099b46eefa6108e862d9b3b7ec1f8a2e7ac1d5\nauthor da-woods <dw-git@d-woods.co.uk> 1731956498 +0000\ncommitter GitHub <noreply@github.com> 1731956498 +0000\n\nApply suggestions from code review\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJnO48SCRC1aQ7uu5UhlAAAr60QAARt5CzkL1oKvKFzHkNBmLTD\nB2ZfbfxK2I8dbIz1yccWM7BY25Q5cvBPRn5oFsQ+D0YD8Hp3c8Dt0zLp9N4MwpaG\nig6Ar6iO4S5hMuwjgRMBx/TNXJIMF6HfC2qbNJJkotAgfVdC0EH33OSmzHH1tNXg\n4mYI6aWD8NERhEKxivNZGXDJgCznU+zHRE0rQk46+0fjByOt4YWw8xEYu0WwCbMD\n2uErjAShJJ6ebCMfSWoIjRV/rPkVn4GmdQYMHJjwTguY0X+jrUXC1w4qECdhnimx\nF6Pe9lNOTqwcMRErgv9A2y6GXuNkWXpaNCaPN3k5T0zJmtjdLkdPWMqXZoq6c717\nmLFpJSg2CQ6yTLM/A+hu1040Miafv+sM2wKIOlcscTKiAldR25kt0W7f25E048OL\nH7Leb3GSkPAkRNGKlge+i3dYxnsjTCu4gFKqkYNWsryO5Nn547AsQhMA+umrnl6H\n+1OrbIgrdVdKn+SaGM7LgeTfl0QLOCNHTAWdrCYQ/suvpcufFSp5gTX2laDoph8p\nI8MiIU7khQpD12jBJJAGzQ7fVsYlAmxYuqh8wyYpZllbxIliEwuiOioV+Nv2c3Uy\nuC1vStBkloXK+hVyE3c3xKUmBPz0tLWgjZNQ3TzEkO+3cZP+d5Jjn2V9GoUVj8ME\nei74A3rptJOr+4BupUB3\n=8Kxg\n-----END PGP SIGNATURE-----\n",
                    "verified": true,
                    "verified_at": "2024-11-18T19:01:44Z"
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/0c49e9eb134735125fad2fb0ff134566a1e44154",
            "node_id": "C_kwDOAhr4b9oAKDBjNDllOWViMTM0NzM1MTI1ZmFkMmZiMGZmMTM0NTY2YTFlNDQxNTQ",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/9f099b46eefa6108e862d9b3b7ec1f8a2e7ac1d5",
                    "sha": "9f099b46eefa6108e862d9b3b7ec1f8a2e7ac1d5",
                    "url": "https://api.github.com/repos/cython/cython/commits/9f099b46eefa6108e862d9b3b7ec1f8a2e7ac1d5"
                }
            ],
            "sha": "0c49e9eb134735125fad2fb0ff134566a1e44154",
            "url": "https://api.github.com/repos/cython/cython/commits/0c49e9eb134735125fad2fb0ff134566a1e44154"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/fdd6dc9fcb0a861c4822ef7fe673fa4417eccc44/comments",
            "commit": {
                "author": {
                    "date": "2024-11-18T19:04:13Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2024-11-18T19:05:21Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Better name; better error message",
                "tree": {
                    "sha": "7f0ad61bc38e5f8af4bb4f80257556255c539bdd",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/7f0ad61bc38e5f8af4bb4f80257556255c539bdd"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/fdd6dc9fcb0a861c4822ef7fe673fa4417eccc44",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/fdd6dc9fcb0a861c4822ef7fe673fa4417eccc44",
            "node_id": "C_kwDOAhr4b9oAKGZkZDZkYzlmY2IwYTg2MWM0ODIyZWY3ZmU2NzNmYTQ0MTdlY2NjNDQ",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/0c49e9eb134735125fad2fb0ff134566a1e44154",
                    "sha": "0c49e9eb134735125fad2fb0ff134566a1e44154",
                    "url": "https://api.github.com/repos/cython/cython/commits/0c49e9eb134735125fad2fb0ff134566a1e44154"
                }
            ],
            "sha": "fdd6dc9fcb0a861c4822ef7fe673fa4417eccc44",
            "url": "https://api.github.com/repos/cython/cython/commits/fdd6dc9fcb0a861c4822ef7fe673fa4417eccc44"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/74adaf798ad71edbf013328b377bd93a2a3e623c/comments",
            "commit": {
                "author": {
                    "date": "2024-11-18T22:02:31Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2024-11-18T22:02:31Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Add thread-safety stress test",
                "tree": {
                    "sha": "ae96e30c562d2fb277c1dc2a1e366b2357fe712e",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/ae96e30c562d2fb277c1dc2a1e366b2357fe712e"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/74adaf798ad71edbf013328b377bd93a2a3e623c",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/74adaf798ad71edbf013328b377bd93a2a3e623c",
            "node_id": "C_kwDOAhr4b9oAKDc0YWRhZjc5OGFkNzFlZGJmMDEzMzI4YjM3N2JkOTNhMmEzZTYyM2M",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/fdd6dc9fcb0a861c4822ef7fe673fa4417eccc44",
                    "sha": "fdd6dc9fcb0a861c4822ef7fe673fa4417eccc44",
                    "url": "https://api.github.com/repos/cython/cython/commits/fdd6dc9fcb0a861c4822ef7fe673fa4417eccc44"
                }
            ],
            "sha": "74adaf798ad71edbf013328b377bd93a2a3e623c",
            "url": "https://api.github.com/repos/cython/cython/commits/74adaf798ad71edbf013328b377bd93a2a3e623c"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/59b29a38a2baa811f6707f202e8a6b03d9eda0b7/comments",
            "commit": {
                "author": {
                    "date": "2024-11-18T22:09:45Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2024-11-18T22:09:45Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Spelling and more comments",
                "tree": {
                    "sha": "c76780574df90f34466132fcadda2fab50480ec6",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/c76780574df90f34466132fcadda2fab50480ec6"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/59b29a38a2baa811f6707f202e8a6b03d9eda0b7",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/59b29a38a2baa811f6707f202e8a6b03d9eda0b7",
            "node_id": "C_kwDOAhr4b9oAKDU5YjI5YTM4YTJiYWE4MTFmNjcwN2YyMDJlOGE2YjAzZDllZGEwYjc",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/74adaf798ad71edbf013328b377bd93a2a3e623c",
                    "sha": "74adaf798ad71edbf013328b377bd93a2a3e623c",
                    "url": "https://api.github.com/repos/cython/cython/commits/74adaf798ad71edbf013328b377bd93a2a3e623c"
                }
            ],
            "sha": "59b29a38a2baa811f6707f202e8a6b03d9eda0b7",
            "url": "https://api.github.com/repos/cython/cython/commits/59b29a38a2baa811f6707f202e8a6b03d9eda0b7"
        }
    ],
    "commits_url": "https://api.github.com/repos/cython/cython/pulls/6463/commits",
    "created_at": "2024-10-26T14:58:43Z",
    "diff_url": "https://github.com/cython/cython/pull/6463.diff",
    "draft": false,
    "head": {
        "label": "da-woods:multi-phase-module-state",
        "ref": "multi-phase-module-state",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/da-woods/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/da-woods/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/da-woods/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/da-woods/cython/branches{/branch}",
            "clone_url": "https://github.com/da-woods/cython.git",
            "collaborators_url": "https://api.github.com/repos/da-woods/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/da-woods/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/da-woods/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/da-woods/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/da-woods/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/da-woods/cython/contributors",
            "created_at": "2015-05-09T08:55:00Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/da-woods/cython/deployments",
            "description": "A Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/da-woods/cython/downloads",
            "events_url": "https://api.github.com/repos/da-woods/cython/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/da-woods/cython/forks",
            "full_name": "da-woods/cython",
            "git_commits_url": "https://api.github.com/repos/da-woods/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/da-woods/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/da-woods/cython/git/tags{/sha}",
            "git_url": "git://github.com/da-woods/cython.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "http://cython.org",
            "hooks_url": "https://api.github.com/repos/da-woods/cython/hooks",
            "html_url": "https://github.com/da-woods/cython",
            "id": 35321967,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/da-woods/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/da-woods/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/da-woods/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/da-woods/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/da-woods/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/da-woods/cython/languages",
            "license": {
                "key": "apache-2.0",
                "name": "Apache License 2.0",
                "node_id": "MDc6TGljZW5zZTI=",
                "spdx_id": "Apache-2.0",
                "url": "https://api.github.com/licenses/apache-2.0"
            },
            "merges_url": "https://api.github.com/repos/da-woods/cython/merges",
            "milestones_url": "https://api.github.com/repos/da-woods/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkzNTMyMTk2Nw==",
            "notifications_url": "https://api.github.com/repos/da-woods/cython/notifications{?since,all,participating}",
            "open_issues": 1,
            "open_issues_count": 1,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/da-woods/cython/pulls{/number}",
            "pushed_at": "2024-11-18T22:09:56Z",
            "releases_url": "https://api.github.com/repos/da-woods/cython/releases{/id}",
            "size": 77542,
            "ssh_url": "git@github.com:da-woods/cython.git",
            "stargazers_count": 2,
            "stargazers_url": "https://api.github.com/repos/da-woods/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/da-woods/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/da-woods/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/da-woods/cython/subscription",
            "svn_url": "https://github.com/da-woods/cython",
            "tags_url": "https://api.github.com/repos/da-woods/cython/tags",
            "teams_url": "https://api.github.com/repos/da-woods/cython/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/da-woods/cython/git/trees{/sha}",
            "updated_at": "2024-04-06T10:51:16Z",
            "url": "https://api.github.com/repos/da-woods/cython",
            "visibility": "public",
            "watchers": 2,
            "watchers_count": 2,
            "web_commit_signoff_required": false
        },
        "sha": "59b29a38a2baa811f6707f202e8a6b03d9eda0b7",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
            "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
            "followers_url": "https://api.github.com/users/da-woods/followers",
            "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
            "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/da-woods",
            "id": 10536947,
            "login": "da-woods",
            "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
            "organizations_url": "https://api.github.com/users/da-woods/orgs",
            "received_events_url": "https://api.github.com/users/da-woods/received_events",
            "repos_url": "https://api.github.com/users/da-woods/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/da-woods",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/cython/cython/pull/6463",
    "id": 2147304777,
    "issue_url": "https://api.github.com/repos/cython/cython/issues/6463",
    "labels": [],
    "locked": false,
    "merge_commit_sha": "7cb0e07074c5256827cc46c873b1ea57b4c8d08c",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOABDGAc5__UVJ",
    "number": 6463,
    "patch_url": "https://github.com/cython/cython/pull/6463.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/cython/cython/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/cython/cython/pulls/6463/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/cython/cython/statuses/59b29a38a2baa811f6707f202e8a6b03d9eda0b7",
    "title": "Get module-state working on multi-phase init",
    "updated_at": "2024-11-18T22:11:12Z",
    "url": "https://api.github.com/repos/cython/cython/pulls/6463",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
        "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
        "followers_url": "https://api.github.com/users/da-woods/followers",
        "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
        "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/da-woods",
        "id": 10536947,
        "login": "da-woods",
        "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
        "organizations_url": "https://api.github.com/users/da-woods/orgs",
        "received_events_url": "https://api.github.com/users/da-woods/received_events",
        "repos_url": "https://api.github.com/users/da-woods/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/da-woods",
        "user_view_type": "public"
    }
}