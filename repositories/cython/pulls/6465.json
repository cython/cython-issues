{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/cython/cython/issues/6465/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/cython/cython/pulls/6465/commits"
        },
        "html": {
            "href": "https://github.com/cython/cython/pull/6465"
        },
        "issue": {
            "href": "https://api.github.com/repos/cython/cython/issues/6465"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/cython/cython/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/cython/cython/pulls/6465/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/cython/cython/pulls/6465"
        },
        "statuses": {
            "href": "https://api.github.com/repos/cython/cython/statuses/3237421ffa239e6d8db67fcd8838ea0cc19ddc35"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "FIRST_TIME_CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "cython:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/cython/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/cython/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/cython/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/cython/cython/branches{/branch}",
            "clone_url": "https://github.com/cython/cython.git",
            "collaborators_url": "https://api.github.com/repos/cython/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/cython/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/cython/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/cython/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/cython/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/cython/cython/contributors",
            "created_at": "2010-11-21T07:44:20Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/cython/cython/deployments",
            "description": "The most widely used Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/cython/cython/downloads",
            "events_url": "https://api.github.com/repos/cython/cython/events",
            "fork": false,
            "forks": 1489,
            "forks_count": 1489,
            "forks_url": "https://api.github.com/repos/cython/cython/forks",
            "full_name": "cython/cython",
            "git_commits_url": "https://api.github.com/repos/cython/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/cython/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/cython/cython/git/tags{/sha}",
            "git_url": "git://github.com/cython/cython.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": false,
            "has_wiki": true,
            "homepage": "https://cython.org",
            "hooks_url": "https://api.github.com/repos/cython/cython/hooks",
            "html_url": "https://github.com/cython/cython",
            "id": 1099265,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/cython/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/cython/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/cython/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/cython/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/cython/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/cython/cython/languages",
            "license": {
                "key": "apache-2.0",
                "name": "Apache License 2.0",
                "node_id": "MDc6TGljZW5zZTI=",
                "spdx_id": "Apache-2.0",
                "url": "https://api.github.com/licenses/apache-2.0"
            },
            "merges_url": "https://api.github.com/repos/cython/cython/merges",
            "milestones_url": "https://api.github.com/repos/cython/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkxMDk5MjY1",
            "notifications_url": "https://api.github.com/repos/cython/cython/notifications{?since,all,participating}",
            "open_issues": 1358,
            "open_issues_count": 1358,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/486082?v=4",
                "events_url": "https://api.github.com/users/cython/events{/privacy}",
                "followers_url": "https://api.github.com/users/cython/followers",
                "following_url": "https://api.github.com/users/cython/following{/other_user}",
                "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/cython",
                "id": 486082,
                "login": "cython",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
                "organizations_url": "https://api.github.com/users/cython/orgs",
                "received_events_url": "https://api.github.com/users/cython/received_events",
                "repos_url": "https://api.github.com/users/cython/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/cython",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/cython/cython/pulls{/number}",
            "pushed_at": "2024-10-28T10:01:01Z",
            "releases_url": "https://api.github.com/repos/cython/cython/releases{/id}",
            "size": 74363,
            "ssh_url": "git@github.com:cython/cython.git",
            "stargazers_count": 9485,
            "stargazers_url": "https://api.github.com/repos/cython/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/cython/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/cython/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/cython/cython/subscription",
            "svn_url": "https://github.com/cython/cython",
            "tags_url": "https://api.github.com/repos/cython/cython/tags",
            "teams_url": "https://api.github.com/repos/cython/cython/teams",
            "topics": [
                "big-data",
                "c",
                "cpp",
                "cpython",
                "cpython-extensions",
                "cython",
                "performance",
                "python"
            ],
            "trees_url": "https://api.github.com/repos/cython/cython/git/trees{/sha}",
            "updated_at": "2024-10-28T13:08:29Z",
            "url": "https://api.github.com/repos/cython/cython",
            "visibility": "public",
            "watchers": 9485,
            "watchers_count": 9485,
            "web_commit_signoff_required": false
        },
        "sha": "b1a0f98b14fef664d94fadcdacccc833b84dd78c",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/486082?v=4",
            "events_url": "https://api.github.com/users/cython/events{/privacy}",
            "followers_url": "https://api.github.com/users/cython/followers",
            "following_url": "https://api.github.com/users/cython/following{/other_user}",
            "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/cython",
            "id": 486082,
            "login": "cython",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
            "organizations_url": "https://api.github.com/users/cython/orgs",
            "received_events_url": "https://api.github.com/users/cython/received_events",
            "repos_url": "https://api.github.com/users/cython/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/cython",
            "user_view_type": "public"
        }
    },
    "body": "Fixes #6461\r\n\r\nDesigned to be as portable as possible.",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6465#discussion_r1818653513"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6465"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1818653513"
                }
            },
            "author_association": "MEMBER",
            "body": "Please move this method below the alias assignments that follow it to keep those together with the method definitions.",
            "commit_id": "3237421ffa239e6d8db67fcd8838ea0cc19ddc35",
            "created_at": "2024-10-28T09:15:13Z",
            "diff_hunk": "@@ -3417,6 +3580,20 @@ def _handle_simple_method_object___truediv__(self, node, function, args, is_unbo\n     def _handle_simple_method_object___div__(self, node, function, args, is_unbound_method):\n         return self._optimise_num_div('Divide', node, function, args, is_unbound_method)\n \n+    def _handle_simple_method_int_bit_count(self, node, function, args, is_unbound_method):",
            "html_url": "https://github.com/cython/cython/pull/6465#discussion_r1818653513",
            "id": 1818653513,
            "line": 3583,
            "node_id": "PRRC_kwDOABDGAc5sZnNJ",
            "original_commit_id": "3237421ffa239e6d8db67fcd8838ea0cc19ddc35",
            "original_line": 3583,
            "original_position": 181,
            "original_start_line": null,
            "path": "Cython/Compiler/Optimize.py",
            "position": 181,
            "pull_request_review_id": 2398411597,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6465",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1818653513/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-28T10:02:02Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1818653513",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6465#discussion_r1818725985"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6465"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1818725985"
                }
            },
            "author_association": "MEMBER",
            "body": "This is the wrong place to do this. This method handles generic calls to unbound methods, not calls to specific methods. This should all be done by your newly added handler method.",
            "commit_id": "3237421ffa239e6d8db67fcd8838ea0cc19ddc35",
            "created_at": "2024-10-28T09:43:58Z",
            "diff_hunk": "@@ -2370,12 +2370,175 @@ def _handle_method(self, node, type_name, attr_name, function,\n         can additionally resolve bound and unbound methods here that were\n         assigned to variables ahead of time.\n         \"\"\"\n+\n         if kwargs:\n             return node\n-        if not function or not function.is_attribute or not function.obj.is_name:\n+        if not function or not function.is_attribute:\n+            return node\n+\n+        args = node.args\n+        if args is None and node.arg_tuple:\n+            args = node.arg_tuple.args\n+\n+        if attr_name == \"bit_count\":",
            "html_url": "https://github.com/cython/cython/pull/6465#discussion_r1818725985",
            "id": 1818725985,
            "line": 2383,
            "node_id": "PRRC_kwDOABDGAc5sZ45h",
            "original_commit_id": "3237421ffa239e6d8db67fcd8838ea0cc19ddc35",
            "original_line": 2383,
            "original_position": 15,
            "original_start_line": null,
            "path": "Cython/Compiler/Optimize.py",
            "position": 15,
            "pull_request_review_id": 2398411597,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6465",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1818725985/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-28T10:02:02Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1818725985",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6465#discussion_r1818728678"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6465"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1818728678"
                }
            },
            "author_association": "MEMBER",
            "body": "Did you try to use simply `#if defined(__has_builtin) && __has_builtin(__builtin_popcountll)`? I'd expect that to work, and it would avoid the `_FALLBACK` macro (which, BTW, would need to be prefixed with `__PYX_` to prevent user code collisions).",
            "commit_id": "3237421ffa239e6d8db67fcd8838ea0cc19ddc35",
            "created_at": "2024-10-28T09:45:54Z",
            "diff_hunk": "@@ -658,3 +658,312 @@ static {{out_type}} __Pyx_PyMemoryView_Get_{{name}}(PyObject *obj) {\n     return -1;\n }\n #endif\n+\n+//////////////////// PyInt_bit_count.proto ////////////////////\n+\n+static CYTHON_INLINE int __Pyx_PyInt_bit_count(PyObject *x); /*proto*/\n+\n+//////////////////// PyInt_bit_count ////////////////////\n+\n+static CYTHON_INLINE int __Pyx_PyInt_bit_count(PyObject *x) {\n+#ifdef __has_builtin\n+#if __has_builtin(__builtin_popcountll)",
            "html_url": "https://github.com/cython/cython/pull/6465#discussion_r1818728678",
            "id": 1818728678,
            "line": 670,
            "node_id": "PRRC_kwDOABDGAc5sZ5jm",
            "original_commit_id": "3237421ffa239e6d8db67fcd8838ea0cc19ddc35",
            "original_line": 670,
            "original_position": 13,
            "original_start_line": 669,
            "path": "Cython/Utility/Builtins.c",
            "position": 13,
            "pull_request_review_id": 2398411597,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6465",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1818728678/reactions"
            },
            "side": "RIGHT",
            "start_line": 669,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-10-28T10:02:02Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1818728678",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6465#discussion_r1818729899"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6465"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1818729899"
                }
            },
            "author_association": "MEMBER",
            "body": "This doesn't seem to be used.",
            "commit_id": "3237421ffa239e6d8db67fcd8838ea0cc19ddc35",
            "created_at": "2024-10-28T09:46:42Z",
            "diff_hunk": "@@ -658,3 +658,312 @@ static {{out_type}} __Pyx_PyMemoryView_Get_{{name}}(PyObject *obj) {\n     return -1;\n }\n #endif\n+\n+//////////////////// PyInt_bit_count.proto ////////////////////\n+\n+static CYTHON_INLINE int __Pyx_PyInt_bit_count(PyObject *x); /*proto*/\n+\n+//////////////////// PyInt_bit_count ////////////////////\n+\n+static CYTHON_INLINE int __Pyx_PyInt_bit_count(PyObject *x) {\n+#ifdef __has_builtin\n+#if __has_builtin(__builtin_popcountll)\n+    long long result;\n+    int overflow;\n+\n+    result = PyLong_AsLongLongAndOverflow(x, &overflow);\n+    if (overflow) {\n+        return (int)PyLong_AsLong(CALL_UNBOUND_METHOD(PyLong_Type, \"bit_count\", x));\n+    } else {\n+        unsigned long long value;\n+\n+        if (result < 0) {\n+            value = -result;\n+        } else {\n+            value = result;\n+        }\n+\n+        return __builtin_popcountll(value);\n+    };\n+#else\n+#define _FALLBACK\n+#endif\n+#else\n+#define _FALLBACK\n+#endif\n+#ifdef _FALLBACK\n+#undef _FALLBACK\n+    return (int)PyLong_AsLong(CALL_UNBOUND_METHOD(PyLong_Type, \"bit_count\", x));\n+#endif\n+}\n+\n+//////////////////// bit_count_base ////////////////////\n+\n+#define BIT_COUNT_BASE \\",
            "html_url": "https://github.com/cython/cython/pull/6465#discussion_r1818729899",
            "id": 1818729899,
            "line": 702,
            "node_id": "PRRC_kwDOABDGAc5sZ52r",
            "original_commit_id": "3237421ffa239e6d8db67fcd8838ea0cc19ddc35",
            "original_line": 702,
            "original_position": 45,
            "original_start_line": null,
            "path": "Cython/Utility/Builtins.c",
            "position": 45,
            "pull_request_review_id": 2398411597,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6465",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1818729899/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-28T10:02:02Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1818729899",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6465#discussion_r1818731556"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6465"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1818731556"
                }
            },
            "author_association": "MEMBER",
            "body": "Needs to be `static`. I'd actually use Tempita code generation for all of these. The differences seem trivial.",
            "commit_id": "3237421ffa239e6d8db67fcd8838ea0cc19ddc35",
            "created_at": "2024-10-28T09:47:45Z",
            "diff_hunk": "@@ -658,3 +658,312 @@ static {{out_type}} __Pyx_PyMemoryView_Get_{{name}}(PyObject *obj) {\n     return -1;\n }\n #endif\n+\n+//////////////////// PyInt_bit_count.proto ////////////////////\n+\n+static CYTHON_INLINE int __Pyx_PyInt_bit_count(PyObject *x); /*proto*/\n+\n+//////////////////// PyInt_bit_count ////////////////////\n+\n+static CYTHON_INLINE int __Pyx_PyInt_bit_count(PyObject *x) {\n+#ifdef __has_builtin\n+#if __has_builtin(__builtin_popcountll)\n+    long long result;\n+    int overflow;\n+\n+    result = PyLong_AsLongLongAndOverflow(x, &overflow);\n+    if (overflow) {\n+        return (int)PyLong_AsLong(CALL_UNBOUND_METHOD(PyLong_Type, \"bit_count\", x));\n+    } else {\n+        unsigned long long value;\n+\n+        if (result < 0) {\n+            value = -result;\n+        } else {\n+            value = result;\n+        }\n+\n+        return __builtin_popcountll(value);\n+    };\n+#else\n+#define _FALLBACK\n+#endif\n+#else\n+#define _FALLBACK\n+#endif\n+#ifdef _FALLBACK\n+#undef _FALLBACK\n+    return (int)PyLong_AsLong(CALL_UNBOUND_METHOD(PyLong_Type, \"bit_count\", x));\n+#endif\n+}\n+\n+//////////////////// bit_count_base ////////////////////\n+\n+#define BIT_COUNT_BASE \\\n+    static inline int bit_count_base (unsigned long long x, int size) {\\\n+        if (size == 8) {\\\n+            uint8_t tmp = (uint8_t)x;\\\n+            tmp -= (tmp >> 1) & 0x55;\\\n+            tmp = (tmp & 0x33) + ((tmp >> 2) & 0x33);\\\n+            tmp = ((tmp + (tmp >> 4)) & 0x0F) * 0x01;\\\n+    \\\n+            return (unsigned long long)tmp;\\\n+        } else if (size == 16) {\\\n+            uint16_t tmp = (uint16_t)x;\\\n+            tmp -= (tmp >> 1) & 0x5555U;\\\n+            tmp = (tmp & 0x3333U) + ((tmp >> 2) & 0x3333U);\\\n+            tmp = (((tmp + (tmp >> 4)) & 0x0F0FU) * 0x0101U) >> 8;\\\n+    \\\n+            return (unsigned long long)tmp;\\\n+        } else if (size == 32) {\\\n+            uint32_t tmp = (uint32_t)x;\\\n+            tmp -= (tmp >> 1) & 0x55555555UL;\\\n+            tmp = (tmp & 0x33333333UL) + ((tmp >> 2) & 0x33333333UL);\\\n+            tmp = (((tmp + (tmp >> 4)) & 0x0F0F0F0FUL) * 0x01010101UL) >> 24;\\\n+    \\\n+            return (unsigned long long)tmp;\\\n+        } else if (size == 64) {\\\n+            uint64_t tmp = (uint64_t)x;\\\n+            tmp -= (tmp >> 1) & 0x55555555ULL;\\\n+            tmp = (tmp & 0x33333333ULL) + ((tmp >> 2) & 0x33333333ULL);\\\n+            tmp = (((tmp + (tmp >> 4)) & 0x0F0F0F0FULL) * 0x01010101ULL) >> 56;\\\n+    \\\n+            return (unsigned long long)tmp;\\\n+        } else if (size == 128) {\\\n+            uint128_t tmp = (uint128_t)x;\\\n+            tmp -= (tmp >> 1) & 0x55555555ULL;\\\n+            tmp = (tmp & 0x33333333ULL) + ((tmp >> 2) & 0x33333333ULL);\\\n+            tmp = (((tmp + (tmp >> 4)) & 0x0F0F0F0FULL) * 0x01010101ULL) >> 120;\\\n+    \\\n+            return (unsigned long long)tmp;\\\n+        }\\\n+    }\n+\n+//////////////////// unsigned_char_bit_count.proto ////////////////////\n+\n+static CYTHON_INLINE unsigned char __Pyx_unsigned_char_bit_count(unsigned char x);\n+\n+//////////////////// unsigned_char_bit_count ////////////////////\n+//@requires: bit_count_base\n+\n+static CYTHON_INLINE unsigned char __Pyx_unsigned_char_bit_count(unsigned char x) {\n+#ifdef __has_builtin\n+#if __has_builtin(__builtin_popcount)\n+    return (unsigned char)__builtin_popcount((unsigned int)x);\n+#else\n+#define _FALLBACK\n+#endif\n+#else\n+#define _FALLBACK\n+#endif\n+#ifdef _FALLBACK\n+#undef _FALLBACK\n+    return (unsigned char)bit_count_base((unsigned long long)x, sizeof(unsigned char));\n+#endif\n+}\n+\n+//////////////////// unsigned_short_bit_count.proto ////////////////////\n+\n+static CYTHON_INLINE short __Pyx_unsigned_short_bit_count(unsigned short x);\n+\n+//////////////////// unsigned_short_bit_count ////////////////////\n+//@requires: bit_count_base\n+\n+static CYTHON_INLINE short __Pyx_unsigned_short_bit_count(unsigned short x) {\n+#ifdef __has_builtin\n+#if __has_builtin(__builtin_popcount)\n+    return (short)__builtin_popcount((unsigned int)x);\n+#else\n+#define _FALLBACK\n+#endif\n+#else\n+#define _FALLBACK\n+#endif\n+#ifdef _FALLBACK\n+#undef _FALLBACK\n+    return (short)bit_count_base((unsigned long long)x, sizeof(unsigned short));\n+#endif\n+}\n+\n+//////////////////// unsigned_int_bit_count.proto ////////////////////\n+\n+static CYTHON_INLINE int __Pyx_unsigned_int_bit_count(unsigned int x);\n+\n+//////////////////// unsigned_int_bit_count ////////////////////\n+//@requires: bit_count_base\n+\n+static CYTHON_INLINE int __Pyx_unsigned_int_bit_count(unsigned int x) {\n+#ifdef __has_builtin\n+#if __has_builtin(__builtin_popcount)\n+    return __builtin_popcount(x);\n+#else\n+#define _FALLBACK\n+#endif\n+#else\n+#define _FALLBACK\n+#endif\n+#ifdef _FALLBACK\n+#undef _FALLBACK\n+    return bit_count_base((unsigned long long)x, sizeof(unsigned int));\n+#endif\n+}\n+\n+//////////////////// unsigned_long_bit_count.proto ////////////////////\n+\n+static CYTHON_INLINE int __Pyx_unsigned_long_bit_count(unsigned long x);\n+\n+//////////////////// unsigned_long_bit_count ////////////////////\n+//@requires: bit_count_base\n+\n+static CYTHON_INLINE int __Pyx_unsigned_long_bit_count(unsigned long x) {\n+#ifdef __has_builtin\n+#if __has_builtin(__builtin_popcountl)\n+    return __builtin_popcountl(x);\n+#else\n+#define _FALLBACK\n+#endif\n+#else\n+#define _FALLBACK\n+#endif\n+#ifdef _FALLBACK\n+#undef _FALLBACK\n+    return bit_count_base((unsigned long long)x, sizeof(unsigned long));\n+#endif\n+}\n+\n+/////////////////// unsigned_longlong_bit_count.proto ////////////////////\n+\n+static CYTHON_INLINE int __Pyx_unsigned_longlong_bit_count(unsigned long long x);\n+\n+//////////////////// unsigned_longlong_bit_count ////////////////////\n+//@requires: bit_count_base\n+\n+static CYTHON_INLINE int __Pyx_unsigned_longlong_bit_count(unsigned long long x) {\n+#ifdef __has_builtin\n+#if __has_builtin(__builtin_popcountll)\n+    return __builtin_popcountll(x);\n+#else\n+#define _FALLBACK\n+#endif\n+#else\n+#define _FALLBACK\n+#endif\n+#ifdef _FALLBACK\n+#undef _FALLBACK\n+    return bit_count_base(x, sizeof(unsigned long long));\n+#endif\n+}\n+\n+//////////////////// char_bit_count.proto ////////////////////\n+\n+static CYTHON_INLINE char __Pyx_char_bit_count(char x);\n+\n+//////////////////// char_bit_count ////////////////////\n+//@requires: unsigned_char_bit_count\n+\n+static CYTHON_INLINE char __Pyx_char_bit_count(char x) {\n+    unsigned char value;\n+\n+    if (x < 0) {\n+        value = -x;\n+    } else {\n+        value = x;\n+    }\n+\n+    return __Pyx_unsigned_char_bit_count(value);\n+}\n+\n+//////////////////// signed_char_bit_count.proto ////////////////////\n+\n+static CYTHON_INLINE char __Pyx_signed_char_bit_count(signed char x);\n+\n+//////////////////// signed_char_bit_count ////////////////////\n+//@requires: unsigned_char_bit_count\n+\n+static CYTHON_INLINE char __Pyx_signed_char_bit_count(signed char x) {\n+    unsigned char value;\n+\n+    if (x < 0) {\n+        value = -x;\n+    } else {\n+        value = x;\n+    }\n+\n+    return (char)__Pyx_unsigned_char_bit_count(value);\n+}\n+\n+//////////////////// signed_short_bit_count.proto ////////////////////\n+\n+static CYTHON_INLINE short __Pyx_signed_short_bit_count(signed short x);\n+\n+//////////////////// signed_short_bit_count ////////////////////\n+//@requires: unsigned_short_bit_count\n+\n+static CYTHON_INLINE short __Pyx_signed_short_bit_count(signed short x) {\n+    unsigned short value;\n+\n+    if (x < 0) {\n+        value = -x;\n+    } else {\n+        value = x;\n+    }\n+\n+    return __Pyx_unsigned_short_bit_count(value);\n+}\n+\n+//////////////////// signed_int_bit_count.proto ////////////////////\n+\n+int __Pyx_signed_int_bit_count(signed int x);\n+\n+//////////////////// signed_int_bit_count ////////////////////\n+//@requires: unsigned_int_bit_count\n+\n+int __Pyx_signed_int_bit_count(signed int x) {",
            "html_url": "https://github.com/cython/cython/pull/6465#discussion_r1818731556",
            "id": 1818731556,
            "line": 921,
            "node_id": "PRRC_kwDOABDGAc5sZ6Qk",
            "original_commit_id": "3237421ffa239e6d8db67fcd8838ea0cc19ddc35",
            "original_line": 921,
            "original_position": 264,
            "original_start_line": null,
            "path": "Cython/Utility/Builtins.c",
            "position": 264,
            "pull_request_review_id": 2398411597,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6465",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1818731556/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-28T10:02:02Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1818731556",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6465#discussion_r1818734389"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6465"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1818734389"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    unsigned char value = (x < 0) ? -x : x;\r\n```",
            "commit_id": "3237421ffa239e6d8db67fcd8838ea0cc19ddc35",
            "created_at": "2024-10-28T09:49:31Z",
            "diff_hunk": "@@ -658,3 +658,312 @@ static {{out_type}} __Pyx_PyMemoryView_Get_{{name}}(PyObject *obj) {\n     return -1;\n }\n #endif\n+\n+//////////////////// PyInt_bit_count.proto ////////////////////\n+\n+static CYTHON_INLINE int __Pyx_PyInt_bit_count(PyObject *x); /*proto*/\n+\n+//////////////////// PyInt_bit_count ////////////////////\n+\n+static CYTHON_INLINE int __Pyx_PyInt_bit_count(PyObject *x) {\n+#ifdef __has_builtin\n+#if __has_builtin(__builtin_popcountll)\n+    long long result;\n+    int overflow;\n+\n+    result = PyLong_AsLongLongAndOverflow(x, &overflow);\n+    if (overflow) {\n+        return (int)PyLong_AsLong(CALL_UNBOUND_METHOD(PyLong_Type, \"bit_count\", x));\n+    } else {\n+        unsigned long long value;\n+\n+        if (result < 0) {\n+            value = -result;\n+        } else {\n+            value = result;\n+        }\n+\n+        return __builtin_popcountll(value);\n+    };\n+#else\n+#define _FALLBACK\n+#endif\n+#else\n+#define _FALLBACK\n+#endif\n+#ifdef _FALLBACK\n+#undef _FALLBACK\n+    return (int)PyLong_AsLong(CALL_UNBOUND_METHOD(PyLong_Type, \"bit_count\", x));\n+#endif\n+}\n+\n+//////////////////// bit_count_base ////////////////////\n+\n+#define BIT_COUNT_BASE \\\n+    static inline int bit_count_base (unsigned long long x, int size) {\\\n+        if (size == 8) {\\\n+            uint8_t tmp = (uint8_t)x;\\\n+            tmp -= (tmp >> 1) & 0x55;\\\n+            tmp = (tmp & 0x33) + ((tmp >> 2) & 0x33);\\\n+            tmp = ((tmp + (tmp >> 4)) & 0x0F) * 0x01;\\\n+    \\\n+            return (unsigned long long)tmp;\\\n+        } else if (size == 16) {\\\n+            uint16_t tmp = (uint16_t)x;\\\n+            tmp -= (tmp >> 1) & 0x5555U;\\\n+            tmp = (tmp & 0x3333U) + ((tmp >> 2) & 0x3333U);\\\n+            tmp = (((tmp + (tmp >> 4)) & 0x0F0FU) * 0x0101U) >> 8;\\\n+    \\\n+            return (unsigned long long)tmp;\\\n+        } else if (size == 32) {\\\n+            uint32_t tmp = (uint32_t)x;\\\n+            tmp -= (tmp >> 1) & 0x55555555UL;\\\n+            tmp = (tmp & 0x33333333UL) + ((tmp >> 2) & 0x33333333UL);\\\n+            tmp = (((tmp + (tmp >> 4)) & 0x0F0F0F0FUL) * 0x01010101UL) >> 24;\\\n+    \\\n+            return (unsigned long long)tmp;\\\n+        } else if (size == 64) {\\\n+            uint64_t tmp = (uint64_t)x;\\\n+            tmp -= (tmp >> 1) & 0x55555555ULL;\\\n+            tmp = (tmp & 0x33333333ULL) + ((tmp >> 2) & 0x33333333ULL);\\\n+            tmp = (((tmp + (tmp >> 4)) & 0x0F0F0F0FULL) * 0x01010101ULL) >> 56;\\\n+    \\\n+            return (unsigned long long)tmp;\\\n+        } else if (size == 128) {\\\n+            uint128_t tmp = (uint128_t)x;\\\n+            tmp -= (tmp >> 1) & 0x55555555ULL;\\\n+            tmp = (tmp & 0x33333333ULL) + ((tmp >> 2) & 0x33333333ULL);\\\n+            tmp = (((tmp + (tmp >> 4)) & 0x0F0F0F0FULL) * 0x01010101ULL) >> 120;\\\n+    \\\n+            return (unsigned long long)tmp;\\\n+        }\\\n+    }\n+\n+//////////////////// unsigned_char_bit_count.proto ////////////////////\n+\n+static CYTHON_INLINE unsigned char __Pyx_unsigned_char_bit_count(unsigned char x);\n+\n+//////////////////// unsigned_char_bit_count ////////////////////\n+//@requires: bit_count_base\n+\n+static CYTHON_INLINE unsigned char __Pyx_unsigned_char_bit_count(unsigned char x) {\n+#ifdef __has_builtin\n+#if __has_builtin(__builtin_popcount)\n+    return (unsigned char)__builtin_popcount((unsigned int)x);\n+#else\n+#define _FALLBACK\n+#endif\n+#else\n+#define _FALLBACK\n+#endif\n+#ifdef _FALLBACK\n+#undef _FALLBACK\n+    return (unsigned char)bit_count_base((unsigned long long)x, sizeof(unsigned char));\n+#endif\n+}\n+\n+//////////////////// unsigned_short_bit_count.proto ////////////////////\n+\n+static CYTHON_INLINE short __Pyx_unsigned_short_bit_count(unsigned short x);\n+\n+//////////////////// unsigned_short_bit_count ////////////////////\n+//@requires: bit_count_base\n+\n+static CYTHON_INLINE short __Pyx_unsigned_short_bit_count(unsigned short x) {\n+#ifdef __has_builtin\n+#if __has_builtin(__builtin_popcount)\n+    return (short)__builtin_popcount((unsigned int)x);\n+#else\n+#define _FALLBACK\n+#endif\n+#else\n+#define _FALLBACK\n+#endif\n+#ifdef _FALLBACK\n+#undef _FALLBACK\n+    return (short)bit_count_base((unsigned long long)x, sizeof(unsigned short));\n+#endif\n+}\n+\n+//////////////////// unsigned_int_bit_count.proto ////////////////////\n+\n+static CYTHON_INLINE int __Pyx_unsigned_int_bit_count(unsigned int x);\n+\n+//////////////////// unsigned_int_bit_count ////////////////////\n+//@requires: bit_count_base\n+\n+static CYTHON_INLINE int __Pyx_unsigned_int_bit_count(unsigned int x) {\n+#ifdef __has_builtin\n+#if __has_builtin(__builtin_popcount)\n+    return __builtin_popcount(x);\n+#else\n+#define _FALLBACK\n+#endif\n+#else\n+#define _FALLBACK\n+#endif\n+#ifdef _FALLBACK\n+#undef _FALLBACK\n+    return bit_count_base((unsigned long long)x, sizeof(unsigned int));\n+#endif\n+}\n+\n+//////////////////// unsigned_long_bit_count.proto ////////////////////\n+\n+static CYTHON_INLINE int __Pyx_unsigned_long_bit_count(unsigned long x);\n+\n+//////////////////// unsigned_long_bit_count ////////////////////\n+//@requires: bit_count_base\n+\n+static CYTHON_INLINE int __Pyx_unsigned_long_bit_count(unsigned long x) {\n+#ifdef __has_builtin\n+#if __has_builtin(__builtin_popcountl)\n+    return __builtin_popcountl(x);\n+#else\n+#define _FALLBACK\n+#endif\n+#else\n+#define _FALLBACK\n+#endif\n+#ifdef _FALLBACK\n+#undef _FALLBACK\n+    return bit_count_base((unsigned long long)x, sizeof(unsigned long));\n+#endif\n+}\n+\n+/////////////////// unsigned_longlong_bit_count.proto ////////////////////\n+\n+static CYTHON_INLINE int __Pyx_unsigned_longlong_bit_count(unsigned long long x);\n+\n+//////////////////// unsigned_longlong_bit_count ////////////////////\n+//@requires: bit_count_base\n+\n+static CYTHON_INLINE int __Pyx_unsigned_longlong_bit_count(unsigned long long x) {\n+#ifdef __has_builtin\n+#if __has_builtin(__builtin_popcountll)\n+    return __builtin_popcountll(x);\n+#else\n+#define _FALLBACK\n+#endif\n+#else\n+#define _FALLBACK\n+#endif\n+#ifdef _FALLBACK\n+#undef _FALLBACK\n+    return bit_count_base(x, sizeof(unsigned long long));\n+#endif\n+}\n+\n+//////////////////// char_bit_count.proto ////////////////////\n+\n+static CYTHON_INLINE char __Pyx_char_bit_count(char x);\n+\n+//////////////////// char_bit_count ////////////////////\n+//@requires: unsigned_char_bit_count\n+\n+static CYTHON_INLINE char __Pyx_char_bit_count(char x) {\n+    unsigned char value;\n+\n+    if (x < 0) {\n+        value = -x;\n+    } else {\n+        value = x;\n+    }\n+",
            "html_url": "https://github.com/cython/cython/pull/6465#discussion_r1818734389",
            "id": 1818734389,
            "line": 872,
            "node_id": "PRRC_kwDOABDGAc5sZ681",
            "original_commit_id": "3237421ffa239e6d8db67fcd8838ea0cc19ddc35",
            "original_line": 872,
            "original_position": 215,
            "original_start_line": 865,
            "path": "Cython/Utility/Builtins.c",
            "position": 215,
            "pull_request_review_id": 2398411597,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6465",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1818734389/reactions"
            },
            "side": "RIGHT",
            "start_line": 865,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-10-28T10:02:02Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1818734389",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6465#discussion_r1818766016"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6465"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1818766016"
                }
            },
            "author_association": "NONE",
            "body": "It is. It's used indirectly in multiple `@requires` statements.",
            "commit_id": "3237421ffa239e6d8db67fcd8838ea0cc19ddc35",
            "created_at": "2024-10-28T10:09:47Z",
            "diff_hunk": "@@ -658,3 +658,312 @@ static {{out_type}} __Pyx_PyMemoryView_Get_{{name}}(PyObject *obj) {\n     return -1;\n }\n #endif\n+\n+//////////////////// PyInt_bit_count.proto ////////////////////\n+\n+static CYTHON_INLINE int __Pyx_PyInt_bit_count(PyObject *x); /*proto*/\n+\n+//////////////////// PyInt_bit_count ////////////////////\n+\n+static CYTHON_INLINE int __Pyx_PyInt_bit_count(PyObject *x) {\n+#ifdef __has_builtin\n+#if __has_builtin(__builtin_popcountll)\n+    long long result;\n+    int overflow;\n+\n+    result = PyLong_AsLongLongAndOverflow(x, &overflow);\n+    if (overflow) {\n+        return (int)PyLong_AsLong(CALL_UNBOUND_METHOD(PyLong_Type, \"bit_count\", x));\n+    } else {\n+        unsigned long long value;\n+\n+        if (result < 0) {\n+            value = -result;\n+        } else {\n+            value = result;\n+        }\n+\n+        return __builtin_popcountll(value);\n+    };\n+#else\n+#define _FALLBACK\n+#endif\n+#else\n+#define _FALLBACK\n+#endif\n+#ifdef _FALLBACK\n+#undef _FALLBACK\n+    return (int)PyLong_AsLong(CALL_UNBOUND_METHOD(PyLong_Type, \"bit_count\", x));\n+#endif\n+}\n+\n+//////////////////// bit_count_base ////////////////////\n+\n+#define BIT_COUNT_BASE \\",
            "html_url": "https://github.com/cython/cython/pull/6465#discussion_r1818766016",
            "id": 1818766016,
            "in_reply_to_id": 1818729899,
            "line": 702,
            "node_id": "PRRC_kwDOABDGAc5saCrA",
            "original_commit_id": "3237421ffa239e6d8db67fcd8838ea0cc19ddc35",
            "original_line": 702,
            "original_position": 45,
            "original_start_line": null,
            "path": "Cython/Utility/Builtins.c",
            "position": 45,
            "pull_request_review_id": 2398605476,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6465",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1818766016/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-28T10:09:48Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1818766016",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/138492675?v=4",
                "events_url": "https://api.github.com/users/bbb23exposed/events{/privacy}",
                "followers_url": "https://api.github.com/users/bbb23exposed/followers",
                "following_url": "https://api.github.com/users/bbb23exposed/following{/other_user}",
                "gists_url": "https://api.github.com/users/bbb23exposed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bbb23exposed",
                "id": 138492675,
                "login": "bbb23exposed",
                "node_id": "U_kgDOCEE7Aw",
                "organizations_url": "https://api.github.com/users/bbb23exposed/orgs",
                "received_events_url": "https://api.github.com/users/bbb23exposed/received_events",
                "repos_url": "https://api.github.com/users/bbb23exposed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bbb23exposed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bbb23exposed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bbb23exposed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6465#discussion_r1818767037"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6465"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1818767037"
                }
            },
            "author_association": "NONE",
            "body": "Oops. I removed `static` temporarily to look at the assembly output but forgot to re-add it.",
            "commit_id": "3237421ffa239e6d8db67fcd8838ea0cc19ddc35",
            "created_at": "2024-10-28T10:10:29Z",
            "diff_hunk": "@@ -658,3 +658,312 @@ static {{out_type}} __Pyx_PyMemoryView_Get_{{name}}(PyObject *obj) {\n     return -1;\n }\n #endif\n+\n+//////////////////// PyInt_bit_count.proto ////////////////////\n+\n+static CYTHON_INLINE int __Pyx_PyInt_bit_count(PyObject *x); /*proto*/\n+\n+//////////////////// PyInt_bit_count ////////////////////\n+\n+static CYTHON_INLINE int __Pyx_PyInt_bit_count(PyObject *x) {\n+#ifdef __has_builtin\n+#if __has_builtin(__builtin_popcountll)\n+    long long result;\n+    int overflow;\n+\n+    result = PyLong_AsLongLongAndOverflow(x, &overflow);\n+    if (overflow) {\n+        return (int)PyLong_AsLong(CALL_UNBOUND_METHOD(PyLong_Type, \"bit_count\", x));\n+    } else {\n+        unsigned long long value;\n+\n+        if (result < 0) {\n+            value = -result;\n+        } else {\n+            value = result;\n+        }\n+\n+        return __builtin_popcountll(value);\n+    };\n+#else\n+#define _FALLBACK\n+#endif\n+#else\n+#define _FALLBACK\n+#endif\n+#ifdef _FALLBACK\n+#undef _FALLBACK\n+    return (int)PyLong_AsLong(CALL_UNBOUND_METHOD(PyLong_Type, \"bit_count\", x));\n+#endif\n+}\n+\n+//////////////////// bit_count_base ////////////////////\n+\n+#define BIT_COUNT_BASE \\\n+    static inline int bit_count_base (unsigned long long x, int size) {\\\n+        if (size == 8) {\\\n+            uint8_t tmp = (uint8_t)x;\\\n+            tmp -= (tmp >> 1) & 0x55;\\\n+            tmp = (tmp & 0x33) + ((tmp >> 2) & 0x33);\\\n+            tmp = ((tmp + (tmp >> 4)) & 0x0F) * 0x01;\\\n+    \\\n+            return (unsigned long long)tmp;\\\n+        } else if (size == 16) {\\\n+            uint16_t tmp = (uint16_t)x;\\\n+            tmp -= (tmp >> 1) & 0x5555U;\\\n+            tmp = (tmp & 0x3333U) + ((tmp >> 2) & 0x3333U);\\\n+            tmp = (((tmp + (tmp >> 4)) & 0x0F0FU) * 0x0101U) >> 8;\\\n+    \\\n+            return (unsigned long long)tmp;\\\n+        } else if (size == 32) {\\\n+            uint32_t tmp = (uint32_t)x;\\\n+            tmp -= (tmp >> 1) & 0x55555555UL;\\\n+            tmp = (tmp & 0x33333333UL) + ((tmp >> 2) & 0x33333333UL);\\\n+            tmp = (((tmp + (tmp >> 4)) & 0x0F0F0F0FUL) * 0x01010101UL) >> 24;\\\n+    \\\n+            return (unsigned long long)tmp;\\\n+        } else if (size == 64) {\\\n+            uint64_t tmp = (uint64_t)x;\\\n+            tmp -= (tmp >> 1) & 0x55555555ULL;\\\n+            tmp = (tmp & 0x33333333ULL) + ((tmp >> 2) & 0x33333333ULL);\\\n+            tmp = (((tmp + (tmp >> 4)) & 0x0F0F0F0FULL) * 0x01010101ULL) >> 56;\\\n+    \\\n+            return (unsigned long long)tmp;\\\n+        } else if (size == 128) {\\\n+            uint128_t tmp = (uint128_t)x;\\\n+            tmp -= (tmp >> 1) & 0x55555555ULL;\\\n+            tmp = (tmp & 0x33333333ULL) + ((tmp >> 2) & 0x33333333ULL);\\\n+            tmp = (((tmp + (tmp >> 4)) & 0x0F0F0F0FULL) * 0x01010101ULL) >> 120;\\\n+    \\\n+            return (unsigned long long)tmp;\\\n+        }\\\n+    }\n+\n+//////////////////// unsigned_char_bit_count.proto ////////////////////\n+\n+static CYTHON_INLINE unsigned char __Pyx_unsigned_char_bit_count(unsigned char x);\n+\n+//////////////////// unsigned_char_bit_count ////////////////////\n+//@requires: bit_count_base\n+\n+static CYTHON_INLINE unsigned char __Pyx_unsigned_char_bit_count(unsigned char x) {\n+#ifdef __has_builtin\n+#if __has_builtin(__builtin_popcount)\n+    return (unsigned char)__builtin_popcount((unsigned int)x);\n+#else\n+#define _FALLBACK\n+#endif\n+#else\n+#define _FALLBACK\n+#endif\n+#ifdef _FALLBACK\n+#undef _FALLBACK\n+    return (unsigned char)bit_count_base((unsigned long long)x, sizeof(unsigned char));\n+#endif\n+}\n+\n+//////////////////// unsigned_short_bit_count.proto ////////////////////\n+\n+static CYTHON_INLINE short __Pyx_unsigned_short_bit_count(unsigned short x);\n+\n+//////////////////// unsigned_short_bit_count ////////////////////\n+//@requires: bit_count_base\n+\n+static CYTHON_INLINE short __Pyx_unsigned_short_bit_count(unsigned short x) {\n+#ifdef __has_builtin\n+#if __has_builtin(__builtin_popcount)\n+    return (short)__builtin_popcount((unsigned int)x);\n+#else\n+#define _FALLBACK\n+#endif\n+#else\n+#define _FALLBACK\n+#endif\n+#ifdef _FALLBACK\n+#undef _FALLBACK\n+    return (short)bit_count_base((unsigned long long)x, sizeof(unsigned short));\n+#endif\n+}\n+\n+//////////////////// unsigned_int_bit_count.proto ////////////////////\n+\n+static CYTHON_INLINE int __Pyx_unsigned_int_bit_count(unsigned int x);\n+\n+//////////////////// unsigned_int_bit_count ////////////////////\n+//@requires: bit_count_base\n+\n+static CYTHON_INLINE int __Pyx_unsigned_int_bit_count(unsigned int x) {\n+#ifdef __has_builtin\n+#if __has_builtin(__builtin_popcount)\n+    return __builtin_popcount(x);\n+#else\n+#define _FALLBACK\n+#endif\n+#else\n+#define _FALLBACK\n+#endif\n+#ifdef _FALLBACK\n+#undef _FALLBACK\n+    return bit_count_base((unsigned long long)x, sizeof(unsigned int));\n+#endif\n+}\n+\n+//////////////////// unsigned_long_bit_count.proto ////////////////////\n+\n+static CYTHON_INLINE int __Pyx_unsigned_long_bit_count(unsigned long x);\n+\n+//////////////////// unsigned_long_bit_count ////////////////////\n+//@requires: bit_count_base\n+\n+static CYTHON_INLINE int __Pyx_unsigned_long_bit_count(unsigned long x) {\n+#ifdef __has_builtin\n+#if __has_builtin(__builtin_popcountl)\n+    return __builtin_popcountl(x);\n+#else\n+#define _FALLBACK\n+#endif\n+#else\n+#define _FALLBACK\n+#endif\n+#ifdef _FALLBACK\n+#undef _FALLBACK\n+    return bit_count_base((unsigned long long)x, sizeof(unsigned long));\n+#endif\n+}\n+\n+/////////////////// unsigned_longlong_bit_count.proto ////////////////////\n+\n+static CYTHON_INLINE int __Pyx_unsigned_longlong_bit_count(unsigned long long x);\n+\n+//////////////////// unsigned_longlong_bit_count ////////////////////\n+//@requires: bit_count_base\n+\n+static CYTHON_INLINE int __Pyx_unsigned_longlong_bit_count(unsigned long long x) {\n+#ifdef __has_builtin\n+#if __has_builtin(__builtin_popcountll)\n+    return __builtin_popcountll(x);\n+#else\n+#define _FALLBACK\n+#endif\n+#else\n+#define _FALLBACK\n+#endif\n+#ifdef _FALLBACK\n+#undef _FALLBACK\n+    return bit_count_base(x, sizeof(unsigned long long));\n+#endif\n+}\n+\n+//////////////////// char_bit_count.proto ////////////////////\n+\n+static CYTHON_INLINE char __Pyx_char_bit_count(char x);\n+\n+//////////////////// char_bit_count ////////////////////\n+//@requires: unsigned_char_bit_count\n+\n+static CYTHON_INLINE char __Pyx_char_bit_count(char x) {\n+    unsigned char value;\n+\n+    if (x < 0) {\n+        value = -x;\n+    } else {\n+        value = x;\n+    }\n+\n+    return __Pyx_unsigned_char_bit_count(value);\n+}\n+\n+//////////////////// signed_char_bit_count.proto ////////////////////\n+\n+static CYTHON_INLINE char __Pyx_signed_char_bit_count(signed char x);\n+\n+//////////////////// signed_char_bit_count ////////////////////\n+//@requires: unsigned_char_bit_count\n+\n+static CYTHON_INLINE char __Pyx_signed_char_bit_count(signed char x) {\n+    unsigned char value;\n+\n+    if (x < 0) {\n+        value = -x;\n+    } else {\n+        value = x;\n+    }\n+\n+    return (char)__Pyx_unsigned_char_bit_count(value);\n+}\n+\n+//////////////////// signed_short_bit_count.proto ////////////////////\n+\n+static CYTHON_INLINE short __Pyx_signed_short_bit_count(signed short x);\n+\n+//////////////////// signed_short_bit_count ////////////////////\n+//@requires: unsigned_short_bit_count\n+\n+static CYTHON_INLINE short __Pyx_signed_short_bit_count(signed short x) {\n+    unsigned short value;\n+\n+    if (x < 0) {\n+        value = -x;\n+    } else {\n+        value = x;\n+    }\n+\n+    return __Pyx_unsigned_short_bit_count(value);\n+}\n+\n+//////////////////// signed_int_bit_count.proto ////////////////////\n+\n+int __Pyx_signed_int_bit_count(signed int x);\n+\n+//////////////////// signed_int_bit_count ////////////////////\n+//@requires: unsigned_int_bit_count\n+\n+int __Pyx_signed_int_bit_count(signed int x) {",
            "html_url": "https://github.com/cython/cython/pull/6465#discussion_r1818767037",
            "id": 1818767037,
            "in_reply_to_id": 1818731556,
            "line": 921,
            "node_id": "PRRC_kwDOABDGAc5saC69",
            "original_commit_id": "3237421ffa239e6d8db67fcd8838ea0cc19ddc35",
            "original_line": 921,
            "original_position": 264,
            "original_start_line": null,
            "path": "Cython/Utility/Builtins.c",
            "position": 264,
            "pull_request_review_id": 2398607025,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6465",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1818767037/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-28T10:10:29Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1818767037",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/138492675?v=4",
                "events_url": "https://api.github.com/users/bbb23exposed/events{/privacy}",
                "followers_url": "https://api.github.com/users/bbb23exposed/followers",
                "following_url": "https://api.github.com/users/bbb23exposed/following{/other_user}",
                "gists_url": "https://api.github.com/users/bbb23exposed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bbb23exposed",
                "id": 138492675,
                "login": "bbb23exposed",
                "node_id": "U_kgDOCEE7Aw",
                "organizations_url": "https://api.github.com/users/bbb23exposed/orgs",
                "received_events_url": "https://api.github.com/users/bbb23exposed/received_events",
                "repos_url": "https://api.github.com/users/bbb23exposed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bbb23exposed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bbb23exposed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bbb23exposed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6465#discussion_r1818769900"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6465"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1818769900"
                }
            },
            "author_association": "NONE",
            "body": "We can't do it in that handler since the handler methods only apply to python objects, where as this part of the code only operates on c types.",
            "commit_id": "3237421ffa239e6d8db67fcd8838ea0cc19ddc35",
            "created_at": "2024-10-28T10:11:46Z",
            "diff_hunk": "@@ -2370,12 +2370,175 @@ def _handle_method(self, node, type_name, attr_name, function,\n         can additionally resolve bound and unbound methods here that were\n         assigned to variables ahead of time.\n         \"\"\"\n+\n         if kwargs:\n             return node\n-        if not function or not function.is_attribute or not function.obj.is_name:\n+        if not function or not function.is_attribute:\n+            return node\n+\n+        args = node.args\n+        if args is None and node.arg_tuple:\n+            args = node.arg_tuple.args\n+\n+        if attr_name == \"bit_count\":",
            "html_url": "https://github.com/cython/cython/pull/6465#discussion_r1818769900",
            "id": 1818769900,
            "in_reply_to_id": 1818725985,
            "line": 2383,
            "node_id": "PRRC_kwDOABDGAc5saDns",
            "original_commit_id": "3237421ffa239e6d8db67fcd8838ea0cc19ddc35",
            "original_line": 2383,
            "original_position": 15,
            "original_start_line": null,
            "path": "Cython/Compiler/Optimize.py",
            "position": 15,
            "pull_request_review_id": 2398611053,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6465",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1818769900/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-28T10:11:46Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1818769900",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/138492675?v=4",
                "events_url": "https://api.github.com/users/bbb23exposed/events{/privacy}",
                "followers_url": "https://api.github.com/users/bbb23exposed/followers",
                "following_url": "https://api.github.com/users/bbb23exposed/following{/other_user}",
                "gists_url": "https://api.github.com/users/bbb23exposed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bbb23exposed",
                "id": 138492675,
                "login": "bbb23exposed",
                "node_id": "U_kgDOCEE7Aw",
                "organizations_url": "https://api.github.com/users/bbb23exposed/orgs",
                "received_events_url": "https://api.github.com/users/bbb23exposed/received_events",
                "repos_url": "https://api.github.com/users/bbb23exposed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bbb23exposed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bbb23exposed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bbb23exposed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6465#discussion_r1818788762"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6465"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1818788762"
                }
            },
            "author_association": "MEMBER",
            "body": "But at the point where the handler method is called, the C integer value has been coerced into a Python `int` object, so the handler method *does* apply to these cases as well. Just unpack the coercion node and look at the underlying C integer type.",
            "commit_id": "3237421ffa239e6d8db67fcd8838ea0cc19ddc35",
            "created_at": "2024-10-28T10:23:39Z",
            "diff_hunk": "@@ -2370,12 +2370,175 @@ def _handle_method(self, node, type_name, attr_name, function,\n         can additionally resolve bound and unbound methods here that were\n         assigned to variables ahead of time.\n         \"\"\"\n+\n         if kwargs:\n             return node\n-        if not function or not function.is_attribute or not function.obj.is_name:\n+        if not function or not function.is_attribute:\n+            return node\n+\n+        args = node.args\n+        if args is None and node.arg_tuple:\n+            args = node.arg_tuple.args\n+\n+        if attr_name == \"bit_count\":",
            "html_url": "https://github.com/cython/cython/pull/6465#discussion_r1818788762",
            "id": 1818788762,
            "in_reply_to_id": 1818725985,
            "line": 2383,
            "node_id": "PRRC_kwDOABDGAc5saIOa",
            "original_commit_id": "3237421ffa239e6d8db67fcd8838ea0cc19ddc35",
            "original_line": 2383,
            "original_position": 15,
            "original_start_line": null,
            "path": "Cython/Compiler/Optimize.py",
            "position": 15,
            "pull_request_review_id": 2398640469,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6465",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1818788762/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-28T10:23:39Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1818788762",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6465#discussion_r1818791937"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6465"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1818791937"
                }
            },
            "author_association": "MEMBER",
            "body": "I don't find `BIT_COUNT_BASE` being used anywhere, which is what this section defines.",
            "commit_id": "3237421ffa239e6d8db67fcd8838ea0cc19ddc35",
            "created_at": "2024-10-28T10:25:16Z",
            "diff_hunk": "@@ -658,3 +658,312 @@ static {{out_type}} __Pyx_PyMemoryView_Get_{{name}}(PyObject *obj) {\n     return -1;\n }\n #endif\n+\n+//////////////////// PyInt_bit_count.proto ////////////////////\n+\n+static CYTHON_INLINE int __Pyx_PyInt_bit_count(PyObject *x); /*proto*/\n+\n+//////////////////// PyInt_bit_count ////////////////////\n+\n+static CYTHON_INLINE int __Pyx_PyInt_bit_count(PyObject *x) {\n+#ifdef __has_builtin\n+#if __has_builtin(__builtin_popcountll)\n+    long long result;\n+    int overflow;\n+\n+    result = PyLong_AsLongLongAndOverflow(x, &overflow);\n+    if (overflow) {\n+        return (int)PyLong_AsLong(CALL_UNBOUND_METHOD(PyLong_Type, \"bit_count\", x));\n+    } else {\n+        unsigned long long value;\n+\n+        if (result < 0) {\n+            value = -result;\n+        } else {\n+            value = result;\n+        }\n+\n+        return __builtin_popcountll(value);\n+    };\n+#else\n+#define _FALLBACK\n+#endif\n+#else\n+#define _FALLBACK\n+#endif\n+#ifdef _FALLBACK\n+#undef _FALLBACK\n+    return (int)PyLong_AsLong(CALL_UNBOUND_METHOD(PyLong_Type, \"bit_count\", x));\n+#endif\n+}\n+\n+//////////////////// bit_count_base ////////////////////\n+\n+#define BIT_COUNT_BASE \\",
            "html_url": "https://github.com/cython/cython/pull/6465#discussion_r1818791937",
            "id": 1818791937,
            "in_reply_to_id": 1818729899,
            "line": 702,
            "node_id": "PRRC_kwDOABDGAc5saJAB",
            "original_commit_id": "3237421ffa239e6d8db67fcd8838ea0cc19ddc35",
            "original_line": 702,
            "original_position": 45,
            "original_start_line": null,
            "path": "Cython/Utility/Builtins.c",
            "position": 45,
            "pull_request_review_id": 2398645087,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6465",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1818791937/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-28T10:25:16Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1818791937",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/cython/cython/issues/6465/comments",
    "commit_data": [
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/138492675?v=4",
                "events_url": "https://api.github.com/users/bbb23exposed/events{/privacy}",
                "followers_url": "https://api.github.com/users/bbb23exposed/followers",
                "following_url": "https://api.github.com/users/bbb23exposed/following{/other_user}",
                "gists_url": "https://api.github.com/users/bbb23exposed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bbb23exposed",
                "id": 138492675,
                "login": "bbb23exposed",
                "node_id": "U_kgDOCEE7Aw",
                "organizations_url": "https://api.github.com/users/bbb23exposed/orgs",
                "received_events_url": "https://api.github.com/users/bbb23exposed/received_events",
                "repos_url": "https://api.github.com/users/bbb23exposed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bbb23exposed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bbb23exposed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bbb23exposed",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/264cf93e15ad09c1a18885d87f41932b5079a6c3/comments",
            "commit": {
                "author": {
                    "date": "2024-10-28T01:30:42Z",
                    "email": "bbb23exposed@gmail.com",
                    "name": "Ovsk"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2024-10-28T01:30:42Z",
                    "email": "bbb23exposed@gmail.com",
                    "name": "Ovsk"
                },
                "message": "Fix #6461",
                "tree": {
                    "sha": "e5905225f6008466195f32467b85f4cf87ff36a4",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/e5905225f6008466195f32467b85f4cf87ff36a4"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/264cf93e15ad09c1a18885d87f41932b5079a6c3",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/138492675?v=4",
                "events_url": "https://api.github.com/users/bbb23exposed/events{/privacy}",
                "followers_url": "https://api.github.com/users/bbb23exposed/followers",
                "following_url": "https://api.github.com/users/bbb23exposed/following{/other_user}",
                "gists_url": "https://api.github.com/users/bbb23exposed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bbb23exposed",
                "id": 138492675,
                "login": "bbb23exposed",
                "node_id": "U_kgDOCEE7Aw",
                "organizations_url": "https://api.github.com/users/bbb23exposed/orgs",
                "received_events_url": "https://api.github.com/users/bbb23exposed/received_events",
                "repos_url": "https://api.github.com/users/bbb23exposed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bbb23exposed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bbb23exposed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bbb23exposed",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/264cf93e15ad09c1a18885d87f41932b5079a6c3",
            "node_id": "C_kwDONFDfx9oAKDI2NGNmOTNlMTVhZDA5YzFhMTg4ODVkODdmNDE5MzJiNTA3OWE2YzM",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/daed3bce0bf0c6fb9012170cb479f64e8b9532cd",
                    "sha": "daed3bce0bf0c6fb9012170cb479f64e8b9532cd",
                    "url": "https://api.github.com/repos/cython/cython/commits/daed3bce0bf0c6fb9012170cb479f64e8b9532cd"
                }
            ],
            "sha": "264cf93e15ad09c1a18885d87f41932b5079a6c3",
            "url": "https://api.github.com/repos/cython/cython/commits/264cf93e15ad09c1a18885d87f41932b5079a6c3"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/138492675?v=4",
                "events_url": "https://api.github.com/users/bbb23exposed/events{/privacy}",
                "followers_url": "https://api.github.com/users/bbb23exposed/followers",
                "following_url": "https://api.github.com/users/bbb23exposed/following{/other_user}",
                "gists_url": "https://api.github.com/users/bbb23exposed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bbb23exposed",
                "id": 138492675,
                "login": "bbb23exposed",
                "node_id": "U_kgDOCEE7Aw",
                "organizations_url": "https://api.github.com/users/bbb23exposed/orgs",
                "received_events_url": "https://api.github.com/users/bbb23exposed/received_events",
                "repos_url": "https://api.github.com/users/bbb23exposed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bbb23exposed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bbb23exposed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bbb23exposed",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/3237421ffa239e6d8db67fcd8838ea0cc19ddc35/comments",
            "commit": {
                "author": {
                    "date": "2024-10-28T04:39:22Z",
                    "email": "138492675+bbb23exposed@users.noreply.github.com",
                    "name": "bbb23exposed"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2024-10-28T04:39:22Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Update Builtins.c\n\nMove `value` into local scope.",
                "tree": {
                    "sha": "c3210cf65cec6a2ccafb8f73e4597e196ca2051a",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/c3210cf65cec6a2ccafb8f73e4597e196ca2051a"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/3237421ffa239e6d8db67fcd8838ea0cc19ddc35",
                "verification": {
                    "payload": "tree c3210cf65cec6a2ccafb8f73e4597e196ca2051a\nparent 264cf93e15ad09c1a18885d87f41932b5079a6c3\nauthor bbb23exposed <138492675+bbb23exposed@users.noreply.github.com> 1730090362 -0400\ncommitter GitHub <noreply@github.com> 1730090362 -0400\n\nUpdate Builtins.c\n\nMove `value` into local scope.",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJnHxV6CRC1aQ7uu5UhlAAA6MIQAKRRSZUPgqmdl86JsWAhkLnG\nMQ/ixsE9jemAcgOqjWqeqyLjiPjbGXuUR+Ge6aJiTuIX5wD9k0kCzkd3GuL3bUF8\nvCBxxRDC19pBbQFibt/6N46UskpUjVteXbWqTKSCW+EpoQjismoKUvtPybDAUA26\ne4nD8fdZ+WVD3lH7XaC8164FZR//DFR6sRJyFKrim8eMJuR2co0pnPb6Zfj7blHN\nJF/pQefiaKj2jSNhQE0dQJCqlNpb/ml632cLXTTOqfaXbHuQsdYhEwhAUGf72Ibi\nXk0VBow27+exK5DZOjjSSv5k1/e1QMIBC92n3UyTjMT5C53HtjkcCaoxC4kRnNEo\nCM4eQ+kfUtmKbsRFakXSC+e3okrQFj/gS6ZNdGAmP8Ksbc7uEHNbnB1NMa03cOp6\naz3jeCJVGeGyglFMPVfbwBlbVxBRCwd5P0g0NPu5qPkuHlvA7zDpmtOZ0+5vtCRO\nTMWymqf/jW7nBGqyRQVq9QNHIm5/s7juPFzYgnN50oizTcPi4cN7rIvJRBKDKxy7\nvDC1eT12cR6DRjoC5LzILAvxkJpYID8pmUSZsKZrh/Mxn/chp8jE7dka/yD8RtWV\nb4dhpuip9uwFmkiWfVX4P83crgX3Sm6jXm43inBR8cblgTwarp5m83BdA7LeqbPa\nxvwTsSl/aTQQxsOo5UmC\n=ZGNS\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/3237421ffa239e6d8db67fcd8838ea0cc19ddc35",
            "node_id": "C_kwDONFDfx9oAKDMyMzc0MjFmZmEyMzllNmQ4ZGI2N2ZjZDg4MzhlYTBjYzE5ZGRjMzU",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/264cf93e15ad09c1a18885d87f41932b5079a6c3",
                    "sha": "264cf93e15ad09c1a18885d87f41932b5079a6c3",
                    "url": "https://api.github.com/repos/cython/cython/commits/264cf93e15ad09c1a18885d87f41932b5079a6c3"
                }
            ],
            "sha": "3237421ffa239e6d8db67fcd8838ea0cc19ddc35",
            "url": "https://api.github.com/repos/cython/cython/commits/3237421ffa239e6d8db67fcd8838ea0cc19ddc35"
        }
    ],
    "commits_url": "https://api.github.com/repos/cython/cython/pulls/6465/commits",
    "created_at": "2024-10-28T01:31:38Z",
    "diff_url": "https://github.com/cython/cython/pull/6465.diff",
    "draft": false,
    "head": {
        "label": "bbb23exposed:6461",
        "ref": "6461",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/bbb23exposed/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/bbb23exposed/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/bbb23exposed/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/bbb23exposed/cython/branches{/branch}",
            "clone_url": "https://github.com/bbb23exposed/cython.git",
            "collaborators_url": "https://api.github.com/repos/bbb23exposed/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/bbb23exposed/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/bbb23exposed/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/bbb23exposed/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/bbb23exposed/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/bbb23exposed/cython/contributors",
            "created_at": "2024-10-24T05:53:27Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/bbb23exposed/cython/deployments",
            "description": "The most widely used Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/bbb23exposed/cython/downloads",
            "events_url": "https://api.github.com/repos/bbb23exposed/cython/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/bbb23exposed/cython/forks",
            "full_name": "bbb23exposed/cython",
            "git_commits_url": "https://api.github.com/repos/bbb23exposed/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/bbb23exposed/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/bbb23exposed/cython/git/tags{/sha}",
            "git_url": "git://github.com/bbb23exposed/cython.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://cython.org",
            "hooks_url": "https://api.github.com/repos/bbb23exposed/cython/hooks",
            "html_url": "https://github.com/bbb23exposed/cython",
            "id": 877715399,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/bbb23exposed/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/bbb23exposed/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/bbb23exposed/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/bbb23exposed/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/bbb23exposed/cython/labels{/name}",
            "language": null,
            "languages_url": "https://api.github.com/repos/bbb23exposed/cython/languages",
            "license": {
                "key": "apache-2.0",
                "name": "Apache License 2.0",
                "node_id": "MDc6TGljZW5zZTI=",
                "spdx_id": "Apache-2.0",
                "url": "https://api.github.com/licenses/apache-2.0"
            },
            "merges_url": "https://api.github.com/repos/bbb23exposed/cython/merges",
            "milestones_url": "https://api.github.com/repos/bbb23exposed/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "R_kgDONFDfxw",
            "notifications_url": "https://api.github.com/repos/bbb23exposed/cython/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/138492675?v=4",
                "events_url": "https://api.github.com/users/bbb23exposed/events{/privacy}",
                "followers_url": "https://api.github.com/users/bbb23exposed/followers",
                "following_url": "https://api.github.com/users/bbb23exposed/following{/other_user}",
                "gists_url": "https://api.github.com/users/bbb23exposed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bbb23exposed",
                "id": 138492675,
                "login": "bbb23exposed",
                "node_id": "U_kgDOCEE7Aw",
                "organizations_url": "https://api.github.com/users/bbb23exposed/orgs",
                "received_events_url": "https://api.github.com/users/bbb23exposed/received_events",
                "repos_url": "https://api.github.com/users/bbb23exposed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bbb23exposed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bbb23exposed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bbb23exposed",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/bbb23exposed/cython/pulls{/number}",
            "pushed_at": "2024-10-28T08:31:50Z",
            "releases_url": "https://api.github.com/repos/bbb23exposed/cython/releases{/id}",
            "size": 71355,
            "ssh_url": "git@github.com:bbb23exposed/cython.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/bbb23exposed/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/bbb23exposed/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/bbb23exposed/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/bbb23exposed/cython/subscription",
            "svn_url": "https://github.com/bbb23exposed/cython",
            "tags_url": "https://api.github.com/repos/bbb23exposed/cython/tags",
            "teams_url": "https://api.github.com/repos/bbb23exposed/cython/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/bbb23exposed/cython/git/trees{/sha}",
            "updated_at": "2024-10-24T05:53:27Z",
            "url": "https://api.github.com/repos/bbb23exposed/cython",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "3237421ffa239e6d8db67fcd8838ea0cc19ddc35",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/138492675?v=4",
            "events_url": "https://api.github.com/users/bbb23exposed/events{/privacy}",
            "followers_url": "https://api.github.com/users/bbb23exposed/followers",
            "following_url": "https://api.github.com/users/bbb23exposed/following{/other_user}",
            "gists_url": "https://api.github.com/users/bbb23exposed/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/bbb23exposed",
            "id": 138492675,
            "login": "bbb23exposed",
            "node_id": "U_kgDOCEE7Aw",
            "organizations_url": "https://api.github.com/users/bbb23exposed/orgs",
            "received_events_url": "https://api.github.com/users/bbb23exposed/received_events",
            "repos_url": "https://api.github.com/users/bbb23exposed/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/bbb23exposed/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bbb23exposed/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/bbb23exposed",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/cython/cython/pull/6465",
    "id": 2148011465,
    "issue_url": "https://api.github.com/repos/cython/cython/issues/6465",
    "labels": [],
    "locked": false,
    "merge_commit_sha": "8d7e1549bc8a83dda3580bbc47e22e6508e70cfa",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOABDGAc6ACA3J",
    "number": 6465,
    "patch_url": "https://github.com/cython/cython/pull/6465.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/cython/cython/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/cython/cython/pulls/6465/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/cython/cython/statuses/3237421ffa239e6d8db67fcd8838ea0cc19ddc35",
    "title": "Optimize bit_count()",
    "updated_at": "2024-10-28T10:25:16Z",
    "url": "https://api.github.com/repos/cython/cython/pulls/6465",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/138492675?v=4",
        "events_url": "https://api.github.com/users/bbb23exposed/events{/privacy}",
        "followers_url": "https://api.github.com/users/bbb23exposed/followers",
        "following_url": "https://api.github.com/users/bbb23exposed/following{/other_user}",
        "gists_url": "https://api.github.com/users/bbb23exposed/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/bbb23exposed",
        "id": 138492675,
        "login": "bbb23exposed",
        "node_id": "U_kgDOCEE7Aw",
        "organizations_url": "https://api.github.com/users/bbb23exposed/orgs",
        "received_events_url": "https://api.github.com/users/bbb23exposed/received_events",
        "repos_url": "https://api.github.com/users/bbb23exposed/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/bbb23exposed/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bbb23exposed/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/bbb23exposed",
        "user_view_type": "public"
    }
}