{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/cython/cython/issues/6707/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/cython/cython/pulls/6707/commits"
        },
        "html": {
            "href": "https://github.com/cython/cython/pull/6707"
        },
        "issue": {
            "href": "https://api.github.com/repos/cython/cython/issues/6707"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/cython/cython/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/cython/cython/pulls/6707/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/cython/cython/pulls/6707"
        },
        "statuses": {
            "href": "https://api.github.com/repos/cython/cython/statuses/c8f6415dc54f33ce7c7ec40d13ea3a3b6f2b0329"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": {
        "commit_message": "",
        "commit_title": "[Docs] Hints/guidance for thread-safety (#6707)",
        "enabled_by": {
            "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
            "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
            "followers_url": "https://api.github.com/users/da-woods/followers",
            "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
            "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/da-woods",
            "id": 10536947,
            "login": "da-woods",
            "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
            "organizations_url": "https://api.github.com/users/da-woods/orgs",
            "received_events_url": "https://api.github.com/users/da-woods/received_events",
            "repos_url": "https://api.github.com/users/da-woods/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/da-woods",
            "user_view_type": "public"
        },
        "merge_method": "squash"
    },
    "base": {
        "label": "cython:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/cython/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/cython/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/cython/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/cython/cython/branches{/branch}",
            "clone_url": "https://github.com/cython/cython.git",
            "collaborators_url": "https://api.github.com/repos/cython/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/cython/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/cython/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/cython/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/cython/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/cython/cython/contributors",
            "created_at": "2010-11-21T07:44:20Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/cython/cython/deployments",
            "description": "The most widely used Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/cython/cython/downloads",
            "events_url": "https://api.github.com/repos/cython/cython/events",
            "fork": false,
            "forks": 1514,
            "forks_count": 1514,
            "forks_url": "https://api.github.com/repos/cython/cython/forks",
            "full_name": "cython/cython",
            "git_commits_url": "https://api.github.com/repos/cython/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/cython/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/cython/cython/git/tags{/sha}",
            "git_url": "git://github.com/cython/cython.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": false,
            "has_wiki": true,
            "homepage": "https://cython.org",
            "hooks_url": "https://api.github.com/repos/cython/cython/hooks",
            "html_url": "https://github.com/cython/cython",
            "id": 1099265,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/cython/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/cython/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/cython/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/cython/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/cython/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/cython/cython/languages",
            "license": {
                "key": "apache-2.0",
                "name": "Apache License 2.0",
                "node_id": "MDc6TGljZW5zZTI=",
                "spdx_id": "Apache-2.0",
                "url": "https://api.github.com/licenses/apache-2.0"
            },
            "merges_url": "https://api.github.com/repos/cython/cython/merges",
            "milestones_url": "https://api.github.com/repos/cython/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkxMDk5MjY1",
            "notifications_url": "https://api.github.com/repos/cython/cython/notifications{?since,all,participating}",
            "open_issues": 1424,
            "open_issues_count": 1424,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/486082?v=4",
                "events_url": "https://api.github.com/users/cython/events{/privacy}",
                "followers_url": "https://api.github.com/users/cython/followers",
                "following_url": "https://api.github.com/users/cython/following{/other_user}",
                "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/cython",
                "id": 486082,
                "login": "cython",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
                "organizations_url": "https://api.github.com/users/cython/orgs",
                "received_events_url": "https://api.github.com/users/cython/received_events",
                "repos_url": "https://api.github.com/users/cython/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/cython",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/cython/cython/pulls{/number}",
            "pushed_at": "2025-03-16T14:39:58Z",
            "releases_url": "https://api.github.com/repos/cython/cython/releases{/id}",
            "size": 75168,
            "ssh_url": "git@github.com:cython/cython.git",
            "stargazers_count": 9842,
            "stargazers_url": "https://api.github.com/repos/cython/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/cython/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/cython/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/cython/cython/subscription",
            "svn_url": "https://github.com/cython/cython",
            "tags_url": "https://api.github.com/repos/cython/cython/tags",
            "teams_url": "https://api.github.com/repos/cython/cython/teams",
            "topics": [
                "big-data",
                "c",
                "cpp",
                "cpython",
                "cpython-extensions",
                "cython",
                "performance",
                "python"
            ],
            "trees_url": "https://api.github.com/repos/cython/cython/git/trees{/sha}",
            "updated_at": "2025-03-16T14:40:01Z",
            "url": "https://api.github.com/repos/cython/cython",
            "visibility": "public",
            "watchers": 9842,
            "watchers_count": 9842,
            "web_commit_signoff_required": false
        },
        "sha": "44cfc99a74c9758ff495fc6851f274a959d31b3a",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/486082?v=4",
            "events_url": "https://api.github.com/users/cython/events{/privacy}",
            "followers_url": "https://api.github.com/users/cython/followers",
            "following_url": "https://api.github.com/users/cython/following{/other_user}",
            "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/cython",
            "id": 486082,
            "login": "cython",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
            "organizations_url": "https://api.github.com/users/cython/orgs",
            "received_events_url": "https://api.github.com/users/cython/received_events",
            "repos_url": "https://api.github.com/users/cython/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/cython",
            "user_view_type": "public"
        }
    },
    "body": null,
    "closed_at": "2025-03-16T13:18:10Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6707#discussion_r1986227559"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6707"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1986227559"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nMulti-threaded programs generally work best if you can minimize the interaction between\r\nthreads. It's optimal if the different threads perform completely isolated\r\nblocks of work which are only collected at the end.  Python code is no exception -\r\nespecially since Python's reference counting means that even apparent \"read-only\"\r\noperations can actually involve both reading and writing.\r\n```",
            "commit_id": "c8f6415dc54f33ce7c7ec40d13ea3a3b6f2b0329",
            "created_at": "2025-03-09T06:09:17Z",
            "diff_hunk": "@@ -160,3 +160,297 @@ to require extreme care to make it work correctly).\n    (i.e. all in one go, without switching to another thread) on non-free-threaded builds.\n    Many operations can cause the GIL to be released. Some more detail is in the section\n    :ref:`gil_as_lock`.\n+\n+\n+Opinionated Suggestions\n+=======================\n+\n+This section contains our views on how to use Cython effectively with free-threaded\n+Python.  It may evolve as our understanding grows.\n+\n+Interaction between threads\n+---------------------------\n+\n+Multi-threaded programs general work best if you can minimize the interaction between\n+threads for example by having the different threads perform completely isolated\n+blocks of work which are only collected at the end.  Python code is no exception -\n+especially since Python reference counting means that even apparently \"read-only\"\n+operations usually actually involve both reading and writing.",
            "html_url": "https://github.com/cython/cython/pull/6707#discussion_r1986227559",
            "id": 1986227559,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc52Y21n",
            "original_commit_id": "83517554c967876cfeef6b802c685e7411561f35",
            "original_line": 178,
            "original_position": 19,
            "original_start_line": 174,
            "path": "docs/src/userguide/freethreading.rst",
            "position": null,
            "pull_request_review_id": 2669324409,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6707",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1986227559/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-03-09T06:25:10Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1986227559",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6707#discussion_r1986227824"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6707"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1986227824"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n  def read_from_files_bad(filenames):\r\n    overall_result = set()\r\n\r\n    def read_from_file(filename):\r\n```",
            "commit_id": "c8f6415dc54f33ce7c7ec40d13ea3a3b6f2b0329",
            "created_at": "2025-03-09T06:10:48Z",
            "diff_hunk": "@@ -160,3 +160,297 @@ to require extreme care to make it work correctly).\n    (i.e. all in one go, without switching to another thread) on non-free-threaded builds.\n    Many operations can cause the GIL to be released. Some more detail is in the section\n    :ref:`gil_as_lock`.\n+\n+\n+Opinionated Suggestions\n+=======================\n+\n+This section contains our views on how to use Cython effectively with free-threaded\n+Python.  It may evolve as our understanding grows.\n+\n+Interaction between threads\n+---------------------------\n+\n+Multi-threaded programs general work best if you can minimize the interaction between\n+threads for example by having the different threads perform completely isolated\n+blocks of work which are only collected at the end.  Python code is no exception -\n+especially since Python reference counting means that even apparently \"read-only\"\n+operations usually actually involve both reading and writing.\n+\n+As an example consider a program that collects unique words from multiple files.\n+In this case it would probably be best to read each file to a separate ``set``\n+and then combine them at the end::\n+\n+  def read_from_files_good(filenames):\n+    def read_from_file(filename):\n+      out = set()\n+      with open(filename, 'r') as f:\n+        for line in f:\n+          words = line.split()\n+          for word in words:\n+            out.add(word)\n+      return out\n+\n+    overall_result = set()\n+    with concurrent.futures.ThreadPoolExecutor() as executor:\n+      for file_result in executor.map(read_from_file, filenames):\n+        overall_result.update(file_result)\n+    return overall_result\n+\n+rather than updating one ``set`` from all threads::\n+\n+  def read_from_files_bad(filenames):\n+    overall_result = set()\n+    def read_from_file(filename):",
            "html_url": "https://github.com/cython/cython/pull/6707#discussion_r1986227824",
            "id": 1986227824,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc52Y25w",
            "original_commit_id": "83517554c967876cfeef6b802c685e7411561f35",
            "original_line": 204,
            "original_position": 45,
            "original_start_line": 202,
            "path": "docs/src/userguide/freethreading.rst",
            "position": null,
            "pull_request_review_id": 2669324409,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6707",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1986227824/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-03-09T06:25:10Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1986227824",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6707#discussion_r1986228205"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6707"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1986228205"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nIf this does *not* describe your problem then ``prange`` is probably not the solution.\r\n```",
            "commit_id": "c8f6415dc54f33ce7c7ec40d13ea3a3b6f2b0329",
            "created_at": "2025-03-09T06:12:36Z",
            "diff_hunk": "@@ -160,3 +160,297 @@ to require extreme care to make it work correctly).\n    (i.e. all in one go, without switching to another thread) on non-free-threaded builds.\n    Many operations can cause the GIL to be released. Some more detail is in the section\n    :ref:`gil_as_lock`.\n+\n+\n+Opinionated Suggestions\n+=======================\n+\n+This section contains our views on how to use Cython effectively with free-threaded\n+Python.  It may evolve as our understanding grows.\n+\n+Interaction between threads\n+---------------------------\n+\n+Multi-threaded programs general work best if you can minimize the interaction between\n+threads for example by having the different threads perform completely isolated\n+blocks of work which are only collected at the end.  Python code is no exception -\n+especially since Python reference counting means that even apparently \"read-only\"\n+operations usually actually involve both reading and writing.\n+\n+As an example consider a program that collects unique words from multiple files.\n+In this case it would probably be best to read each file to a separate ``set``\n+and then combine them at the end::\n+\n+  def read_from_files_good(filenames):\n+    def read_from_file(filename):\n+      out = set()\n+      with open(filename, 'r') as f:\n+        for line in f:\n+          words = line.split()\n+          for word in words:\n+            out.add(word)\n+      return out\n+\n+    overall_result = set()\n+    with concurrent.futures.ThreadPoolExecutor() as executor:\n+      for file_result in executor.map(read_from_file, filenames):\n+        overall_result.update(file_result)\n+    return overall_result\n+\n+rather than updating one ``set`` from all threads::\n+\n+  def read_from_files_bad(filenames):\n+    overall_result = set()\n+    def read_from_file(filename):\n+      with open(filename, 'r') as f:\n+        for line in f:\n+          words = line.split()\n+          for word in words:\n+            overall_result.add(word)\n+\n+    with concurrent.futures.ThreadPoolExecutor() as executor:\n+      for _ in executor.map(read_from_file, filenames):\n+        pass\n+    return overall_result\n+\n+The less your threads interact, the less chance there is for bugs, the less\n+need there is for locking to control their interaction, and the less likely\n+they are to slow each other down by invaliding the CPU cache for other\n+threads.\n+\n+Should you use ``prange``?\n+--------------------------\n+\n+Although ``prange`` is the parallelization mechanism *built in* to Cython, it\n+is not the only option, and probably should not be your default option.\n+\n+``prange`` is a fairly thin wrapper over OpenMP's \"parallel for\".  This means\n+it is ideal for problems where you have a big loop, every iteration is basically\n+the same, and the result of each iteration is independent of any other iteration.\n+If this does not describe your problem then ``prange`` is probably not the\n+solution.",
            "html_url": "https://github.com/cython/cython/pull/6707#discussion_r1986228205",
            "id": 1986228205,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc52Y2_t",
            "original_commit_id": "83517554c967876cfeef6b802c685e7411561f35",
            "original_line": 231,
            "original_position": 72,
            "original_start_line": 230,
            "path": "docs/src/userguide/freethreading.rst",
            "position": null,
            "pull_request_review_id": 2669324409,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6707",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1986228205/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-03-09T06:25:10Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1986228205",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6707#discussion_r1986228278"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6707"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1986228278"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nRemember that all the threading options available in Python are also available\r\nin Cython.  For example, you can start threads with ``threading.Thread`` or\r\n``concurrent.futures.ThreadPoolExecutor``. They are much more flexible than\r\n``prange``.  Similarly, the synchronization tools in ``threading.Thread``\r\nare also available in Cython.\r\n```",
            "commit_id": "c8f6415dc54f33ce7c7ec40d13ea3a3b6f2b0329",
            "created_at": "2025-03-09T06:13:27Z",
            "diff_hunk": "@@ -160,3 +160,297 @@ to require extreme care to make it work correctly).\n    (i.e. all in one go, without switching to another thread) on non-free-threaded builds.\n    Many operations can cause the GIL to be released. Some more detail is in the section\n    :ref:`gil_as_lock`.\n+\n+\n+Opinionated Suggestions\n+=======================\n+\n+This section contains our views on how to use Cython effectively with free-threaded\n+Python.  It may evolve as our understanding grows.\n+\n+Interaction between threads\n+---------------------------\n+\n+Multi-threaded programs general work best if you can minimize the interaction between\n+threads for example by having the different threads perform completely isolated\n+blocks of work which are only collected at the end.  Python code is no exception -\n+especially since Python reference counting means that even apparently \"read-only\"\n+operations usually actually involve both reading and writing.\n+\n+As an example consider a program that collects unique words from multiple files.\n+In this case it would probably be best to read each file to a separate ``set``\n+and then combine them at the end::\n+\n+  def read_from_files_good(filenames):\n+    def read_from_file(filename):\n+      out = set()\n+      with open(filename, 'r') as f:\n+        for line in f:\n+          words = line.split()\n+          for word in words:\n+            out.add(word)\n+      return out\n+\n+    overall_result = set()\n+    with concurrent.futures.ThreadPoolExecutor() as executor:\n+      for file_result in executor.map(read_from_file, filenames):\n+        overall_result.update(file_result)\n+    return overall_result\n+\n+rather than updating one ``set`` from all threads::\n+\n+  def read_from_files_bad(filenames):\n+    overall_result = set()\n+    def read_from_file(filename):\n+      with open(filename, 'r') as f:\n+        for line in f:\n+          words = line.split()\n+          for word in words:\n+            overall_result.add(word)\n+\n+    with concurrent.futures.ThreadPoolExecutor() as executor:\n+      for _ in executor.map(read_from_file, filenames):\n+        pass\n+    return overall_result\n+\n+The less your threads interact, the less chance there is for bugs, the less\n+need there is for locking to control their interaction, and the less likely\n+they are to slow each other down by invaliding the CPU cache for other\n+threads.\n+\n+Should you use ``prange``?\n+--------------------------\n+\n+Although ``prange`` is the parallelization mechanism *built in* to Cython, it\n+is not the only option, and probably should not be your default option.\n+\n+``prange`` is a fairly thin wrapper over OpenMP's \"parallel for\".  This means\n+it is ideal for problems where you have a big loop, every iteration is basically\n+the same, and the result of each iteration is independent of any other iteration.\n+If this does not describe your problem then ``prange`` is probably not the\n+solution.\n+\n+Remember that all the threading options available in Python are also available\n+in Cython.  For example you can start threads with ``threading.Thread`` or\n+``concurrent.futures.ThreadPoolExecutor`` and this is much more flexible than\n+``prange``.  Similarly the synchronization tools in ``threading.Thread``\n+are also available in Cython.",
            "html_url": "https://github.com/cython/cython/pull/6707#discussion_r1986228278",
            "id": 1986228278,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc52Y3A2",
            "original_commit_id": "83517554c967876cfeef6b802c685e7411561f35",
            "original_line": 237,
            "original_position": 78,
            "original_start_line": 233,
            "path": "docs/src/userguide/freethreading.rst",
            "position": null,
            "pull_request_review_id": 2669324409,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6707",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1986228278/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-03-09T06:25:10Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1986228278",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6707#discussion_r1986228418"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6707"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1986228418"
                }
            },
            "author_association": "MEMBER",
            "body": "`int` and `float` do not seem the optimal pair of examples for non-Python types.\r\n```suggestion\r\n``prange`` has some slightly unintuitive behaviour about which data is\r\nshared and which isn't.  Typically C variables (e.g. ``int``, ``double``) are\r\ntreated as \"thread-local\" and so each thread has its own copy. However,\r\nPython object variables are treated as shared between all the threads.\r\n```",
            "commit_id": "c8f6415dc54f33ce7c7ec40d13ea3a3b6f2b0329",
            "created_at": "2025-03-09T06:15:02Z",
            "diff_hunk": "@@ -160,3 +160,297 @@ to require extreme care to make it work correctly).\n    (i.e. all in one go, without switching to another thread) on non-free-threaded builds.\n    Many operations can cause the GIL to be released. Some more detail is in the section\n    :ref:`gil_as_lock`.\n+\n+\n+Opinionated Suggestions\n+=======================\n+\n+This section contains our views on how to use Cython effectively with free-threaded\n+Python.  It may evolve as our understanding grows.\n+\n+Interaction between threads\n+---------------------------\n+\n+Multi-threaded programs general work best if you can minimize the interaction between\n+threads for example by having the different threads perform completely isolated\n+blocks of work which are only collected at the end.  Python code is no exception -\n+especially since Python reference counting means that even apparently \"read-only\"\n+operations usually actually involve both reading and writing.\n+\n+As an example consider a program that collects unique words from multiple files.\n+In this case it would probably be best to read each file to a separate ``set``\n+and then combine them at the end::\n+\n+  def read_from_files_good(filenames):\n+    def read_from_file(filename):\n+      out = set()\n+      with open(filename, 'r') as f:\n+        for line in f:\n+          words = line.split()\n+          for word in words:\n+            out.add(word)\n+      return out\n+\n+    overall_result = set()\n+    with concurrent.futures.ThreadPoolExecutor() as executor:\n+      for file_result in executor.map(read_from_file, filenames):\n+        overall_result.update(file_result)\n+    return overall_result\n+\n+rather than updating one ``set`` from all threads::\n+\n+  def read_from_files_bad(filenames):\n+    overall_result = set()\n+    def read_from_file(filename):\n+      with open(filename, 'r') as f:\n+        for line in f:\n+          words = line.split()\n+          for word in words:\n+            overall_result.add(word)\n+\n+    with concurrent.futures.ThreadPoolExecutor() as executor:\n+      for _ in executor.map(read_from_file, filenames):\n+        pass\n+    return overall_result\n+\n+The less your threads interact, the less chance there is for bugs, the less\n+need there is for locking to control their interaction, and the less likely\n+they are to slow each other down by invaliding the CPU cache for other\n+threads.\n+\n+Should you use ``prange``?\n+--------------------------\n+\n+Although ``prange`` is the parallelization mechanism *built in* to Cython, it\n+is not the only option, and probably should not be your default option.\n+\n+``prange`` is a fairly thin wrapper over OpenMP's \"parallel for\".  This means\n+it is ideal for problems where you have a big loop, every iteration is basically\n+the same, and the result of each iteration is independent of any other iteration.\n+If this does not describe your problem then ``prange`` is probably not the\n+solution.\n+\n+Remember that all the threading options available in Python are also available\n+in Cython.  For example you can start threads with ``threading.Thread`` or\n+``concurrent.futures.ThreadPoolExecutor`` and this is much more flexible than\n+``prange``.  Similarly the synchronization tools in ``threading.Thread``\n+are also available in Cython.\n+\n+Try to avoid Python code in ``prange``\n+--------------------------------------\n+\n+``prange`` has some slightly unintuitive behaviour about which data is\n+shared and which isn't.  Typically C variables (e.g. ``int``, ``float``) are\n+treated as \"thread-local\" and so each thread has its own copy. However,\n+Python object variables are treated as shared between all the threads.",
            "html_url": "https://github.com/cython/cython/pull/6707#discussion_r1986228418",
            "id": 1986228418,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc52Y3DC",
            "original_commit_id": "83517554c967876cfeef6b802c685e7411561f35",
            "original_line": 245,
            "original_position": 86,
            "original_start_line": 242,
            "path": "docs/src/userguide/freethreading.rst",
            "position": null,
            "pull_request_review_id": 2669324409,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6707",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1986228418/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-03-09T06:25:10Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1986228418",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6707#discussion_r1986228766"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6707"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1986228766"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nshould work fine - each thread has its own ``tmp`` and ``total`` is\r\na \"reduction\" (so treated in an efficient thread-safe way).  However::\r\n```",
            "commit_id": "c8f6415dc54f33ce7c7ec40d13ea3a3b6f2b0329",
            "created_at": "2025-03-09T06:17:33Z",
            "diff_hunk": "@@ -160,3 +160,297 @@ to require extreme care to make it work correctly).\n    (i.e. all in one go, without switching to another thread) on non-free-threaded builds.\n    Many operations can cause the GIL to be released. Some more detail is in the section\n    :ref:`gil_as_lock`.\n+\n+\n+Opinionated Suggestions\n+=======================\n+\n+This section contains our views on how to use Cython effectively with free-threaded\n+Python.  It may evolve as our understanding grows.\n+\n+Interaction between threads\n+---------------------------\n+\n+Multi-threaded programs general work best if you can minimize the interaction between\n+threads for example by having the different threads perform completely isolated\n+blocks of work which are only collected at the end.  Python code is no exception -\n+especially since Python reference counting means that even apparently \"read-only\"\n+operations usually actually involve both reading and writing.\n+\n+As an example consider a program that collects unique words from multiple files.\n+In this case it would probably be best to read each file to a separate ``set``\n+and then combine them at the end::\n+\n+  def read_from_files_good(filenames):\n+    def read_from_file(filename):\n+      out = set()\n+      with open(filename, 'r') as f:\n+        for line in f:\n+          words = line.split()\n+          for word in words:\n+            out.add(word)\n+      return out\n+\n+    overall_result = set()\n+    with concurrent.futures.ThreadPoolExecutor() as executor:\n+      for file_result in executor.map(read_from_file, filenames):\n+        overall_result.update(file_result)\n+    return overall_result\n+\n+rather than updating one ``set`` from all threads::\n+\n+  def read_from_files_bad(filenames):\n+    overall_result = set()\n+    def read_from_file(filename):\n+      with open(filename, 'r') as f:\n+        for line in f:\n+          words = line.split()\n+          for word in words:\n+            overall_result.add(word)\n+\n+    with concurrent.futures.ThreadPoolExecutor() as executor:\n+      for _ in executor.map(read_from_file, filenames):\n+        pass\n+    return overall_result\n+\n+The less your threads interact, the less chance there is for bugs, the less\n+need there is for locking to control their interaction, and the less likely\n+they are to slow each other down by invaliding the CPU cache for other\n+threads.\n+\n+Should you use ``prange``?\n+--------------------------\n+\n+Although ``prange`` is the parallelization mechanism *built in* to Cython, it\n+is not the only option, and probably should not be your default option.\n+\n+``prange`` is a fairly thin wrapper over OpenMP's \"parallel for\".  This means\n+it is ideal for problems where you have a big loop, every iteration is basically\n+the same, and the result of each iteration is independent of any other iteration.\n+If this does not describe your problem then ``prange`` is probably not the\n+solution.\n+\n+Remember that all the threading options available in Python are also available\n+in Cython.  For example you can start threads with ``threading.Thread`` or\n+``concurrent.futures.ThreadPoolExecutor`` and this is much more flexible than\n+``prange``.  Similarly the synchronization tools in ``threading.Thread``\n+are also available in Cython.\n+\n+Try to avoid Python code in ``prange``\n+--------------------------------------\n+\n+``prange`` has some slightly unintuitive behaviour about which data is\n+shared and which isn't.  Typically C variables (e.g. ``int``, ``float``) are\n+treated as \"thread-local\" and so each thread has its own copy. However,\n+Python object variables are treated as shared between all the threads.\n+\n+This means that::\n+\n+  cdef int i\n+  cdef int total = 0\n+  for i in cython.parallel.prange(10, nogil=True):\n+    tmp = i**2\n+    total += tmp\n+\n+should work fine - each thread has its own ``tmp`` and ``total`` is\n+a \"reduction\" (so treated in a thread-safe manner).  However::",
            "html_url": "https://github.com/cython/cython/pull/6707#discussion_r1986228766",
            "id": 1986228766,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc52Y3Ie",
            "original_commit_id": "83517554c967876cfeef6b802c685e7411561f35",
            "original_line": 256,
            "original_position": 97,
            "original_start_line": 255,
            "path": "docs/src/userguide/freethreading.rst",
            "position": null,
            "pull_request_review_id": 2669324409,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6707",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1986228766/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-03-09T06:25:10Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1986228766",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6707#discussion_r1986229185"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6707"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1986229185"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nIn this case, there is only a single value of ``tmp`` shared between all the threads.\r\nThey are continuously overwriting each other's values.  Additionally, Cython does not\r\ncurrently ensure that ``tmp`` is even reference-counted in a thread-safe way,\r\nso you are at risk of crashes or memory-leaks in addition to getting a nonsense answer.\r\n```\r\nIs the refcounting still going to be a threading issue with Cython 3.1?",
            "commit_id": "c8f6415dc54f33ce7c7ec40d13ea3a3b6f2b0329",
            "created_at": "2025-03-09T06:20:44Z",
            "diff_hunk": "@@ -160,3 +160,297 @@ to require extreme care to make it work correctly).\n    (i.e. all in one go, without switching to another thread) on non-free-threaded builds.\n    Many operations can cause the GIL to be released. Some more detail is in the section\n    :ref:`gil_as_lock`.\n+\n+\n+Opinionated Suggestions\n+=======================\n+\n+This section contains our views on how to use Cython effectively with free-threaded\n+Python.  It may evolve as our understanding grows.\n+\n+Interaction between threads\n+---------------------------\n+\n+Multi-threaded programs general work best if you can minimize the interaction between\n+threads for example by having the different threads perform completely isolated\n+blocks of work which are only collected at the end.  Python code is no exception -\n+especially since Python reference counting means that even apparently \"read-only\"\n+operations usually actually involve both reading and writing.\n+\n+As an example consider a program that collects unique words from multiple files.\n+In this case it would probably be best to read each file to a separate ``set``\n+and then combine them at the end::\n+\n+  def read_from_files_good(filenames):\n+    def read_from_file(filename):\n+      out = set()\n+      with open(filename, 'r') as f:\n+        for line in f:\n+          words = line.split()\n+          for word in words:\n+            out.add(word)\n+      return out\n+\n+    overall_result = set()\n+    with concurrent.futures.ThreadPoolExecutor() as executor:\n+      for file_result in executor.map(read_from_file, filenames):\n+        overall_result.update(file_result)\n+    return overall_result\n+\n+rather than updating one ``set`` from all threads::\n+\n+  def read_from_files_bad(filenames):\n+    overall_result = set()\n+    def read_from_file(filename):\n+      with open(filename, 'r') as f:\n+        for line in f:\n+          words = line.split()\n+          for word in words:\n+            overall_result.add(word)\n+\n+    with concurrent.futures.ThreadPoolExecutor() as executor:\n+      for _ in executor.map(read_from_file, filenames):\n+        pass\n+    return overall_result\n+\n+The less your threads interact, the less chance there is for bugs, the less\n+need there is for locking to control their interaction, and the less likely\n+they are to slow each other down by invaliding the CPU cache for other\n+threads.\n+\n+Should you use ``prange``?\n+--------------------------\n+\n+Although ``prange`` is the parallelization mechanism *built in* to Cython, it\n+is not the only option, and probably should not be your default option.\n+\n+``prange`` is a fairly thin wrapper over OpenMP's \"parallel for\".  This means\n+it is ideal for problems where you have a big loop, every iteration is basically\n+the same, and the result of each iteration is independent of any other iteration.\n+If this does not describe your problem then ``prange`` is probably not the\n+solution.\n+\n+Remember that all the threading options available in Python are also available\n+in Cython.  For example you can start threads with ``threading.Thread`` or\n+``concurrent.futures.ThreadPoolExecutor`` and this is much more flexible than\n+``prange``.  Similarly the synchronization tools in ``threading.Thread``\n+are also available in Cython.\n+\n+Try to avoid Python code in ``prange``\n+--------------------------------------\n+\n+``prange`` has some slightly unintuitive behaviour about which data is\n+shared and which isn't.  Typically C variables (e.g. ``int``, ``float``) are\n+treated as \"thread-local\" and so each thread has its own copy. However,\n+Python object variables are treated as shared between all the threads.\n+\n+This means that::\n+\n+  cdef int i\n+  cdef int total = 0\n+  for i in cython.parallel.prange(10, nogil=True):\n+    tmp = i**2\n+    total += tmp\n+\n+should work fine - each thread has its own ``tmp`` and ``total`` is\n+a \"reduction\" (so treated in a thread-safe manner).  However::\n+\n+  cdef int i\n+  cdef int total = 0\n+  cdef object tmp\n+  for i in cython.parallel.prange(10, nogil=True):\n+    with gil:\n+      tmp = i**2\n+      total += tmp\n+\n+In this case there is only a single value of ``tmp`` shared between all the threads, and\n+all are continuously overwriting each other's values.  Additionally Cython does not\n+currently ensure that ``tmp`` is even reference-counted correctly so you are at risk\n+of crashes or memory-leaks in addition to getting a nonsense answer.",
            "html_url": "https://github.com/cython/cython/pull/6707#discussion_r1986229185",
            "id": 1986229185,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc52Y3PB",
            "original_commit_id": "83517554c967876cfeef6b802c685e7411561f35",
            "original_line": 269,
            "original_position": 110,
            "original_start_line": 266,
            "path": "docs/src/userguide/freethreading.rst",
            "position": null,
            "pull_request_review_id": 2669324409,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6707",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1986229185/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-03-09T06:25:10Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1986229185",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6707#discussion_r1986229266"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6707"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1986229266"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nIf you do want to work with Python objects, then it is best to move them into\r\na function and just have the loop call the function::\r\n```",
            "commit_id": "c8f6415dc54f33ce7c7ec40d13ea3a3b6f2b0329",
            "created_at": "2025-03-09T06:21:40Z",
            "diff_hunk": "@@ -160,3 +160,297 @@ to require extreme care to make it work correctly).\n    (i.e. all in one go, without switching to another thread) on non-free-threaded builds.\n    Many operations can cause the GIL to be released. Some more detail is in the section\n    :ref:`gil_as_lock`.\n+\n+\n+Opinionated Suggestions\n+=======================\n+\n+This section contains our views on how to use Cython effectively with free-threaded\n+Python.  It may evolve as our understanding grows.\n+\n+Interaction between threads\n+---------------------------\n+\n+Multi-threaded programs general work best if you can minimize the interaction between\n+threads for example by having the different threads perform completely isolated\n+blocks of work which are only collected at the end.  Python code is no exception -\n+especially since Python reference counting means that even apparently \"read-only\"\n+operations usually actually involve both reading and writing.\n+\n+As an example consider a program that collects unique words from multiple files.\n+In this case it would probably be best to read each file to a separate ``set``\n+and then combine them at the end::\n+\n+  def read_from_files_good(filenames):\n+    def read_from_file(filename):\n+      out = set()\n+      with open(filename, 'r') as f:\n+        for line in f:\n+          words = line.split()\n+          for word in words:\n+            out.add(word)\n+      return out\n+\n+    overall_result = set()\n+    with concurrent.futures.ThreadPoolExecutor() as executor:\n+      for file_result in executor.map(read_from_file, filenames):\n+        overall_result.update(file_result)\n+    return overall_result\n+\n+rather than updating one ``set`` from all threads::\n+\n+  def read_from_files_bad(filenames):\n+    overall_result = set()\n+    def read_from_file(filename):\n+      with open(filename, 'r') as f:\n+        for line in f:\n+          words = line.split()\n+          for word in words:\n+            overall_result.add(word)\n+\n+    with concurrent.futures.ThreadPoolExecutor() as executor:\n+      for _ in executor.map(read_from_file, filenames):\n+        pass\n+    return overall_result\n+\n+The less your threads interact, the less chance there is for bugs, the less\n+need there is for locking to control their interaction, and the less likely\n+they are to slow each other down by invaliding the CPU cache for other\n+threads.\n+\n+Should you use ``prange``?\n+--------------------------\n+\n+Although ``prange`` is the parallelization mechanism *built in* to Cython, it\n+is not the only option, and probably should not be your default option.\n+\n+``prange`` is a fairly thin wrapper over OpenMP's \"parallel for\".  This means\n+it is ideal for problems where you have a big loop, every iteration is basically\n+the same, and the result of each iteration is independent of any other iteration.\n+If this does not describe your problem then ``prange`` is probably not the\n+solution.\n+\n+Remember that all the threading options available in Python are also available\n+in Cython.  For example you can start threads with ``threading.Thread`` or\n+``concurrent.futures.ThreadPoolExecutor`` and this is much more flexible than\n+``prange``.  Similarly the synchronization tools in ``threading.Thread``\n+are also available in Cython.\n+\n+Try to avoid Python code in ``prange``\n+--------------------------------------\n+\n+``prange`` has some slightly unintuitive behaviour about which data is\n+shared and which isn't.  Typically C variables (e.g. ``int``, ``float``) are\n+treated as \"thread-local\" and so each thread has its own copy. However,\n+Python object variables are treated as shared between all the threads.\n+\n+This means that::\n+\n+  cdef int i\n+  cdef int total = 0\n+  for i in cython.parallel.prange(10, nogil=True):\n+    tmp = i**2\n+    total += tmp\n+\n+should work fine - each thread has its own ``tmp`` and ``total`` is\n+a \"reduction\" (so treated in a thread-safe manner).  However::\n+\n+  cdef int i\n+  cdef int total = 0\n+  cdef object tmp\n+  for i in cython.parallel.prange(10, nogil=True):\n+    with gil:\n+      tmp = i**2\n+      total += tmp\n+\n+In this case there is only a single value of ``tmp`` shared between all the threads, and\n+all are continuously overwriting each other's values.  Additionally Cython does not\n+currently ensure that ``tmp`` is even reference-counted correctly so you are at risk\n+of crashes or memory-leaks in addition to getting a nonsense answer.\n+\n+If you do want to work with Python objects then it is best to move them into\n+a function and just have the loop call the function::",
            "html_url": "https://github.com/cython/cython/pull/6707#discussion_r1986229266",
            "id": 1986229266,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc52Y3QS",
            "original_commit_id": "83517554c967876cfeef6b802c685e7411561f35",
            "original_line": 272,
            "original_position": 113,
            "original_start_line": 271,
            "path": "docs/src/userguide/freethreading.rst",
            "position": null,
            "pull_request_review_id": 2669324409,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6707",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1986229266/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-03-09T06:25:10Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1986229266",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6707#discussion_r1986229477"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6707"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1986229477"
                }
            },
            "author_association": "MEMBER",
            "body": "I missed the bit that the function return value is safe because it's converted to a C `int`. Let's make that clearer.\r\n```suggestion\r\n  cdef int square(int x):\r\n    cdef object tmp = x**2\r\n    cdef int result = tmp\r\n    return result\r\n\r\n  # ...\r\n\r\n  cdef int i\r\n  cdef int total = 0\r\n  for i in cython.parallel.prange(10, nogil=True):\r\n    with gil:\r\n      total += square(i)\r\n\r\nSince ``tmp`` is now local to the function scope, each function call has its own copy\r\nand thus there is no conflict of Python objects between threads.\r\n```",
            "commit_id": "c8f6415dc54f33ce7c7ec40d13ea3a3b6f2b0329",
            "created_at": "2025-03-09T06:23:25Z",
            "diff_hunk": "@@ -160,3 +160,297 @@ to require extreme care to make it work correctly).\n    (i.e. all in one go, without switching to another thread) on non-free-threaded builds.\n    Many operations can cause the GIL to be released. Some more detail is in the section\n    :ref:`gil_as_lock`.\n+\n+\n+Opinionated Suggestions\n+=======================\n+\n+This section contains our views on how to use Cython effectively with free-threaded\n+Python.  It may evolve as our understanding grows.\n+\n+Interaction between threads\n+---------------------------\n+\n+Multi-threaded programs general work best if you can minimize the interaction between\n+threads for example by having the different threads perform completely isolated\n+blocks of work which are only collected at the end.  Python code is no exception -\n+especially since Python reference counting means that even apparently \"read-only\"\n+operations usually actually involve both reading and writing.\n+\n+As an example consider a program that collects unique words from multiple files.\n+In this case it would probably be best to read each file to a separate ``set``\n+and then combine them at the end::\n+\n+  def read_from_files_good(filenames):\n+    def read_from_file(filename):\n+      out = set()\n+      with open(filename, 'r') as f:\n+        for line in f:\n+          words = line.split()\n+          for word in words:\n+            out.add(word)\n+      return out\n+\n+    overall_result = set()\n+    with concurrent.futures.ThreadPoolExecutor() as executor:\n+      for file_result in executor.map(read_from_file, filenames):\n+        overall_result.update(file_result)\n+    return overall_result\n+\n+rather than updating one ``set`` from all threads::\n+\n+  def read_from_files_bad(filenames):\n+    overall_result = set()\n+    def read_from_file(filename):\n+      with open(filename, 'r') as f:\n+        for line in f:\n+          words = line.split()\n+          for word in words:\n+            overall_result.add(word)\n+\n+    with concurrent.futures.ThreadPoolExecutor() as executor:\n+      for _ in executor.map(read_from_file, filenames):\n+        pass\n+    return overall_result\n+\n+The less your threads interact, the less chance there is for bugs, the less\n+need there is for locking to control their interaction, and the less likely\n+they are to slow each other down by invaliding the CPU cache for other\n+threads.\n+\n+Should you use ``prange``?\n+--------------------------\n+\n+Although ``prange`` is the parallelization mechanism *built in* to Cython, it\n+is not the only option, and probably should not be your default option.\n+\n+``prange`` is a fairly thin wrapper over OpenMP's \"parallel for\".  This means\n+it is ideal for problems where you have a big loop, every iteration is basically\n+the same, and the result of each iteration is independent of any other iteration.\n+If this does not describe your problem then ``prange`` is probably not the\n+solution.\n+\n+Remember that all the threading options available in Python are also available\n+in Cython.  For example you can start threads with ``threading.Thread`` or\n+``concurrent.futures.ThreadPoolExecutor`` and this is much more flexible than\n+``prange``.  Similarly the synchronization tools in ``threading.Thread``\n+are also available in Cython.\n+\n+Try to avoid Python code in ``prange``\n+--------------------------------------\n+\n+``prange`` has some slightly unintuitive behaviour about which data is\n+shared and which isn't.  Typically C variables (e.g. ``int``, ``float``) are\n+treated as \"thread-local\" and so each thread has its own copy. However,\n+Python object variables are treated as shared between all the threads.\n+\n+This means that::\n+\n+  cdef int i\n+  cdef int total = 0\n+  for i in cython.parallel.prange(10, nogil=True):\n+    tmp = i**2\n+    total += tmp\n+\n+should work fine - each thread has its own ``tmp`` and ``total`` is\n+a \"reduction\" (so treated in a thread-safe manner).  However::\n+\n+  cdef int i\n+  cdef int total = 0\n+  cdef object tmp\n+  for i in cython.parallel.prange(10, nogil=True):\n+    with gil:\n+      tmp = i**2\n+      total += tmp\n+\n+In this case there is only a single value of ``tmp`` shared between all the threads, and\n+all are continuously overwriting each other's values.  Additionally Cython does not\n+currently ensure that ``tmp`` is even reference-counted correctly so you are at risk\n+of crashes or memory-leaks in addition to getting a nonsense answer.\n+\n+If you do want to work with Python objects then it is best to move them into\n+a function and just have the loop call the function::\n+\n+  cdef int square(int x):\n+    cdef object tmp = x**2\n+    return tmp\n+\n+  # ...\n+\n+  cdef int i\n+  cdef int total = 0\n+  for i in cython.parallel.prange(10, nogil=True):\n+    with gil:\n+      total += square(i)\n+\n+Since ``tmp`` is now local to the function scope, each function call has its own copy\n+and thus there is no conflict between threads.",
            "html_url": "https://github.com/cython/cython/pull/6707#discussion_r1986229477",
            "id": 1986229477,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc52Y3Tl",
            "original_commit_id": "83517554c967876cfeef6b802c685e7411561f35",
            "original_line": 287,
            "original_position": 128,
            "original_start_line": 274,
            "path": "docs/src/userguide/freethreading.rst",
            "position": null,
            "pull_request_review_id": 2669324409,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6707",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1986229477/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-03-09T06:25:10Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1986229477",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6707#discussion_r1986260806"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6707"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1986260806"
                }
            },
            "author_association": "MEMBER",
            "body": "> Is the refcounting still going to be a threading issue with Cython 3.1?\r\n\r\nProbably - assuming that 3.1 is soon.\r\n\r\nThe current situation is that true Cython internals (like its exception state in `prange` functions) should be thread-safe, but user-defined locals aren't and remain their responsibility.\r\n\r\nThe refcounting would be fixed by https://github.com/cython/cython/pull/6226 (or more likely a cleaner follow-up). That hasn't been high-priority for me because:\r\n*  it's feels like it'll end up like `boundcheck(False)` - everyone will just turn it off everywhere \"for speed\" without really thinking.\r\n* it'll only cover read and write; most real parallel code needs \"compare exchange\" or \"swap\" or similar, which user's will still have to write themselves. So it may not be hugely useful.\r\n\r\nI still plan to improve it if possible, but I'm relaxed about it missing 3.1.",
            "commit_id": "c8f6415dc54f33ce7c7ec40d13ea3a3b6f2b0329",
            "created_at": "2025-03-09T09:14:25Z",
            "diff_hunk": "@@ -160,3 +160,297 @@ to require extreme care to make it work correctly).\n    (i.e. all in one go, without switching to another thread) on non-free-threaded builds.\n    Many operations can cause the GIL to be released. Some more detail is in the section\n    :ref:`gil_as_lock`.\n+\n+\n+Opinionated Suggestions\n+=======================\n+\n+This section contains our views on how to use Cython effectively with free-threaded\n+Python.  It may evolve as our understanding grows.\n+\n+Interaction between threads\n+---------------------------\n+\n+Multi-threaded programs general work best if you can minimize the interaction between\n+threads for example by having the different threads perform completely isolated\n+blocks of work which are only collected at the end.  Python code is no exception -\n+especially since Python reference counting means that even apparently \"read-only\"\n+operations usually actually involve both reading and writing.\n+\n+As an example consider a program that collects unique words from multiple files.\n+In this case it would probably be best to read each file to a separate ``set``\n+and then combine them at the end::\n+\n+  def read_from_files_good(filenames):\n+    def read_from_file(filename):\n+      out = set()\n+      with open(filename, 'r') as f:\n+        for line in f:\n+          words = line.split()\n+          for word in words:\n+            out.add(word)\n+      return out\n+\n+    overall_result = set()\n+    with concurrent.futures.ThreadPoolExecutor() as executor:\n+      for file_result in executor.map(read_from_file, filenames):\n+        overall_result.update(file_result)\n+    return overall_result\n+\n+rather than updating one ``set`` from all threads::\n+\n+  def read_from_files_bad(filenames):\n+    overall_result = set()\n+    def read_from_file(filename):\n+      with open(filename, 'r') as f:\n+        for line in f:\n+          words = line.split()\n+          for word in words:\n+            overall_result.add(word)\n+\n+    with concurrent.futures.ThreadPoolExecutor() as executor:\n+      for _ in executor.map(read_from_file, filenames):\n+        pass\n+    return overall_result\n+\n+The less your threads interact, the less chance there is for bugs, the less\n+need there is for locking to control their interaction, and the less likely\n+they are to slow each other down by invaliding the CPU cache for other\n+threads.\n+\n+Should you use ``prange``?\n+--------------------------\n+\n+Although ``prange`` is the parallelization mechanism *built in* to Cython, it\n+is not the only option, and probably should not be your default option.\n+\n+``prange`` is a fairly thin wrapper over OpenMP's \"parallel for\".  This means\n+it is ideal for problems where you have a big loop, every iteration is basically\n+the same, and the result of each iteration is independent of any other iteration.\n+If this does not describe your problem then ``prange`` is probably not the\n+solution.\n+\n+Remember that all the threading options available in Python are also available\n+in Cython.  For example you can start threads with ``threading.Thread`` or\n+``concurrent.futures.ThreadPoolExecutor`` and this is much more flexible than\n+``prange``.  Similarly the synchronization tools in ``threading.Thread``\n+are also available in Cython.\n+\n+Try to avoid Python code in ``prange``\n+--------------------------------------\n+\n+``prange`` has some slightly unintuitive behaviour about which data is\n+shared and which isn't.  Typically C variables (e.g. ``int``, ``float``) are\n+treated as \"thread-local\" and so each thread has its own copy. However,\n+Python object variables are treated as shared between all the threads.\n+\n+This means that::\n+\n+  cdef int i\n+  cdef int total = 0\n+  for i in cython.parallel.prange(10, nogil=True):\n+    tmp = i**2\n+    total += tmp\n+\n+should work fine - each thread has its own ``tmp`` and ``total`` is\n+a \"reduction\" (so treated in a thread-safe manner).  However::\n+\n+  cdef int i\n+  cdef int total = 0\n+  cdef object tmp\n+  for i in cython.parallel.prange(10, nogil=True):\n+    with gil:\n+      tmp = i**2\n+      total += tmp\n+\n+In this case there is only a single value of ``tmp`` shared between all the threads, and\n+all are continuously overwriting each other's values.  Additionally Cython does not\n+currently ensure that ``tmp`` is even reference-counted correctly so you are at risk\n+of crashes or memory-leaks in addition to getting a nonsense answer.",
            "html_url": "https://github.com/cython/cython/pull/6707#discussion_r1986260806",
            "id": 1986260806,
            "in_reply_to_id": 1986229185,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc52Y-9G",
            "original_commit_id": "83517554c967876cfeef6b802c685e7411561f35",
            "original_line": 269,
            "original_position": 110,
            "original_start_line": 266,
            "path": "docs/src/userguide/freethreading.rst",
            "position": null,
            "pull_request_review_id": 2669358131,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6707",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1986260806/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-03-09T09:14:25Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1986260806",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6707#discussion_r1988072215"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6707"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1988072215"
                }
            },
            "author_association": "MEMBER",
            "body": "TODO: Memory allocation can trigger the GC in Python <3.11. Still worth noting but should caveat it.",
            "commit_id": "c8f6415dc54f33ce7c7ec40d13ea3a3b6f2b0329",
            "created_at": "2025-03-10T21:46:30Z",
            "diff_hunk": "@@ -160,3 +160,298 @@ to require extreme care to make it work correctly).\n    (i.e. all in one go, without switching to another thread) on non-free-threaded builds.\n    Many operations can cause the GIL to be released. Some more detail is in the section\n    :ref:`gil_as_lock`.\n+\n+\n+Opinionated Suggestions\n+=======================\n+\n+This section contains our views on how to use Cython effectively with free-threaded\n+Python.  It may evolve as our understanding grows.\n+\n+Interaction between threads\n+---------------------------\n+\n+Multi-threaded programs generally work best if you can minimize the interaction between\n+threads. It's optimal if the different threads perform completely isolated\n+blocks of work which are only collected at the end.  Python code is no exception -\n+especially since Python's reference counting means that even apparent \"read-only\"\n+operations can actually involve both reading and writing.\n+\n+As an example consider a program that collects unique words from multiple files.\n+In this case it would probably be best to read each file to a separate ``set``\n+and then combine them at the end::\n+\n+  def read_from_files_good(filenames):\n+    def read_from_file(filename):\n+      out = set()\n+      with open(filename, 'r') as f:\n+        for line in f:\n+          words = line.split()\n+          for word in words:\n+            out.add(word)\n+      return out\n+\n+    overall_result = set()\n+    with concurrent.futures.ThreadPoolExecutor() as executor:\n+      for file_result in executor.map(read_from_file, filenames):\n+        overall_result.update(file_result)\n+    return overall_result\n+\n+rather than updating one ``set`` from all threads::\n+\n+  def read_from_files_bad(filenames):\n+    overall_result = set()\n+\n+    def read_from_file(filename):\n+      with open(filename, 'r') as f:\n+        for line in f:\n+          words = line.split()\n+          for word in words:\n+            overall_result.add(word)\n+\n+    with concurrent.futures.ThreadPoolExecutor() as executor:\n+      for _ in executor.map(read_from_file, filenames):\n+        pass\n+    return overall_result\n+\n+The less your threads interact, the less chance there is for bugs, the less\n+need there is for locking to control their interaction, and the less likely\n+they are to slow each other down by invaliding the CPU cache for other\n+threads.\n+\n+Should you use ``prange``?\n+--------------------------\n+\n+Although ``prange`` is the parallelization mechanism *built in* to Cython, it\n+is not the only option, and probably should not be your default option.\n+\n+``prange`` is a fairly thin wrapper over OpenMP's \"parallel for\".  This means\n+it is ideal for problems where you have a big loop, every iteration is basically\n+the same, and the result of each iteration is independent of any other iteration.\n+If this does *not* describe your problem then ``prange`` is probably not the solution.\n+\n+Remember that all the threading options available in Python are also available\n+in Cython.  For example, you can start threads with ``threading.Thread`` or\n+``concurrent.futures.ThreadPoolExecutor``. They are much more flexible than\n+``prange``.  Similarly, the synchronization tools in ``threading.Thread``\n+are also available in Cython.\n+\n+Try to avoid Python code in ``prange``\n+--------------------------------------\n+\n+``prange`` has some slightly unintuitive behaviour about which data is\n+shared and which isn't.  Typically C variables (e.g. ``int``, ``double``) are\n+treated as \"thread-local\" and so each thread has its own copy. However,\n+Python object variables are treated as shared between all the threads.\n+\n+This means that::\n+\n+  cdef int i\n+  cdef int total = 0\n+  for i in cython.parallel.prange(10, nogil=True):\n+    tmp = i**2\n+    total += tmp\n+\n+should work fine - each thread has its own ``tmp`` and ``total`` is\n+a \"reduction\" (so treated in an efficient thread-safe way).  However::\n+\n+  cdef int i\n+  cdef int total = 0\n+  cdef object tmp\n+  for i in cython.parallel.prange(10, nogil=True):\n+    with gil:\n+      tmp = i**2\n+      total += tmp\n+\n+In this case, there is only a single value of ``tmp`` shared between all the threads.\n+They are continuously overwriting each other's values.  Additionally, Cython does not\n+currently ensure that ``tmp`` is even reference-counted in a thread-safe way,\n+so you are at risk of crashes or memory-leaks in addition to getting a nonsense answer.\n+\n+If you do want to work with Python objects, then it is best to move them into\n+a function and just have the loop call the function::\n+\n+  cdef int square(int x):\n+    cdef object tmp = x**2\n+    cdef int result = tmp\n+    return result\n+\n+  # ...\n+\n+  cdef int i\n+  cdef int total = 0\n+  for i in cython.parallel.prange(10, nogil=True):\n+    with gil:\n+      total += square(i)\n+\n+Since ``tmp`` is now local to the function scope, each function call has its own copy\n+and thus there is no conflict of Python objects between threads.\n+\n+Use C++ for low-level synchronization primitives\n+------------------------------------------------\n+\n+When you must have threads interact with each other, you usually need to use\n+special data types to control the access to shared data.  Python provides many of these in the\n+``threading`` module.  However, sometimes it is useful to either:\n+\n+* avoid the Python-call overhead of the threading module,\n+* use atomic variables to update numeric types in a controlled way without locking.\n+\n+For this our recommendation is to use the C++ standard library.  Most of these\n+are available simply by \"cimporting\" from ``libcpp``.  In the event that Cython\n+hasn't already wrapped what you want to use then you can do it yourself - our\n+``libcpp`` is provided for convenience but it does nothing that can't be done\n+with regular Cython code.\n+\n+The C standard library also provides some of these features (e.g. atomic variables\n+and mutexes).  However, compiler support for the C++ standard library is better\n+(in particular for MSVC) and the C++ standard library is more fully featured,\n+so we recommend this first.\n+\n+One difficulty is with types that are not default constructable or moveable\n+(e.g. ``latch``, ``semaphore``, ``barrier``).  These are difficult to\n+stack-allocate because of how Cython's code-genertion works, so you\n+need to heap-allocate them::\n+\n+  from libcpp.latch cimport latch\n+\n+  l = new latch(2)\n+  try:\n+    ...  # use the latch\n+  finally:\n+    del l\n+\n+It is also possible to use C++ to create new threads (for example, using the ``std::jthread``\n+class).  This works, but we generally recommend creating threads through Python\n+instead, mainly because the outermost ``with gil:`` statement in a non-Python\n+created thread will not work reliably with multiple subinterpreters - this recommendation is\n+therefore mainly to future-proofing your code and not restrict where it can\n+be used from.  It is a fairly soft suggestion though, so feel free to ignore\n+it if you have good reason to.\n+\n+``cython.critical_section`` vs GIL\n+----------------------------------\n+\n+Understanding what protection a ``critical_section`` provides is\n+important to being able to use it safely,  and it's also worth comparing\n+it to the guarantees that the GIL provides.  Unfortunately some of\n+this is very much an implementation detail of Python at the moment, so\n+may be subject to change.\n+\n+What is guaranteed to be safe for both of ``critical_section`` and\n+the GIL (on non-freethreading builds) is reading and writing to\n+``cdef`` attributes of extension types::\n+\n+  cdef class C:\n+    cdef object attr\n+\n+  ...\n+  \n+  cdef C c_instance = C()\n+  with cython.critical_section(c_instance):\n+    c_instance.attr = something\n+\n+  with cython.critical_section(c_instance):\n+    something = c_instance.attr\n+\n+In principle, both a ``critical_section`` and the GIL can be interrupted\n+by executing arbitrary Python code.  Arbitrary Python code can notable\n+include the finalizers of any objects being destroyed.  This means that\n+reassigning a Python attribute can trigger arbitrary code (but typically\n+only after the new value has been put in place).  Additionally, triggering\n+the GC can result in arbitrary code being executed (which means any Python\n+memory allocation can trigger it).",
            "html_url": "https://github.com/cython/cython/pull/6707#discussion_r1988072215",
            "id": 1988072215,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc52f5MX",
            "original_commit_id": "e9caf9887a7cb724bdc8bf60a9af214fed8a7740",
            "original_line": 363,
            "original_position": 204,
            "original_start_line": 362,
            "path": "docs/src/userguide/freethreading.rst",
            "position": null,
            "pull_request_review_id": 2672277378,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6707",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1988072215/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-03-10T21:46:30Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1988072215",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6707#discussion_r1989428249"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6707"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1989428249"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "```suggestion\r\nby executing arbitrary Python code.  Arbitrary Python code can notably\r\n```",
            "commit_id": "c8f6415dc54f33ce7c7ec40d13ea3a3b6f2b0329",
            "created_at": "2025-03-11T14:32:11Z",
            "diff_hunk": "@@ -160,3 +160,298 @@ to require extreme care to make it work correctly).\n    (i.e. all in one go, without switching to another thread) on non-free-threaded builds.\n    Many operations can cause the GIL to be released. Some more detail is in the section\n    :ref:`gil_as_lock`.\n+\n+\n+Opinionated Suggestions\n+=======================\n+\n+This section contains our views on how to use Cython effectively with free-threaded\n+Python.  It may evolve as our understanding grows.\n+\n+Interaction between threads\n+---------------------------\n+\n+Multi-threaded programs generally work best if you can minimize the interaction between\n+threads. It's optimal if the different threads perform completely isolated\n+blocks of work which are only collected at the end.  Python code is no exception -\n+especially since Python's reference counting means that even apparent \"read-only\"\n+operations can actually involve both reading and writing.\n+\n+As an example consider a program that collects unique words from multiple files.\n+In this case it would probably be best to read each file to a separate ``set``\n+and then combine them at the end::\n+\n+  def read_from_files_good(filenames):\n+    def read_from_file(filename):\n+      out = set()\n+      with open(filename, 'r') as f:\n+        for line in f:\n+          words = line.split()\n+          for word in words:\n+            out.add(word)\n+      return out\n+\n+    overall_result = set()\n+    with concurrent.futures.ThreadPoolExecutor() as executor:\n+      for file_result in executor.map(read_from_file, filenames):\n+        overall_result.update(file_result)\n+    return overall_result\n+\n+rather than updating one ``set`` from all threads::\n+\n+  def read_from_files_bad(filenames):\n+    overall_result = set()\n+\n+    def read_from_file(filename):\n+      with open(filename, 'r') as f:\n+        for line in f:\n+          words = line.split()\n+          for word in words:\n+            overall_result.add(word)\n+\n+    with concurrent.futures.ThreadPoolExecutor() as executor:\n+      for _ in executor.map(read_from_file, filenames):\n+        pass\n+    return overall_result\n+\n+The less your threads interact, the less chance there is for bugs, the less\n+need there is for locking to control their interaction, and the less likely\n+they are to slow each other down by invaliding the CPU cache for other\n+threads.\n+\n+Should you use ``prange``?\n+--------------------------\n+\n+Although ``prange`` is the parallelization mechanism *built in* to Cython, it\n+is not the only option, and probably should not be your default option.\n+\n+``prange`` is a fairly thin wrapper over OpenMP's \"parallel for\".  This means\n+it is ideal for problems where you have a big loop, every iteration is basically\n+the same, and the result of each iteration is independent of any other iteration.\n+If this does *not* describe your problem then ``prange`` is probably not the solution.\n+\n+Remember that all the threading options available in Python are also available\n+in Cython.  For example, you can start threads with ``threading.Thread`` or\n+``concurrent.futures.ThreadPoolExecutor``. They are much more flexible than\n+``prange``.  Similarly, the synchronization tools in ``threading.Thread``\n+are also available in Cython.\n+\n+Try to avoid Python code in ``prange``\n+--------------------------------------\n+\n+``prange`` has some slightly unintuitive behaviour about which data is\n+shared and which isn't.  Typically C variables (e.g. ``int``, ``double``) are\n+treated as \"thread-local\" and so each thread has its own copy. However,\n+Python object variables are treated as shared between all the threads.\n+\n+This means that::\n+\n+  cdef int i\n+  cdef int total = 0\n+  for i in cython.parallel.prange(10, nogil=True):\n+    tmp = i**2\n+    total += tmp\n+\n+should work fine - each thread has its own ``tmp`` and ``total`` is\n+a \"reduction\" (so treated in an efficient thread-safe way).  However::\n+\n+  cdef int i\n+  cdef int total = 0\n+  cdef object tmp\n+  for i in cython.parallel.prange(10, nogil=True):\n+    with gil:\n+      tmp = i**2\n+      total += tmp\n+\n+In this case, there is only a single value of ``tmp`` shared between all the threads.\n+They are continuously overwriting each other's values.  Additionally, Cython does not\n+currently ensure that ``tmp`` is even reference-counted in a thread-safe way,\n+so you are at risk of crashes or memory-leaks in addition to getting a nonsense answer.\n+\n+If you do want to work with Python objects, then it is best to move them into\n+a function and just have the loop call the function::\n+\n+  cdef int square(int x):\n+    cdef object tmp = x**2\n+    cdef int result = tmp\n+    return result\n+\n+  # ...\n+\n+  cdef int i\n+  cdef int total = 0\n+  for i in cython.parallel.prange(10, nogil=True):\n+    with gil:\n+      total += square(i)\n+\n+Since ``tmp`` is now local to the function scope, each function call has its own copy\n+and thus there is no conflict of Python objects between threads.\n+\n+Use C++ for low-level synchronization primitives\n+------------------------------------------------\n+\n+When you must have threads interact with each other, you usually need to use\n+special data types to control the access to shared data.  Python provides many of these in the\n+``threading`` module.  However, sometimes it is useful to either:\n+\n+* avoid the Python-call overhead of the threading module,\n+* use atomic variables to update numeric types in a controlled way without locking.\n+\n+For this our recommendation is to use the C++ standard library.  Most of these\n+are available simply by \"cimporting\" from ``libcpp``.  In the event that Cython\n+hasn't already wrapped what you want to use then you can do it yourself - our\n+``libcpp`` is provided for convenience but it does nothing that can't be done\n+with regular Cython code.\n+\n+The C standard library also provides some of these features (e.g. atomic variables\n+and mutexes).  However, compiler support for the C++ standard library is better\n+(in particular for MSVC) and the C++ standard library is more fully featured,\n+so we recommend this first.\n+\n+One difficulty is with types that are not default constructable or moveable\n+(e.g. ``latch``, ``semaphore``, ``barrier``).  These are difficult to\n+stack-allocate because of how Cython's code-genertion works, so you\n+need to heap-allocate them::\n+\n+  from libcpp.latch cimport latch\n+\n+  l = new latch(2)\n+  try:\n+    ...  # use the latch\n+  finally:\n+    del l\n+\n+It is also possible to use C++ to create new threads (for example, using the ``std::jthread``\n+class).  This works, but we generally recommend creating threads through Python\n+instead, mainly because the outermost ``with gil:`` statement in a non-Python\n+created thread will not work reliably with multiple subinterpreters - this recommendation is\n+therefore mainly to future-proofing your code and not restrict where it can\n+be used from.  It is a fairly soft suggestion though, so feel free to ignore\n+it if you have good reason to.\n+\n+``cython.critical_section`` vs GIL\n+----------------------------------\n+\n+Understanding what protection a ``critical_section`` provides is\n+important to being able to use it safely,  and it's also worth comparing\n+it to the guarantees that the GIL provides.  Unfortunately some of\n+this is very much an implementation detail of Python at the moment, so\n+may be subject to change.\n+\n+What is guaranteed to be safe for both of ``critical_section`` and\n+the GIL (on non-freethreading builds) is reading and writing to\n+``cdef`` attributes of extension types::\n+\n+  cdef class C:\n+    cdef object attr\n+\n+  ...\n+  \n+  cdef C c_instance = C()\n+  with cython.critical_section(c_instance):\n+    c_instance.attr = something\n+\n+  with cython.critical_section(c_instance):\n+    something = c_instance.attr\n+\n+In principle, both a ``critical_section`` and the GIL can be interrupted\n+by executing arbitrary Python code.  Arbitrary Python code can notable",
            "html_url": "https://github.com/cython/cython/pull/6707#discussion_r1989428249",
            "id": 1989428249,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc52lEQZ",
            "original_commit_id": "e9caf9887a7cb724bdc8bf60a9af214fed8a7740",
            "original_line": 358,
            "original_position": 199,
            "original_start_line": null,
            "path": "docs/src/userguide/freethreading.rst",
            "position": null,
            "pull_request_review_id": 2674820477,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6707",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1989428249/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-03-11T14:40:21Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1989428249",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/20306270?v=4",
                "events_url": "https://api.github.com/users/lysnikolaou/events{/privacy}",
                "followers_url": "https://api.github.com/users/lysnikolaou/followers",
                "following_url": "https://api.github.com/users/lysnikolaou/following{/other_user}",
                "gists_url": "https://api.github.com/users/lysnikolaou/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lysnikolaou",
                "id": 20306270,
                "login": "lysnikolaou",
                "node_id": "MDQ6VXNlcjIwMzA2Mjcw",
                "organizations_url": "https://api.github.com/users/lysnikolaou/orgs",
                "received_events_url": "https://api.github.com/users/lysnikolaou/received_events",
                "repos_url": "https://api.github.com/users/lysnikolaou/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lysnikolaou/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lysnikolaou/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lysnikolaou",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6707#discussion_r1989430787"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6707"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1989430787"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "```suggestion\r\nPractically there are some differences between ``critical_section`` \r\n```",
            "commit_id": "c8f6415dc54f33ce7c7ec40d13ea3a3b6f2b0329",
            "created_at": "2025-03-11T14:33:12Z",
            "diff_hunk": "@@ -160,3 +160,298 @@ to require extreme care to make it work correctly).\n    (i.e. all in one go, without switching to another thread) on non-free-threaded builds.\n    Many operations can cause the GIL to be released. Some more detail is in the section\n    :ref:`gil_as_lock`.\n+\n+\n+Opinionated Suggestions\n+=======================\n+\n+This section contains our views on how to use Cython effectively with free-threaded\n+Python.  It may evolve as our understanding grows.\n+\n+Interaction between threads\n+---------------------------\n+\n+Multi-threaded programs generally work best if you can minimize the interaction between\n+threads. It's optimal if the different threads perform completely isolated\n+blocks of work which are only collected at the end.  Python code is no exception -\n+especially since Python's reference counting means that even apparent \"read-only\"\n+operations can actually involve both reading and writing.\n+\n+As an example consider a program that collects unique words from multiple files.\n+In this case it would probably be best to read each file to a separate ``set``\n+and then combine them at the end::\n+\n+  def read_from_files_good(filenames):\n+    def read_from_file(filename):\n+      out = set()\n+      with open(filename, 'r') as f:\n+        for line in f:\n+          words = line.split()\n+          for word in words:\n+            out.add(word)\n+      return out\n+\n+    overall_result = set()\n+    with concurrent.futures.ThreadPoolExecutor() as executor:\n+      for file_result in executor.map(read_from_file, filenames):\n+        overall_result.update(file_result)\n+    return overall_result\n+\n+rather than updating one ``set`` from all threads::\n+\n+  def read_from_files_bad(filenames):\n+    overall_result = set()\n+\n+    def read_from_file(filename):\n+      with open(filename, 'r') as f:\n+        for line in f:\n+          words = line.split()\n+          for word in words:\n+            overall_result.add(word)\n+\n+    with concurrent.futures.ThreadPoolExecutor() as executor:\n+      for _ in executor.map(read_from_file, filenames):\n+        pass\n+    return overall_result\n+\n+The less your threads interact, the less chance there is for bugs, the less\n+need there is for locking to control their interaction, and the less likely\n+they are to slow each other down by invaliding the CPU cache for other\n+threads.\n+\n+Should you use ``prange``?\n+--------------------------\n+\n+Although ``prange`` is the parallelization mechanism *built in* to Cython, it\n+is not the only option, and probably should not be your default option.\n+\n+``prange`` is a fairly thin wrapper over OpenMP's \"parallel for\".  This means\n+it is ideal for problems where you have a big loop, every iteration is basically\n+the same, and the result of each iteration is independent of any other iteration.\n+If this does *not* describe your problem then ``prange`` is probably not the solution.\n+\n+Remember that all the threading options available in Python are also available\n+in Cython.  For example, you can start threads with ``threading.Thread`` or\n+``concurrent.futures.ThreadPoolExecutor``. They are much more flexible than\n+``prange``.  Similarly, the synchronization tools in ``threading.Thread``\n+are also available in Cython.\n+\n+Try to avoid Python code in ``prange``\n+--------------------------------------\n+\n+``prange`` has some slightly unintuitive behaviour about which data is\n+shared and which isn't.  Typically C variables (e.g. ``int``, ``double``) are\n+treated as \"thread-local\" and so each thread has its own copy. However,\n+Python object variables are treated as shared between all the threads.\n+\n+This means that::\n+\n+  cdef int i\n+  cdef int total = 0\n+  for i in cython.parallel.prange(10, nogil=True):\n+    tmp = i**2\n+    total += tmp\n+\n+should work fine - each thread has its own ``tmp`` and ``total`` is\n+a \"reduction\" (so treated in an efficient thread-safe way).  However::\n+\n+  cdef int i\n+  cdef int total = 0\n+  cdef object tmp\n+  for i in cython.parallel.prange(10, nogil=True):\n+    with gil:\n+      tmp = i**2\n+      total += tmp\n+\n+In this case, there is only a single value of ``tmp`` shared between all the threads.\n+They are continuously overwriting each other's values.  Additionally, Cython does not\n+currently ensure that ``tmp`` is even reference-counted in a thread-safe way,\n+so you are at risk of crashes or memory-leaks in addition to getting a nonsense answer.\n+\n+If you do want to work with Python objects, then it is best to move them into\n+a function and just have the loop call the function::\n+\n+  cdef int square(int x):\n+    cdef object tmp = x**2\n+    cdef int result = tmp\n+    return result\n+\n+  # ...\n+\n+  cdef int i\n+  cdef int total = 0\n+  for i in cython.parallel.prange(10, nogil=True):\n+    with gil:\n+      total += square(i)\n+\n+Since ``tmp`` is now local to the function scope, each function call has its own copy\n+and thus there is no conflict of Python objects between threads.\n+\n+Use C++ for low-level synchronization primitives\n+------------------------------------------------\n+\n+When you must have threads interact with each other, you usually need to use\n+special data types to control the access to shared data.  Python provides many of these in the\n+``threading`` module.  However, sometimes it is useful to either:\n+\n+* avoid the Python-call overhead of the threading module,\n+* use atomic variables to update numeric types in a controlled way without locking.\n+\n+For this our recommendation is to use the C++ standard library.  Most of these\n+are available simply by \"cimporting\" from ``libcpp``.  In the event that Cython\n+hasn't already wrapped what you want to use then you can do it yourself - our\n+``libcpp`` is provided for convenience but it does nothing that can't be done\n+with regular Cython code.\n+\n+The C standard library also provides some of these features (e.g. atomic variables\n+and mutexes).  However, compiler support for the C++ standard library is better\n+(in particular for MSVC) and the C++ standard library is more fully featured,\n+so we recommend this first.\n+\n+One difficulty is with types that are not default constructable or moveable\n+(e.g. ``latch``, ``semaphore``, ``barrier``).  These are difficult to\n+stack-allocate because of how Cython's code-genertion works, so you\n+need to heap-allocate them::\n+\n+  from libcpp.latch cimport latch\n+\n+  l = new latch(2)\n+  try:\n+    ...  # use the latch\n+  finally:\n+    del l\n+\n+It is also possible to use C++ to create new threads (for example, using the ``std::jthread``\n+class).  This works, but we generally recommend creating threads through Python\n+instead, mainly because the outermost ``with gil:`` statement in a non-Python\n+created thread will not work reliably with multiple subinterpreters - this recommendation is\n+therefore mainly to future-proofing your code and not restrict where it can\n+be used from.  It is a fairly soft suggestion though, so feel free to ignore\n+it if you have good reason to.\n+\n+``cython.critical_section`` vs GIL\n+----------------------------------\n+\n+Understanding what protection a ``critical_section`` provides is\n+important to being able to use it safely,  and it's also worth comparing\n+it to the guarantees that the GIL provides.  Unfortunately some of\n+this is very much an implementation detail of Python at the moment, so\n+may be subject to change.\n+\n+What is guaranteed to be safe for both of ``critical_section`` and\n+the GIL (on non-freethreading builds) is reading and writing to\n+``cdef`` attributes of extension types::\n+\n+  cdef class C:\n+    cdef object attr\n+\n+  ...\n+  \n+  cdef C c_instance = C()\n+  with cython.critical_section(c_instance):\n+    c_instance.attr = something\n+\n+  with cython.critical_section(c_instance):\n+    something = c_instance.attr\n+\n+In principle, both a ``critical_section`` and the GIL can be interrupted\n+by executing arbitrary Python code.  Arbitrary Python code can notable\n+include the finalizers of any objects being destroyed.  This means that\n+reassigning a Python attribute can trigger arbitrary code (but typically\n+only after the new value has been put in place).  Additionally, triggering\n+the GC can result in arbitrary code being executed (which means any Python\n+memory allocation can trigger it).\n+\n+For example, in the following code (which uses the definition of ``C`` from\n+the previous example)::\n+\n+  with cython.critical_section(c_instance):\n+    c_instance.attr = c_instance.attr + 1\n+\n+the addition gets expanded to something like\n+\n+.. code-block:: C\n+\n+  temp1 = c_instance->attr;\n+\n+  // May trigger arbitrary Python code:\n+  // 1. If ``temp1`` is a class with an \"__add__\" method\n+  // 2. If the allocation of the result triggers the GC.\n+  temp2 = PyNumber_Add(temp1, const_1);\n+\n+  // this section is hidden inside a ``Py_SETREF`` or similar\n+  {\n+    temp3 = c_instance->attr; \n+    c_instance->attr = temp2;\n+    // May trigger arbitrary Python code through finalizers\n+    Py_DECREF(temp3);\n+  }\n+\n+(we show normal addition rather than in-place addition for ease\n+of explanation, but the result is similar).\n+\n+Practically there are some difference between ``critical_section`` ",
            "html_url": "https://github.com/cython/cython/pull/6707#discussion_r1989430787",
            "id": 1989430787,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc52lE4D",
            "original_commit_id": "e9caf9887a7cb724bdc8bf60a9af214fed8a7740",
            "original_line": 393,
            "original_position": 234,
            "original_start_line": null,
            "path": "docs/src/userguide/freethreading.rst",
            "position": null,
            "pull_request_review_id": 2674820477,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6707",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1989430787/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-03-11T14:40:21Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1989430787",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/20306270?v=4",
                "events_url": "https://api.github.com/users/lysnikolaou/events{/privacy}",
                "followers_url": "https://api.github.com/users/lysnikolaou/followers",
                "following_url": "https://api.github.com/users/lysnikolaou/following{/other_user}",
                "gists_url": "https://api.github.com/users/lysnikolaou/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lysnikolaou",
                "id": 20306270,
                "login": "lysnikolaou",
                "node_id": "MDQ6VXNlcjIwMzA2Mjcw",
                "organizations_url": "https://api.github.com/users/lysnikolaou/orgs",
                "received_events_url": "https://api.github.com/users/lysnikolaou/received_events",
                "repos_url": "https://api.github.com/users/lysnikolaou/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lysnikolaou/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lysnikolaou/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lysnikolaou",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6707#discussion_r1989432713"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6707"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1989432713"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "```suggestion\r\n``c_instance``) but unsafe in a GIL-enabled interpreter.\r\n```",
            "commit_id": "c8f6415dc54f33ce7c7ec40d13ea3a3b6f2b0329",
            "created_at": "2025-03-11T14:34:03Z",
            "diff_hunk": "@@ -160,3 +160,298 @@ to require extreme care to make it work correctly).\n    (i.e. all in one go, without switching to another thread) on non-free-threaded builds.\n    Many operations can cause the GIL to be released. Some more detail is in the section\n    :ref:`gil_as_lock`.\n+\n+\n+Opinionated Suggestions\n+=======================\n+\n+This section contains our views on how to use Cython effectively with free-threaded\n+Python.  It may evolve as our understanding grows.\n+\n+Interaction between threads\n+---------------------------\n+\n+Multi-threaded programs generally work best if you can minimize the interaction between\n+threads. It's optimal if the different threads perform completely isolated\n+blocks of work which are only collected at the end.  Python code is no exception -\n+especially since Python's reference counting means that even apparent \"read-only\"\n+operations can actually involve both reading and writing.\n+\n+As an example consider a program that collects unique words from multiple files.\n+In this case it would probably be best to read each file to a separate ``set``\n+and then combine them at the end::\n+\n+  def read_from_files_good(filenames):\n+    def read_from_file(filename):\n+      out = set()\n+      with open(filename, 'r') as f:\n+        for line in f:\n+          words = line.split()\n+          for word in words:\n+            out.add(word)\n+      return out\n+\n+    overall_result = set()\n+    with concurrent.futures.ThreadPoolExecutor() as executor:\n+      for file_result in executor.map(read_from_file, filenames):\n+        overall_result.update(file_result)\n+    return overall_result\n+\n+rather than updating one ``set`` from all threads::\n+\n+  def read_from_files_bad(filenames):\n+    overall_result = set()\n+\n+    def read_from_file(filename):\n+      with open(filename, 'r') as f:\n+        for line in f:\n+          words = line.split()\n+          for word in words:\n+            overall_result.add(word)\n+\n+    with concurrent.futures.ThreadPoolExecutor() as executor:\n+      for _ in executor.map(read_from_file, filenames):\n+        pass\n+    return overall_result\n+\n+The less your threads interact, the less chance there is for bugs, the less\n+need there is for locking to control their interaction, and the less likely\n+they are to slow each other down by invaliding the CPU cache for other\n+threads.\n+\n+Should you use ``prange``?\n+--------------------------\n+\n+Although ``prange`` is the parallelization mechanism *built in* to Cython, it\n+is not the only option, and probably should not be your default option.\n+\n+``prange`` is a fairly thin wrapper over OpenMP's \"parallel for\".  This means\n+it is ideal for problems where you have a big loop, every iteration is basically\n+the same, and the result of each iteration is independent of any other iteration.\n+If this does *not* describe your problem then ``prange`` is probably not the solution.\n+\n+Remember that all the threading options available in Python are also available\n+in Cython.  For example, you can start threads with ``threading.Thread`` or\n+``concurrent.futures.ThreadPoolExecutor``. They are much more flexible than\n+``prange``.  Similarly, the synchronization tools in ``threading.Thread``\n+are also available in Cython.\n+\n+Try to avoid Python code in ``prange``\n+--------------------------------------\n+\n+``prange`` has some slightly unintuitive behaviour about which data is\n+shared and which isn't.  Typically C variables (e.g. ``int``, ``double``) are\n+treated as \"thread-local\" and so each thread has its own copy. However,\n+Python object variables are treated as shared between all the threads.\n+\n+This means that::\n+\n+  cdef int i\n+  cdef int total = 0\n+  for i in cython.parallel.prange(10, nogil=True):\n+    tmp = i**2\n+    total += tmp\n+\n+should work fine - each thread has its own ``tmp`` and ``total`` is\n+a \"reduction\" (so treated in an efficient thread-safe way).  However::\n+\n+  cdef int i\n+  cdef int total = 0\n+  cdef object tmp\n+  for i in cython.parallel.prange(10, nogil=True):\n+    with gil:\n+      tmp = i**2\n+      total += tmp\n+\n+In this case, there is only a single value of ``tmp`` shared between all the threads.\n+They are continuously overwriting each other's values.  Additionally, Cython does not\n+currently ensure that ``tmp`` is even reference-counted in a thread-safe way,\n+so you are at risk of crashes or memory-leaks in addition to getting a nonsense answer.\n+\n+If you do want to work with Python objects, then it is best to move them into\n+a function and just have the loop call the function::\n+\n+  cdef int square(int x):\n+    cdef object tmp = x**2\n+    cdef int result = tmp\n+    return result\n+\n+  # ...\n+\n+  cdef int i\n+  cdef int total = 0\n+  for i in cython.parallel.prange(10, nogil=True):\n+    with gil:\n+      total += square(i)\n+\n+Since ``tmp`` is now local to the function scope, each function call has its own copy\n+and thus there is no conflict of Python objects between threads.\n+\n+Use C++ for low-level synchronization primitives\n+------------------------------------------------\n+\n+When you must have threads interact with each other, you usually need to use\n+special data types to control the access to shared data.  Python provides many of these in the\n+``threading`` module.  However, sometimes it is useful to either:\n+\n+* avoid the Python-call overhead of the threading module,\n+* use atomic variables to update numeric types in a controlled way without locking.\n+\n+For this our recommendation is to use the C++ standard library.  Most of these\n+are available simply by \"cimporting\" from ``libcpp``.  In the event that Cython\n+hasn't already wrapped what you want to use then you can do it yourself - our\n+``libcpp`` is provided for convenience but it does nothing that can't be done\n+with regular Cython code.\n+\n+The C standard library also provides some of these features (e.g. atomic variables\n+and mutexes).  However, compiler support for the C++ standard library is better\n+(in particular for MSVC) and the C++ standard library is more fully featured,\n+so we recommend this first.\n+\n+One difficulty is with types that are not default constructable or moveable\n+(e.g. ``latch``, ``semaphore``, ``barrier``).  These are difficult to\n+stack-allocate because of how Cython's code-genertion works, so you\n+need to heap-allocate them::\n+\n+  from libcpp.latch cimport latch\n+\n+  l = new latch(2)\n+  try:\n+    ...  # use the latch\n+  finally:\n+    del l\n+\n+It is also possible to use C++ to create new threads (for example, using the ``std::jthread``\n+class).  This works, but we generally recommend creating threads through Python\n+instead, mainly because the outermost ``with gil:`` statement in a non-Python\n+created thread will not work reliably with multiple subinterpreters - this recommendation is\n+therefore mainly to future-proofing your code and not restrict where it can\n+be used from.  It is a fairly soft suggestion though, so feel free to ignore\n+it if you have good reason to.\n+\n+``cython.critical_section`` vs GIL\n+----------------------------------\n+\n+Understanding what protection a ``critical_section`` provides is\n+important to being able to use it safely,  and it's also worth comparing\n+it to the guarantees that the GIL provides.  Unfortunately some of\n+this is very much an implementation detail of Python at the moment, so\n+may be subject to change.\n+\n+What is guaranteed to be safe for both of ``critical_section`` and\n+the GIL (on non-freethreading builds) is reading and writing to\n+``cdef`` attributes of extension types::\n+\n+  cdef class C:\n+    cdef object attr\n+\n+  ...\n+  \n+  cdef C c_instance = C()\n+  with cython.critical_section(c_instance):\n+    c_instance.attr = something\n+\n+  with cython.critical_section(c_instance):\n+    something = c_instance.attr\n+\n+In principle, both a ``critical_section`` and the GIL can be interrupted\n+by executing arbitrary Python code.  Arbitrary Python code can notable\n+include the finalizers of any objects being destroyed.  This means that\n+reassigning a Python attribute can trigger arbitrary code (but typically\n+only after the new value has been put in place).  Additionally, triggering\n+the GC can result in arbitrary code being executed (which means any Python\n+memory allocation can trigger it).\n+\n+For example, in the following code (which uses the definition of ``C`` from\n+the previous example)::\n+\n+  with cython.critical_section(c_instance):\n+    c_instance.attr = c_instance.attr + 1\n+\n+the addition gets expanded to something like\n+\n+.. code-block:: C\n+\n+  temp1 = c_instance->attr;\n+\n+  // May trigger arbitrary Python code:\n+  // 1. If ``temp1`` is a class with an \"__add__\" method\n+  // 2. If the allocation of the result triggers the GC.\n+  temp2 = PyNumber_Add(temp1, const_1);\n+\n+  // this section is hidden inside a ``Py_SETREF`` or similar\n+  {\n+    temp3 = c_instance->attr; \n+    c_instance->attr = temp2;\n+    // May trigger arbitrary Python code through finalizers\n+    Py_DECREF(temp3);\n+  }\n+\n+(we show normal addition rather than in-place addition for ease\n+of explanation, but the result is similar).\n+\n+Practically there are some difference between ``critical_section`` \n+and the GIL:\n+\n+* Releasing the GIL happens at fairly regular intervals after\n+  a certail number of bytecode instructions.\n+* Interrupting a ``critical_section`` only happens if the interpreter\n+  hits a deadlock (i.e. some other operation tries to get a critical\n+  section on the same object).\n+\n+The upshot is the if you're sure that no other code will have a\n+reference to ``c_instance`` the example above is safe in a free-threaded\n+interpreter (although arbitrary code may run, it won't interact with\n+``c_instance``) but unsafe in GIL-interpreter.",
            "html_url": "https://github.com/cython/cython/pull/6707#discussion_r1989432713",
            "id": 1989432713,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc52lFWJ",
            "original_commit_id": "e9caf9887a7cb724bdc8bf60a9af214fed8a7740",
            "original_line": 405,
            "original_position": 246,
            "original_start_line": null,
            "path": "docs/src/userguide/freethreading.rst",
            "position": null,
            "pull_request_review_id": 2674820477,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6707",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1989432713/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-03-11T14:40:21Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1989432713",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/20306270?v=4",
                "events_url": "https://api.github.com/users/lysnikolaou/events{/privacy}",
                "followers_url": "https://api.github.com/users/lysnikolaou/followers",
                "following_url": "https://api.github.com/users/lysnikolaou/following{/other_user}",
                "gists_url": "https://api.github.com/users/lysnikolaou/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lysnikolaou",
                "id": 20306270,
                "login": "lysnikolaou",
                "node_id": "MDQ6VXNlcjIwMzA2Mjcw",
                "organizations_url": "https://api.github.com/users/lysnikolaou/orgs",
                "received_events_url": "https://api.github.com/users/lysnikolaou/received_events",
                "repos_url": "https://api.github.com/users/lysnikolaou/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lysnikolaou/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lysnikolaou/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lysnikolaou",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6707#discussion_r1989445650"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6707"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1989445650"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Maybe we should also mention that one needs to register C++ created threads with the interpreter or they cannot run Python code in them?",
            "commit_id": "c8f6415dc54f33ce7c7ec40d13ea3a3b6f2b0329",
            "created_at": "2025-03-11T14:39:40Z",
            "diff_hunk": "@@ -160,3 +160,298 @@ to require extreme care to make it work correctly).\n    (i.e. all in one go, without switching to another thread) on non-free-threaded builds.\n    Many operations can cause the GIL to be released. Some more detail is in the section\n    :ref:`gil_as_lock`.\n+\n+\n+Opinionated Suggestions\n+=======================\n+\n+This section contains our views on how to use Cython effectively with free-threaded\n+Python.  It may evolve as our understanding grows.\n+\n+Interaction between threads\n+---------------------------\n+\n+Multi-threaded programs generally work best if you can minimize the interaction between\n+threads. It's optimal if the different threads perform completely isolated\n+blocks of work which are only collected at the end.  Python code is no exception -\n+especially since Python's reference counting means that even apparent \"read-only\"\n+operations can actually involve both reading and writing.\n+\n+As an example consider a program that collects unique words from multiple files.\n+In this case it would probably be best to read each file to a separate ``set``\n+and then combine them at the end::\n+\n+  def read_from_files_good(filenames):\n+    def read_from_file(filename):\n+      out = set()\n+      with open(filename, 'r') as f:\n+        for line in f:\n+          words = line.split()\n+          for word in words:\n+            out.add(word)\n+      return out\n+\n+    overall_result = set()\n+    with concurrent.futures.ThreadPoolExecutor() as executor:\n+      for file_result in executor.map(read_from_file, filenames):\n+        overall_result.update(file_result)\n+    return overall_result\n+\n+rather than updating one ``set`` from all threads::\n+\n+  def read_from_files_bad(filenames):\n+    overall_result = set()\n+\n+    def read_from_file(filename):\n+      with open(filename, 'r') as f:\n+        for line in f:\n+          words = line.split()\n+          for word in words:\n+            overall_result.add(word)\n+\n+    with concurrent.futures.ThreadPoolExecutor() as executor:\n+      for _ in executor.map(read_from_file, filenames):\n+        pass\n+    return overall_result\n+\n+The less your threads interact, the less chance there is for bugs, the less\n+need there is for locking to control their interaction, and the less likely\n+they are to slow each other down by invaliding the CPU cache for other\n+threads.\n+\n+Should you use ``prange``?\n+--------------------------\n+\n+Although ``prange`` is the parallelization mechanism *built in* to Cython, it\n+is not the only option, and probably should not be your default option.\n+\n+``prange`` is a fairly thin wrapper over OpenMP's \"parallel for\".  This means\n+it is ideal for problems where you have a big loop, every iteration is basically\n+the same, and the result of each iteration is independent of any other iteration.\n+If this does *not* describe your problem then ``prange`` is probably not the solution.\n+\n+Remember that all the threading options available in Python are also available\n+in Cython.  For example, you can start threads with ``threading.Thread`` or\n+``concurrent.futures.ThreadPoolExecutor``. They are much more flexible than\n+``prange``.  Similarly, the synchronization tools in ``threading.Thread``\n+are also available in Cython.\n+\n+Try to avoid Python code in ``prange``\n+--------------------------------------\n+\n+``prange`` has some slightly unintuitive behaviour about which data is\n+shared and which isn't.  Typically C variables (e.g. ``int``, ``double``) are\n+treated as \"thread-local\" and so each thread has its own copy. However,\n+Python object variables are treated as shared between all the threads.\n+\n+This means that::\n+\n+  cdef int i\n+  cdef int total = 0\n+  for i in cython.parallel.prange(10, nogil=True):\n+    tmp = i**2\n+    total += tmp\n+\n+should work fine - each thread has its own ``tmp`` and ``total`` is\n+a \"reduction\" (so treated in an efficient thread-safe way).  However::\n+\n+  cdef int i\n+  cdef int total = 0\n+  cdef object tmp\n+  for i in cython.parallel.prange(10, nogil=True):\n+    with gil:\n+      tmp = i**2\n+      total += tmp\n+\n+In this case, there is only a single value of ``tmp`` shared between all the threads.\n+They are continuously overwriting each other's values.  Additionally, Cython does not\n+currently ensure that ``tmp`` is even reference-counted in a thread-safe way,\n+so you are at risk of crashes or memory-leaks in addition to getting a nonsense answer.\n+\n+If you do want to work with Python objects, then it is best to move them into\n+a function and just have the loop call the function::\n+\n+  cdef int square(int x):\n+    cdef object tmp = x**2\n+    cdef int result = tmp\n+    return result\n+\n+  # ...\n+\n+  cdef int i\n+  cdef int total = 0\n+  for i in cython.parallel.prange(10, nogil=True):\n+    with gil:\n+      total += square(i)\n+\n+Since ``tmp`` is now local to the function scope, each function call has its own copy\n+and thus there is no conflict of Python objects between threads.\n+\n+Use C++ for low-level synchronization primitives\n+------------------------------------------------\n+\n+When you must have threads interact with each other, you usually need to use\n+special data types to control the access to shared data.  Python provides many of these in the\n+``threading`` module.  However, sometimes it is useful to either:\n+\n+* avoid the Python-call overhead of the threading module,\n+* use atomic variables to update numeric types in a controlled way without locking.\n+\n+For this our recommendation is to use the C++ standard library.  Most of these\n+are available simply by \"cimporting\" from ``libcpp``.  In the event that Cython\n+hasn't already wrapped what you want to use then you can do it yourself - our\n+``libcpp`` is provided for convenience but it does nothing that can't be done\n+with regular Cython code.\n+\n+The C standard library also provides some of these features (e.g. atomic variables\n+and mutexes).  However, compiler support for the C++ standard library is better\n+(in particular for MSVC) and the C++ standard library is more fully featured,\n+so we recommend this first.\n+\n+One difficulty is with types that are not default constructable or moveable\n+(e.g. ``latch``, ``semaphore``, ``barrier``).  These are difficult to\n+stack-allocate because of how Cython's code-genertion works, so you\n+need to heap-allocate them::\n+\n+  from libcpp.latch cimport latch\n+\n+  l = new latch(2)\n+  try:\n+    ...  # use the latch\n+  finally:\n+    del l\n+\n+It is also possible to use C++ to create new threads (for example, using the ``std::jthread``\n+class).  This works, but we generally recommend creating threads through Python\n+instead, mainly because the outermost ``with gil:`` statement in a non-Python\n+created thread will not work reliably with multiple subinterpreters - this recommendation is\n+therefore mainly to future-proofing your code and not restrict where it can\n+be used from.  It is a fairly soft suggestion though, so feel free to ignore",
            "html_url": "https://github.com/cython/cython/pull/6707#discussion_r1989445650",
            "id": 1989445650,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc52lIgS",
            "original_commit_id": "e9caf9887a7cb724bdc8bf60a9af214fed8a7740",
            "original_line": 329,
            "original_position": 170,
            "original_start_line": 325,
            "path": "docs/src/userguide/freethreading.rst",
            "position": null,
            "pull_request_review_id": 2674820477,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6707",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1989445650/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-03-11T14:40:21Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1989445650",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/20306270?v=4",
                "events_url": "https://api.github.com/users/lysnikolaou/events{/privacy}",
                "followers_url": "https://api.github.com/users/lysnikolaou/followers",
                "following_url": "https://api.github.com/users/lysnikolaou/following{/other_user}",
                "gists_url": "https://api.github.com/users/lysnikolaou/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lysnikolaou",
                "id": 20306270,
                "login": "lysnikolaou",
                "node_id": "MDQ6VXNlcjIwMzA2Mjcw",
                "organizations_url": "https://api.github.com/users/lysnikolaou/orgs",
                "received_events_url": "https://api.github.com/users/lysnikolaou/received_events",
                "repos_url": "https://api.github.com/users/lysnikolaou/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lysnikolaou/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lysnikolaou/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lysnikolaou",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6707#discussion_r1990156494"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6707"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1990156494"
                }
            },
            "author_association": "MEMBER",
            "body": "That should be what the outermost ``with gil:` is for, but I'll change the text a little to clarify",
            "commit_id": "c8f6415dc54f33ce7c7ec40d13ea3a3b6f2b0329",
            "created_at": "2025-03-11T21:33:09Z",
            "diff_hunk": "@@ -160,3 +160,298 @@ to require extreme care to make it work correctly).\n    (i.e. all in one go, without switching to another thread) on non-free-threaded builds.\n    Many operations can cause the GIL to be released. Some more detail is in the section\n    :ref:`gil_as_lock`.\n+\n+\n+Opinionated Suggestions\n+=======================\n+\n+This section contains our views on how to use Cython effectively with free-threaded\n+Python.  It may evolve as our understanding grows.\n+\n+Interaction between threads\n+---------------------------\n+\n+Multi-threaded programs generally work best if you can minimize the interaction between\n+threads. It's optimal if the different threads perform completely isolated\n+blocks of work which are only collected at the end.  Python code is no exception -\n+especially since Python's reference counting means that even apparent \"read-only\"\n+operations can actually involve both reading and writing.\n+\n+As an example consider a program that collects unique words from multiple files.\n+In this case it would probably be best to read each file to a separate ``set``\n+and then combine them at the end::\n+\n+  def read_from_files_good(filenames):\n+    def read_from_file(filename):\n+      out = set()\n+      with open(filename, 'r') as f:\n+        for line in f:\n+          words = line.split()\n+          for word in words:\n+            out.add(word)\n+      return out\n+\n+    overall_result = set()\n+    with concurrent.futures.ThreadPoolExecutor() as executor:\n+      for file_result in executor.map(read_from_file, filenames):\n+        overall_result.update(file_result)\n+    return overall_result\n+\n+rather than updating one ``set`` from all threads::\n+\n+  def read_from_files_bad(filenames):\n+    overall_result = set()\n+\n+    def read_from_file(filename):\n+      with open(filename, 'r') as f:\n+        for line in f:\n+          words = line.split()\n+          for word in words:\n+            overall_result.add(word)\n+\n+    with concurrent.futures.ThreadPoolExecutor() as executor:\n+      for _ in executor.map(read_from_file, filenames):\n+        pass\n+    return overall_result\n+\n+The less your threads interact, the less chance there is for bugs, the less\n+need there is for locking to control their interaction, and the less likely\n+they are to slow each other down by invaliding the CPU cache for other\n+threads.\n+\n+Should you use ``prange``?\n+--------------------------\n+\n+Although ``prange`` is the parallelization mechanism *built in* to Cython, it\n+is not the only option, and probably should not be your default option.\n+\n+``prange`` is a fairly thin wrapper over OpenMP's \"parallel for\".  This means\n+it is ideal for problems where you have a big loop, every iteration is basically\n+the same, and the result of each iteration is independent of any other iteration.\n+If this does *not* describe your problem then ``prange`` is probably not the solution.\n+\n+Remember that all the threading options available in Python are also available\n+in Cython.  For example, you can start threads with ``threading.Thread`` or\n+``concurrent.futures.ThreadPoolExecutor``. They are much more flexible than\n+``prange``.  Similarly, the synchronization tools in ``threading.Thread``\n+are also available in Cython.\n+\n+Try to avoid Python code in ``prange``\n+--------------------------------------\n+\n+``prange`` has some slightly unintuitive behaviour about which data is\n+shared and which isn't.  Typically C variables (e.g. ``int``, ``double``) are\n+treated as \"thread-local\" and so each thread has its own copy. However,\n+Python object variables are treated as shared between all the threads.\n+\n+This means that::\n+\n+  cdef int i\n+  cdef int total = 0\n+  for i in cython.parallel.prange(10, nogil=True):\n+    tmp = i**2\n+    total += tmp\n+\n+should work fine - each thread has its own ``tmp`` and ``total`` is\n+a \"reduction\" (so treated in an efficient thread-safe way).  However::\n+\n+  cdef int i\n+  cdef int total = 0\n+  cdef object tmp\n+  for i in cython.parallel.prange(10, nogil=True):\n+    with gil:\n+      tmp = i**2\n+      total += tmp\n+\n+In this case, there is only a single value of ``tmp`` shared between all the threads.\n+They are continuously overwriting each other's values.  Additionally, Cython does not\n+currently ensure that ``tmp`` is even reference-counted in a thread-safe way,\n+so you are at risk of crashes or memory-leaks in addition to getting a nonsense answer.\n+\n+If you do want to work with Python objects, then it is best to move them into\n+a function and just have the loop call the function::\n+\n+  cdef int square(int x):\n+    cdef object tmp = x**2\n+    cdef int result = tmp\n+    return result\n+\n+  # ...\n+\n+  cdef int i\n+  cdef int total = 0\n+  for i in cython.parallel.prange(10, nogil=True):\n+    with gil:\n+      total += square(i)\n+\n+Since ``tmp`` is now local to the function scope, each function call has its own copy\n+and thus there is no conflict of Python objects between threads.\n+\n+Use C++ for low-level synchronization primitives\n+------------------------------------------------\n+\n+When you must have threads interact with each other, you usually need to use\n+special data types to control the access to shared data.  Python provides many of these in the\n+``threading`` module.  However, sometimes it is useful to either:\n+\n+* avoid the Python-call overhead of the threading module,\n+* use atomic variables to update numeric types in a controlled way without locking.\n+\n+For this our recommendation is to use the C++ standard library.  Most of these\n+are available simply by \"cimporting\" from ``libcpp``.  In the event that Cython\n+hasn't already wrapped what you want to use then you can do it yourself - our\n+``libcpp`` is provided for convenience but it does nothing that can't be done\n+with regular Cython code.\n+\n+The C standard library also provides some of these features (e.g. atomic variables\n+and mutexes).  However, compiler support for the C++ standard library is better\n+(in particular for MSVC) and the C++ standard library is more fully featured,\n+so we recommend this first.\n+\n+One difficulty is with types that are not default constructable or moveable\n+(e.g. ``latch``, ``semaphore``, ``barrier``).  These are difficult to\n+stack-allocate because of how Cython's code-genertion works, so you\n+need to heap-allocate them::\n+\n+  from libcpp.latch cimport latch\n+\n+  l = new latch(2)\n+  try:\n+    ...  # use the latch\n+  finally:\n+    del l\n+\n+It is also possible to use C++ to create new threads (for example, using the ``std::jthread``\n+class).  This works, but we generally recommend creating threads through Python\n+instead, mainly because the outermost ``with gil:`` statement in a non-Python\n+created thread will not work reliably with multiple subinterpreters - this recommendation is\n+therefore mainly to future-proofing your code and not restrict where it can\n+be used from.  It is a fairly soft suggestion though, so feel free to ignore",
            "html_url": "https://github.com/cython/cython/pull/6707#discussion_r1990156494",
            "id": 1990156494,
            "in_reply_to_id": 1989445650,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc52n2DO",
            "original_commit_id": "e9caf9887a7cb724bdc8bf60a9af214fed8a7740",
            "original_line": 329,
            "original_position": 170,
            "original_start_line": 325,
            "path": "docs/src/userguide/freethreading.rst",
            "position": null,
            "pull_request_review_id": 2676167461,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6707",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1990156494/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-03-11T21:43:35Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1990156494",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6707#discussion_r1995284404"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6707"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1995284404"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "```suggestion\r\nwith multiple subinterpreters - this recommendation is therefore mainly to future-proof\r\n```",
            "commit_id": "c8f6415dc54f33ce7c7ec40d13ea3a3b6f2b0329",
            "created_at": "2025-03-14T10:12:22Z",
            "diff_hunk": "@@ -323,11 +323,11 @@ need to heap-allocate them::\n \n It is also possible to use C++ to create new threads (for example, using the ``std::jthread``\n class).  This works, but we generally recommend creating threads through Python\n-instead, mainly because the outermost ``with gil:`` statement in a non-Python\n-created thread will not work reliably with multiple subinterpreters - this recommendation is\n-therefore mainly to future-proofing your code and not restrict where it can\n-be used from.  It is a fairly soft suggestion though, so feel free to ignore\n-it if you have good reason to.\n+instead.  For a C++-created thread it's necessary to register them with the interpreter\n+by calling ``with gil:`` before using any Python objects and this will not work reliably\n+with multiple subinterpreters - this recommendation is therefore mainly to future-proofing",
            "html_url": "https://github.com/cython/cython/pull/6707#discussion_r1995284404",
            "id": 1995284404,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc527Z-0",
            "original_commit_id": "4e3fb9a923a3a41ed6fe737c60ba22dca940e9ee",
            "original_line": 328,
            "original_position": 11,
            "original_start_line": null,
            "path": "docs/src/userguide/freethreading.rst",
            "position": null,
            "pull_request_review_id": 2685049109,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6707",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1995284404/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-03-14T10:13:22Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1995284404",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/20306270?v=4",
                "events_url": "https://api.github.com/users/lysnikolaou/events{/privacy}",
                "followers_url": "https://api.github.com/users/lysnikolaou/followers",
                "following_url": "https://api.github.com/users/lysnikolaou/following{/other_user}",
                "gists_url": "https://api.github.com/users/lysnikolaou/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lysnikolaou",
                "id": 20306270,
                "login": "lysnikolaou",
                "node_id": "MDQ6VXNlcjIwMzA2Mjcw",
                "organizations_url": "https://api.github.com/users/lysnikolaou/orgs",
                "received_events_url": "https://api.github.com/users/lysnikolaou/received_events",
                "repos_url": "https://api.github.com/users/lysnikolaou/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lysnikolaou/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lysnikolaou/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lysnikolaou",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6707#discussion_r1995285107"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6707"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1995285107"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "```suggestion\r\naim to support multithreading in those versions (the first free-threaded\r\n```",
            "commit_id": "c8f6415dc54f33ce7c7ec40d13ea3a3b6f2b0329",
            "created_at": "2025-03-14T10:12:58Z",
            "diff_hunk": "@@ -354,13 +354,21 @@ the GIL (on non-freethreading builds) is reading and writing to\n   with cython.critical_section(c_instance):\n     something = c_instance.attr\n \n+The first and most obvious place that both a ``critical_section`` and\n+the GIL can be interrupted is a ``with nogil:`` block.  This is hopefully\n+absolutely obvious for the GIL but it's worth noting that a critical\n+section only applies when the Python thread state is held.\n+\n In principle, both a ``critical_section`` and the GIL can be interrupted\n by executing arbitrary Python code.  Arbitrary Python code can notably\n include the finalizers of any objects being destroyed.  This means that\n reassigning a Python attribute can trigger arbitrary code (but typically\n only after the new value has been put in place).  Additionally, triggering\n-the GC can result in arbitrary code being executed (which means any Python\n-memory allocation can trigger it).\n+the GC can result in arbitrary code being executed. On Python <3.12 any\n+Python memory allocation can trigger the GC so be wary of this if you\n+aim to supprt multithreading in those version (the first free-threaded",
            "html_url": "https://github.com/cython/cython/pull/6707#discussion_r1995285107",
            "id": 1995285107,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc527aJz",
            "original_commit_id": "4e3fb9a923a3a41ed6fe737c60ba22dca940e9ee",
            "original_line": 369,
            "original_position": 35,
            "original_start_line": null,
            "path": "docs/src/userguide/freethreading.rst",
            "position": null,
            "pull_request_review_id": 2685049109,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6707",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1995285107/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-03-16T08:23:03Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1995285107",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/20306270?v=4",
                "events_url": "https://api.github.com/users/lysnikolaou/events{/privacy}",
                "followers_url": "https://api.github.com/users/lysnikolaou/followers",
                "following_url": "https://api.github.com/users/lysnikolaou/following{/other_user}",
                "gists_url": "https://api.github.com/users/lysnikolaou/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lysnikolaou",
                "id": 20306270,
                "login": "lysnikolaou",
                "node_id": "MDQ6VXNlcjIwMzA2Mjcw",
                "organizations_url": "https://api.github.com/users/lysnikolaou/orgs",
                "received_events_url": "https://api.github.com/users/lysnikolaou/received_events",
                "repos_url": "https://api.github.com/users/lysnikolaou/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lysnikolaou/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lysnikolaou/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lysnikolaou",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/cython/cython/issues/6707/comments",
    "commit_data": [
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/7b58b019bcf9d57ce05e1711ec3f329498a40206/comments",
            "commit": {
                "author": {
                    "date": "2025-03-08T10:53:24Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-03-08T11:00:53Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Hints/guidance for thread-safety",
                "tree": {
                    "sha": "0445a88503fd0afbaa04331680faa13f54bc34a9",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/0445a88503fd0afbaa04331680faa13f54bc34a9"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/7b58b019bcf9d57ce05e1711ec3f329498a40206",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/7b58b019bcf9d57ce05e1711ec3f329498a40206",
            "node_id": "C_kwDOAhr4b9oAKDdiNThiMDE5YmNmOWQ1N2NlMDVlMTcxMWVjM2YzMjk0OThhNDAyMDY",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/3eeb059c8c377599d9a6a90717c6438a3ff76eef",
                    "sha": "3eeb059c8c377599d9a6a90717c6438a3ff76eef",
                    "url": "https://api.github.com/repos/cython/cython/commits/3eeb059c8c377599d9a6a90717c6438a3ff76eef"
                }
            ],
            "sha": "7b58b019bcf9d57ce05e1711ec3f329498a40206",
            "url": "https://api.github.com/repos/cython/cython/commits/7b58b019bcf9d57ce05e1711ec3f329498a40206"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/83517554c967876cfeef6b802c685e7411561f35/comments",
            "commit": {
                "author": {
                    "date": "2025-03-08T13:30:19Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-03-08T13:30:19Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Spelling",
                "tree": {
                    "sha": "2a7c7617b4471e3650df12594098d9932b3e9fcf",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/2a7c7617b4471e3650df12594098d9932b3e9fcf"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/83517554c967876cfeef6b802c685e7411561f35",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/83517554c967876cfeef6b802c685e7411561f35",
            "node_id": "C_kwDOAhr4b9oAKDgzNTE3NTU0Yzk2Nzg3NmNmZWVmNmI4MDJjNjg1ZTc0MTE1NjFmMzU",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/7b58b019bcf9d57ce05e1711ec3f329498a40206",
                    "sha": "7b58b019bcf9d57ce05e1711ec3f329498a40206",
                    "url": "https://api.github.com/repos/cython/cython/commits/7b58b019bcf9d57ce05e1711ec3f329498a40206"
                }
            ],
            "sha": "83517554c967876cfeef6b802c685e7411561f35",
            "url": "https://api.github.com/repos/cython/cython/commits/83517554c967876cfeef6b802c685e7411561f35"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/e9caf9887a7cb724bdc8bf60a9af214fed8a7740/comments",
            "commit": {
                "author": {
                    "date": "2025-03-09T09:15:19Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-03-09T09:15:19Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Apply suggestions from code review\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                "tree": {
                    "sha": "4efbfdd7857da5a9f0866f115a5b721fcd5c0466",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/4efbfdd7857da5a9f0866f115a5b721fcd5c0466"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/e9caf9887a7cb724bdc8bf60a9af214fed8a7740",
                "verification": {
                    "payload": "tree 4efbfdd7857da5a9f0866f115a5b721fcd5c0466\nparent 83517554c967876cfeef6b802c685e7411561f35\nauthor da-woods <dw-git@d-woods.co.uk> 1741511719 +0000\ncommitter GitHub <noreply@github.com> 1741511719 +0000\n\nApply suggestions from code review\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJnzVwnCRC1aQ7uu5UhlAAAGkwQAE3kJJpg0d+v9S4kpJQemoHN\n7yO4a8TOgESgfTsQLmvOBhnSAmUjSmVGqHKigAIOUdZ95PGIxp27/irzYz8HDDxT\n9RtexPZBe+wrxTF3zAWB/YTm765aVngTuav4ZSjHwWj8EjpuZeeWLDoMozVHP0wi\nhlL+gtpDhjJZm2UmmXWvX+jIT9xhVAmjDb29AVMYIF/CIbc62bsapatnzhWl4ys1\n/DmG4EWQX78cgSXyekI5ou3QDKYpSNSPIZf1B/L5gCDx1Ov6ZneTWWk1ydVSLCxI\nOGs+KbpaZ/5n5Zn+GMBvOpPJPdZzWHGLfSjIuootAdi5CL6tjn89FILK5a6hGo58\nKONh2EUVAJawlQJ5L7xTM/YKIbxhkn1GeJ+HYt08MNewKpEtUPP92ctFWEhkL4tu\nRnflkBhwj5VHcrqoim2+gvOsXQbBRJD+TwvnM4ULZMvzTfkwuo/m7o/ePYhwiEqj\naXIAFuPrBeuLRSF6jW80W4J62CG3jQgQVeyVgF54Aue94Nm8tws7lFrYnOJsETT/\n/E8wAOH1YkoIkHr279rWfx7gu0o5z60mxAjX6YE/FZZwwbIt6nD2lwyBBy5824x5\nZPJqRRwLgY5jRlDv4KGNgQy0hy/Zw69ojFHGN2FYTQvg3aGwJb1Fn6QdmxmweNq+\nZEIM3pmlMLx3mqApM5VS\n=EAi9\n-----END PGP SIGNATURE-----\n",
                    "verified": true,
                    "verified_at": "2025-03-09T09:20:21Z"
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/e9caf9887a7cb724bdc8bf60a9af214fed8a7740",
            "node_id": "C_kwDOAhr4b9oAKGU5Y2FmOTg4N2E3Y2I3MjRiZGM4YmY2MGE5YWYyMTRmZWQ4YTc3NDA",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/83517554c967876cfeef6b802c685e7411561f35",
                    "sha": "83517554c967876cfeef6b802c685e7411561f35",
                    "url": "https://api.github.com/repos/cython/cython/commits/83517554c967876cfeef6b802c685e7411561f35"
                }
            ],
            "sha": "e9caf9887a7cb724bdc8bf60a9af214fed8a7740",
            "url": "https://api.github.com/repos/cython/cython/commits/e9caf9887a7cb724bdc8bf60a9af214fed8a7740"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/f653f0d5b0dda0df9a119c872fa4a47b3a4e9f38/comments",
            "commit": {
                "author": {
                    "date": "2025-03-11T21:30:30Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-03-11T21:30:30Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Apply suggestions from code review\n\nCo-authored-by: Lysandros Nikolaou <lisandrosnik@gmail.com>",
                "tree": {
                    "sha": "6bab249ade5d57f9cff3fb487b39124d7ec37cdb",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/6bab249ade5d57f9cff3fb487b39124d7ec37cdb"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/f653f0d5b0dda0df9a119c872fa4a47b3a4e9f38",
                "verification": {
                    "payload": "tree 6bab249ade5d57f9cff3fb487b39124d7ec37cdb\nparent e9caf9887a7cb724bdc8bf60a9af214fed8a7740\nauthor da-woods <dw-git@d-woods.co.uk> 1741728630 +0000\ncommitter GitHub <noreply@github.com> 1741728630 +0000\n\nApply suggestions from code review\n\nCo-authored-by: Lysandros Nikolaou <lisandrosnik@gmail.com>",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJn0Kt2CRC1aQ7uu5UhlAAAeH4QAFwVBJQ3uXZJGf+R+EkY4BnC\nthpELbptTS6O5W54AXBeJ08K2l/mCFWnJ7BqAY2DlOQ/Rv9GzZopvkv6ySckWudZ\nyp5A/wejLMZAs2HI1+LgYqYY9Rg4HyxVsAkNK9WUu/dicHRIqCCykKUkZPg0QKmh\nyA05ir9x/bDEk5VYq6IedqrtjG3AwtWM6iadSaH8VQ5Yo13bxr+4OHt8bejnlUje\nHszwZ0cLArwSXSmKvJBH1zT2SrgkaehT8qVSb3Qmj+s8xpjjUEWJeUN4Bn415sKA\nBTqDZtkyevkfXX9ApNSFMs4AF0810p2oiiEHmR9FWgKQIkHjfgg+aGLSWpKUWZE6\nc5JAZS5XaQjTC5igzT2STBd//47sKUeuaZahWGcaycx15rmBheHSxIC2OaG8GLWG\n8iCrIDUm8ay/pHbnRcuYXQ1/lW9OU98UkALnOuzkzU3aaZLz3ecVDJJ2z+9J7o6m\nk2/Y52+mNhnJo7NTWGowtLmGUwDht/KowAKrobYh4iaLWxdj7oOtgjGrrWxE60f7\nJE8RxbFJOnanNl2mrSt4Zsk7iDwCDqnRoavnwk/CY2e5TOfFhRt5A4Mdw9C82Tlt\ntkXoAWdZxfXgbquRMDurUqN3J1DUJ0QuMbPRIwooSJOzQnek7YsmZLtToEpmB8Lz\nxEKRn0y4UgVrywYmgS+M\n=rzvQ\n-----END PGP SIGNATURE-----\n",
                    "verified": true,
                    "verified_at": "2025-03-11T21:35:33Z"
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/f653f0d5b0dda0df9a119c872fa4a47b3a4e9f38",
            "node_id": "C_kwDOAhr4b9oAKGY2NTNmMGQ1YjBkZGEwZGY5YTExOWM4NzJmYTRhNDdiM2E0ZTlmMzg",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/e9caf9887a7cb724bdc8bf60a9af214fed8a7740",
                    "sha": "e9caf9887a7cb724bdc8bf60a9af214fed8a7740",
                    "url": "https://api.github.com/repos/cython/cython/commits/e9caf9887a7cb724bdc8bf60a9af214fed8a7740"
                }
            ],
            "sha": "f653f0d5b0dda0df9a119c872fa4a47b3a4e9f38",
            "url": "https://api.github.com/repos/cython/cython/commits/f653f0d5b0dda0df9a119c872fa4a47b3a4e9f38"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/4e3fb9a923a3a41ed6fe737c60ba22dca940e9ee/comments",
            "commit": {
                "author": {
                    "date": "2025-03-11T21:41:34Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-03-11T21:43:07Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "A bit more detail about the GC",
                "tree": {
                    "sha": "af23763962aadd55b47ca66d645b3039841852f7",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/af23763962aadd55b47ca66d645b3039841852f7"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/4e3fb9a923a3a41ed6fe737c60ba22dca940e9ee",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/4e3fb9a923a3a41ed6fe737c60ba22dca940e9ee",
            "node_id": "C_kwDOAhr4b9oAKDRlM2ZiOWE5MjNhM2E0MWVkNmZlNzM3YzYwYmEyMmRjYTk0MGU5ZWU",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/f653f0d5b0dda0df9a119c872fa4a47b3a4e9f38",
                    "sha": "f653f0d5b0dda0df9a119c872fa4a47b3a4e9f38",
                    "url": "https://api.github.com/repos/cython/cython/commits/f653f0d5b0dda0df9a119c872fa4a47b3a4e9f38"
                }
            ],
            "sha": "4e3fb9a923a3a41ed6fe737c60ba22dca940e9ee",
            "url": "https://api.github.com/repos/cython/cython/commits/4e3fb9a923a3a41ed6fe737c60ba22dca940e9ee"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/abbc1e052acb8dfb734818d30d3d7e1e68c25a67/comments",
            "commit": {
                "author": {
                    "date": "2025-03-16T08:23:23Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-03-16T08:23:23Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Apply suggestions from code review\n\nCo-authored-by: Lysandros Nikolaou <lisandrosnik@gmail.com>",
                "tree": {
                    "sha": "f58bc161c54100c681184ff4a30f22e789274cde",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/f58bc161c54100c681184ff4a30f22e789274cde"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/abbc1e052acb8dfb734818d30d3d7e1e68c25a67",
                "verification": {
                    "payload": "tree f58bc161c54100c681184ff4a30f22e789274cde\nparent 4e3fb9a923a3a41ed6fe737c60ba22dca940e9ee\nauthor da-woods <dw-git@d-woods.co.uk> 1742113403 +0000\ncommitter GitHub <noreply@github.com> 1742113403 +0000\n\nApply suggestions from code review\n\nCo-authored-by: Lysandros Nikolaou <lisandrosnik@gmail.com>",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJn1op8CRC1aQ7uu5UhlAAAQ8wQAFQNqdOiHizYNcij01dCCH/B\nLQUElt8XnjHgo0ylFFabSn7wnkmFJllmG0ORoMkxeIy/tT65bs9Tk22OrH1hxoMC\nJ4C/pJmvWJ5P9tdvNftjfvIJ4F/pglM+NNpq2Vji5NVLpy5RJ+F//LSFGbeAcbhF\n1f13pP1Hwp5+pStpxreD/Qmzck6dnQrl13BANblLY8UUi0kDT9qQg1Aj4l79Iqu1\nrxhlDZepw7vxagmE1xow5hyW2y9ea3OSHXNbB+MnKyW0DmDKhnKKBOP8XPbSEZtK\nZC9jdLm3hjMv/um6jgBghACBGi9+ByWEUxbTFMHAvSz16eoMy54v52ugQAWKed2K\nXOvYrRv++9ltJBiNdXf+TxEjXYjiNqTDyxoqqJumlDPHFVdR3YDbLODAHvf4dsKm\nAUCNchXtmN5Uhdw55HzXHV1f1fOv/oNMUcp5TTjdIauIT4Brz1gY/DtaVcjf+/qK\njTBGUr17fnP3t0BQpwFMitK0rfxckWaHUdTV2FqlCm9L1eoFvZ2J4lK4NHdgs3To\nknBAq8rgQwGVcGEVG6uSMrTijbRM8/DR2Xnol8yhqzhInbU9OC1V68rI275foP+M\nDLhZbE2CxbdebBrCG1qxWRDa14d4R49AA9kCY9IK4sa1Or/ZzKpAV54CC2XUaioI\nvP9wBWyYGDyk+JS/Vvs5\n=lsOB\n-----END PGP SIGNATURE-----\n",
                    "verified": true,
                    "verified_at": "2025-03-16T08:23:30Z"
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/abbc1e052acb8dfb734818d30d3d7e1e68c25a67",
            "node_id": "C_kwDOAhr4b9oAKGFiYmMxZTA1MmFjYjhkZmI3MzQ4MThkMzBkM2Q3ZTFlNjhjMjVhNjc",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/4e3fb9a923a3a41ed6fe737c60ba22dca940e9ee",
                    "sha": "4e3fb9a923a3a41ed6fe737c60ba22dca940e9ee",
                    "url": "https://api.github.com/repos/cython/cython/commits/4e3fb9a923a3a41ed6fe737c60ba22dca940e9ee"
                }
            ],
            "sha": "abbc1e052acb8dfb734818d30d3d7e1e68c25a67",
            "url": "https://api.github.com/repos/cython/cython/commits/abbc1e052acb8dfb734818d30d3d7e1e68c25a67"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/c8f6415dc54f33ce7c7ec40d13ea3a3b6f2b0329/comments",
            "commit": {
                "author": {
                    "date": "2025-03-16T08:23:37Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-03-16T08:23:37Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Merge branch 'master' into free-threaded-guidance",
                "tree": {
                    "sha": "2e1f984044b24ae69c283a580a84589186be957d",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/2e1f984044b24ae69c283a580a84589186be957d"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/c8f6415dc54f33ce7c7ec40d13ea3a3b6f2b0329",
                "verification": {
                    "payload": "tree 2e1f984044b24ae69c283a580a84589186be957d\nparent abbc1e052acb8dfb734818d30d3d7e1e68c25a67\nparent 44cfc99a74c9758ff495fc6851f274a959d31b3a\nauthor da-woods <dw-git@d-woods.co.uk> 1742113417 +0000\ncommitter GitHub <noreply@github.com> 1742113417 +0000\n\nMerge branch 'master' into free-threaded-guidance",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJn1oqJCRC1aQ7uu5UhlAAAMkAQAF1TvW6SHvVdXr2lLK1uK19a\nmYrVUEOs3MlUwHe5KXnL27g5363zusXFdsHooC7F2j9LqWJkkgTjObGWof5jTTbt\nQnkWGMtEi011I2kEBWZU0qvRLTVTwhmE+XubTNeL8hmWiIwlJPGebdRYM2GiQDWm\nvFFeL6x4RYxm3pEoGGz+qAQBkH//UVrQ/FZM/ZKZDpd9OPAxiOXz+QGJSPVJ+kqU\neEzHC5DqhLdY/aaqmDJwGI8z6wzrBzglIMYCkwoz1nm7jyePHOZt8YLsdqLwnc2l\n7Q94t50Ilp+qgAzjPt22qKLDhRdU9DX/pRYNHlc+7v2Ss+3I/+q9JYLL0ubO5dcE\ntJ1m5o34NaT0/zfLthbRqrhE1kxzn9Rw84KO3Ud8JF5jXuC16tAhrjIKmJ5zXiPE\nQDzzcE9NhFg5fBu2kWYcjTJgK/yR2FpWbXMuVay484kq39BWcjBlGz2rXPYSh3WW\nS5BOeFJlswYGBrO2QU4tKiI+LPI0lrYHmPYs/aCJFjfzkTEyz52vLrvTHNSAYyoy\nOmNDQEGyiRkEPATkWAw2ykYe4zysT3zr/FjttNhLXaSSMXMNh9h/LU0ZrVwCNhiV\nDuwWRajqP04aXVtZkl4jDcR6I2/QQhD6Aa2xDfQjg+d8oKd3beNE2YShf8XuKqWn\nVzjO5pz7hTHDD41MxBQw\n=2tpz\n-----END PGP SIGNATURE-----\n",
                    "verified": true,
                    "verified_at": "2025-03-16T08:23:40Z"
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/c8f6415dc54f33ce7c7ec40d13ea3a3b6f2b0329",
            "node_id": "C_kwDOAhr4b9oAKGM4ZjY0MTVkYzU0ZjMzY2U3YzdlYzQwZDEzZWEzYTNiNmYyYjAzMjk",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/abbc1e052acb8dfb734818d30d3d7e1e68c25a67",
                    "sha": "abbc1e052acb8dfb734818d30d3d7e1e68c25a67",
                    "url": "https://api.github.com/repos/cython/cython/commits/abbc1e052acb8dfb734818d30d3d7e1e68c25a67"
                },
                {
                    "html_url": "https://github.com/cython/cython/commit/44cfc99a74c9758ff495fc6851f274a959d31b3a",
                    "sha": "44cfc99a74c9758ff495fc6851f274a959d31b3a",
                    "url": "https://api.github.com/repos/cython/cython/commits/44cfc99a74c9758ff495fc6851f274a959d31b3a"
                }
            ],
            "sha": "c8f6415dc54f33ce7c7ec40d13ea3a3b6f2b0329",
            "url": "https://api.github.com/repos/cython/cython/commits/c8f6415dc54f33ce7c7ec40d13ea3a3b6f2b0329"
        }
    ],
    "commits_url": "https://api.github.com/repos/cython/cython/pulls/6707/commits",
    "created_at": "2025-03-08T11:01:21Z",
    "diff_url": "https://github.com/cython/cython/pull/6707.diff",
    "draft": false,
    "head": {
        "label": "da-woods:free-threaded-guidance",
        "ref": "free-threaded-guidance",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/da-woods/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/da-woods/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/da-woods/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/da-woods/cython/branches{/branch}",
            "clone_url": "https://github.com/da-woods/cython.git",
            "collaborators_url": "https://api.github.com/repos/da-woods/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/da-woods/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/da-woods/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/da-woods/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/da-woods/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/da-woods/cython/contributors",
            "created_at": "2015-05-09T08:55:00Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/da-woods/cython/deployments",
            "description": "A Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/da-woods/cython/downloads",
            "events_url": "https://api.github.com/repos/da-woods/cython/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/da-woods/cython/forks",
            "full_name": "da-woods/cython",
            "git_commits_url": "https://api.github.com/repos/da-woods/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/da-woods/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/da-woods/cython/git/tags{/sha}",
            "git_url": "git://github.com/da-woods/cython.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "http://cython.org",
            "hooks_url": "https://api.github.com/repos/da-woods/cython/hooks",
            "html_url": "https://github.com/da-woods/cython",
            "id": 35321967,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/da-woods/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/da-woods/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/da-woods/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/da-woods/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/da-woods/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/da-woods/cython/languages",
            "license": {
                "key": "apache-2.0",
                "name": "Apache License 2.0",
                "node_id": "MDc6TGljZW5zZTI=",
                "spdx_id": "Apache-2.0",
                "url": "https://api.github.com/licenses/apache-2.0"
            },
            "merges_url": "https://api.github.com/repos/da-woods/cython/merges",
            "milestones_url": "https://api.github.com/repos/da-woods/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkzNTMyMTk2Nw==",
            "notifications_url": "https://api.github.com/repos/da-woods/cython/notifications{?since,all,participating}",
            "open_issues": 2,
            "open_issues_count": 2,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/da-woods/cython/pulls{/number}",
            "pushed_at": "2025-03-16T14:33:44Z",
            "releases_url": "https://api.github.com/repos/da-woods/cython/releases{/id}",
            "size": 78957,
            "ssh_url": "git@github.com:da-woods/cython.git",
            "stargazers_count": 2,
            "stargazers_url": "https://api.github.com/repos/da-woods/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/da-woods/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/da-woods/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/da-woods/cython/subscription",
            "svn_url": "https://github.com/da-woods/cython",
            "tags_url": "https://api.github.com/repos/da-woods/cython/tags",
            "teams_url": "https://api.github.com/repos/da-woods/cython/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/da-woods/cython/git/trees{/sha}",
            "updated_at": "2025-03-12T23:15:39Z",
            "url": "https://api.github.com/repos/da-woods/cython",
            "visibility": "public",
            "watchers": 2,
            "watchers_count": 2,
            "web_commit_signoff_required": false
        },
        "sha": "c8f6415dc54f33ce7c7ec40d13ea3a3b6f2b0329",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
            "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
            "followers_url": "https://api.github.com/users/da-woods/followers",
            "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
            "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/da-woods",
            "id": 10536947,
            "login": "da-woods",
            "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
            "organizations_url": "https://api.github.com/users/da-woods/orgs",
            "received_events_url": "https://api.github.com/users/da-woods/received_events",
            "repos_url": "https://api.github.com/users/da-woods/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/da-woods",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/cython/cython/pull/6707",
    "id": 2380137624,
    "issue_url": "https://api.github.com/repos/cython/cython/issues/6707",
    "labels": [
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425561345,
            "name": "Documentation",
            "node_id": "MDU6TGFiZWw0MjU1NjEzNDU=",
            "url": "https://api.github.com/repos/cython/cython/labels/Documentation"
        },
        {
            "color": "A37CC3",
            "default": false,
            "description": "",
            "id": 6871764375,
            "name": "freethreading CPython",
            "node_id": "LA_kwDOABDGAc8AAAABmZbNlw",
            "url": "https://api.github.com/repos/cython/cython/labels/freethreading%20CPython"
        }
    ],
    "locked": false,
    "merge_commit_sha": "cc604a0fbae9e75e789b1f6ef845caa29f026e6b",
    "merged_at": "2025-03-16T13:18:10Z",
    "milestone": null,
    "node_id": "PR_kwDOABDGAc6N3gSY",
    "number": 6707,
    "patch_url": "https://github.com/cython/cython/pull/6707.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/cython/cython/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/cython/cython/pulls/6707/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/cython/cython/statuses/c8f6415dc54f33ce7c7ec40d13ea3a3b6f2b0329",
    "title": "Hints/guidance for thread-safety",
    "updated_at": "2025-03-16T14:31:04Z",
    "url": "https://api.github.com/repos/cython/cython/pulls/6707",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
        "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
        "followers_url": "https://api.github.com/users/da-woods/followers",
        "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
        "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/da-woods",
        "id": 10536947,
        "login": "da-woods",
        "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
        "organizations_url": "https://api.github.com/users/da-woods/orgs",
        "received_events_url": "https://api.github.com/users/da-woods/received_events",
        "repos_url": "https://api.github.com/users/da-woods/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/da-woods",
        "user_view_type": "public"
    }
}