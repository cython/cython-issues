{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/cython/cython/issues/4516/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/cython/cython/pulls/4516/commits"
        },
        "html": {
            "href": "https://github.com/cython/cython/pull/4516"
        },
        "issue": {
            "href": "https://api.github.com/repos/cython/cython/issues/4516"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/cython/cython/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/cython/cython/pulls/4516/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/cython/cython/pulls/4516"
        },
        "statuses": {
            "href": "https://api.github.com/repos/cython/cython/statuses/3bf11b6646e211e83492646801925fed432c8736"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "cython:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/cython/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/cython/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/cython/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/cython/cython/branches{/branch}",
            "clone_url": "https://github.com/cython/cython.git",
            "collaborators_url": "https://api.github.com/repos/cython/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/cython/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/cython/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/cython/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/cython/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/cython/cython/contributors",
            "created_at": "2010-11-21T07:44:20Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/cython/cython/deployments",
            "description": "The most widely used Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/cython/cython/downloads",
            "events_url": "https://api.github.com/repos/cython/cython/events",
            "fork": false,
            "forks": 1239,
            "forks_count": 1239,
            "forks_url": "https://api.github.com/repos/cython/cython/forks",
            "full_name": "cython/cython",
            "git_commits_url": "https://api.github.com/repos/cython/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/cython/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/cython/cython/git/tags{/sha}",
            "git_url": "git://github.com/cython/cython.git",
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://cython.org",
            "hooks_url": "https://api.github.com/repos/cython/cython/hooks",
            "html_url": "https://github.com/cython/cython",
            "id": 1099265,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/cython/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/cython/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/cython/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/cython/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/cython/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/cython/cython/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/cython/cython/merges",
            "milestones_url": "https://api.github.com/repos/cython/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkxMDk5MjY1",
            "notifications_url": "https://api.github.com/repos/cython/cython/notifications{?since,all,participating}",
            "open_issues": 1030,
            "open_issues_count": 1030,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/486082?v=4",
                "events_url": "https://api.github.com/users/cython/events{/privacy}",
                "followers_url": "https://api.github.com/users/cython/followers",
                "following_url": "https://api.github.com/users/cython/following{/other_user}",
                "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/cython",
                "id": 486082,
                "login": "cython",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
                "organizations_url": "https://api.github.com/users/cython/orgs",
                "received_events_url": "https://api.github.com/users/cython/received_events",
                "repos_url": "https://api.github.com/users/cython/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/cython"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/cython/cython/pulls{/number}",
            "pushed_at": "2022-02-06T13:29:02Z",
            "releases_url": "https://api.github.com/repos/cython/cython/releases{/id}",
            "size": 65175,
            "ssh_url": "git@github.com:cython/cython.git",
            "stargazers_count": 6771,
            "stargazers_url": "https://api.github.com/repos/cython/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/cython/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/cython/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/cython/cython/subscription",
            "svn_url": "https://github.com/cython/cython",
            "tags_url": "https://api.github.com/repos/cython/cython/tags",
            "teams_url": "https://api.github.com/repos/cython/cython/teams",
            "topics": [
                "big-data",
                "c",
                "cpp",
                "cpython",
                "cpython-extensions",
                "cython",
                "performance",
                "python"
            ],
            "trees_url": "https://api.github.com/repos/cython/cython/git/trees{/sha}",
            "updated_at": "2022-02-06T14:07:34Z",
            "url": "https://api.github.com/repos/cython/cython",
            "visibility": "public",
            "watchers": 6771,
            "watchers_count": 6771
        },
        "sha": "2c7c53b4c7719b390e6c62ad945e0b27ef3551f4",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/486082?v=4",
            "events_url": "https://api.github.com/users/cython/events{/privacy}",
            "followers_url": "https://api.github.com/users/cython/followers",
            "following_url": "https://api.github.com/users/cython/following{/other_user}",
            "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/cython",
            "id": 486082,
            "login": "cython",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
            "organizations_url": "https://api.github.com/users/cython/orgs",
            "received_events_url": "https://api.github.com/users/cython/received_events",
            "repos_url": "https://api.github.com/users/cython/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/cython"
        }
    },
    "body": "Part of #4187.\r\n",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4516#discussion_r775176074"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4516"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/775176074"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n\r\n\r\n```",
            "commit_id": "3bf11b6646e211e83492646801925fed432c8736",
            "created_at": "2021-12-25T22:44:42Z",
            "diff_hunk": "@@ -0,0 +1,11 @@\n+cimport cython\n+",
            "html_url": "https://github.com/cython/cython/pull/4516#discussion_r775176074",
            "id": 775176074,
            "line": 2,
            "node_id": "PRRC_kwDOABDGAc4uND-K",
            "original_commit_id": "474473c1b025911ddd9ad4d9e699da25b560f460",
            "original_line": 2,
            "original_position": 2,
            "original_start_line": null,
            "path": "docs/examples/userguide/extension_types/penguin2.pyx",
            "position": 2,
            "pull_request_review_id": 840040845,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4516",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/775176074/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-12-25T22:50:11Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/775176074",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4516#discussion_r798803801"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4516"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/798803801"
                }
            },
            "author_association": "COLLABORATOR",
            "body": "This sentence doesn't quite seem complete.",
            "commit_id": "3bf11b6646e211e83492646801925fed432c8736",
            "created_at": "2022-02-03T17:26:10Z",
            "diff_hunk": "@@ -291,28 +291,36 @@ extension type and its C-level attributes (stored in object’s C struct.) and\n Extension types and None\n =========================\n \n-When you declare a parameter or C variable as being of an extension type,\n-Cython will allow it to take on the value ``None`` as well as values of its\n+Cython handles :keyword:`None` values differently in Cython language and when annotations are used.\n+\n+In the Cython language, when you declare a parameter or C variable as being of an extension type,\n+Cython language will allow it to take on the value :keyword:`None` as well as values of its\n declared type. This is analogous to the way a C pointer can take on the value\n ``NULL``, and you need to exercise the same caution because of it. There is no\n problem as long as you are performing Python operations on it, because full\n dynamic type checking will be applied. However, when you access C attributes\n of an extension type (as in the widen_shrubbery function above), it's up to\n-you to make sure the reference you're using is not ``None`` -- in the\n+you to make sure the reference you're using is not :keyword:`None` -- in the\n interests of efficiency, Cython does not check this.\n \n-You need to be particularly careful when exposing Python functions which take\n-extension types as arguments. If we wanted to make :func:`widen_shrubbery` a\n-Python function, for example, if we simply wrote\n+When annotations are used, the behaviour is close to `PEP-484 <https://www.python.org/dev/peps/pep-0484/>`_.\n+The value :keyword:`None` is not allowed when variable is annotated only by type. To allow also :keyword:`None` value,\n+``typing.Optional`` must be used.\n+\n+In the Cython language, you need to be particularly careful when exposing Python functions which take",
            "html_url": "https://github.com/cython/cython/pull/4516#discussion_r798803801",
            "id": 798803801,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc4vnMdZ",
            "original_commit_id": "2ab987b0591081db223379cd40d5b009a8329b15",
            "original_line": 310,
            "original_position": 26,
            "original_start_line": null,
            "path": "docs/src/userguide/extension_types.rst",
            "position": null,
            "pull_request_review_id": 872182539,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4516",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/798803801/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-02-03T17:26:10Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/798803801",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4516#discussion_r798804750"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4516"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/798804750"
                }
            },
            "author_association": "COLLABORATOR",
            "body": "I think line 312 just needs moving up a line",
            "commit_id": "3bf11b6646e211e83492646801925fed432c8736",
            "created_at": "2022-02-03T17:27:14Z",
            "diff_hunk": "@@ -291,28 +291,36 @@ extension type and its C-level attributes (stored in object’s C struct.) and\n Extension types and None\n =========================\n \n-When you declare a parameter or C variable as being of an extension type,\n-Cython will allow it to take on the value ``None`` as well as values of its\n+Cython handles :keyword:`None` values differently in Cython language and when annotations are used.\n+\n+In the Cython language, when you declare a parameter or C variable as being of an extension type,\n+Cython language will allow it to take on the value :keyword:`None` as well as values of its\n declared type. This is analogous to the way a C pointer can take on the value\n ``NULL``, and you need to exercise the same caution because of it. There is no\n problem as long as you are performing Python operations on it, because full\n dynamic type checking will be applied. However, when you access C attributes\n of an extension type (as in the widen_shrubbery function above), it's up to\n-you to make sure the reference you're using is not ``None`` -- in the\n+you to make sure the reference you're using is not :keyword:`None` -- in the\n interests of efficiency, Cython does not check this.\n \n-You need to be particularly careful when exposing Python functions which take\n-extension types as arguments. If we wanted to make :func:`widen_shrubbery` a\n-Python function, for example, if we simply wrote\n+When annotations are used, the behaviour is close to `PEP-484 <https://www.python.org/dev/peps/pep-0484/>`_.\n+The value :keyword:`None` is not allowed when variable is annotated only by type. To allow also :keyword:`None` value,\n+``typing.Optional`` must be used.\n+\n+In the Cython language, you need to be particularly careful when exposing Python functions which take",
            "html_url": "https://github.com/cython/cython/pull/4516#discussion_r798804750",
            "id": 798804750,
            "in_reply_to_id": 798803801,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc4vnMsO",
            "original_commit_id": "2ab987b0591081db223379cd40d5b009a8329b15",
            "original_line": 310,
            "original_position": 26,
            "original_start_line": null,
            "path": "docs/src/userguide/extension_types.rst",
            "position": null,
            "pull_request_review_id": 872183857,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4516",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/798804750/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-02-03T17:27:14Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/798804750",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4516#discussion_r799354712"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4516"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/799354712"
                }
            },
            "author_association": "MEMBER",
            "body": "I think we should generally try to present \"easy to maintain\" spellings in code that we show to users. It might stick in the end.\r\n```suggestion\r\n    b = cython.int,\r\n)\r\n```",
            "commit_id": "3bf11b6646e211e83492646801925fed432c8736",
            "created_at": "2022-02-04T10:44:14Z",
            "diff_hunk": "@@ -0,0 +1,59 @@\n+import cython\n+from cython.cimports.libc.stdlib import malloc, free\n+\n+# Example C struct\n+my_c_struct = cython.struct(\n+    a = cython.int,\n+    b = cython.int)",
            "html_url": "https://github.com/cython/cython/pull/4516#discussion_r799354712",
            "id": 799354712,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc4vpS9Y",
            "original_commit_id": "2ab987b0591081db223379cd40d5b009a8329b15",
            "original_line": 7,
            "original_position": 7,
            "original_start_line": null,
            "path": "docs/examples/userguide/extension_types/wrapper_class.py",
            "position": null,
            "pull_request_review_id": 872932473,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4516",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/799354712/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-02-04T12:51:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/799354712",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4516#discussion_r799357181"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4516"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/799357181"
                }
            },
            "author_association": "MEMBER",
            "body": "This is a funny claim to make in a class that previously had no `__init__` constructor. :)\r\n```suggestion\r\n        # Fast call to __new__() that bypasses the __init__() constructor.\r\n```",
            "commit_id": "3bf11b6646e211e83492646801925fed432c8736",
            "created_at": "2022-02-04T10:47:31Z",
            "diff_hunk": "@@ -0,0 +1,59 @@\n+import cython\n+from cython.cimports.libc.stdlib import malloc, free\n+\n+# Example C struct\n+my_c_struct = cython.struct(\n+    a = cython.int,\n+    b = cython.int)\n+\n+@cython.cclass\n+class WrapperClass:\n+    \"\"\"A wrapper class for a C/C++ data structure\"\"\"\n+    _ptr: cython.pointer(my_c_struct)\n+    ptr_owner: cython.bint\n+\n+    def __cinit__(self):\n+        self.ptr_owner = False\n+\n+    def __dealloc__(self):\n+        # De-allocate if not null and flag is set\n+        if self._ptr is not cython.NULL and self.ptr_owner is True:\n+            free(self._ptr)\n+            self._ptr = cython.NULL\n+\n+    # Extension class properties\n+    @property\n+    def a(self):\n+        return self._ptr.a if self._ptr is not cython.NULL else None\n+\n+    @property\n+    def b(self):\n+        return self._ptr.b if self._ptr is not cython.NULL else None\n+\n+    @staticmethod\n+    @cython.cfunc\n+    def from_ptr(_ptr: cython.pointer(my_c_struct), owner: cython.bint=False) -> WrapperClass:\n+        \"\"\"Factory function to create WrapperClass objects from\n+        given my_c_struct pointer.\n+\n+        Setting ``owner`` flag to ``True`` causes\n+        the extension type to ``free`` the structure pointed to by ``_ptr``\n+        when the wrapper object is deallocated.\"\"\"\n+        # Call to __new__ bypasses __init__ constructor",
            "html_url": "https://github.com/cython/cython/pull/4516#discussion_r799357181",
            "id": 799357181,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc4vpTj9",
            "original_commit_id": "2ab987b0591081db223379cd40d5b009a8329b15",
            "original_line": 42,
            "original_position": 42,
            "original_start_line": null,
            "path": "docs/examples/userguide/extension_types/wrapper_class.py",
            "position": null,
            "pull_request_review_id": 872932473,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4516",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/799357181/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-02-04T12:51:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/799357181",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4516#discussion_r799357404"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4516"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/799357404"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n        # Fast call to __new__() that bypasses the __init__() constructor.\r\n```",
            "commit_id": "3bf11b6646e211e83492646801925fed432c8736",
            "created_at": "2022-02-04T10:47:49Z",
            "diff_hunk": "@@ -0,0 +1,59 @@\n+ \n+from libc.stdlib cimport malloc, free\n+\n+# Example C struct\n+ctypedef struct my_c_struct:\n+    int a\n+    int b\n+\n+\n+cdef class WrapperClass:\n+    \"\"\"A wrapper class for a C/C++ data structure\"\"\"\n+    cdef my_c_struct *_ptr\n+    cdef bint ptr_owner\n+\n+    def __cinit__(self):\n+        self.ptr_owner = False\n+\n+    def __dealloc__(self):\n+        # De-allocate if not null and flag is set\n+        if self._ptr is not NULL and self.ptr_owner is True:\n+            free(self._ptr)\n+            self._ptr = NULL\n+\n+    # Extension class properties\n+    @property\n+    def a(self):\n+        return self._ptr.a if self._ptr is not NULL else None\n+\n+    @property\n+    def b(self):\n+        return self._ptr.b if self._ptr is not NULL else None\n+\n+\n+    @staticmethod\n+    cdef WrapperClass from_ptr(my_c_struct *_ptr, bint owner=False):\n+        \"\"\"Factory function to create WrapperClass objects from\n+        given my_c_struct pointer.\n+\n+        Setting ``owner`` flag to ``True`` causes\n+        the extension type to ``free`` the structure pointed to by ``_ptr``\n+        when the wrapper object is deallocated.\"\"\"\n+        # Call to __new__ bypasses __init__ constructor",
            "html_url": "https://github.com/cython/cython/pull/4516#discussion_r799357404",
            "id": 799357404,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc4vpTnc",
            "original_commit_id": "2ab987b0591081db223379cd40d5b009a8329b15",
            "original_line": 42,
            "original_position": 42,
            "original_start_line": null,
            "path": "docs/examples/userguide/extension_types/wrapper_class.pyx",
            "position": null,
            "pull_request_review_id": 872932473,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4516",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/799357404/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-02-04T12:51:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/799357404",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4516#discussion_r799363556"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4516"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/799363556"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n\r\n    def __init__(self):\r\n        # Prevent accidental instantiation from normal Python code\r\n        # since we cannot pass a struct pointer into a Python constructor.\r\n        raise TypeError(\"This class cannot be instantiated directly.\")\r\n\r\n```",
            "commit_id": "3bf11b6646e211e83492646801925fed432c8736",
            "created_at": "2022-02-04T10:56:24Z",
            "diff_hunk": "@@ -0,0 +1,59 @@\n+import cython\n+from cython.cimports.libc.stdlib import malloc, free\n+\n+# Example C struct\n+my_c_struct = cython.struct(\n+    a = cython.int,\n+    b = cython.int)\n+\n+@cython.cclass\n+class WrapperClass:\n+    \"\"\"A wrapper class for a C/C++ data structure\"\"\"\n+    _ptr: cython.pointer(my_c_struct)\n+    ptr_owner: cython.bint\n+\n+    def __cinit__(self):\n+        self.ptr_owner = False\n+\n+    def __dealloc__(self):\n+        # De-allocate if not null and flag is set\n+        if self._ptr is not cython.NULL and self.ptr_owner is True:\n+            free(self._ptr)\n+            self._ptr = cython.NULL\n+",
            "html_url": "https://github.com/cython/cython/pull/4516#discussion_r799363556",
            "id": 799363556,
            "line": 24,
            "node_id": "PRRC_kwDOABDGAc4vpVHk",
            "original_commit_id": "2ab987b0591081db223379cd40d5b009a8329b15",
            "original_line": 23,
            "original_position": 23,
            "original_start_line": null,
            "path": "docs/examples/userguide/extension_types/wrapper_class.py",
            "position": 24,
            "pull_request_review_id": 872932473,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4516",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/799363556/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-02-04T12:52:02Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/799363556",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4516#discussion_r799363678"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4516"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/799363678"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n\r\n    def __init__(self):\r\n        # Prevent accidental instantiation from normal Python code\r\n        # since we cannot pass a struct pointer into a Python constructor.\r\n        raise TypeError(\"This class cannot be instantiated directly.\")\r\n\r\n```",
            "commit_id": "3bf11b6646e211e83492646801925fed432c8736",
            "created_at": "2022-02-04T10:56:34Z",
            "diff_hunk": "@@ -0,0 +1,59 @@\n+ \n+from libc.stdlib cimport malloc, free\n+\n+# Example C struct\n+ctypedef struct my_c_struct:\n+    int a\n+    int b\n+\n+\n+cdef class WrapperClass:\n+    \"\"\"A wrapper class for a C/C++ data structure\"\"\"\n+    cdef my_c_struct *_ptr\n+    cdef bint ptr_owner\n+\n+    def __cinit__(self):\n+        self.ptr_owner = False\n+\n+    def __dealloc__(self):\n+        # De-allocate if not null and flag is set\n+        if self._ptr is not NULL and self.ptr_owner is True:\n+            free(self._ptr)\n+            self._ptr = NULL\n+",
            "html_url": "https://github.com/cython/cython/pull/4516#discussion_r799363678",
            "id": 799363678,
            "line": 23,
            "node_id": "PRRC_kwDOABDGAc4vpVJe",
            "original_commit_id": "2ab987b0591081db223379cd40d5b009a8329b15",
            "original_line": 23,
            "original_position": 23,
            "original_start_line": null,
            "path": "docs/examples/userguide/extension_types/wrapper_class.pyx",
            "position": 23,
            "pull_request_review_id": 872932473,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4516",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/799363678/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-02-04T12:52:14Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/799363678",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4516#discussion_r799364610"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4516"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/799364610"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nstatement or decorating the class with the ``@cclass`` decorator.  Here's an example:\r\n```",
            "commit_id": "3bf11b6646e211e83492646801925fed432c8736",
            "created_at": "2022-02-04T10:57:57Z",
            "diff_hunk": "@@ -9,20 +9,55 @@ Extension Types\n Introduction\n ==============\n \n+.. include::\n+    ../two-syntax-variants-used\n+\n As well as creating normal user-defined classes with the Python class\n statement, Cython also lets you create new built-in Python types, known as\n :term:`extension types<Extension type>`. You define an extension type using the :keyword:`cdef` class\n-statement.  Here's an example:\n+statement or decorating the class with ``@cclass`` decorator.  Here's an example:",
            "html_url": "https://github.com/cython/cython/pull/4516#discussion_r799364610",
            "id": 799364610,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc4vpVYC",
            "original_commit_id": "2ab987b0591081db223379cd40d5b009a8329b15",
            "original_line": 18,
            "original_position": 11,
            "original_start_line": null,
            "path": "docs/src/userguide/extension_types.rst",
            "position": null,
            "pull_request_review_id": 872932473,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4516",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/799364610/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-02-04T12:51:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/799364610",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4516#discussion_r799365647"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4516"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/799365647"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n* the annotation of an attribute name.\r\n```",
            "commit_id": "3bf11b6646e211e83492646801925fed432c8736",
            "created_at": "2022-02-04T10:59:27Z",
            "diff_hunk": "@@ -9,20 +9,55 @@ Extension Types\n Introduction\n ==============\n \n+.. include::\n+    ../two-syntax-variants-used\n+\n As well as creating normal user-defined classes with the Python class\n statement, Cython also lets you create new built-in Python types, known as\n :term:`extension types<Extension type>`. You define an extension type using the :keyword:`cdef` class\n-statement.  Here's an example:\n+statement or decorating the class with ``@cclass`` decorator.  Here's an example:\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n \n-.. literalinclude:: ../../examples/userguide/extension_types/shrubbery.pyx\n+        .. literalinclude:: ../../examples/userguide/extension_types/shrubbery.py\n+\n+    .. group-tab:: Cython\n+\n+        .. literalinclude:: ../../examples/userguide/extension_types/shrubbery.pyx\n \n As you can see, a Cython extension type definition looks a lot like a Python\n-class definition. Within it, you use the def statement to define methods that\n+class definition. Within it, you use the :keyword:`def` statement to define methods that\n can be called from Python code. You can even define many of the special\n methods such as :meth:`__init__` as you would in Python.\n \n-The main difference is that you can use the :keyword:`cdef` statement to define\n-attributes. The attributes may be Python objects (either generic or of a\n+The main difference is that you can define attributes using\n+\n+* the :keyword:`cdef` statement,\n+* the :func:`cython.declare()` function or\n+* the annotation of attribute.",
            "html_url": "https://github.com/cython/cython/pull/4516#discussion_r799365647",
            "id": 799365647,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc4vpVoP",
            "original_commit_id": "2ab987b0591081db223379cd40d5b009a8329b15",
            "original_line": 39,
            "original_position": 36,
            "original_start_line": null,
            "path": "docs/src/userguide/extension_types.rst",
            "position": null,
            "pull_request_review_id": 872932473,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4516",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/799365647/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-02-04T12:51:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/799365647",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4516#discussion_r799368730"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4516"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/799368730"
                }
            },
            "author_association": "MEMBER",
            "body": "Setting related words too far apart in a sentence makes it difficult to understand.\r\n```suggestion\r\n    Here, we *cimport* the class :class:`Shrubbery` (using the :keyword:`cimport` statement\r\n    or importing from special ``cython.cimports`` package) , and this is necessary\r\n```",
            "commit_id": "3bf11b6646e211e83492646801925fed432c8736",
            "created_at": "2022-02-04T11:03:52Z",
            "diff_hunk": "@@ -107,18 +181,35 @@ will be very inefficient. If the attribute is private, it will not work at all\n The solution is to declare ``sh`` as being of type :class:`Shrubbery`, as\n follows:\n \n-.. literalinclude:: ../../examples/userguide/extension_types/widen_shrubbery.pyx\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. literalinclude:: ../../examples/userguide/extension_types/widen_shrubbery.py\n+\n+    .. group-tab:: Cython\n+\n+        .. literalinclude:: ../../examples/userguide/extension_types/widen_shrubbery.pyx\n \n Now the Cython compiler knows that ``sh`` has a C attribute called\n :attr:`width` and will generate code to access it directly and efficiently.\n The same consideration applies to local variables, for example:\n \n-.. literalinclude:: ../../examples/userguide/extension_types/shrubbery_2.pyx\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. literalinclude:: ../../examples/userguide/extension_types/shrubbery_2.py\n+\n+    .. group-tab:: Cython\n+\n+        .. literalinclude:: ../../examples/userguide/extension_types/shrubbery_2.pyx\n \n .. note::\n \n-    We here ``cimport`` the class :class:`Shrubbery`, and this is necessary\n-    to declare the type at compile time. To be able to ``cimport`` an extension type,\n+    We here *cimport* (using :keyword:`cimport` statement or importing from special\n+    ``cython.cimports`` package) the class :class:`Shrubbery`, and this is necessary",
            "html_url": "https://github.com/cython/cython/pull/4516#discussion_r799368730",
            "id": 799368730,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc4vpWYa",
            "original_commit_id": "2ab987b0591081db223379cd40d5b009a8329b15",
            "original_line": 211,
            "original_position": 177,
            "original_start_line": 210,
            "path": "docs/src/userguide/extension_types.rst",
            "position": null,
            "pull_request_review_id": 872932473,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4516",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/799368730/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2022-02-04T12:51:01Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/799368730",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4516#discussion_r799368981"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4516"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/799368981"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nTo access its width I could write\r\n```",
            "commit_id": "3bf11b6646e211e83492646801925fed432c8736",
            "created_at": "2022-02-04T11:04:15Z",
            "diff_hunk": "@@ -128,24 +219,61 @@ Type Testing and Casting\n ------------------------\n \n Suppose I have a method :meth:`quest` which returns an object of type :class:`Shrubbery`.\n-To access it's width I could write::\n+To access it's width I could write",
            "html_url": "https://github.com/cython/cython/pull/4516#discussion_r799368981",
            "id": 799368981,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc4vpWcV",
            "original_commit_id": "2ab987b0591081db223379cd40d5b009a8329b15",
            "original_line": 222,
            "original_position": 187,
            "original_start_line": null,
            "path": "docs/src/userguide/extension_types.rst",
            "position": null,
            "pull_request_review_id": 872932473,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4516",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/799368981/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-02-04T12:51:01Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/799368981",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4516#discussion_r799369634"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4516"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/799369634"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nextension type and its C-level attributes (stored in the object’s C struct) and\r\n```",
            "commit_id": "3bf11b6646e211e83492646801925fed432c8736",
            "created_at": "2022-02-04T11:05:15Z",
            "diff_hunk": "@@ -155,64 +283,120 @@ For known builtin or extension types, Cython translates these into a\n fast and safe type check that ignores changes to\n the object's ``__class__`` attribute etc., so that after a successful\n :meth:`isinstance` test, code can rely on the expected C structure of the\n-extension type and its :keyword:`cdef` attributes and methods.\n+extension type and its C-level attributes (stored in object’s C struct.) and",
            "html_url": "https://github.com/cython/cython/pull/4516#discussion_r799369634",
            "id": 799369634,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc4vpWmi",
            "original_commit_id": "2ab987b0591081db223379cd40d5b009a8329b15",
            "original_line": 286,
            "original_position": 256,
            "original_start_line": null,
            "path": "docs/src/userguide/extension_types.rst",
            "position": null,
            "pull_request_review_id": 872932473,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4516",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/799369634/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-02-04T12:51:01Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/799369634",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4516#discussion_r799370401"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4516"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/799370401"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nCython handles :keyword:`None` values differently in C-like type declarations and when Python annotations are used.\r\n```",
            "commit_id": "3bf11b6646e211e83492646801925fed432c8736",
            "created_at": "2022-02-04T11:06:26Z",
            "diff_hunk": "@@ -155,64 +283,120 @@ For known builtin or extension types, Cython translates these into a\n fast and safe type check that ignores changes to\n the object's ``__class__`` attribute etc., so that after a successful\n :meth:`isinstance` test, code can rely on the expected C structure of the\n-extension type and its :keyword:`cdef` attributes and methods.\n+extension type and its C-level attributes (stored in object’s C struct.) and\n+:keyword:`cdef`/``@cfunc`` methods.\n \n .. _extension_types_and_none:\n \n Extension types and None\n =========================\n \n-When you declare a parameter or C variable as being of an extension type,\n-Cython will allow it to take on the value ``None`` as well as values of its\n+Cython handles :keyword:`None` values differently in Cython language and when annotations are used.",
            "html_url": "https://github.com/cython/cython/pull/4516#discussion_r799370401",
            "id": 799370401,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc4vpWyh",
            "original_commit_id": "2ab987b0591081db223379cd40d5b009a8329b15",
            "original_line": 294,
            "original_position": 266,
            "original_start_line": null,
            "path": "docs/src/userguide/extension_types.rst",
            "position": null,
            "pull_request_review_id": 872932473,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4516",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/799370401/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-02-04T12:51:01Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/799370401",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4516#discussion_r799372636"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4516"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/799372636"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nIn :keyword:`cdef` declarations and C-like function argument declarations (``func(list x)``),\r\nwhen you declare an argument or C variable as having an extension or Python builtin type,\r\nCython will allow it to take on the value :keyword:`None` as well as values of its\r\n```",
            "commit_id": "3bf11b6646e211e83492646801925fed432c8736",
            "created_at": "2022-02-04T11:09:50Z",
            "diff_hunk": "@@ -155,64 +283,120 @@ For known builtin or extension types, Cython translates these into a\n fast and safe type check that ignores changes to\n the object's ``__class__`` attribute etc., so that after a successful\n :meth:`isinstance` test, code can rely on the expected C structure of the\n-extension type and its :keyword:`cdef` attributes and methods.\n+extension type and its C-level attributes (stored in object’s C struct.) and\n+:keyword:`cdef`/``@cfunc`` methods.\n \n .. _extension_types_and_none:\n \n Extension types and None\n =========================\n \n-When you declare a parameter or C variable as being of an extension type,\n-Cython will allow it to take on the value ``None`` as well as values of its\n+Cython handles :keyword:`None` values differently in Cython language and when annotations are used.\n+\n+In the Cython language, when you declare a parameter or C variable as being of an extension type,\n+Cython language will allow it to take on the value :keyword:`None` as well as values of its",
            "html_url": "https://github.com/cython/cython/pull/4516#discussion_r799372636",
            "id": 799372636,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc4vpXVc",
            "original_commit_id": "2ab987b0591081db223379cd40d5b009a8329b15",
            "original_line": 297,
            "original_position": 269,
            "original_start_line": 296,
            "path": "docs/src/userguide/extension_types.rst",
            "position": null,
            "pull_request_review_id": 872932473,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4516",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/799372636/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2022-02-04T12:51:01Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/799372636",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4516#discussion_r799375504"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4516"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/799375504"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nWhen annotations are used, the behaviour follows the Python typing semantics of\r\n`PEP-484 <https://www.python.org/dev/peps/pep-0484/>`_ instead.\r\nThe value :keyword:`None` is not allowed when a variable is annotated only with its plain type.\r\nTo allow also :keyword:`None`, ``typing.Optional[ ]`` must be used explicitly.\r\nFor function arguments, this is also automatically allowed when they have a\r\ndefault argument of :keyword:`None`, e.g. ``func(x: list = None)`` does not require ``typing.Optional``.\r\n```",
            "commit_id": "3bf11b6646e211e83492646801925fed432c8736",
            "created_at": "2022-02-04T11:14:04Z",
            "diff_hunk": "@@ -155,64 +283,120 @@ For known builtin or extension types, Cython translates these into a\n fast and safe type check that ignores changes to\n the object's ``__class__`` attribute etc., so that after a successful\n :meth:`isinstance` test, code can rely on the expected C structure of the\n-extension type and its :keyword:`cdef` attributes and methods.\n+extension type and its C-level attributes (stored in object’s C struct.) and\n+:keyword:`cdef`/``@cfunc`` methods.\n \n .. _extension_types_and_none:\n \n Extension types and None\n =========================\n \n-When you declare a parameter or C variable as being of an extension type,\n-Cython will allow it to take on the value ``None`` as well as values of its\n+Cython handles :keyword:`None` values differently in Cython language and when annotations are used.\n+\n+In the Cython language, when you declare a parameter or C variable as being of an extension type,\n+Cython language will allow it to take on the value :keyword:`None` as well as values of its\n declared type. This is analogous to the way a C pointer can take on the value\n ``NULL``, and you need to exercise the same caution because of it. There is no\n problem as long as you are performing Python operations on it, because full\n dynamic type checking will be applied. However, when you access C attributes\n of an extension type (as in the widen_shrubbery function above), it's up to\n-you to make sure the reference you're using is not ``None`` -- in the\n+you to make sure the reference you're using is not :keyword:`None` -- in the\n interests of efficiency, Cython does not check this.\n \n-You need to be particularly careful when exposing Python functions which take\n-extension types as arguments. If we wanted to make :func:`widen_shrubbery` a\n-Python function, for example, if we simply wrote::\n+When annotations are used, the behaviour is close to `PEP-484 <https://www.python.org/dev/peps/pep-0484/>`_.\n+The value :keyword:`None` is not allowed when variable is annotated only by type. To allow also :keyword:`None` value,\n+``typing.Optional`` must be used.",
            "html_url": "https://github.com/cython/cython/pull/4516#discussion_r799375504",
            "id": 799375504,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc4vpYCQ",
            "original_commit_id": "2ab987b0591081db223379cd40d5b009a8329b15",
            "original_line": 308,
            "original_position": 284,
            "original_start_line": 306,
            "path": "docs/src/userguide/extension_types.rst",
            "position": null,
            "pull_request_review_id": 872932473,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4516",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/799375504/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2022-02-04T12:51:01Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/799375504",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4516#discussion_r799377641"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4516"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/799377641"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nThe upside of using annotations here is that they are safe by default because\r\nyou need to explicitly allow :keyword:`None` values for them.\r\nWith the C-like declaration syntax, you need to be particularly careful when\r\nexposing Python functions which take extension types as arguments:\r\n```",
            "commit_id": "3bf11b6646e211e83492646801925fed432c8736",
            "created_at": "2022-02-04T11:17:16Z",
            "diff_hunk": "@@ -155,64 +283,120 @@ For known builtin or extension types, Cython translates these into a\n fast and safe type check that ignores changes to\n the object's ``__class__`` attribute etc., so that after a successful\n :meth:`isinstance` test, code can rely on the expected C structure of the\n-extension type and its :keyword:`cdef` attributes and methods.\n+extension type and its C-level attributes (stored in object’s C struct.) and\n+:keyword:`cdef`/``@cfunc`` methods.\n \n .. _extension_types_and_none:\n \n Extension types and None\n =========================\n \n-When you declare a parameter or C variable as being of an extension type,\n-Cython will allow it to take on the value ``None`` as well as values of its\n+Cython handles :keyword:`None` values differently in Cython language and when annotations are used.\n+\n+In the Cython language, when you declare a parameter or C variable as being of an extension type,\n+Cython language will allow it to take on the value :keyword:`None` as well as values of its\n declared type. This is analogous to the way a C pointer can take on the value\n ``NULL``, and you need to exercise the same caution because of it. There is no\n problem as long as you are performing Python operations on it, because full\n dynamic type checking will be applied. However, when you access C attributes\n of an extension type (as in the widen_shrubbery function above), it's up to\n-you to make sure the reference you're using is not ``None`` -- in the\n+you to make sure the reference you're using is not :keyword:`None` -- in the\n interests of efficiency, Cython does not check this.\n \n-You need to be particularly careful when exposing Python functions which take\n-extension types as arguments. If we wanted to make :func:`widen_shrubbery` a\n-Python function, for example, if we simply wrote::\n+When annotations are used, the behaviour is close to `PEP-484 <https://www.python.org/dev/peps/pep-0484/>`_.\n+The value :keyword:`None` is not allowed when variable is annotated only by type. To allow also :keyword:`None` value,\n+``typing.Optional`` must be used.\n+\n+In the Cython language, you need to be particularly careful when exposing Python functions which take\n+on the other hand, annotations are safe since you need to explicitly enable :keyword:`None` value.\n+extension types as arguments:",
            "html_url": "https://github.com/cython/cython/pull/4516#discussion_r799377641",
            "id": 799377641,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc4vpYjp",
            "original_commit_id": "2ab987b0591081db223379cd40d5b009a8329b15",
            "original_line": 312,
            "original_position": 288,
            "original_start_line": 310,
            "path": "docs/src/userguide/extension_types.rst",
            "position": null,
            "pull_request_review_id": 872932473,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4516",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/799377641/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2022-02-04T12:51:01Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/799377641",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4516#discussion_r799379863"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4516"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/799379863"
                }
            },
            "author_association": "MEMBER",
            "body": "This example is not clear as it stands. I think we should instead remove the tabs here and show both variants in direct comparison, in the same way as we directly compare them in the text before. This variant also shouldn't use `Optional[]` since that's the key difference that we explained and now try to illustrate with these examples.\r\n\r\nThe same applies to the following few examples, I think. Whenever we compare syntax variants and their semantics, we should show all variants.",
            "commit_id": "3bf11b6646e211e83492646801925fed432c8736",
            "created_at": "2022-02-04T11:20:43Z",
            "diff_hunk": "@@ -155,64 +283,120 @@ For known builtin or extension types, Cython translates these into a\n fast and safe type check that ignores changes to\n the object's ``__class__`` attribute etc., so that after a successful\n :meth:`isinstance` test, code can rely on the expected C structure of the\n-extension type and its :keyword:`cdef` attributes and methods.\n+extension type and its C-level attributes (stored in object’s C struct.) and\n+:keyword:`cdef`/``@cfunc`` methods.\n \n .. _extension_types_and_none:\n \n Extension types and None\n =========================\n \n-When you declare a parameter or C variable as being of an extension type,\n-Cython will allow it to take on the value ``None`` as well as values of its\n+Cython handles :keyword:`None` values differently in Cython language and when annotations are used.\n+\n+In the Cython language, when you declare a parameter or C variable as being of an extension type,\n+Cython language will allow it to take on the value :keyword:`None` as well as values of its\n declared type. This is analogous to the way a C pointer can take on the value\n ``NULL``, and you need to exercise the same caution because of it. There is no\n problem as long as you are performing Python operations on it, because full\n dynamic type checking will be applied. However, when you access C attributes\n of an extension type (as in the widen_shrubbery function above), it's up to\n-you to make sure the reference you're using is not ``None`` -- in the\n+you to make sure the reference you're using is not :keyword:`None` -- in the\n interests of efficiency, Cython does not check this.\n \n-You need to be particularly careful when exposing Python functions which take\n-extension types as arguments. If we wanted to make :func:`widen_shrubbery` a\n-Python function, for example, if we simply wrote::\n+When annotations are used, the behaviour is close to `PEP-484 <https://www.python.org/dev/peps/pep-0484/>`_.\n+The value :keyword:`None` is not allowed when variable is annotated only by type. To allow also :keyword:`None` value,\n+``typing.Optional`` must be used.\n+\n+In the Cython language, you need to be particularly careful when exposing Python functions which take\n+on the other hand, annotations are safe since you need to explicitly enable :keyword:`None` value.\n+extension types as arguments:\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n \n-    def widen_shrubbery(Shrubbery sh, extra_width): # This is\n-        sh.width = sh.width + extra_width           # dangerous!\n+            from typing import Optional\n \n-then users of our module could crash it by passing ``None`` for the ``sh``\n+            def widen_shrubbery(sh: Optional[Shrubbery], extra_width): # This is\n+                sh.width = sh.width + extra_width                      # dangerous!",
            "html_url": "https://github.com/cython/cython/pull/4516#discussion_r799379863",
            "id": 799379863,
            "line": 328,
            "node_id": "PRRC_kwDOABDGAc4vpZGX",
            "original_commit_id": "2ab987b0591081db223379cd40d5b009a8329b15",
            "original_line": 323,
            "original_position": 302,
            "original_start_line": 322,
            "path": "docs/src/userguide/extension_types.rst",
            "position": 309,
            "pull_request_review_id": 872932473,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4516",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/799379863/reactions"
            },
            "side": "RIGHT",
            "start_line": 327,
            "start_side": "RIGHT",
            "updated_at": "2022-02-04T12:51:01Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/799379863",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4516#discussion_r799387386"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4516"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/799387386"
                }
            },
            "author_association": "MEMBER",
            "body": "I don't think \"the Cython language\" is a good description. The distinction that you are trying to draw here is not about the language in general (which includes all of Python, including decorators and annotations) but only about two specific syntax constructs: `cdef` variable declarations and C-like function argument declarations. These terms may seem lengthy in comparison, but this is documentation, not a poem. For someone learning Cython for the first time, there are so many concepts to grasp and distinguish that each piece of information that the documentation delivers should clearly fall into one of those concept buckets for the reader, or help in drawing a line between concepts. Repetition is fine, long wordings are also ok, as long as both help with clarity and consistency.",
            "commit_id": "3bf11b6646e211e83492646801925fed432c8736",
            "created_at": "2022-02-04T11:32:19Z",
            "diff_hunk": "@@ -155,64 +283,120 @@ For known builtin or extension types, Cython translates these into a\n fast and safe type check that ignores changes to\n the object's ``__class__`` attribute etc., so that after a successful\n :meth:`isinstance` test, code can rely on the expected C structure of the\n-extension type and its :keyword:`cdef` attributes and methods.\n+extension type and its C-level attributes (stored in object’s C struct.) and\n+:keyword:`cdef`/``@cfunc`` methods.\n \n .. _extension_types_and_none:\n \n Extension types and None\n =========================\n \n-When you declare a parameter or C variable as being of an extension type,\n-Cython will allow it to take on the value ``None`` as well as values of its\n+Cython handles :keyword:`None` values differently in Cython language and when annotations are used.\n+\n+In the Cython language, when you declare a parameter or C variable as being of an extension type,\n+Cython language will allow it to take on the value :keyword:`None` as well as values of its\n declared type. This is analogous to the way a C pointer can take on the value\n ``NULL``, and you need to exercise the same caution because of it. There is no\n problem as long as you are performing Python operations on it, because full\n dynamic type checking will be applied. However, when you access C attributes\n of an extension type (as in the widen_shrubbery function above), it's up to\n-you to make sure the reference you're using is not ``None`` -- in the\n+you to make sure the reference you're using is not :keyword:`None` -- in the\n interests of efficiency, Cython does not check this.\n \n-You need to be particularly careful when exposing Python functions which take\n-extension types as arguments. If we wanted to make :func:`widen_shrubbery` a\n-Python function, for example, if we simply wrote::\n+When annotations are used, the behaviour is close to `PEP-484 <https://www.python.org/dev/peps/pep-0484/>`_.\n+The value :keyword:`None` is not allowed when variable is annotated only by type. To allow also :keyword:`None` value,\n+``typing.Optional`` must be used.\n+\n+In the Cython language, you need to be particularly careful when exposing Python functions which take\n+on the other hand, annotations are safe since you need to explicitly enable :keyword:`None` value.\n+extension types as arguments:\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n \n-    def widen_shrubbery(Shrubbery sh, extra_width): # This is\n-        sh.width = sh.width + extra_width           # dangerous!\n+            from typing import Optional\n \n-then users of our module could crash it by passing ``None`` for the ``sh``\n+            def widen_shrubbery(sh: Optional[Shrubbery], extra_width): # This is\n+                sh.width = sh.width + extra_width                      # dangerous!\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            def widen_shrubbery(Shrubbery sh, extra_width): # This is\n+                sh.width = sh.width + extra_width           # dangerous!\n+\n+The users of our module could crash it by passing :keyword:`None` for the ``sh``\n parameter.\n \n-One way to fix this would be::\n+In the Cython language, one way to fix this would be to check :keyword:`None` value:",
            "html_url": "https://github.com/cython/cython/pull/4516#discussion_r799387386",
            "id": 799387386,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc4vpa76",
            "original_commit_id": "2ab987b0591081db223379cd40d5b009a8329b15",
            "original_line": 335,
            "original_position": 315,
            "original_start_line": null,
            "path": "docs/src/userguide/extension_types.rst",
            "position": null,
            "pull_request_review_id": 872932473,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4516",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/799387386/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-02-04T12:51:01Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/799387386",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4516#discussion_r799388999"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4516"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/799388999"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nAs in Python, whenever it is unclear whether a variable can be :keyword:`None`,\r\nbut the code requires a non-None value, an explicit check can help:\r\n```",
            "commit_id": "3bf11b6646e211e83492646801925fed432c8736",
            "created_at": "2022-02-04T11:35:04Z",
            "diff_hunk": "@@ -155,64 +283,120 @@ For known builtin or extension types, Cython translates these into a\n fast and safe type check that ignores changes to\n the object's ``__class__`` attribute etc., so that after a successful\n :meth:`isinstance` test, code can rely on the expected C structure of the\n-extension type and its :keyword:`cdef` attributes and methods.\n+extension type and its C-level attributes (stored in object’s C struct.) and\n+:keyword:`cdef`/``@cfunc`` methods.\n \n .. _extension_types_and_none:\n \n Extension types and None\n =========================\n \n-When you declare a parameter or C variable as being of an extension type,\n-Cython will allow it to take on the value ``None`` as well as values of its\n+Cython handles :keyword:`None` values differently in Cython language and when annotations are used.\n+\n+In the Cython language, when you declare a parameter or C variable as being of an extension type,\n+Cython language will allow it to take on the value :keyword:`None` as well as values of its\n declared type. This is analogous to the way a C pointer can take on the value\n ``NULL``, and you need to exercise the same caution because of it. There is no\n problem as long as you are performing Python operations on it, because full\n dynamic type checking will be applied. However, when you access C attributes\n of an extension type (as in the widen_shrubbery function above), it's up to\n-you to make sure the reference you're using is not ``None`` -- in the\n+you to make sure the reference you're using is not :keyword:`None` -- in the\n interests of efficiency, Cython does not check this.\n \n-You need to be particularly careful when exposing Python functions which take\n-extension types as arguments. If we wanted to make :func:`widen_shrubbery` a\n-Python function, for example, if we simply wrote::\n+When annotations are used, the behaviour is close to `PEP-484 <https://www.python.org/dev/peps/pep-0484/>`_.\n+The value :keyword:`None` is not allowed when variable is annotated only by type. To allow also :keyword:`None` value,\n+``typing.Optional`` must be used.\n+\n+In the Cython language, you need to be particularly careful when exposing Python functions which take\n+on the other hand, annotations are safe since you need to explicitly enable :keyword:`None` value.\n+extension types as arguments:\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n \n-    def widen_shrubbery(Shrubbery sh, extra_width): # This is\n-        sh.width = sh.width + extra_width           # dangerous!\n+            from typing import Optional\n \n-then users of our module could crash it by passing ``None`` for the ``sh``\n+            def widen_shrubbery(sh: Optional[Shrubbery], extra_width): # This is\n+                sh.width = sh.width + extra_width                      # dangerous!\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            def widen_shrubbery(Shrubbery sh, extra_width): # This is\n+                sh.width = sh.width + extra_width           # dangerous!\n+\n+The users of our module could crash it by passing :keyword:`None` for the ``sh``\n parameter.\n \n-One way to fix this would be::\n+In the Cython language, one way to fix this would be to check :keyword:`None` value:",
            "html_url": "https://github.com/cython/cython/pull/4516#discussion_r799388999",
            "id": 799388999,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc4vpbVH",
            "original_commit_id": "2ab987b0591081db223379cd40d5b009a8329b15",
            "original_line": 335,
            "original_position": 315,
            "original_start_line": null,
            "path": "docs/src/userguide/extension_types.rst",
            "position": null,
            "pull_request_review_id": 872932473,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4516",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/799388999/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-02-04T12:51:01Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/799388999",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4516#discussion_r799396905"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4516"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/799396905"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    ``not None`` and ``typing.Optional`` can only be used in Python functions (defined with\r\n```",
            "commit_id": "3bf11b6646e211e83492646801925fed432c8736",
            "created_at": "2022-02-04T11:47:34Z",
            "diff_hunk": "@@ -155,64 +283,120 @@ For known builtin or extension types, Cython translates these into a\n fast and safe type check that ignores changes to\n the object's ``__class__`` attribute etc., so that after a successful\n :meth:`isinstance` test, code can rely on the expected C structure of the\n-extension type and its :keyword:`cdef` attributes and methods.\n+extension type and its C-level attributes (stored in object’s C struct.) and\n+:keyword:`cdef`/``@cfunc`` methods.\n \n .. _extension_types_and_none:\n \n Extension types and None\n =========================\n \n-When you declare a parameter or C variable as being of an extension type,\n-Cython will allow it to take on the value ``None`` as well as values of its\n+Cython handles :keyword:`None` values differently in Cython language and when annotations are used.\n+\n+In the Cython language, when you declare a parameter or C variable as being of an extension type,\n+Cython language will allow it to take on the value :keyword:`None` as well as values of its\n declared type. This is analogous to the way a C pointer can take on the value\n ``NULL``, and you need to exercise the same caution because of it. There is no\n problem as long as you are performing Python operations on it, because full\n dynamic type checking will be applied. However, when you access C attributes\n of an extension type (as in the widen_shrubbery function above), it's up to\n-you to make sure the reference you're using is not ``None`` -- in the\n+you to make sure the reference you're using is not :keyword:`None` -- in the\n interests of efficiency, Cython does not check this.\n \n-You need to be particularly careful when exposing Python functions which take\n-extension types as arguments. If we wanted to make :func:`widen_shrubbery` a\n-Python function, for example, if we simply wrote::\n+When annotations are used, the behaviour is close to `PEP-484 <https://www.python.org/dev/peps/pep-0484/>`_.\n+The value :keyword:`None` is not allowed when variable is annotated only by type. To allow also :keyword:`None` value,\n+``typing.Optional`` must be used.\n+\n+In the Cython language, you need to be particularly careful when exposing Python functions which take\n+on the other hand, annotations are safe since you need to explicitly enable :keyword:`None` value.\n+extension types as arguments:\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n \n-    def widen_shrubbery(Shrubbery sh, extra_width): # This is\n-        sh.width = sh.width + extra_width           # dangerous!\n+            from typing import Optional\n \n-then users of our module could crash it by passing ``None`` for the ``sh``\n+            def widen_shrubbery(sh: Optional[Shrubbery], extra_width): # This is\n+                sh.width = sh.width + extra_width                      # dangerous!\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            def widen_shrubbery(Shrubbery sh, extra_width): # This is\n+                sh.width = sh.width + extra_width           # dangerous!\n+\n+The users of our module could crash it by passing :keyword:`None` for the ``sh``\n parameter.\n \n-One way to fix this would be::\n+In the Cython language, one way to fix this would be to check :keyword:`None` value:\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            from typing import Optional\n+\n+            def widen_shrubbery(sh: Optional[Shrubbery], extra_width):\n+                if sh is None:\n+                    raise TypeError\n+                sh.width = sh.width + extra_width\n+\n+    .. group-tab:: Cython\n \n-    def widen_shrubbery(Shrubbery sh, extra_width):\n-        if sh is None:\n-            raise TypeError\n-        sh.width = sh.width + extra_width\n+        .. code-block:: cython\n \n-but since this is anticipated to be such a frequent requirement, Cython\n+            def widen_shrubbery(Shrubbery sh, extra_width):\n+                if sh is None:\n+                    raise TypeError\n+                sh.width = sh.width + extra_width\n+\n+but since this is anticipated to be such a frequent requirement, Cython language\n provides a more convenient way. Parameters of a Python function declared as an\n-extension type can have a ``not None`` clause::\n+extension type can have a ``not None`` clause:\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            def widen_shrubbery(sh: Shrubbery, extra_width):\n+                sh.width = sh.width + extra_width\n \n-    def widen_shrubbery(Shrubbery sh not None, extra_width):\n-        sh.width = sh.width + extra_width\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            def widen_shrubbery(Shrubbery sh not None, extra_width):\n+                sh.width = sh.width + extra_width\n \n Now the function will automatically check that ``sh`` is ``not None`` along\n with checking that it has the right type.\n \n .. note::\n \n-    ``not None`` clause can only be used in Python functions (defined with\n-    :keyword:`def`) and not C functions (defined with :keyword:`cdef`).  If\n+    ``not None`` and ``typing.Annotation`` clause can only be used in Python functions (defined with",
            "html_url": "https://github.com/cython/cython/pull/4516#discussion_r799396905",
            "id": 799396905,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc4vpdQp",
            "original_commit_id": "2ab987b0591081db223379cd40d5b009a8329b15",
            "original_line": 384,
            "original_position": 374,
            "original_start_line": null,
            "path": "docs/src/userguide/extension_types.rst",
            "position": null,
            "pull_request_review_id": 872932473,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4516",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/799396905/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-02-04T12:51:01Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/799396905",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4516#discussion_r799398334"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4516"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/799398334"
                }
            },
            "author_association": "MEMBER",
            "body": "This sentence lacks an object. What can be used?",
            "commit_id": "3bf11b6646e211e83492646801925fed432c8736",
            "created_at": "2022-02-04T11:49:25Z",
            "diff_hunk": "@@ -155,64 +283,120 @@ For known builtin or extension types, Cython translates these into a\n fast and safe type check that ignores changes to\n the object's ``__class__`` attribute etc., so that after a successful\n :meth:`isinstance` test, code can rely on the expected C structure of the\n-extension type and its :keyword:`cdef` attributes and methods.\n+extension type and its C-level attributes (stored in object’s C struct.) and\n+:keyword:`cdef`/``@cfunc`` methods.\n \n .. _extension_types_and_none:\n \n Extension types and None\n =========================\n \n-When you declare a parameter or C variable as being of an extension type,\n-Cython will allow it to take on the value ``None`` as well as values of its\n+Cython handles :keyword:`None` values differently in Cython language and when annotations are used.\n+\n+In the Cython language, when you declare a parameter or C variable as being of an extension type,\n+Cython language will allow it to take on the value :keyword:`None` as well as values of its\n declared type. This is analogous to the way a C pointer can take on the value\n ``NULL``, and you need to exercise the same caution because of it. There is no\n problem as long as you are performing Python operations on it, because full\n dynamic type checking will be applied. However, when you access C attributes\n of an extension type (as in the widen_shrubbery function above), it's up to\n-you to make sure the reference you're using is not ``None`` -- in the\n+you to make sure the reference you're using is not :keyword:`None` -- in the\n interests of efficiency, Cython does not check this.\n \n-You need to be particularly careful when exposing Python functions which take\n-extension types as arguments. If we wanted to make :func:`widen_shrubbery` a\n-Python function, for example, if we simply wrote::\n+When annotations are used, the behaviour is close to `PEP-484 <https://www.python.org/dev/peps/pep-0484/>`_.\n+The value :keyword:`None` is not allowed when variable is annotated only by type. To allow also :keyword:`None` value,\n+``typing.Optional`` must be used.\n+\n+In the Cython language, you need to be particularly careful when exposing Python functions which take\n+on the other hand, annotations are safe since you need to explicitly enable :keyword:`None` value.\n+extension types as arguments:\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n \n-    def widen_shrubbery(Shrubbery sh, extra_width): # This is\n-        sh.width = sh.width + extra_width           # dangerous!\n+            from typing import Optional\n \n-then users of our module could crash it by passing ``None`` for the ``sh``\n+            def widen_shrubbery(sh: Optional[Shrubbery], extra_width): # This is\n+                sh.width = sh.width + extra_width                      # dangerous!\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            def widen_shrubbery(Shrubbery sh, extra_width): # This is\n+                sh.width = sh.width + extra_width           # dangerous!\n+\n+The users of our module could crash it by passing :keyword:`None` for the ``sh``\n parameter.\n \n-One way to fix this would be::\n+In the Cython language, one way to fix this would be to check :keyword:`None` value:\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            from typing import Optional\n+\n+            def widen_shrubbery(sh: Optional[Shrubbery], extra_width):\n+                if sh is None:\n+                    raise TypeError\n+                sh.width = sh.width + extra_width\n+\n+    .. group-tab:: Cython\n \n-    def widen_shrubbery(Shrubbery sh, extra_width):\n-        if sh is None:\n-            raise TypeError\n-        sh.width = sh.width + extra_width\n+        .. code-block:: cython\n \n-but since this is anticipated to be such a frequent requirement, Cython\n+            def widen_shrubbery(Shrubbery sh, extra_width):\n+                if sh is None:\n+                    raise TypeError\n+                sh.width = sh.width + extra_width\n+\n+but since this is anticipated to be such a frequent requirement, Cython language\n provides a more convenient way. Parameters of a Python function declared as an\n-extension type can have a ``not None`` clause::\n+extension type can have a ``not None`` clause:\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            def widen_shrubbery(sh: Shrubbery, extra_width):\n+                sh.width = sh.width + extra_width\n \n-    def widen_shrubbery(Shrubbery sh not None, extra_width):\n-        sh.width = sh.width + extra_width\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            def widen_shrubbery(Shrubbery sh not None, extra_width):\n+                sh.width = sh.width + extra_width\n \n Now the function will automatically check that ``sh`` is ``not None`` along\n with checking that it has the right type.\n \n .. note::\n \n-    ``not None`` clause can only be used in Python functions (defined with\n-    :keyword:`def`) and not C functions (defined with :keyword:`cdef`).  If\n+    ``not None`` and ``typing.Annotation`` clause can only be used in Python functions (defined with\n+    :keyword:`def` and without ``@cython.cfunc`` decorator) and not C functions\n+    (defined with :keyword:`cdef` or decorated using ``@cython.cfunc``).  If\n     you need to check whether a parameter to a C function is None, you will\n     need to do it yourself.\n \n+    On the other hand,  can be used also for C functions and methods\n+    (decorated using ``@cython.cfunc``)",
            "html_url": "https://github.com/cython/cython/pull/4516#discussion_r799398334",
            "id": 799398334,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc4vpdm-",
            "original_commit_id": "2ab987b0591081db223379cd40d5b009a8329b15",
            "original_line": 391,
            "original_position": 381,
            "original_start_line": 390,
            "path": "docs/src/userguide/extension_types.rst",
            "position": null,
            "pull_request_review_id": 872932473,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4516",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/799398334/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2022-02-04T12:51:01Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/799398334",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4516#discussion_r799401063"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4516"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/799401063"
                }
            },
            "author_association": "MEMBER",
            "body": "I'm not always sure that it's good to remove the colons (`:`) in the end completely. At least sometimes it would be good to leave one there as a forward reference to the code that follows. In any case, sentences should generally end with a punctuation mark, be it a dot or a colon.",
            "commit_id": "3bf11b6646e211e83492646801925fed432c8736",
            "created_at": "2022-02-04T11:53:53Z",
            "diff_hunk": "@@ -232,23 +416,50 @@ extension types.\n Properties\n ============\n \n-You can declare properties in an extension class using the same syntax as in ordinary Python code::\n+You can declare properties in an extension class using the same syntax as in ordinary Python code",
            "html_url": "https://github.com/cython/cython/pull/4516#discussion_r799401063",
            "id": 799401063,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc4vpeRn",
            "original_commit_id": "2ab987b0591081db223379cd40d5b009a8329b15",
            "original_line": 419,
            "original_position": 400,
            "original_start_line": 235,
            "path": "docs/src/userguide/extension_types.rst",
            "position": null,
            "pull_request_review_id": 872932473,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4516",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/799401063/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "LEFT",
            "updated_at": "2022-02-04T12:51:01Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/799401063",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4516#discussion_r799403356"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4516"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/799403356"
                }
            },
            "author_association": "MEMBER",
            "body": "We are talking about a specific package here, so it needs a definite article (\"the\").\r\n```suggestion\r\n:keyword:`cimport` statement or importing from the special ``cython.cimports`` package.\r\n```",
            "commit_id": "3bf11b6646e211e83492646801925fed432c8736",
            "created_at": "2022-02-04T11:57:33Z",
            "diff_hunk": "@@ -328,20 +514,38 @@ Subclassing\n =============\n \n If an extension type inherits from other types, the first base class must be\n-a built-in type or another extension type::\n+a built-in type or another extension type\n \n-    cdef class Parrot:\n-        ...\n+.. tabs::\n \n-    cdef class Norwegian(Parrot):\n-        ...\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            @cython.cclass\n+            class Parrot:\n+                ...\n+\n+            @cython.cclass\n+            class Norwegian(Parrot):\n+                ...\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            cdef class Parrot:\n+                ...\n+\n+            cdef class Norwegian(Parrot):\n+                ...\n \n \n A complete definition of the base type must be available to Cython, so if the\n base type is a built-in type, it must have been previously declared as an\n extern extension type. If the base type is defined in another Cython module, it\n must either be declared as an extern extension type or imported using the\n-:keyword:`cimport` statement.\n+:keyword:`cimport` statement or importing from special ``cython.cimports`` package.",
            "html_url": "https://github.com/cython/cython/pull/4516#discussion_r799403356",
            "id": 799403356,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc4vpe1c",
            "original_commit_id": "2ab987b0591081db223379cd40d5b009a8329b15",
            "original_line": 548,
            "original_position": 549,
            "original_start_line": null,
            "path": "docs/src/userguide/extension_types.rst",
            "position": null,
            "pull_request_review_id": 872932473,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4516",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/799403356/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-02-04T12:51:01Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/799403356",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4516#discussion_r799404808"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4516"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/799404808"
                }
            },
            "author_association": "MEMBER",
            "body": "Python is a name, not an adjective.\r\n```suggestion\r\nextension types. In addition, :keyword:`cpdef`/``@ccall`` methods can even be overridden by Python\r\n```",
            "commit_id": "3bf11b6646e211e83492646801925fed432c8736",
            "created_at": "2022-02-04T11:59:57Z",
            "diff_hunk": "@@ -375,32 +596,25 @@ C methods\n =========\n \n Extension types can have C methods as well as Python methods. Like C\n-functions, C methods are declared using :keyword:`cdef` or :keyword:`cpdef` instead of\n-:keyword:`def`. C methods are \"virtual\", and may be overridden in derived\n-extension types. In addition, :keyword:`cpdef` methods can even be overridden by python\n-methods when called as C method. This adds a little to their calling overhead\n-compared to a :keyword:`cdef` method::\n+functions, C methods are declared using\n \n-    # pets.pyx\n-    cdef class Parrot:\n+* :keyword:`cdef` instead of :keyword:`def` or ``@cfunc`` decorator for *C methods*, or\n+* :keyword:`cpdef` instead of :keyword:`def` or ``@ccall`` decorator for *hybrid methods*.\n \n-        cdef void describe(self):\n-            print(\"This parrot is resting.\")\n+C methods are \"virtual\", and may be overridden in derived\n+extension types. In addition, :keyword:`cpdef`/``@ccall`` methods can even be overridden by python",
            "html_url": "https://github.com/cython/cython/pull/4516#discussion_r799404808",
            "id": 799404808,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc4vpfMI",
            "original_commit_id": "2ab987b0591081db223379cd40d5b009a8329b15",
            "original_line": 605,
            "original_position": 608,
            "original_start_line": null,
            "path": "docs/src/userguide/extension_types.rst",
            "position": null,
            "pull_request_review_id": 872932473,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4516",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/799404808/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-02-04T12:51:01Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/799404808",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4516#discussion_r799408468"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4516"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/799408468"
                }
            },
            "author_association": "MEMBER",
            "body": "This would normally be a classical example for a `@classmethod` and not a `@staticmethod`. I hope there is a test that this actually works (not just compiles but actually runs correctly), but since documentation should always aim to show best practices, I would suggest switching to `@classmethod` here and using the `cls` argument for the instantiation to nicely support subclassing.\r\n\r\nAccordingly, the longer example below about factory methods would be a good candidate for `@classmethod` as well, but since it also shows the usage of `.__new__()`, which is only fast when the types are known at compile time, I'm not sure if it should. Not sure what Cython does for `cls.__new__(cls)` – probably nothing special, but worth testing out. Could be a missed opportunity for an optimisation in class methods.",
            "commit_id": "3bf11b6646e211e83492646801925fed432c8736",
            "created_at": "2022-02-04T12:05:46Z",
            "diff_hunk": "@@ -416,22 +630,19 @@ method using the usual Python technique, i.e.::\n \n     Parrot.describe(self)\n \n-`cdef` methods can be declared static by using the @staticmethod decorator.\n+:keyword:`cdef`/``@ccall`` methods can be declared static by using the ``@staticmethod`` decorator.\n This can be especially useful for constructing classes that take non-Python\n-compatible types.::\n+compatible types.:\n+\n+.. tabs::\n \n-    cdef class OwnedPointer:\n-        cdef void* ptr\n+    .. group-tab:: Pure Python\n \n-        def __dealloc__(self):\n-            if self.ptr is not NULL:\n-                free(self.ptr)\n+        .. literalinclude:: ../../examples/userguide/extension_types/owned_pointer.py\n \n-        @staticmethod\n-        cdef create(void* ptr):\n-            p = OwnedPointer()\n-            p.ptr = ptr\n-            return p",
            "html_url": "https://github.com/cython/cython/pull/4516#discussion_r799408468",
            "id": 799408468,
            "line": 434,
            "node_id": "PRRC_kwDOABDGAc4vpgFU",
            "original_commit_id": "2ab987b0591081db223379cd40d5b009a8329b15",
            "original_line": 434,
            "original_position": 660,
            "original_start_line": 430,
            "path": "docs/src/userguide/extension_types.rst",
            "position": 666,
            "pull_request_review_id": 872932473,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4516",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/799408468/reactions"
            },
            "side": "LEFT",
            "start_line": 430,
            "start_side": "LEFT",
            "updated_at": "2022-02-04T12:51:01Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/799408468",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4516#discussion_r799421633"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4516"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/799421633"
                }
            },
            "author_association": "MEMBER",
            "body": "This note should either be left out, or explain that this is not a draw-back because forward-declaring types is not necessary at all. As it stands, it reads like a missing feature.",
            "commit_id": "3bf11b6646e211e83492646801925fed432c8736",
            "created_at": "2022-02-04T12:25:47Z",
            "diff_hunk": "@@ -453,26 +664,29 @@ definition, for example,::\n     cdef class A(B):\n         # attributes and methods\n \n+.. note::\n+\n+    Cython currently does not support Forward-declaring extension types\n+    in Pure Python mode.\n+",
            "html_url": "https://github.com/cython/cython/pull/4516#discussion_r799421633",
            "id": 799421633,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc4vpjTB",
            "original_commit_id": "2ab987b0591081db223379cd40d5b009a8329b15",
            "original_line": 671,
            "original_position": 675,
            "original_start_line": 667,
            "path": "docs/src/userguide/extension_types.rst",
            "position": null,
            "pull_request_review_id": 872932473,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4516",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/799421633/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2022-02-04T12:51:01Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/799421633",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4516#discussion_r799422199"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4516"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/799422199"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nstatically sized freelist of ``N`` instances for a given type.  Example:\r\n```",
            "commit_id": "3bf11b6646e211e83492646801925fed432c8736",
            "created_at": "2022-02-04T12:26:40Z",
            "diff_hunk": "@@ -484,19 +698,17 @@ types.\n The second performance improvement applies to types that are often created\n and deleted in a row, so that they can benefit from a freelist.  Cython\n provides the decorator ``@cython.freelist(N)`` for this, which creates a\n-statically sized freelist of ``N`` instances for a given type.  Example::\n+statically sized freelist of ``N`` instances for a given type.  Example",
            "html_url": "https://github.com/cython/cython/pull/4516#discussion_r799422199",
            "id": 799422199,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc4vpjb3",
            "original_commit_id": "2ab987b0591081db223379cd40d5b009a8329b15",
            "original_line": 701,
            "original_position": 711,
            "original_start_line": null,
            "path": "docs/src/userguide/extension_types.rst",
            "position": null,
            "pull_request_review_id": 872932473,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4516",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/799422199/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-02-04T12:51:01Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/799422199",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4516#discussion_r799422609"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4516"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/799422609"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nconstructors, this necessitates the use of factory functions or factory methods. For example, \r\n```",
            "commit_id": "3bf11b6646e211e83492646801925fed432c8736",
            "created_at": "2022-02-04T12:27:18Z",
            "diff_hunk": "@@ -507,63 +719,17 @@ It is quite common to want to instantiate an extension class from an existing\n (pointer to a) data structure, often as returned by external C/C++ functions.\n \n As extension classes can only accept Python objects as arguments in their\n-constructors, this necessitates the use of factory functions. For example, ::\n-\n-    from libc.stdlib cimport malloc, free\n-\n-    # Example C struct\n-    ctypedef struct my_c_struct:\n-        int a\n-        int b\n-\n-\n-    cdef class WrapperClass:\n-        \"\"\"A wrapper class for a C/C++ data structure\"\"\"\n-        cdef my_c_struct *_ptr\n-        cdef bint ptr_owner\n-\n-        def __cinit__(self):\n-            self.ptr_owner = False\n-\n-        def __dealloc__(self):\n-            # De-allocate if not null and flag is set\n-            if self._ptr is not NULL and self.ptr_owner is True:\n-                free(self._ptr)\n-                self._ptr = NULL\n-\n-        # Extension class properties\n-        @property\n-        def a(self):\n-            return self._ptr.a if self._ptr is not NULL else None\n-\n-        @property\n-        def b(self):\n-            return self._ptr.b if self._ptr is not NULL else None\n-\n-        @staticmethod\n-        cdef WrapperClass from_ptr(my_c_struct *_ptr, bint owner=False):\n-            \"\"\"Factory function to create WrapperClass objects from\n-            given my_c_struct pointer.\n-\n-            Setting ``owner`` flag to ``True`` causes\n-            the extension type to ``free`` the structure pointed to by ``_ptr``\n-            when the wrapper object is deallocated.\"\"\"\n-            # Call to __new__ bypasses __init__ constructor\n-            cdef WrapperClass wrapper = WrapperClass.__new__(WrapperClass)\n-            wrapper._ptr = _ptr\n-            wrapper.ptr_owner = owner\n-            return wrapper\n-\n-        @staticmethod\n-        cdef WrapperClass new_struct():\n-            \"\"\"Factory function to create WrapperClass objects with\n-            newly allocated my_c_struct\"\"\"\n-            cdef my_c_struct *_ptr = <my_c_struct *>malloc(sizeof(my_c_struct))\n-            if _ptr is NULL:\n-                raise MemoryError\n-            _ptr.a = 0\n-            _ptr.b = 0\n-            return WrapperClass.from_ptr(_ptr, owner=True)\n+constructors, this necessitates the use of factory functions. For example, ",
            "html_url": "https://github.com/cython/cython/pull/4516#discussion_r799422609",
            "id": 799422609,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc4vpjiR",
            "original_commit_id": "2ab987b0591081db223379cd40d5b009a8329b15",
            "original_line": 722,
            "original_position": 795,
            "original_start_line": null,
            "path": "docs/src/userguide/extension_types.rst",
            "position": null,
            "pull_request_review_id": 872932473,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4516",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/799422609/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-02-04T12:51:01Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/799422609",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4516#discussion_r799427054"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4516"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/799427054"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    Cython currently does not support Extension types declared as extern or public\r\n    in Pure Python mode.  This is not considered an issue since public/extern extension\r\n    types are most commonly declared in `.pxd` files and not in `.py` files.\r\n```",
            "commit_id": "3bf11b6646e211e83492646801925fed432c8736",
            "created_at": "2022-02-04T12:34:15Z",
            "diff_hunk": "@@ -782,6 +1016,12 @@ declaration makes an extension type defined in external C code available to a\n Cython module. A public extension type declaration makes an extension type\n defined in a Cython module available to external C code.\n \n+.. note::\n+\n+    Cython currently does not support Extension types declared as extern or public\n+    in Pure Python mode.",
            "html_url": "https://github.com/cython/cython/pull/4516#discussion_r799427054",
            "id": 799427054,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc4vpknu",
            "original_commit_id": "2ab987b0591081db223379cd40d5b009a8329b15",
            "original_line": 1022,
            "original_position": 963,
            "original_start_line": 1021,
            "path": "docs/src/userguide/extension_types.rst",
            "position": null,
            "pull_request_review_id": 872932473,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4516",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/799427054/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2022-02-04T12:51:01Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/799427054",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4516#discussion_r800085473"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4516"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/800085473"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I have removed the note.",
            "commit_id": "3bf11b6646e211e83492646801925fed432c8736",
            "created_at": "2022-02-05T18:19:04Z",
            "diff_hunk": "@@ -453,26 +664,29 @@ definition, for example,::\n     cdef class A(B):\n         # attributes and methods\n \n+.. note::\n+\n+    Cython currently does not support Forward-declaring extension types\n+    in Pure Python mode.\n+",
            "html_url": "https://github.com/cython/cython/pull/4516#discussion_r800085473",
            "id": 800085473,
            "in_reply_to_id": 799421633,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc4vsFXh",
            "original_commit_id": "2ab987b0591081db223379cd40d5b009a8329b15",
            "original_line": 671,
            "original_position": 675,
            "original_start_line": 667,
            "path": "docs/src/userguide/extension_types.rst",
            "position": null,
            "pull_request_review_id": 873958181,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4516",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/800085473/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2022-02-05T18:19:04Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/800085473",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4516#discussion_r800087431"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4516"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/800087431"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "This should be fixed.",
            "commit_id": "3bf11b6646e211e83492646801925fed432c8736",
            "created_at": "2022-02-05T18:39:22Z",
            "diff_hunk": "@@ -232,23 +416,50 @@ extension types.\n Properties\n ============\n \n-You can declare properties in an extension class using the same syntax as in ordinary Python code::\n+You can declare properties in an extension class using the same syntax as in ordinary Python code",
            "html_url": "https://github.com/cython/cython/pull/4516#discussion_r800087431",
            "id": 800087431,
            "in_reply_to_id": 799401063,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc4vsF2H",
            "original_commit_id": "2ab987b0591081db223379cd40d5b009a8329b15",
            "original_line": 419,
            "original_position": 400,
            "original_start_line": 235,
            "path": "docs/src/userguide/extension_types.rst",
            "position": null,
            "pull_request_review_id": 873959778,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4516",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/800087431/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "LEFT",
            "updated_at": "2022-02-05T18:39:22Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/800087431",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4516#discussion_r800088682"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4516"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/800088682"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "This was left by mistake. Removed.",
            "commit_id": "3bf11b6646e211e83492646801925fed432c8736",
            "created_at": "2022-02-05T18:53:55Z",
            "diff_hunk": "@@ -155,64 +283,120 @@ For known builtin or extension types, Cython translates these into a\n fast and safe type check that ignores changes to\n the object's ``__class__`` attribute etc., so that after a successful\n :meth:`isinstance` test, code can rely on the expected C structure of the\n-extension type and its :keyword:`cdef` attributes and methods.\n+extension type and its C-level attributes (stored in object’s C struct.) and\n+:keyword:`cdef`/``@cfunc`` methods.\n \n .. _extension_types_and_none:\n \n Extension types and None\n =========================\n \n-When you declare a parameter or C variable as being of an extension type,\n-Cython will allow it to take on the value ``None`` as well as values of its\n+Cython handles :keyword:`None` values differently in Cython language and when annotations are used.\n+\n+In the Cython language, when you declare a parameter or C variable as being of an extension type,\n+Cython language will allow it to take on the value :keyword:`None` as well as values of its\n declared type. This is analogous to the way a C pointer can take on the value\n ``NULL``, and you need to exercise the same caution because of it. There is no\n problem as long as you are performing Python operations on it, because full\n dynamic type checking will be applied. However, when you access C attributes\n of an extension type (as in the widen_shrubbery function above), it's up to\n-you to make sure the reference you're using is not ``None`` -- in the\n+you to make sure the reference you're using is not :keyword:`None` -- in the\n interests of efficiency, Cython does not check this.\n \n-You need to be particularly careful when exposing Python functions which take\n-extension types as arguments. If we wanted to make :func:`widen_shrubbery` a\n-Python function, for example, if we simply wrote::\n+When annotations are used, the behaviour is close to `PEP-484 <https://www.python.org/dev/peps/pep-0484/>`_.\n+The value :keyword:`None` is not allowed when variable is annotated only by type. To allow also :keyword:`None` value,\n+``typing.Optional`` must be used.\n+\n+In the Cython language, you need to be particularly careful when exposing Python functions which take\n+on the other hand, annotations are safe since you need to explicitly enable :keyword:`None` value.\n+extension types as arguments:\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n \n-    def widen_shrubbery(Shrubbery sh, extra_width): # This is\n-        sh.width = sh.width + extra_width           # dangerous!\n+            from typing import Optional\n \n-then users of our module could crash it by passing ``None`` for the ``sh``\n+            def widen_shrubbery(sh: Optional[Shrubbery], extra_width): # This is\n+                sh.width = sh.width + extra_width                      # dangerous!\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            def widen_shrubbery(Shrubbery sh, extra_width): # This is\n+                sh.width = sh.width + extra_width           # dangerous!\n+\n+The users of our module could crash it by passing :keyword:`None` for the ``sh``\n parameter.\n \n-One way to fix this would be::\n+In the Cython language, one way to fix this would be to check :keyword:`None` value:\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            from typing import Optional\n+\n+            def widen_shrubbery(sh: Optional[Shrubbery], extra_width):\n+                if sh is None:\n+                    raise TypeError\n+                sh.width = sh.width + extra_width\n+\n+    .. group-tab:: Cython\n \n-    def widen_shrubbery(Shrubbery sh, extra_width):\n-        if sh is None:\n-            raise TypeError\n-        sh.width = sh.width + extra_width\n+        .. code-block:: cython\n \n-but since this is anticipated to be such a frequent requirement, Cython\n+            def widen_shrubbery(Shrubbery sh, extra_width):\n+                if sh is None:\n+                    raise TypeError\n+                sh.width = sh.width + extra_width\n+\n+but since this is anticipated to be such a frequent requirement, Cython language\n provides a more convenient way. Parameters of a Python function declared as an\n-extension type can have a ``not None`` clause::\n+extension type can have a ``not None`` clause:\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            def widen_shrubbery(sh: Shrubbery, extra_width):\n+                sh.width = sh.width + extra_width\n \n-    def widen_shrubbery(Shrubbery sh not None, extra_width):\n-        sh.width = sh.width + extra_width\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            def widen_shrubbery(Shrubbery sh not None, extra_width):\n+                sh.width = sh.width + extra_width\n \n Now the function will automatically check that ``sh`` is ``not None`` along\n with checking that it has the right type.\n \n .. note::\n \n-    ``not None`` clause can only be used in Python functions (defined with\n-    :keyword:`def`) and not C functions (defined with :keyword:`cdef`).  If\n+    ``not None`` and ``typing.Annotation`` clause can only be used in Python functions (defined with\n+    :keyword:`def` and without ``@cython.cfunc`` decorator) and not C functions\n+    (defined with :keyword:`cdef` or decorated using ``@cython.cfunc``).  If\n     you need to check whether a parameter to a C function is None, you will\n     need to do it yourself.\n \n+    On the other hand,  can be used also for C functions and methods\n+    (decorated using ``@cython.cfunc``)",
            "html_url": "https://github.com/cython/cython/pull/4516#discussion_r800088682",
            "id": 800088682,
            "in_reply_to_id": 799398334,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc4vsGJq",
            "original_commit_id": "2ab987b0591081db223379cd40d5b009a8329b15",
            "original_line": 391,
            "original_position": 381,
            "original_start_line": 390,
            "path": "docs/src/userguide/extension_types.rst",
            "position": null,
            "pull_request_review_id": 873960838,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4516",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/800088682/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2022-02-05T18:53:55Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/800088682",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/cython/cython/issues/4516/comments",
    "commit_data": [
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/965b5ecc58fcfa5f782e7fb04c418ae15230262d/comments",
            "commit": {
                "author": {
                    "date": "2021-12-22T20:03:57Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-12-23T12:45:37Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "message": "Migrate examples to pure python in extension_types.rst",
                "tree": {
                    "sha": "ef4d1952550b2ae2172cf7989da9286b810beed1",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/ef4d1952550b2ae2172cf7989da9286b810beed1"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/965b5ecc58fcfa5f782e7fb04c418ae15230262d",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "html_url": "https://github.com/cython/cython/commit/965b5ecc58fcfa5f782e7fb04c418ae15230262d",
            "node_id": "C_kwDOFL4z49oAKDk2NWI1ZWNjNThmY2ZhNWY3ODJlN2ZiMDRjNDE4YWUxNTIzMDI2MmQ",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/cb5eb5a139cbefddffa54a7bddf64b3a03f349fd",
                    "sha": "cb5eb5a139cbefddffa54a7bddf64b3a03f349fd",
                    "url": "https://api.github.com/repos/cython/cython/commits/cb5eb5a139cbefddffa54a7bddf64b3a03f349fd"
                }
            ],
            "sha": "965b5ecc58fcfa5f782e7fb04c418ae15230262d",
            "url": "https://api.github.com/repos/cython/cython/commits/965b5ecc58fcfa5f782e7fb04c418ae15230262d"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/474473c1b025911ddd9ad4d9e699da25b560f460/comments",
            "commit": {
                "author": {
                    "date": "2021-12-23T17:28:33Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-12-23T17:28:33Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "message": "Adjust extension_types.rst to support pure python mode",
                "tree": {
                    "sha": "b1ad7c22e7e45c452dcba931bca89811356836ae",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/b1ad7c22e7e45c452dcba931bca89811356836ae"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/474473c1b025911ddd9ad4d9e699da25b560f460",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "html_url": "https://github.com/cython/cython/commit/474473c1b025911ddd9ad4d9e699da25b560f460",
            "node_id": "C_kwDOFL4z49oAKDQ3NDQ3M2MxYjAyNTkxMWRkZDlhZDRkOWU2OTlkYTI1YjU2MGY0NjA",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/965b5ecc58fcfa5f782e7fb04c418ae15230262d",
                    "sha": "965b5ecc58fcfa5f782e7fb04c418ae15230262d",
                    "url": "https://api.github.com/repos/cython/cython/commits/965b5ecc58fcfa5f782e7fb04c418ae15230262d"
                }
            ],
            "sha": "474473c1b025911ddd9ad4d9e699da25b560f460",
            "url": "https://api.github.com/repos/cython/cython/commits/474473c1b025911ddd9ad4d9e699da25b560f460"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/65e6382ac23277ec7a51500214f322554865d443/comments",
            "commit": {
                "author": {
                    "date": "2021-12-25T22:50:42Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "scoder"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-12-25T22:50:42Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Align py/pyx examples",
                "tree": {
                    "sha": "dc6a7efde4342a87ef1e541a6a07af6eb3ca6f2e",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/dc6a7efde4342a87ef1e541a6a07af6eb3ca6f2e"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/65e6382ac23277ec7a51500214f322554865d443",
                "verification": {
                    "payload": "tree dc6a7efde4342a87ef1e541a6a07af6eb3ca6f2e\nparent 474473c1b025911ddd9ad4d9e699da25b560f460\nauthor scoder <stefan_ml@behnel.de> 1640472642 +0100\ncommitter GitHub <noreply@github.com> 1640472642 +0100\n\nAlign py/pyx examples",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhx6BCCRBK7hj4Ov3rIwAAK78IAH8NS+T90YiKMT9ungHcRCB4\nJ51qs5WcxAMChn7Q8sL7Y0Dp9pb5y1CKkA9NiDV1cCoT6WBKR8Ko9JxxTgxPG+/V\nGcGJzDEXiBe/Wh7eqk93E0Nr+UMvJacVGV0ZA3PBXOGHKfgLXRuTpHih9PQlmBFE\nQQH2c1WdeiPnXoerr2el76Q1EVwMXWTOnInv8lZgCpUQLR2f9zEGHKlOxMosj4IG\njmyVKUJAHXVMsKB+P4GYRfWAR/Nv9HauHDzeZEUTvpQo2TiRrFAu4H5e8yUjmtVp\nH2L0+f7SUR/9NZcev5ZES6E3Ys9/9jTrzYsuXr+k0BVx3+BOEd3w2FN91rV+1QU=\n=4WUy\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/65e6382ac23277ec7a51500214f322554865d443",
            "node_id": "C_kwDOFL4z49oAKDY1ZTYzODJhYzIzMjc3ZWM3YTUxNTAwMjE0ZjMyMjU1NDg2NWQ0NDM",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/474473c1b025911ddd9ad4d9e699da25b560f460",
                    "sha": "474473c1b025911ddd9ad4d9e699da25b560f460",
                    "url": "https://api.github.com/repos/cython/cython/commits/474473c1b025911ddd9ad4d9e699da25b560f460"
                }
            ],
            "sha": "65e6382ac23277ec7a51500214f322554865d443",
            "url": "https://api.github.com/repos/cython/cython/commits/65e6382ac23277ec7a51500214f322554865d443"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/3cddff15bc0a57c0af7b5f87aa379caefa2eed7e/comments",
            "commit": {
                "author": {
                    "date": "2022-02-03T11:57:35Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-02-03T11:57:35Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "message": "Merge remote-tracking branch 'upstream/master' into pure_python_extension_types",
                "tree": {
                    "sha": "2ea27ad5b9c9991ab5ec11292265744c078821a6",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/2ea27ad5b9c9991ab5ec11292265744c078821a6"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/3cddff15bc0a57c0af7b5f87aa379caefa2eed7e",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "html_url": "https://github.com/cython/cython/commit/3cddff15bc0a57c0af7b5f87aa379caefa2eed7e",
            "node_id": "C_kwDOFL4z49oAKDNjZGRmZjE1YmMwYTU3YzBhZjdiNWY4N2FhMzc5Y2FlZmEyZWVkN2U",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/65e6382ac23277ec7a51500214f322554865d443",
                    "sha": "65e6382ac23277ec7a51500214f322554865d443",
                    "url": "https://api.github.com/repos/cython/cython/commits/65e6382ac23277ec7a51500214f322554865d443"
                },
                {
                    "html_url": "https://github.com/cython/cython/commit/b859cf2bd72d525a724149a6e552abecf9cd9d89",
                    "sha": "b859cf2bd72d525a724149a6e552abecf9cd9d89",
                    "url": "https://api.github.com/repos/cython/cython/commits/b859cf2bd72d525a724149a6e552abecf9cd9d89"
                }
            ],
            "sha": "3cddff15bc0a57c0af7b5f87aa379caefa2eed7e",
            "url": "https://api.github.com/repos/cython/cython/commits/3cddff15bc0a57c0af7b5f87aa379caefa2eed7e"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/2ab987b0591081db223379cd40d5b009a8329b15/comments",
            "commit": {
                "author": {
                    "date": "2022-02-03T17:00:18Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-02-03T17:00:18Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "message": "Adjust documenation after introduction support of typing.Optional",
                "tree": {
                    "sha": "dd765a4bbda2e93d4eb0cba9e664be978eb21f69",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/dd765a4bbda2e93d4eb0cba9e664be978eb21f69"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/2ab987b0591081db223379cd40d5b009a8329b15",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "html_url": "https://github.com/cython/cython/commit/2ab987b0591081db223379cd40d5b009a8329b15",
            "node_id": "C_kwDOFL4z49oAKDJhYjk4N2IwNTkxMDgxZGIyMjMzNzljZDQwZDViMDA5YTgzMjliMTU",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/3cddff15bc0a57c0af7b5f87aa379caefa2eed7e",
                    "sha": "3cddff15bc0a57c0af7b5f87aa379caefa2eed7e",
                    "url": "https://api.github.com/repos/cython/cython/commits/3cddff15bc0a57c0af7b5f87aa379caefa2eed7e"
                }
            ],
            "sha": "2ab987b0591081db223379cd40d5b009a8329b15",
            "url": "https://api.github.com/repos/cython/cython/commits/2ab987b0591081db223379cd40d5b009a8329b15"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/fbfd35217e06a6f3f5c9bb1cefe3bdf79bec6f98/comments",
            "commit": {
                "author": {
                    "date": "2022-02-04T23:45:42Z",
                    "email": "matusvalo@users.noreply.github.com",
                    "name": "Matus Valo"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-02-04T23:45:42Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Apply suggestions from code review\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                "tree": {
                    "sha": "0f81c061ce20b307eb82be886118a550ef2aba81",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/0f81c061ce20b307eb82be886118a550ef2aba81"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/fbfd35217e06a6f3f5c9bb1cefe3bdf79bec6f98",
                "verification": {
                    "payload": "tree 0f81c061ce20b307eb82be886118a550ef2aba81\nparent 2ab987b0591081db223379cd40d5b009a8329b15\nauthor Matus Valo <matusvalo@users.noreply.github.com> 1644018342 +0100\ncommitter GitHub <noreply@github.com> 1644018342 +0100\n\nApply suggestions from code review\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh/bqmCRBK7hj4Ov3rIwAAt0EIAB8xb712FbqNH2UCXyNbYuPy\ncP5Lxlj8p7ATw02QjvfBshs9qGOPoSXRpN5ZdjgJ2wNAnixFxex1tptk80Kstkkc\nyoIq5BZcLdly9f/H9etp1C2vpdjVKpg5yh6jAeiN7WklZZvOxmhxKrGStpEsQthU\nMGLFuvgHHmln+NQshTbcmOSzlMrfg9jtBOTsmVmYSY2yfFyX6xsTRifgMqOVO0h0\nF2yj3zrSs8fDXpQ1IzZzHe3oV8DtlYkqp+3KXDeCzv8pckikKt5Tz+e4FwcnzdFw\nRYKuG2uW4LMB+JXFpdPa0btM4f2d+NalxPILk2B/AJL/wXWM5bZp0iZBOQinWbA=\n=rTCO\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/fbfd35217e06a6f3f5c9bb1cefe3bdf79bec6f98",
            "node_id": "C_kwDOFL4z49oAKGZiZmQzNTIxN2UwNmE2ZjNmNWM5YmIxY2VmZTNiZGY3OWJlYzZmOTg",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/2ab987b0591081db223379cd40d5b009a8329b15",
                    "sha": "2ab987b0591081db223379cd40d5b009a8329b15",
                    "url": "https://api.github.com/repos/cython/cython/commits/2ab987b0591081db223379cd40d5b009a8329b15"
                }
            ],
            "sha": "fbfd35217e06a6f3f5c9bb1cefe3bdf79bec6f98",
            "url": "https://api.github.com/repos/cython/cython/commits/fbfd35217e06a6f3f5c9bb1cefe3bdf79bec6f98"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/c54af9be9b303fe2e4288f7d395ffea7c9e05a8a/comments",
            "commit": {
                "author": {
                    "date": "2022-02-04T23:55:45Z",
                    "email": "matusvalo@users.noreply.github.com",
                    "name": "Matus Valo"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-02-04T23:55:45Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Apply suggestions from code review\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                "tree": {
                    "sha": "10b0c01d35d42c6c67ed5a08f5825ac348785cbb",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/10b0c01d35d42c6c67ed5a08f5825ac348785cbb"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/c54af9be9b303fe2e4288f7d395ffea7c9e05a8a",
                "verification": {
                    "payload": "tree 10b0c01d35d42c6c67ed5a08f5825ac348785cbb\nparent fbfd35217e06a6f3f5c9bb1cefe3bdf79bec6f98\nauthor Matus Valo <matusvalo@users.noreply.github.com> 1644018945 +0100\ncommitter GitHub <noreply@github.com> 1644018945 +0100\n\nApply suggestions from code review\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh/b0BCRBK7hj4Ov3rIwAAhpwIAJNz1ybl65nK6zakFIfdF7Or\nv+E9u0L2XYFv1SOa2L1Qm0YwMTC6c0ntjcv551JMLwha9MJFJvuNAHMywKk/BDUH\necXpewnP5DjF6YIbWJMJ85q0X+6Ngu9rvJfoONLU/2mqh4ykTTcZgw8mMZHkUN/e\n/2CmCq1o7oraogORaPSt7heghHGFeMr047XsN8NzVLXzAdV0M63ta55i+wnf3IWT\n4a/gZTDaZzLI6dRIpM7YVYe+ZMlR9zw4qAZApRwwgNiOAUcwYWfnTPYt3GDQqaNr\nLtTTcRqhB5mnIY22Jg5VPPArHVhFslyzGv/uNUqhOvwujUkQEGGpsQ17p8r+/Bs=\n=+TVc\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/c54af9be9b303fe2e4288f7d395ffea7c9e05a8a",
            "node_id": "C_kwDOFL4z49oAKGM1NGFmOWJlOWIzMDNmZTJlNDI4OGY3ZDM5NWZmZWE3YzllMDVhOGE",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/fbfd35217e06a6f3f5c9bb1cefe3bdf79bec6f98",
                    "sha": "fbfd35217e06a6f3f5c9bb1cefe3bdf79bec6f98",
                    "url": "https://api.github.com/repos/cython/cython/commits/fbfd35217e06a6f3f5c9bb1cefe3bdf79bec6f98"
                }
            ],
            "sha": "c54af9be9b303fe2e4288f7d395ffea7c9e05a8a",
            "url": "https://api.github.com/repos/cython/cython/commits/c54af9be9b303fe2e4288f7d395ffea7c9e05a8a"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/b0e339741264164f426a659919ce1e60e1a5c645/comments",
            "commit": {
                "author": {
                    "date": "2022-02-05T18:17:55Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-02-05T18:18:46Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "message": "Remove note",
                "tree": {
                    "sha": "3c45a69a9df5ebbc9511f137b9fbb5a4ae536042",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/3c45a69a9df5ebbc9511f137b9fbb5a4ae536042"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/b0e339741264164f426a659919ce1e60e1a5c645",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "html_url": "https://github.com/cython/cython/commit/b0e339741264164f426a659919ce1e60e1a5c645",
            "node_id": "C_kwDOFL4z49oAKGIwZTMzOTc0MTI2NDE2NGY0MjZhNjU5OTE5Y2UxZTYwZTFhNWM2NDU",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/c54af9be9b303fe2e4288f7d395ffea7c9e05a8a",
                    "sha": "c54af9be9b303fe2e4288f7d395ffea7c9e05a8a",
                    "url": "https://api.github.com/repos/cython/cython/commits/c54af9be9b303fe2e4288f7d395ffea7c9e05a8a"
                }
            ],
            "sha": "b0e339741264164f426a659919ce1e60e1a5c645",
            "url": "https://api.github.com/repos/cython/cython/commits/b0e339741264164f426a659919ce1e60e1a5c645"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/f4730c8fd8db15fee38c15da4a4e685fef62676a/comments",
            "commit": {
                "author": {
                    "date": "2022-02-05T18:32:51Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-02-05T18:37:11Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "message": "Add colon character before examples",
                "tree": {
                    "sha": "86beab77aff3a1c742d3cbcbe9a4ce5af25b3b22",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/86beab77aff3a1c742d3cbcbe9a4ce5af25b3b22"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/f4730c8fd8db15fee38c15da4a4e685fef62676a",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "html_url": "https://github.com/cython/cython/commit/f4730c8fd8db15fee38c15da4a4e685fef62676a",
            "node_id": "C_kwDOFL4z49oAKGY0NzMwYzhmZDhkYjE1ZmVlMzhjMTVkYTRhNGU2ODVmZWY2MjY3NmE",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/b0e339741264164f426a659919ce1e60e1a5c645",
                    "sha": "b0e339741264164f426a659919ce1e60e1a5c645",
                    "url": "https://api.github.com/repos/cython/cython/commits/b0e339741264164f426a659919ce1e60e1a5c645"
                }
            ],
            "sha": "f4730c8fd8db15fee38c15da4a4e685fef62676a",
            "url": "https://api.github.com/repos/cython/cython/commits/f4730c8fd8db15fee38c15da4a4e685fef62676a"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/3bf11b6646e211e83492646801925fed432c8736/comments",
            "commit": {
                "author": {
                    "date": "2022-02-05T18:53:07Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-02-05T18:53:07Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "message": "Remove broken sentense",
                "tree": {
                    "sha": "959cc0ca85da44723001b30fede410ea98dbf491",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/959cc0ca85da44723001b30fede410ea98dbf491"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/3bf11b6646e211e83492646801925fed432c8736",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "html_url": "https://github.com/cython/cython/commit/3bf11b6646e211e83492646801925fed432c8736",
            "node_id": "C_kwDOFL4z49oAKDNiZjExYjY2NDZlMjExZTgzNDkyNjQ2ODAxOTI1ZmVkNDMyYzg3MzY",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/f4730c8fd8db15fee38c15da4a4e685fef62676a",
                    "sha": "f4730c8fd8db15fee38c15da4a4e685fef62676a",
                    "url": "https://api.github.com/repos/cython/cython/commits/f4730c8fd8db15fee38c15da4a4e685fef62676a"
                }
            ],
            "sha": "3bf11b6646e211e83492646801925fed432c8736",
            "url": "https://api.github.com/repos/cython/cython/commits/3bf11b6646e211e83492646801925fed432c8736"
        }
    ],
    "commits_url": "https://api.github.com/repos/cython/cython/pulls/4516/commits",
    "created_at": "2021-12-22T20:05:07Z",
    "diff_url": "https://github.com/cython/cython/pull/4516.diff",
    "draft": false,
    "head": {
        "label": "matusvalo:pure_python_extension_types",
        "ref": "pure_python_extension_types",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/matusvalo/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/matusvalo/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/matusvalo/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/matusvalo/cython/branches{/branch}",
            "clone_url": "https://github.com/matusvalo/cython.git",
            "collaborators_url": "https://api.github.com/repos/matusvalo/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/matusvalo/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/matusvalo/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/matusvalo/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/matusvalo/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/matusvalo/cython/contributors",
            "created_at": "2021-03-15T14:49:34Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/matusvalo/cython/deployments",
            "description": "The most widely used Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/matusvalo/cython/downloads",
            "events_url": "https://api.github.com/repos/matusvalo/cython/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/matusvalo/cython/forks",
            "full_name": "matusvalo/cython",
            "git_commits_url": "https://api.github.com/repos/matusvalo/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/matusvalo/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/matusvalo/cython/git/tags{/sha}",
            "git_url": "git://github.com/matusvalo/cython.git",
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://cython.org",
            "hooks_url": "https://api.github.com/repos/matusvalo/cython/hooks",
            "html_url": "https://github.com/matusvalo/cython",
            "id": 348009443,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/matusvalo/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/matusvalo/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/matusvalo/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/matusvalo/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/matusvalo/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/matusvalo/cython/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/matusvalo/cython/merges",
            "milestones_url": "https://api.github.com/repos/matusvalo/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkzNDgwMDk0NDM=",
            "notifications_url": "https://api.github.com/repos/matusvalo/cython/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/matusvalo/cython/pulls{/number}",
            "pushed_at": "2022-02-05T18:53:28Z",
            "releases_url": "https://api.github.com/repos/matusvalo/cython/releases{/id}",
            "size": 65741,
            "ssh_url": "git@github.com:matusvalo/cython.git",
            "stargazers_count": 2,
            "stargazers_url": "https://api.github.com/repos/matusvalo/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/matusvalo/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/matusvalo/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/matusvalo/cython/subscription",
            "svn_url": "https://github.com/matusvalo/cython",
            "tags_url": "https://api.github.com/repos/matusvalo/cython/tags",
            "teams_url": "https://api.github.com/repos/matusvalo/cython/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/matusvalo/cython/git/trees{/sha}",
            "updated_at": "2022-01-01T09:57:48Z",
            "url": "https://api.github.com/repos/matusvalo/cython",
            "visibility": "public",
            "watchers": 2,
            "watchers_count": 2
        },
        "sha": "3bf11b6646e211e83492646801925fed432c8736",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
            "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
            "followers_url": "https://api.github.com/users/matusvalo/followers",
            "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
            "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/matusvalo",
            "id": 827060,
            "login": "matusvalo",
            "node_id": "MDQ6VXNlcjgyNzA2MA==",
            "organizations_url": "https://api.github.com/users/matusvalo/orgs",
            "received_events_url": "https://api.github.com/users/matusvalo/received_events",
            "repos_url": "https://api.github.com/users/matusvalo/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/matusvalo"
        }
    },
    "html_url": "https://github.com/cython/cython/pull/4516",
    "id": 808684856,
    "issue_url": "https://api.github.com/repos/cython/cython/issues/4516",
    "labels": [
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425561345,
            "name": "Documentation",
            "node_id": "MDU6TGFiZWw0MjU1NjEzNDU=",
            "url": "https://api.github.com/repos/cython/cython/labels/Documentation"
        }
    ],
    "locked": false,
    "merge_commit_sha": "a938c324afdb2db13758c74d355003bd09f25c2c",
    "merged_at": null,
    "milestone": {
        "closed_at": null,
        "closed_issues": 554,
        "created_at": "2018-08-18T06:33:08Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
            "events_url": "https://api.github.com/users/scoder/events{/privacy}",
            "followers_url": "https://api.github.com/users/scoder/followers",
            "following_url": "https://api.github.com/users/scoder/following{/other_user}",
            "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/scoder",
            "id": 491659,
            "login": "scoder",
            "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
            "organizations_url": "https://api.github.com/users/scoder/orgs",
            "received_events_url": "https://api.github.com/users/scoder/received_events",
            "repos_url": "https://api.github.com/users/scoder/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/scoder"
        },
        "description": "Goals:\r\n– New version scheme: 3.x instead of 0.x.\r\n– Change default `language_level` from `2` to `3`.\r\n– Change default for `binding` directive from `False` to `True`.\r\n– Fix some Python compatibility issues (if possible, allowing for breaking changes).\r\n",
        "due_on": null,
        "html_url": "https://github.com/cython/cython/milestone/58",
        "id": 3580387,
        "labels_url": "https://api.github.com/repos/cython/cython/milestones/58/labels",
        "node_id": "MDk6TWlsZXN0b25lMzU4MDM4Nw==",
        "number": 58,
        "open_issues": 36,
        "state": "open",
        "title": "3.0",
        "updated_at": "2022-02-06T11:00:44Z",
        "url": "https://api.github.com/repos/cython/cython/milestones/58"
    },
    "node_id": "PR_kwDOABDGAc4wM404",
    "number": 4516,
    "patch_url": "https://github.com/cython/cython/pull/4516.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/cython/cython/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/cython/cython/pulls/4516/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/cython/cython/statuses/3bf11b6646e211e83492646801925fed432c8736",
    "title": "Migrate extension_types.rst to pure python",
    "updated_at": "2022-02-05T18:53:55Z",
    "url": "https://api.github.com/repos/cython/cython/pulls/4516",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
        "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
        "followers_url": "https://api.github.com/users/matusvalo/followers",
        "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
        "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/matusvalo",
        "id": 827060,
        "login": "matusvalo",
        "node_id": "MDQ6VXNlcjgyNzA2MA==",
        "organizations_url": "https://api.github.com/users/matusvalo/orgs",
        "received_events_url": "https://api.github.com/users/matusvalo/received_events",
        "repos_url": "https://api.github.com/users/matusvalo/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/matusvalo"
    }
}