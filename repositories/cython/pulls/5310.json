{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/cython/cython/issues/5310/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/cython/cython/pulls/5310/commits"
        },
        "html": {
            "href": "https://github.com/cython/cython/pull/5310"
        },
        "issue": {
            "href": "https://api.github.com/repos/cython/cython/issues/5310"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/cython/cython/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/cython/cython/pulls/5310/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/cython/cython/pulls/5310"
        },
        "statuses": {
            "href": "https://api.github.com/repos/cython/cython/statuses/d3aa90fd3f2067a5d0c2bed636f711234da53955"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "cython:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/cython/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/cython/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/cython/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/cython/cython/branches{/branch}",
            "clone_url": "https://github.com/cython/cython.git",
            "collaborators_url": "https://api.github.com/repos/cython/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/cython/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/cython/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/cython/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/cython/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/cython/cython/contributors",
            "created_at": "2010-11-21T07:44:20Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/cython/cython/deployments",
            "description": "The most widely used Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/cython/cython/downloads",
            "events_url": "https://api.github.com/repos/cython/cython/events",
            "fork": false,
            "forks": 1368,
            "forks_count": 1368,
            "forks_url": "https://api.github.com/repos/cython/cython/forks",
            "full_name": "cython/cython",
            "git_commits_url": "https://api.github.com/repos/cython/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/cython/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/cython/cython/git/tags{/sha}",
            "git_url": "git://github.com/cython/cython.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://cython.org",
            "hooks_url": "https://api.github.com/repos/cython/cython/hooks",
            "html_url": "https://github.com/cython/cython",
            "id": 1099265,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/cython/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/cython/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/cython/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/cython/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/cython/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/cython/cython/languages",
            "license": {
                "key": "apache-2.0",
                "name": "Apache License 2.0",
                "node_id": "MDc6TGljZW5zZTI=",
                "spdx_id": "Apache-2.0",
                "url": "https://api.github.com/licenses/apache-2.0"
            },
            "merges_url": "https://api.github.com/repos/cython/cython/merges",
            "milestones_url": "https://api.github.com/repos/cython/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkxMDk5MjY1",
            "notifications_url": "https://api.github.com/repos/cython/cython/notifications{?since,all,participating}",
            "open_issues": 1149,
            "open_issues_count": 1149,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/486082?v=4",
                "events_url": "https://api.github.com/users/cython/events{/privacy}",
                "followers_url": "https://api.github.com/users/cython/followers",
                "following_url": "https://api.github.com/users/cython/following{/other_user}",
                "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/cython",
                "id": 486082,
                "login": "cython",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
                "organizations_url": "https://api.github.com/users/cython/orgs",
                "received_events_url": "https://api.github.com/users/cython/received_events",
                "repos_url": "https://api.github.com/users/cython/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/cython"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/cython/cython/pulls{/number}",
            "pushed_at": "2023-03-13T08:23:45Z",
            "releases_url": "https://api.github.com/repos/cython/cython/releases{/id}",
            "size": 67501,
            "ssh_url": "git@github.com:cython/cython.git",
            "stargazers_count": 7734,
            "stargazers_url": "https://api.github.com/repos/cython/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/cython/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/cython/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/cython/cython/subscription",
            "svn_url": "https://github.com/cython/cython",
            "tags_url": "https://api.github.com/repos/cython/cython/tags",
            "teams_url": "https://api.github.com/repos/cython/cython/teams",
            "topics": [
                "big-data",
                "c",
                "cpp",
                "cpython",
                "cpython-extensions",
                "cython",
                "performance",
                "python"
            ],
            "trees_url": "https://api.github.com/repos/cython/cython/git/trees{/sha}",
            "updated_at": "2023-03-13T11:03:14Z",
            "url": "https://api.github.com/repos/cython/cython",
            "visibility": "public",
            "watchers": 7734,
            "watchers_count": 7734,
            "web_commit_signoff_required": false
        },
        "sha": "1796c7d4eadc6f1783f5894af8b0b2bd3c9741a3",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/486082?v=4",
            "events_url": "https://api.github.com/users/cython/events{/privacy}",
            "followers_url": "https://api.github.com/users/cython/followers",
            "following_url": "https://api.github.com/users/cython/following{/other_user}",
            "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/cython",
            "id": 486082,
            "login": "cython",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
            "organizations_url": "https://api.github.com/users/cython/orgs",
            "received_events_url": "https://api.github.com/users/cython/received_events",
            "repos_url": "https://api.github.com/users/cython/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/cython"
        }
    },
    "body": "This was originally step 1 in trying to copy some of my own https://cython-guidelines.readthedocs.io content into the official docs. However, I noticed that we're actually missing quite a bit of information about the GIL and thought it'd be good to bring it together in one place. So most of this PR is new content rather than moved content.",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5310#discussion_r1133241920"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5310"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1133241920"
                }
            },
            "author_association": "MEMBER",
            "body": "I was wondering as I wrote this: is this a big enough pitfall that we should emit a warning?",
            "commit_id": "d3aa90fd3f2067a5d0c2bed636f711234da53955",
            "created_at": "2023-03-12T12:00:58Z",
            "diff_hunk": "@@ -0,0 +1,160 @@\n+.. _cython_and_gil:\n+\n+Cython and the GIL\n+==================\n+\n+Python has a global lock (:term:`the GIL <Global Interpreter Lock or GIL>`)\n+to ensure that data related to the Python interpreter is not corrupted.\n+It is *sometimes* to release this lock in Cython when you are not\n+accessing Python data.\n+\n+There are two occasions when you may want to release the\n+GIL:\n+\n+#. Using :ref:`Cython's parallelism mechanism <parallel>`. The contents of a ``prange`` loop for example are required to be ``nogil``.\n+\n+#. If you want other (external) Python threads to be able to run at the same time.\n+\n+    #. if you have a large computationally/IO-intensive block that doesn't need the GIL then it may be \"polite\" to release it, just to benefit users of your code who want to do multi-threading. However, this is mostly useful rather than necessary.\n+\n+    #. (very, very occasionally) it's sometimes useful to briefly release the GIL with a short with ``nogil: pass`` block. This is because Cython doesn't release it spontaneously (unlike Python) so if you're waiting on another Python thread to complete a task, this can avoid deadlocks. This sub-point probably doesn't apply to you unless you're compiling GUI code with Cython.\n+\n+If neither of these two points apply then you probably do not need to release the GIL. The sort of Cython \n+code that can run without the GIL (no calls to Python, purely C-level numeric operations)\n+is often the sort of code that runs efficiently. This sometimes gives people the impression that the\n+inverse is true and the trick is releasing the GIL, rather than the actual code they’re running.\n+Don’t be misled by this -- your (single-threaded) code will run the same speed with or without the GIL.\n+\n+Marking functions as able to run without the GIL\n+------------------------------------------------\n+\n+You can mark a whole function (either a Cython function or an :ref:`external function <nogil>`) as\n+``nogil`` by appending this to the function signature or by using the ``@cython.nogil`` decorator:\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+    \n+        .. code-block:: python\n+\n+            @cython.nogil(True)\n+            @cython.cfunc\n+            @cython.noexcept\n+            def some_func() -> None:\n+            ...\n+\n+    .. group-tab:: Cython\n+    \n+        .. code-block:: cython\n+    \n+            cdef void some_func() noexcept nogil:\n+                ....\n+\n+Be aware that this does not release the GIL when calling the function. It merely indicates that\n+a function is suitable for use when the GIL is released. It is also fine to call these functions\n+while holding the GIL.\n+\n+In this case we've marked the function as ``noexcept`` to indicate that it cannot raise a Python\n+exception. Be aware that a function with an ``except *`` exception specification (typically functions",
            "html_url": "https://github.com/cython/cython/pull/5310#discussion_r1133241920",
            "id": 1133241920,
            "line": 66,
            "node_id": "PRRC_kwDOABDGAc5Di-ZA",
            "original_commit_id": "5063f78c84f14b601fa1aa0051734c5fe80bb19f",
            "original_line": 58,
            "original_position": 58,
            "original_start_line": null,
            "path": "docs/src/userguide/nogil.rst",
            "position": 66,
            "pull_request_review_id": 1336012046,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5310",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1133241920/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2023-03-12T12:00:59Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1133241920",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5310#discussion_r1133250948"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5310"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1133250948"
                }
            },
            "author_association": "MEMBER",
            "body": "… sometimes what? Reasonable? Helpful? Possible?",
            "commit_id": "d3aa90fd3f2067a5d0c2bed636f711234da53955",
            "created_at": "2023-03-12T12:58:56Z",
            "diff_hunk": "@@ -0,0 +1,160 @@\n+.. _cython_and_gil:\n+\n+Cython and the GIL\n+==================\n+\n+Python has a global lock (:term:`the GIL <Global Interpreter Lock or GIL>`)\n+to ensure that data related to the Python interpreter is not corrupted.\n+It is *sometimes* to release this lock in Cython when you are not",
            "html_url": "https://github.com/cython/cython/pull/5310#discussion_r1133250948",
            "id": 1133250948,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5DjAmE",
            "original_commit_id": "5063f78c84f14b601fa1aa0051734c5fe80bb19f",
            "original_line": 8,
            "original_position": 8,
            "original_start_line": null,
            "path": "docs/src/userguide/nogil.rst",
            "position": null,
            "pull_request_review_id": 1336020404,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5310",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1133250948/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2023-03-12T13:25:26Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1133250948",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5310#discussion_r1133251002"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5310"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1133251002"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nThere are two occasions when you may want to release the GIL:\r\n```",
            "commit_id": "d3aa90fd3f2067a5d0c2bed636f711234da53955",
            "created_at": "2023-03-12T12:59:16Z",
            "diff_hunk": "@@ -0,0 +1,160 @@\n+.. _cython_and_gil:\n+\n+Cython and the GIL\n+==================\n+\n+Python has a global lock (:term:`the GIL <Global Interpreter Lock or GIL>`)\n+to ensure that data related to the Python interpreter is not corrupted.\n+It is *sometimes* to release this lock in Cython when you are not\n+accessing Python data.\n+\n+There are two occasions when you may want to release the\n+GIL:",
            "html_url": "https://github.com/cython/cython/pull/5310#discussion_r1133251002",
            "id": 1133251002,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5DjAm6",
            "original_commit_id": "5063f78c84f14b601fa1aa0051734c5fe80bb19f",
            "original_line": 12,
            "original_position": 12,
            "original_start_line": 11,
            "path": "docs/src/userguide/nogil.rst",
            "position": null,
            "pull_request_review_id": 1336020404,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5310",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1133251002/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2023-03-12T13:25:26Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1133251002",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5310#discussion_r1133251371"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5310"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1133251371"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    #. (very, very occasionally) in long-running Cython code that never calls into the Python interpreter, it can sometimes be useful to briefly release the GIL with a short ``with nogil: pass`` block. This is because Cython doesn't release it spontaneously (unlike the Python interpreter), so if you're waiting on another Python thread to complete a task, this can avoid deadlocks. This sub-point probably doesn't apply to you unless you're compiling GUI code with Cython.\r\n```\r\nAlso seems worth wrapping the long lines here to make this more readable and editable.",
            "commit_id": "d3aa90fd3f2067a5d0c2bed636f711234da53955",
            "created_at": "2023-03-12T13:01:28Z",
            "diff_hunk": "@@ -0,0 +1,160 @@\n+.. _cython_and_gil:\n+\n+Cython and the GIL\n+==================\n+\n+Python has a global lock (:term:`the GIL <Global Interpreter Lock or GIL>`)\n+to ensure that data related to the Python interpreter is not corrupted.\n+It is *sometimes* to release this lock in Cython when you are not\n+accessing Python data.\n+\n+There are two occasions when you may want to release the\n+GIL:\n+\n+#. Using :ref:`Cython's parallelism mechanism <parallel>`. The contents of a ``prange`` loop for example are required to be ``nogil``.\n+\n+#. If you want other (external) Python threads to be able to run at the same time.\n+\n+    #. if you have a large computationally/IO-intensive block that doesn't need the GIL then it may be \"polite\" to release it, just to benefit users of your code who want to do multi-threading. However, this is mostly useful rather than necessary.\n+\n+    #. (very, very occasionally) it's sometimes useful to briefly release the GIL with a short with ``nogil: pass`` block. This is because Cython doesn't release it spontaneously (unlike Python) so if you're waiting on another Python thread to complete a task, this can avoid deadlocks. This sub-point probably doesn't apply to you unless you're compiling GUI code with Cython.",
            "html_url": "https://github.com/cython/cython/pull/5310#discussion_r1133251371",
            "id": 1133251371,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5DjAsr",
            "original_commit_id": "5063f78c84f14b601fa1aa0051734c5fe80bb19f",
            "original_line": 20,
            "original_position": 20,
            "original_start_line": null,
            "path": "docs/src/userguide/nogil.rst",
            "position": null,
            "pull_request_review_id": 1336020404,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5310",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1133251371/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2023-03-12T13:25:26Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1133251371",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5310#discussion_r1133252238"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5310"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1133252238"
                }
            },
            "author_association": "MEMBER",
            "body": "Users probably won't ever pass `False` here, so we should show them the short version.\r\n```suggestion\r\n            @cython.nogil\r\n```",
            "commit_id": "d3aa90fd3f2067a5d0c2bed636f711234da53955",
            "created_at": "2023-03-12T13:06:56Z",
            "diff_hunk": "@@ -0,0 +1,160 @@\n+.. _cython_and_gil:\n+\n+Cython and the GIL\n+==================\n+\n+Python has a global lock (:term:`the GIL <Global Interpreter Lock or GIL>`)\n+to ensure that data related to the Python interpreter is not corrupted.\n+It is *sometimes* to release this lock in Cython when you are not\n+accessing Python data.\n+\n+There are two occasions when you may want to release the\n+GIL:\n+\n+#. Using :ref:`Cython's parallelism mechanism <parallel>`. The contents of a ``prange`` loop for example are required to be ``nogil``.\n+\n+#. If you want other (external) Python threads to be able to run at the same time.\n+\n+    #. if you have a large computationally/IO-intensive block that doesn't need the GIL then it may be \"polite\" to release it, just to benefit users of your code who want to do multi-threading. However, this is mostly useful rather than necessary.\n+\n+    #. (very, very occasionally) it's sometimes useful to briefly release the GIL with a short with ``nogil: pass`` block. This is because Cython doesn't release it spontaneously (unlike Python) so if you're waiting on another Python thread to complete a task, this can avoid deadlocks. This sub-point probably doesn't apply to you unless you're compiling GUI code with Cython.\n+\n+If neither of these two points apply then you probably do not need to release the GIL. The sort of Cython \n+code that can run without the GIL (no calls to Python, purely C-level numeric operations)\n+is often the sort of code that runs efficiently. This sometimes gives people the impression that the\n+inverse is true and the trick is releasing the GIL, rather than the actual code they’re running.\n+Don’t be misled by this -- your (single-threaded) code will run the same speed with or without the GIL.\n+\n+Marking functions as able to run without the GIL\n+------------------------------------------------\n+\n+You can mark a whole function (either a Cython function or an :ref:`external function <nogil>`) as\n+``nogil`` by appending this to the function signature or by using the ``@cython.nogil`` decorator:\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+    \n+        .. code-block:: python\n+\n+            @cython.nogil(True)",
            "html_url": "https://github.com/cython/cython/pull/5310#discussion_r1133252238",
            "id": 1133252238,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5DjA6O",
            "original_commit_id": "5063f78c84f14b601fa1aa0051734c5fe80bb19f",
            "original_line": 40,
            "original_position": 40,
            "original_start_line": null,
            "path": "docs/src/userguide/nogil.rst",
            "position": null,
            "pull_request_review_id": 1336020404,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5310",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1133252238/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2023-03-12T13:25:26Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1133252238",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5310#discussion_r1133253391"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5310"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1133253391"
                }
            },
            "author_association": "MEMBER",
            "body": "A warning would suggest that users are doing something wrong. They might be, but it's actually perfectly reasonable to use `except * nogil`, so a warning seems annoying and misleading.",
            "commit_id": "d3aa90fd3f2067a5d0c2bed636f711234da53955",
            "created_at": "2023-03-12T13:14:27Z",
            "diff_hunk": "@@ -0,0 +1,160 @@\n+.. _cython_and_gil:\n+\n+Cython and the GIL\n+==================\n+\n+Python has a global lock (:term:`the GIL <Global Interpreter Lock or GIL>`)\n+to ensure that data related to the Python interpreter is not corrupted.\n+It is *sometimes* to release this lock in Cython when you are not\n+accessing Python data.\n+\n+There are two occasions when you may want to release the\n+GIL:\n+\n+#. Using :ref:`Cython's parallelism mechanism <parallel>`. The contents of a ``prange`` loop for example are required to be ``nogil``.\n+\n+#. If you want other (external) Python threads to be able to run at the same time.\n+\n+    #. if you have a large computationally/IO-intensive block that doesn't need the GIL then it may be \"polite\" to release it, just to benefit users of your code who want to do multi-threading. However, this is mostly useful rather than necessary.\n+\n+    #. (very, very occasionally) it's sometimes useful to briefly release the GIL with a short with ``nogil: pass`` block. This is because Cython doesn't release it spontaneously (unlike Python) so if you're waiting on another Python thread to complete a task, this can avoid deadlocks. This sub-point probably doesn't apply to you unless you're compiling GUI code with Cython.\n+\n+If neither of these two points apply then you probably do not need to release the GIL. The sort of Cython \n+code that can run without the GIL (no calls to Python, purely C-level numeric operations)\n+is often the sort of code that runs efficiently. This sometimes gives people the impression that the\n+inverse is true and the trick is releasing the GIL, rather than the actual code they’re running.\n+Don’t be misled by this -- your (single-threaded) code will run the same speed with or without the GIL.\n+\n+Marking functions as able to run without the GIL\n+------------------------------------------------\n+\n+You can mark a whole function (either a Cython function or an :ref:`external function <nogil>`) as\n+``nogil`` by appending this to the function signature or by using the ``@cython.nogil`` decorator:\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+    \n+        .. code-block:: python\n+\n+            @cython.nogil(True)\n+            @cython.cfunc\n+            @cython.noexcept\n+            def some_func() -> None:\n+            ...\n+\n+    .. group-tab:: Cython\n+    \n+        .. code-block:: cython\n+    \n+            cdef void some_func() noexcept nogil:\n+                ....\n+\n+Be aware that this does not release the GIL when calling the function. It merely indicates that\n+a function is suitable for use when the GIL is released. It is also fine to call these functions\n+while holding the GIL.\n+\n+In this case we've marked the function as ``noexcept`` to indicate that it cannot raise a Python\n+exception. Be aware that a function with an ``except *`` exception specification (typically functions",
            "html_url": "https://github.com/cython/cython/pull/5310#discussion_r1133253391",
            "id": 1133253391,
            "in_reply_to_id": 1133241920,
            "line": 66,
            "node_id": "PRRC_kwDOABDGAc5DjBMP",
            "original_commit_id": "5063f78c84f14b601fa1aa0051734c5fe80bb19f",
            "original_line": 58,
            "original_position": 58,
            "original_start_line": null,
            "path": "docs/src/userguide/nogil.rst",
            "position": 66,
            "pull_request_review_id": 1336020404,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5310",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1133253391/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2023-03-12T13:25:27Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1133253391",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5310#discussion_r1133253573"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5310"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1133253573"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n            with cython.nogil:\r\n```",
            "commit_id": "d3aa90fd3f2067a5d0c2bed636f711234da53955",
            "created_at": "2023-03-12T13:15:29Z",
            "diff_hunk": "@@ -0,0 +1,160 @@\n+.. _cython_and_gil:\n+\n+Cython and the GIL\n+==================\n+\n+Python has a global lock (:term:`the GIL <Global Interpreter Lock or GIL>`)\n+to ensure that data related to the Python interpreter is not corrupted.\n+It is *sometimes* to release this lock in Cython when you are not\n+accessing Python data.\n+\n+There are two occasions when you may want to release the\n+GIL:\n+\n+#. Using :ref:`Cython's parallelism mechanism <parallel>`. The contents of a ``prange`` loop for example are required to be ``nogil``.\n+\n+#. If you want other (external) Python threads to be able to run at the same time.\n+\n+    #. if you have a large computationally/IO-intensive block that doesn't need the GIL then it may be \"polite\" to release it, just to benefit users of your code who want to do multi-threading. However, this is mostly useful rather than necessary.\n+\n+    #. (very, very occasionally) it's sometimes useful to briefly release the GIL with a short with ``nogil: pass`` block. This is because Cython doesn't release it spontaneously (unlike Python) so if you're waiting on another Python thread to complete a task, this can avoid deadlocks. This sub-point probably doesn't apply to you unless you're compiling GUI code with Cython.\n+\n+If neither of these two points apply then you probably do not need to release the GIL. The sort of Cython \n+code that can run without the GIL (no calls to Python, purely C-level numeric operations)\n+is often the sort of code that runs efficiently. This sometimes gives people the impression that the\n+inverse is true and the trick is releasing the GIL, rather than the actual code they’re running.\n+Don’t be misled by this -- your (single-threaded) code will run the same speed with or without the GIL.\n+\n+Marking functions as able to run without the GIL\n+------------------------------------------------\n+\n+You can mark a whole function (either a Cython function or an :ref:`external function <nogil>`) as\n+``nogil`` by appending this to the function signature or by using the ``@cython.nogil`` decorator:\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+    \n+        .. code-block:: python\n+\n+            @cython.nogil(True)\n+            @cython.cfunc\n+            @cython.noexcept\n+            def some_func() -> None:\n+            ...\n+\n+    .. group-tab:: Cython\n+    \n+        .. code-block:: cython\n+    \n+            cdef void some_func() noexcept nogil:\n+                ....\n+\n+Be aware that this does not release the GIL when calling the function. It merely indicates that\n+a function is suitable for use when the GIL is released. It is also fine to call these functions\n+while holding the GIL.\n+\n+In this case we've marked the function as ``noexcept`` to indicate that it cannot raise a Python\n+exception. Be aware that a function with an ``except *`` exception specification (typically functions\n+returning ``void``) will be expensive to call because Cython will need to temporarily reacquire\n+the GIL after every call to check the exception state. Most other exception specifications are\n+cheap to handle in a ``nogil`` block since the GIL is only acquired if an exception is\n+actually thrown.\n+\n+Releasing (and reacquiring) the GIL\n+-----------------------------------\n+\n+To actually release the GIL you can use context managers\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+    \n+        .. code-block:: python\n+        \n+            with cython.nogil(True):",
            "html_url": "https://github.com/cython/cython/pull/5310#discussion_r1133253573",
            "id": 1133253573,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5DjBPF",
            "original_commit_id": "5063f78c84f14b601fa1aa0051734c5fe80bb19f",
            "original_line": 75,
            "original_position": 75,
            "original_start_line": null,
            "path": "docs/src/userguide/nogil.rst",
            "position": null,
            "pull_request_review_id": 1336020404,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5310",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1133253573/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2023-03-12T13:25:26Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1133253573",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5310#discussion_r1133253902"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5310"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1133253902"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nThe ``with gil`` block is a useful trick to allow a small\r\nchunk of Python code or Python object processing inside a non-GIL block. Try not to use it\r\n```",
            "commit_id": "d3aa90fd3f2067a5d0c2bed636f711234da53955",
            "created_at": "2023-03-12T13:17:30Z",
            "diff_hunk": "@@ -0,0 +1,160 @@\n+.. _cython_and_gil:\n+\n+Cython and the GIL\n+==================\n+\n+Python has a global lock (:term:`the GIL <Global Interpreter Lock or GIL>`)\n+to ensure that data related to the Python interpreter is not corrupted.\n+It is *sometimes* to release this lock in Cython when you are not\n+accessing Python data.\n+\n+There are two occasions when you may want to release the\n+GIL:\n+\n+#. Using :ref:`Cython's parallelism mechanism <parallel>`. The contents of a ``prange`` loop for example are required to be ``nogil``.\n+\n+#. If you want other (external) Python threads to be able to run at the same time.\n+\n+    #. if you have a large computationally/IO-intensive block that doesn't need the GIL then it may be \"polite\" to release it, just to benefit users of your code who want to do multi-threading. However, this is mostly useful rather than necessary.\n+\n+    #. (very, very occasionally) it's sometimes useful to briefly release the GIL with a short with ``nogil: pass`` block. This is because Cython doesn't release it spontaneously (unlike Python) so if you're waiting on another Python thread to complete a task, this can avoid deadlocks. This sub-point probably doesn't apply to you unless you're compiling GUI code with Cython.\n+\n+If neither of these two points apply then you probably do not need to release the GIL. The sort of Cython \n+code that can run without the GIL (no calls to Python, purely C-level numeric operations)\n+is often the sort of code that runs efficiently. This sometimes gives people the impression that the\n+inverse is true and the trick is releasing the GIL, rather than the actual code they’re running.\n+Don’t be misled by this -- your (single-threaded) code will run the same speed with or without the GIL.\n+\n+Marking functions as able to run without the GIL\n+------------------------------------------------\n+\n+You can mark a whole function (either a Cython function or an :ref:`external function <nogil>`) as\n+``nogil`` by appending this to the function signature or by using the ``@cython.nogil`` decorator:\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+    \n+        .. code-block:: python\n+\n+            @cython.nogil(True)\n+            @cython.cfunc\n+            @cython.noexcept\n+            def some_func() -> None:\n+            ...\n+\n+    .. group-tab:: Cython\n+    \n+        .. code-block:: cython\n+    \n+            cdef void some_func() noexcept nogil:\n+                ....\n+\n+Be aware that this does not release the GIL when calling the function. It merely indicates that\n+a function is suitable for use when the GIL is released. It is also fine to call these functions\n+while holding the GIL.\n+\n+In this case we've marked the function as ``noexcept`` to indicate that it cannot raise a Python\n+exception. Be aware that a function with an ``except *`` exception specification (typically functions\n+returning ``void``) will be expensive to call because Cython will need to temporarily reacquire\n+the GIL after every call to check the exception state. Most other exception specifications are\n+cheap to handle in a ``nogil`` block since the GIL is only acquired if an exception is\n+actually thrown.\n+\n+Releasing (and reacquiring) the GIL\n+-----------------------------------\n+\n+To actually release the GIL you can use context managers\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+    \n+        .. code-block:: python\n+        \n+            with cython.nogil(True):\n+                ...  # some code that runs without the GIL\n+                with cython.gil:\n+                    ...  # some code that runs with the GIL\n+                ...  # some more code without the GIL\n+            \n+    .. group-tab:: Cython\n+    \n+        .. code-block:: cython\n+    \n+            with nogil:\n+                ...  # some code that runs without the GIL\n+                with gil:\n+                    ...  # some code that runs with the GIL\n+                ...  # some more code without the GIL\n+            \n+The ``with gil`` block is a useful trick to allow a small\n+chunk of Python code to in a non-GIL block. Try not to use it",
            "html_url": "https://github.com/cython/cython/pull/5310#discussion_r1133253902",
            "id": 1133253902,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5DjBUO",
            "original_commit_id": "5063f78c84f14b601fa1aa0051734c5fe80bb19f",
            "original_line": 92,
            "original_position": 92,
            "original_start_line": 91,
            "path": "docs/src/userguide/nogil.rst",
            "position": null,
            "pull_request_review_id": 1336020404,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5310",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1133253902/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2023-03-12T13:25:26Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1133253902",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5310#discussion_r1133254060"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5310"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1133254060"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\ntoo much since there is a cost to waiting for and acquiring the GIL, and because these\r\nblocks cannot run in parallel since all executions require the same lock.\r\n```",
            "commit_id": "d3aa90fd3f2067a5d0c2bed636f711234da53955",
            "created_at": "2023-03-12T13:18:41Z",
            "diff_hunk": "@@ -0,0 +1,160 @@\n+.. _cython_and_gil:\n+\n+Cython and the GIL\n+==================\n+\n+Python has a global lock (:term:`the GIL <Global Interpreter Lock or GIL>`)\n+to ensure that data related to the Python interpreter is not corrupted.\n+It is *sometimes* to release this lock in Cython when you are not\n+accessing Python data.\n+\n+There are two occasions when you may want to release the\n+GIL:\n+\n+#. Using :ref:`Cython's parallelism mechanism <parallel>`. The contents of a ``prange`` loop for example are required to be ``nogil``.\n+\n+#. If you want other (external) Python threads to be able to run at the same time.\n+\n+    #. if you have a large computationally/IO-intensive block that doesn't need the GIL then it may be \"polite\" to release it, just to benefit users of your code who want to do multi-threading. However, this is mostly useful rather than necessary.\n+\n+    #. (very, very occasionally) it's sometimes useful to briefly release the GIL with a short with ``nogil: pass`` block. This is because Cython doesn't release it spontaneously (unlike Python) so if you're waiting on another Python thread to complete a task, this can avoid deadlocks. This sub-point probably doesn't apply to you unless you're compiling GUI code with Cython.\n+\n+If neither of these two points apply then you probably do not need to release the GIL. The sort of Cython \n+code that can run without the GIL (no calls to Python, purely C-level numeric operations)\n+is often the sort of code that runs efficiently. This sometimes gives people the impression that the\n+inverse is true and the trick is releasing the GIL, rather than the actual code they’re running.\n+Don’t be misled by this -- your (single-threaded) code will run the same speed with or without the GIL.\n+\n+Marking functions as able to run without the GIL\n+------------------------------------------------\n+\n+You can mark a whole function (either a Cython function or an :ref:`external function <nogil>`) as\n+``nogil`` by appending this to the function signature or by using the ``@cython.nogil`` decorator:\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+    \n+        .. code-block:: python\n+\n+            @cython.nogil(True)\n+            @cython.cfunc\n+            @cython.noexcept\n+            def some_func() -> None:\n+            ...\n+\n+    .. group-tab:: Cython\n+    \n+        .. code-block:: cython\n+    \n+            cdef void some_func() noexcept nogil:\n+                ....\n+\n+Be aware that this does not release the GIL when calling the function. It merely indicates that\n+a function is suitable for use when the GIL is released. It is also fine to call these functions\n+while holding the GIL.\n+\n+In this case we've marked the function as ``noexcept`` to indicate that it cannot raise a Python\n+exception. Be aware that a function with an ``except *`` exception specification (typically functions\n+returning ``void``) will be expensive to call because Cython will need to temporarily reacquire\n+the GIL after every call to check the exception state. Most other exception specifications are\n+cheap to handle in a ``nogil`` block since the GIL is only acquired if an exception is\n+actually thrown.\n+\n+Releasing (and reacquiring) the GIL\n+-----------------------------------\n+\n+To actually release the GIL you can use context managers\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+    \n+        .. code-block:: python\n+        \n+            with cython.nogil(True):\n+                ...  # some code that runs without the GIL\n+                with cython.gil:\n+                    ...  # some code that runs with the GIL\n+                ...  # some more code without the GIL\n+            \n+    .. group-tab:: Cython\n+    \n+        .. code-block:: cython\n+    \n+            with nogil:\n+                ...  # some code that runs without the GIL\n+                with gil:\n+                    ...  # some code that runs with the GIL\n+                ...  # some more code without the GIL\n+            \n+The ``with gil`` block is a useful trick to allow a small\n+chunk of Python code to in a non-GIL block. Try not to use it\n+too much since there is a cost to acquiring the GIL, and because these\n+blocks cannot be parallelized.",
            "html_url": "https://github.com/cython/cython/pull/5310#discussion_r1133254060",
            "id": 1133254060,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5DjBWs",
            "original_commit_id": "5063f78c84f14b601fa1aa0051734c5fe80bb19f",
            "original_line": 94,
            "original_position": 94,
            "original_start_line": 93,
            "path": "docs/src/userguide/nogil.rst",
            "position": null,
            "pull_request_review_id": 1336020404,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5310",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1133254060/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2023-03-12T13:25:26Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1133254060",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5310#discussion_r1133254198"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5310"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1133254198"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nfeature (no equivalent syntax exists in pure-Python mode)::\r\n```",
            "commit_id": "d3aa90fd3f2067a5d0c2bed636f711234da53955",
            "created_at": "2023-03-12T13:19:29Z",
            "diff_hunk": "@@ -0,0 +1,160 @@\n+.. _cython_and_gil:\n+\n+Cython and the GIL\n+==================\n+\n+Python has a global lock (:term:`the GIL <Global Interpreter Lock or GIL>`)\n+to ensure that data related to the Python interpreter is not corrupted.\n+It is *sometimes* to release this lock in Cython when you are not\n+accessing Python data.\n+\n+There are two occasions when you may want to release the\n+GIL:\n+\n+#. Using :ref:`Cython's parallelism mechanism <parallel>`. The contents of a ``prange`` loop for example are required to be ``nogil``.\n+\n+#. If you want other (external) Python threads to be able to run at the same time.\n+\n+    #. if you have a large computationally/IO-intensive block that doesn't need the GIL then it may be \"polite\" to release it, just to benefit users of your code who want to do multi-threading. However, this is mostly useful rather than necessary.\n+\n+    #. (very, very occasionally) it's sometimes useful to briefly release the GIL with a short with ``nogil: pass`` block. This is because Cython doesn't release it spontaneously (unlike Python) so if you're waiting on another Python thread to complete a task, this can avoid deadlocks. This sub-point probably doesn't apply to you unless you're compiling GUI code with Cython.\n+\n+If neither of these two points apply then you probably do not need to release the GIL. The sort of Cython \n+code that can run without the GIL (no calls to Python, purely C-level numeric operations)\n+is often the sort of code that runs efficiently. This sometimes gives people the impression that the\n+inverse is true and the trick is releasing the GIL, rather than the actual code they’re running.\n+Don’t be misled by this -- your (single-threaded) code will run the same speed with or without the GIL.\n+\n+Marking functions as able to run without the GIL\n+------------------------------------------------\n+\n+You can mark a whole function (either a Cython function or an :ref:`external function <nogil>`) as\n+``nogil`` by appending this to the function signature or by using the ``@cython.nogil`` decorator:\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+    \n+        .. code-block:: python\n+\n+            @cython.nogil(True)\n+            @cython.cfunc\n+            @cython.noexcept\n+            def some_func() -> None:\n+            ...\n+\n+    .. group-tab:: Cython\n+    \n+        .. code-block:: cython\n+    \n+            cdef void some_func() noexcept nogil:\n+                ....\n+\n+Be aware that this does not release the GIL when calling the function. It merely indicates that\n+a function is suitable for use when the GIL is released. It is also fine to call these functions\n+while holding the GIL.\n+\n+In this case we've marked the function as ``noexcept`` to indicate that it cannot raise a Python\n+exception. Be aware that a function with an ``except *`` exception specification (typically functions\n+returning ``void``) will be expensive to call because Cython will need to temporarily reacquire\n+the GIL after every call to check the exception state. Most other exception specifications are\n+cheap to handle in a ``nogil`` block since the GIL is only acquired if an exception is\n+actually thrown.\n+\n+Releasing (and reacquiring) the GIL\n+-----------------------------------\n+\n+To actually release the GIL you can use context managers\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+    \n+        .. code-block:: python\n+        \n+            with cython.nogil(True):\n+                ...  # some code that runs without the GIL\n+                with cython.gil:\n+                    ...  # some code that runs with the GIL\n+                ...  # some more code without the GIL\n+            \n+    .. group-tab:: Cython\n+    \n+        .. code-block:: cython\n+    \n+            with nogil:\n+                ...  # some code that runs without the GIL\n+                with gil:\n+                    ...  # some code that runs with the GIL\n+                ...  # some more code without the GIL\n+            \n+The ``with gil`` block is a useful trick to allow a small\n+chunk of Python code to in a non-GIL block. Try not to use it\n+too much since there is a cost to acquiring the GIL, and because these\n+blocks cannot be parallelized.\n+\n+A function may be marked as ``with gil`` to ensure that the\n+GIL is re-acquired then calling it. This is currently a Cython-only\n+feature (no equivalent exists in pure-Python mode)::",
            "html_url": "https://github.com/cython/cython/pull/5310#discussion_r1133254198",
            "id": 1133254198,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5DjBY2",
            "original_commit_id": "5063f78c84f14b601fa1aa0051734c5fe80bb19f",
            "original_line": 98,
            "original_position": 98,
            "original_start_line": null,
            "path": "docs/src/userguide/nogil.rst",
            "position": null,
            "pull_request_review_id": 1336020404,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5310",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1133254198/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2023-03-12T13:25:26Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1133254198",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5310#discussion_r1133254292"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5310"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1133254292"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nA function may be marked as ``with gil`` to ensure that the\r\nGIL is acquired immediately then calling it. This is currently a Cython-only\r\n```",
            "commit_id": "d3aa90fd3f2067a5d0c2bed636f711234da53955",
            "created_at": "2023-03-12T13:19:58Z",
            "diff_hunk": "@@ -0,0 +1,160 @@\n+.. _cython_and_gil:\n+\n+Cython and the GIL\n+==================\n+\n+Python has a global lock (:term:`the GIL <Global Interpreter Lock or GIL>`)\n+to ensure that data related to the Python interpreter is not corrupted.\n+It is *sometimes* to release this lock in Cython when you are not\n+accessing Python data.\n+\n+There are two occasions when you may want to release the\n+GIL:\n+\n+#. Using :ref:`Cython's parallelism mechanism <parallel>`. The contents of a ``prange`` loop for example are required to be ``nogil``.\n+\n+#. If you want other (external) Python threads to be able to run at the same time.\n+\n+    #. if you have a large computationally/IO-intensive block that doesn't need the GIL then it may be \"polite\" to release it, just to benefit users of your code who want to do multi-threading. However, this is mostly useful rather than necessary.\n+\n+    #. (very, very occasionally) it's sometimes useful to briefly release the GIL with a short with ``nogil: pass`` block. This is because Cython doesn't release it spontaneously (unlike Python) so if you're waiting on another Python thread to complete a task, this can avoid deadlocks. This sub-point probably doesn't apply to you unless you're compiling GUI code with Cython.\n+\n+If neither of these two points apply then you probably do not need to release the GIL. The sort of Cython \n+code that can run without the GIL (no calls to Python, purely C-level numeric operations)\n+is often the sort of code that runs efficiently. This sometimes gives people the impression that the\n+inverse is true and the trick is releasing the GIL, rather than the actual code they’re running.\n+Don’t be misled by this -- your (single-threaded) code will run the same speed with or without the GIL.\n+\n+Marking functions as able to run without the GIL\n+------------------------------------------------\n+\n+You can mark a whole function (either a Cython function or an :ref:`external function <nogil>`) as\n+``nogil`` by appending this to the function signature or by using the ``@cython.nogil`` decorator:\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+    \n+        .. code-block:: python\n+\n+            @cython.nogil(True)\n+            @cython.cfunc\n+            @cython.noexcept\n+            def some_func() -> None:\n+            ...\n+\n+    .. group-tab:: Cython\n+    \n+        .. code-block:: cython\n+    \n+            cdef void some_func() noexcept nogil:\n+                ....\n+\n+Be aware that this does not release the GIL when calling the function. It merely indicates that\n+a function is suitable for use when the GIL is released. It is also fine to call these functions\n+while holding the GIL.\n+\n+In this case we've marked the function as ``noexcept`` to indicate that it cannot raise a Python\n+exception. Be aware that a function with an ``except *`` exception specification (typically functions\n+returning ``void``) will be expensive to call because Cython will need to temporarily reacquire\n+the GIL after every call to check the exception state. Most other exception specifications are\n+cheap to handle in a ``nogil`` block since the GIL is only acquired if an exception is\n+actually thrown.\n+\n+Releasing (and reacquiring) the GIL\n+-----------------------------------\n+\n+To actually release the GIL you can use context managers\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+    \n+        .. code-block:: python\n+        \n+            with cython.nogil(True):\n+                ...  # some code that runs without the GIL\n+                with cython.gil:\n+                    ...  # some code that runs with the GIL\n+                ...  # some more code without the GIL\n+            \n+    .. group-tab:: Cython\n+    \n+        .. code-block:: cython\n+    \n+            with nogil:\n+                ...  # some code that runs without the GIL\n+                with gil:\n+                    ...  # some code that runs with the GIL\n+                ...  # some more code without the GIL\n+            \n+The ``with gil`` block is a useful trick to allow a small\n+chunk of Python code to in a non-GIL block. Try not to use it\n+too much since there is a cost to acquiring the GIL, and because these\n+blocks cannot be parallelized.\n+\n+A function may be marked as ``with gil`` to ensure that the\n+GIL is re-acquired then calling it. This is currently a Cython-only",
            "html_url": "https://github.com/cython/cython/pull/5310#discussion_r1133254292",
            "id": 1133254292,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5DjBaU",
            "original_commit_id": "5063f78c84f14b601fa1aa0051734c5fe80bb19f",
            "original_line": 97,
            "original_position": 97,
            "original_start_line": 96,
            "path": "docs/src/userguide/nogil.rst",
            "position": null,
            "pull_request_review_id": 1336020404,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5310",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1133254292/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2023-03-12T13:25:26Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1133254292",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5310#discussion_r1133254495"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5310"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1133254495"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n            with cython.nogil(some_type is not object):\r\n                ...  # some code that runs without the GIL, unless we're processing objects\r\n```",
            "commit_id": "d3aa90fd3f2067a5d0c2bed636f711234da53955",
            "created_at": "2023-03-12T13:21:19Z",
            "diff_hunk": "@@ -0,0 +1,160 @@\n+.. _cython_and_gil:\n+\n+Cython and the GIL\n+==================\n+\n+Python has a global lock (:term:`the GIL <Global Interpreter Lock or GIL>`)\n+to ensure that data related to the Python interpreter is not corrupted.\n+It is *sometimes* to release this lock in Cython when you are not\n+accessing Python data.\n+\n+There are two occasions when you may want to release the\n+GIL:\n+\n+#. Using :ref:`Cython's parallelism mechanism <parallel>`. The contents of a ``prange`` loop for example are required to be ``nogil``.\n+\n+#. If you want other (external) Python threads to be able to run at the same time.\n+\n+    #. if you have a large computationally/IO-intensive block that doesn't need the GIL then it may be \"polite\" to release it, just to benefit users of your code who want to do multi-threading. However, this is mostly useful rather than necessary.\n+\n+    #. (very, very occasionally) it's sometimes useful to briefly release the GIL with a short with ``nogil: pass`` block. This is because Cython doesn't release it spontaneously (unlike Python) so if you're waiting on another Python thread to complete a task, this can avoid deadlocks. This sub-point probably doesn't apply to you unless you're compiling GUI code with Cython.\n+\n+If neither of these two points apply then you probably do not need to release the GIL. The sort of Cython \n+code that can run without the GIL (no calls to Python, purely C-level numeric operations)\n+is often the sort of code that runs efficiently. This sometimes gives people the impression that the\n+inverse is true and the trick is releasing the GIL, rather than the actual code they’re running.\n+Don’t be misled by this -- your (single-threaded) code will run the same speed with or without the GIL.\n+\n+Marking functions as able to run without the GIL\n+------------------------------------------------\n+\n+You can mark a whole function (either a Cython function or an :ref:`external function <nogil>`) as\n+``nogil`` by appending this to the function signature or by using the ``@cython.nogil`` decorator:\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+    \n+        .. code-block:: python\n+\n+            @cython.nogil(True)\n+            @cython.cfunc\n+            @cython.noexcept\n+            def some_func() -> None:\n+            ...\n+\n+    .. group-tab:: Cython\n+    \n+        .. code-block:: cython\n+    \n+            cdef void some_func() noexcept nogil:\n+                ....\n+\n+Be aware that this does not release the GIL when calling the function. It merely indicates that\n+a function is suitable for use when the GIL is released. It is also fine to call these functions\n+while holding the GIL.\n+\n+In this case we've marked the function as ``noexcept`` to indicate that it cannot raise a Python\n+exception. Be aware that a function with an ``except *`` exception specification (typically functions\n+returning ``void``) will be expensive to call because Cython will need to temporarily reacquire\n+the GIL after every call to check the exception state. Most other exception specifications are\n+cheap to handle in a ``nogil`` block since the GIL is only acquired if an exception is\n+actually thrown.\n+\n+Releasing (and reacquiring) the GIL\n+-----------------------------------\n+\n+To actually release the GIL you can use context managers\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+    \n+        .. code-block:: python\n+        \n+            with cython.nogil(True):\n+                ...  # some code that runs without the GIL\n+                with cython.gil:\n+                    ...  # some code that runs with the GIL\n+                ...  # some more code without the GIL\n+            \n+    .. group-tab:: Cython\n+    \n+        .. code-block:: cython\n+    \n+            with nogil:\n+                ...  # some code that runs without the GIL\n+                with gil:\n+                    ...  # some code that runs with the GIL\n+                ...  # some more code without the GIL\n+            \n+The ``with gil`` block is a useful trick to allow a small\n+chunk of Python code to in a non-GIL block. Try not to use it\n+too much since there is a cost to acquiring the GIL, and because these\n+blocks cannot be parallelized.\n+\n+A function may be marked as ``with gil`` to ensure that the\n+GIL is re-acquired then calling it. This is currently a Cython-only\n+feature (no equivalent exists in pure-Python mode)::\n+\n+  cdef int some_func() with gil:\n+      ...\n+      \n+Conditionally acquiring the GIL\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+It's possible to release the GIL based on a compile-time condition.\n+This is most often used when working with :ref:`fusedtypes`\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+    \n+        .. code-block:: python\n+    \n+            with cython.nogil(some_type is object):\n+                ...  # some code that runs without the GIL",
            "html_url": "https://github.com/cython/cython/pull/5310#discussion_r1133254495",
            "id": 1133254495,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5DjBdf",
            "original_commit_id": "5063f78c84f14b601fa1aa0051734c5fe80bb19f",
            "original_line": 116,
            "original_position": 116,
            "original_start_line": 115,
            "path": "docs/src/userguide/nogil.rst",
            "position": null,
            "pull_request_review_id": 1336020404,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5310",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1133254495/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2023-03-12T13:25:26Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1133254495",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5310#discussion_r1133254568"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5310"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1133254568"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n            with nogil(some_type is not object):\r\n                ...  # some code that runs without the GIL, unless we're processing objects\r\n```",
            "commit_id": "d3aa90fd3f2067a5d0c2bed636f711234da53955",
            "created_at": "2023-03-12T13:21:51Z",
            "diff_hunk": "@@ -0,0 +1,160 @@\n+.. _cython_and_gil:\n+\n+Cython and the GIL\n+==================\n+\n+Python has a global lock (:term:`the GIL <Global Interpreter Lock or GIL>`)\n+to ensure that data related to the Python interpreter is not corrupted.\n+It is *sometimes* to release this lock in Cython when you are not\n+accessing Python data.\n+\n+There are two occasions when you may want to release the\n+GIL:\n+\n+#. Using :ref:`Cython's parallelism mechanism <parallel>`. The contents of a ``prange`` loop for example are required to be ``nogil``.\n+\n+#. If you want other (external) Python threads to be able to run at the same time.\n+\n+    #. if you have a large computationally/IO-intensive block that doesn't need the GIL then it may be \"polite\" to release it, just to benefit users of your code who want to do multi-threading. However, this is mostly useful rather than necessary.\n+\n+    #. (very, very occasionally) it's sometimes useful to briefly release the GIL with a short with ``nogil: pass`` block. This is because Cython doesn't release it spontaneously (unlike Python) so if you're waiting on another Python thread to complete a task, this can avoid deadlocks. This sub-point probably doesn't apply to you unless you're compiling GUI code with Cython.\n+\n+If neither of these two points apply then you probably do not need to release the GIL. The sort of Cython \n+code that can run without the GIL (no calls to Python, purely C-level numeric operations)\n+is often the sort of code that runs efficiently. This sometimes gives people the impression that the\n+inverse is true and the trick is releasing the GIL, rather than the actual code they’re running.\n+Don’t be misled by this -- your (single-threaded) code will run the same speed with or without the GIL.\n+\n+Marking functions as able to run without the GIL\n+------------------------------------------------\n+\n+You can mark a whole function (either a Cython function or an :ref:`external function <nogil>`) as\n+``nogil`` by appending this to the function signature or by using the ``@cython.nogil`` decorator:\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+    \n+        .. code-block:: python\n+\n+            @cython.nogil(True)\n+            @cython.cfunc\n+            @cython.noexcept\n+            def some_func() -> None:\n+            ...\n+\n+    .. group-tab:: Cython\n+    \n+        .. code-block:: cython\n+    \n+            cdef void some_func() noexcept nogil:\n+                ....\n+\n+Be aware that this does not release the GIL when calling the function. It merely indicates that\n+a function is suitable for use when the GIL is released. It is also fine to call these functions\n+while holding the GIL.\n+\n+In this case we've marked the function as ``noexcept`` to indicate that it cannot raise a Python\n+exception. Be aware that a function with an ``except *`` exception specification (typically functions\n+returning ``void``) will be expensive to call because Cython will need to temporarily reacquire\n+the GIL after every call to check the exception state. Most other exception specifications are\n+cheap to handle in a ``nogil`` block since the GIL is only acquired if an exception is\n+actually thrown.\n+\n+Releasing (and reacquiring) the GIL\n+-----------------------------------\n+\n+To actually release the GIL you can use context managers\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+    \n+        .. code-block:: python\n+        \n+            with cython.nogil(True):\n+                ...  # some code that runs without the GIL\n+                with cython.gil:\n+                    ...  # some code that runs with the GIL\n+                ...  # some more code without the GIL\n+            \n+    .. group-tab:: Cython\n+    \n+        .. code-block:: cython\n+    \n+            with nogil:\n+                ...  # some code that runs without the GIL\n+                with gil:\n+                    ...  # some code that runs with the GIL\n+                ...  # some more code without the GIL\n+            \n+The ``with gil`` block is a useful trick to allow a small\n+chunk of Python code to in a non-GIL block. Try not to use it\n+too much since there is a cost to acquiring the GIL, and because these\n+blocks cannot be parallelized.\n+\n+A function may be marked as ``with gil`` to ensure that the\n+GIL is re-acquired then calling it. This is currently a Cython-only\n+feature (no equivalent exists in pure-Python mode)::\n+\n+  cdef int some_func() with gil:\n+      ...\n+      \n+Conditionally acquiring the GIL\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+It's possible to release the GIL based on a compile-time condition.\n+This is most often used when working with :ref:`fusedtypes`\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+    \n+        .. code-block:: python\n+    \n+            with cython.nogil(some_type is object):\n+                ...  # some code that runs without the GIL\n+            \n+    .. group-tab:: Cython\n+    \n+        .. code-block:: cython\n+    \n+            with nogil(some_type is object):\n+                ...  # some code that runs without the GIL",
            "html_url": "https://github.com/cython/cython/pull/5310#discussion_r1133254568",
            "id": 1133254568,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5DjBeo",
            "original_commit_id": "5063f78c84f14b601fa1aa0051734c5fe80bb19f",
            "original_line": 123,
            "original_position": 123,
            "original_start_line": 122,
            "path": "docs/src/userguide/nogil.rst",
            "position": null,
            "pull_request_review_id": 1336020404,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5310",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1133254568/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2023-03-12T13:25:27Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1133254568",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5310#discussion_r1133254764"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5310"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1133254764"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nacquire the GIL only if needed, but ``except *`` functions are\r\nless efficient since Cython must always re-acquire the GIL.\r\n```",
            "commit_id": "d3aa90fd3f2067a5d0c2bed636f711234da53955",
            "created_at": "2023-03-12T13:22:59Z",
            "diff_hunk": "@@ -0,0 +1,160 @@\n+.. _cython_and_gil:\n+\n+Cython and the GIL\n+==================\n+\n+Python has a global lock (:term:`the GIL <Global Interpreter Lock or GIL>`)\n+to ensure that data related to the Python interpreter is not corrupted.\n+It is *sometimes* to release this lock in Cython when you are not\n+accessing Python data.\n+\n+There are two occasions when you may want to release the\n+GIL:\n+\n+#. Using :ref:`Cython's parallelism mechanism <parallel>`. The contents of a ``prange`` loop for example are required to be ``nogil``.\n+\n+#. If you want other (external) Python threads to be able to run at the same time.\n+\n+    #. if you have a large computationally/IO-intensive block that doesn't need the GIL then it may be \"polite\" to release it, just to benefit users of your code who want to do multi-threading. However, this is mostly useful rather than necessary.\n+\n+    #. (very, very occasionally) it's sometimes useful to briefly release the GIL with a short with ``nogil: pass`` block. This is because Cython doesn't release it spontaneously (unlike Python) so if you're waiting on another Python thread to complete a task, this can avoid deadlocks. This sub-point probably doesn't apply to you unless you're compiling GUI code with Cython.\n+\n+If neither of these two points apply then you probably do not need to release the GIL. The sort of Cython \n+code that can run without the GIL (no calls to Python, purely C-level numeric operations)\n+is often the sort of code that runs efficiently. This sometimes gives people the impression that the\n+inverse is true and the trick is releasing the GIL, rather than the actual code they’re running.\n+Don’t be misled by this -- your (single-threaded) code will run the same speed with or without the GIL.\n+\n+Marking functions as able to run without the GIL\n+------------------------------------------------\n+\n+You can mark a whole function (either a Cython function or an :ref:`external function <nogil>`) as\n+``nogil`` by appending this to the function signature or by using the ``@cython.nogil`` decorator:\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+    \n+        .. code-block:: python\n+\n+            @cython.nogil(True)\n+            @cython.cfunc\n+            @cython.noexcept\n+            def some_func() -> None:\n+            ...\n+\n+    .. group-tab:: Cython\n+    \n+        .. code-block:: cython\n+    \n+            cdef void some_func() noexcept nogil:\n+                ....\n+\n+Be aware that this does not release the GIL when calling the function. It merely indicates that\n+a function is suitable for use when the GIL is released. It is also fine to call these functions\n+while holding the GIL.\n+\n+In this case we've marked the function as ``noexcept`` to indicate that it cannot raise a Python\n+exception. Be aware that a function with an ``except *`` exception specification (typically functions\n+returning ``void``) will be expensive to call because Cython will need to temporarily reacquire\n+the GIL after every call to check the exception state. Most other exception specifications are\n+cheap to handle in a ``nogil`` block since the GIL is only acquired if an exception is\n+actually thrown.\n+\n+Releasing (and reacquiring) the GIL\n+-----------------------------------\n+\n+To actually release the GIL you can use context managers\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+    \n+        .. code-block:: python\n+        \n+            with cython.nogil(True):\n+                ...  # some code that runs without the GIL\n+                with cython.gil:\n+                    ...  # some code that runs with the GIL\n+                ...  # some more code without the GIL\n+            \n+    .. group-tab:: Cython\n+    \n+        .. code-block:: cython\n+    \n+            with nogil:\n+                ...  # some code that runs without the GIL\n+                with gil:\n+                    ...  # some code that runs with the GIL\n+                ...  # some more code without the GIL\n+            \n+The ``with gil`` block is a useful trick to allow a small\n+chunk of Python code to in a non-GIL block. Try not to use it\n+too much since there is a cost to acquiring the GIL, and because these\n+blocks cannot be parallelized.\n+\n+A function may be marked as ``with gil`` to ensure that the\n+GIL is re-acquired then calling it. This is currently a Cython-only\n+feature (no equivalent exists in pure-Python mode)::\n+\n+  cdef int some_func() with gil:\n+      ...\n+      \n+Conditionally acquiring the GIL\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+It's possible to release the GIL based on a compile-time condition.\n+This is most often used when working with :ref:`fusedtypes`\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+    \n+        .. code-block:: python\n+    \n+            with cython.nogil(some_type is object):\n+                ...  # some code that runs without the GIL\n+            \n+    .. group-tab:: Cython\n+    \n+        .. code-block:: cython\n+    \n+            with nogil(some_type is object):\n+                ...  # some code that runs without the GIL\n+      \n+Exceptions and the GIL\n+----------------------\n+\n+A small number of \"Python operations\" may be performed in a ``nogil``\n+block without needing to explicitly use ``with gil``. The main example\n+is throwing exceptions. Here Cython knows that an exception will always\n+require the GIL and so re-acquires it implicitly. Similarly, if\n+a ``nogil`` function throws an exception, Cython is able to propagate\n+it correctly without you needing to write explicit code to handle it.\n+In most cases this is efficient since Cython is able to use the\n+function's exception specification to check for an error, and then\n+acquire the GIL only if needed, but ``except *`` functions are\n+inefficient since Cython must always re-acquire the GIL.",
            "html_url": "https://github.com/cython/cython/pull/5310#discussion_r1133254764",
            "id": 1133254764,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5DjBhs",
            "original_commit_id": "5063f78c84f14b601fa1aa0051734c5fe80bb19f",
            "original_line": 137,
            "original_position": 137,
            "original_start_line": 136,
            "path": "docs/src/userguide/nogil.rst",
            "position": null,
            "pull_request_review_id": 1336020404,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5310",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1133254764/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2023-03-12T13:25:27Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1133254764",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5310#discussion_r1133255173"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5310"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1133255173"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nIf you want a reliable lock then use the tools in the standard library's\r\n``threading`` module.\r\n```",
            "commit_id": "d3aa90fd3f2067a5d0c2bed636f711234da53955",
            "created_at": "2023-03-12T13:25:11Z",
            "diff_hunk": "@@ -0,0 +1,160 @@\n+.. _cython_and_gil:\n+\n+Cython and the GIL\n+==================\n+\n+Python has a global lock (:term:`the GIL <Global Interpreter Lock or GIL>`)\n+to ensure that data related to the Python interpreter is not corrupted.\n+It is *sometimes* to release this lock in Cython when you are not\n+accessing Python data.\n+\n+There are two occasions when you may want to release the\n+GIL:\n+\n+#. Using :ref:`Cython's parallelism mechanism <parallel>`. The contents of a ``prange`` loop for example are required to be ``nogil``.\n+\n+#. If you want other (external) Python threads to be able to run at the same time.\n+\n+    #. if you have a large computationally/IO-intensive block that doesn't need the GIL then it may be \"polite\" to release it, just to benefit users of your code who want to do multi-threading. However, this is mostly useful rather than necessary.\n+\n+    #. (very, very occasionally) it's sometimes useful to briefly release the GIL with a short with ``nogil: pass`` block. This is because Cython doesn't release it spontaneously (unlike Python) so if you're waiting on another Python thread to complete a task, this can avoid deadlocks. This sub-point probably doesn't apply to you unless you're compiling GUI code with Cython.\n+\n+If neither of these two points apply then you probably do not need to release the GIL. The sort of Cython \n+code that can run without the GIL (no calls to Python, purely C-level numeric operations)\n+is often the sort of code that runs efficiently. This sometimes gives people the impression that the\n+inverse is true and the trick is releasing the GIL, rather than the actual code they’re running.\n+Don’t be misled by this -- your (single-threaded) code will run the same speed with or without the GIL.\n+\n+Marking functions as able to run without the GIL\n+------------------------------------------------\n+\n+You can mark a whole function (either a Cython function or an :ref:`external function <nogil>`) as\n+``nogil`` by appending this to the function signature or by using the ``@cython.nogil`` decorator:\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+    \n+        .. code-block:: python\n+\n+            @cython.nogil(True)\n+            @cython.cfunc\n+            @cython.noexcept\n+            def some_func() -> None:\n+            ...\n+\n+    .. group-tab:: Cython\n+    \n+        .. code-block:: cython\n+    \n+            cdef void some_func() noexcept nogil:\n+                ....\n+\n+Be aware that this does not release the GIL when calling the function. It merely indicates that\n+a function is suitable for use when the GIL is released. It is also fine to call these functions\n+while holding the GIL.\n+\n+In this case we've marked the function as ``noexcept`` to indicate that it cannot raise a Python\n+exception. Be aware that a function with an ``except *`` exception specification (typically functions\n+returning ``void``) will be expensive to call because Cython will need to temporarily reacquire\n+the GIL after every call to check the exception state. Most other exception specifications are\n+cheap to handle in a ``nogil`` block since the GIL is only acquired if an exception is\n+actually thrown.\n+\n+Releasing (and reacquiring) the GIL\n+-----------------------------------\n+\n+To actually release the GIL you can use context managers\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+    \n+        .. code-block:: python\n+        \n+            with cython.nogil(True):\n+                ...  # some code that runs without the GIL\n+                with cython.gil:\n+                    ...  # some code that runs with the GIL\n+                ...  # some more code without the GIL\n+            \n+    .. group-tab:: Cython\n+    \n+        .. code-block:: cython\n+    \n+            with nogil:\n+                ...  # some code that runs without the GIL\n+                with gil:\n+                    ...  # some code that runs with the GIL\n+                ...  # some more code without the GIL\n+            \n+The ``with gil`` block is a useful trick to allow a small\n+chunk of Python code to in a non-GIL block. Try not to use it\n+too much since there is a cost to acquiring the GIL, and because these\n+blocks cannot be parallelized.\n+\n+A function may be marked as ``with gil`` to ensure that the\n+GIL is re-acquired then calling it. This is currently a Cython-only\n+feature (no equivalent exists in pure-Python mode)::\n+\n+  cdef int some_func() with gil:\n+      ...\n+      \n+Conditionally acquiring the GIL\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+It's possible to release the GIL based on a compile-time condition.\n+This is most often used when working with :ref:`fusedtypes`\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+    \n+        .. code-block:: python\n+    \n+            with cython.nogil(some_type is object):\n+                ...  # some code that runs without the GIL\n+            \n+    .. group-tab:: Cython\n+    \n+        .. code-block:: cython\n+    \n+            with nogil(some_type is object):\n+                ...  # some code that runs without the GIL\n+      \n+Exceptions and the GIL\n+----------------------\n+\n+A small number of \"Python operations\" may be performed in a ``nogil``\n+block without needing to explicitly use ``with gil``. The main example\n+is throwing exceptions. Here Cython knows that an exception will always\n+require the GIL and so re-acquires it implicitly. Similarly, if\n+a ``nogil`` function throws an exception, Cython is able to propagate\n+it correctly without you needing to write explicit code to handle it.\n+In most cases this is efficient since Cython is able to use the\n+function's exception specification to check for an error, and then\n+acquire the GIL only if needed, but ``except *`` functions are\n+inefficient since Cython must always re-acquire the GIL.\n+\n+Don't use the GIL as a lock\n+---------------------------\n+\n+It may be tempting to try to use the GIL for your own locking\n+purposes and to say \"the entire contents of a ``with gil`` block will\n+run atomically since we hold the GIL\". Don't do this!\n+\n+The GIL is only for the benefit of the interpreter, not for you.\n+There are two issues here: \n+\n+#. that future improvements in the Python interpreter may destroy \n+your \"locking\".\n+\n+#. Second, that the GIL can be released if any Python code is\n+executed. The easiest way to run arbitrary Python code is to\n+destroy a Python object that has a ``__del__`` function, but\n+there are numerous other creative ways to do so, and it is\n+almost impossible to know that you aren't going to trigger one\n+of these.\n+\n+If you want a reliable lock then use the tools in the builtin\n+``threading`` module.",
            "html_url": "https://github.com/cython/cython/pull/5310#discussion_r1133255173",
            "id": 1133255173,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5DjBoF",
            "original_commit_id": "5063f78c84f14b601fa1aa0051734c5fe80bb19f",
            "original_line": 160,
            "original_position": 160,
            "original_start_line": 159,
            "path": "docs/src/userguide/nogil.rst",
            "position": null,
            "pull_request_review_id": 1336020404,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5310",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1133255173/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2023-03-12T13:25:27Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1133255173",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5310#discussion_r1133255718"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5310"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1133255718"
                }
            },
            "author_association": "MEMBER",
            "body": "Indeed - this was partly what I was thinking of when I suggested (https://github.com/cython/cython/issues/5311)\r\n\r\nWe have a little-used \"message\" feature I think?",
            "commit_id": "d3aa90fd3f2067a5d0c2bed636f711234da53955",
            "created_at": "2023-03-12T13:28:01Z",
            "diff_hunk": "@@ -0,0 +1,160 @@\n+.. _cython_and_gil:\n+\n+Cython and the GIL\n+==================\n+\n+Python has a global lock (:term:`the GIL <Global Interpreter Lock or GIL>`)\n+to ensure that data related to the Python interpreter is not corrupted.\n+It is *sometimes* to release this lock in Cython when you are not\n+accessing Python data.\n+\n+There are two occasions when you may want to release the\n+GIL:\n+\n+#. Using :ref:`Cython's parallelism mechanism <parallel>`. The contents of a ``prange`` loop for example are required to be ``nogil``.\n+\n+#. If you want other (external) Python threads to be able to run at the same time.\n+\n+    #. if you have a large computationally/IO-intensive block that doesn't need the GIL then it may be \"polite\" to release it, just to benefit users of your code who want to do multi-threading. However, this is mostly useful rather than necessary.\n+\n+    #. (very, very occasionally) it's sometimes useful to briefly release the GIL with a short with ``nogil: pass`` block. This is because Cython doesn't release it spontaneously (unlike Python) so if you're waiting on another Python thread to complete a task, this can avoid deadlocks. This sub-point probably doesn't apply to you unless you're compiling GUI code with Cython.\n+\n+If neither of these two points apply then you probably do not need to release the GIL. The sort of Cython \n+code that can run without the GIL (no calls to Python, purely C-level numeric operations)\n+is often the sort of code that runs efficiently. This sometimes gives people the impression that the\n+inverse is true and the trick is releasing the GIL, rather than the actual code they’re running.\n+Don’t be misled by this -- your (single-threaded) code will run the same speed with or without the GIL.\n+\n+Marking functions as able to run without the GIL\n+------------------------------------------------\n+\n+You can mark a whole function (either a Cython function or an :ref:`external function <nogil>`) as\n+``nogil`` by appending this to the function signature or by using the ``@cython.nogil`` decorator:\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+    \n+        .. code-block:: python\n+\n+            @cython.nogil(True)\n+            @cython.cfunc\n+            @cython.noexcept\n+            def some_func() -> None:\n+            ...\n+\n+    .. group-tab:: Cython\n+    \n+        .. code-block:: cython\n+    \n+            cdef void some_func() noexcept nogil:\n+                ....\n+\n+Be aware that this does not release the GIL when calling the function. It merely indicates that\n+a function is suitable for use when the GIL is released. It is also fine to call these functions\n+while holding the GIL.\n+\n+In this case we've marked the function as ``noexcept`` to indicate that it cannot raise a Python\n+exception. Be aware that a function with an ``except *`` exception specification (typically functions",
            "html_url": "https://github.com/cython/cython/pull/5310#discussion_r1133255718",
            "id": 1133255718,
            "in_reply_to_id": 1133241920,
            "line": 66,
            "node_id": "PRRC_kwDOABDGAc5DjBwm",
            "original_commit_id": "5063f78c84f14b601fa1aa0051734c5fe80bb19f",
            "original_line": 58,
            "original_position": 58,
            "original_start_line": null,
            "path": "docs/src/userguide/nogil.rst",
            "position": 66,
            "pull_request_review_id": 1336024854,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5310",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1133255718/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2023-03-12T13:28:01Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1133255718",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/cython/cython/issues/5310/comments",
    "commit_data": [
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/5063f78c84f14b601fa1aa0051734c5fe80bb19f/comments",
            "commit": {
                "author": {
                    "date": "2023-03-12T11:57:35Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-03-12T11:57:35Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Added documentation about the GIL",
                "tree": {
                    "sha": "1ab5e504b7145cfa2092db043cc63a4a31b70525",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/1ab5e504b7145cfa2092db043cc63a4a31b70525"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/5063f78c84f14b601fa1aa0051734c5fe80bb19f",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/5063f78c84f14b601fa1aa0051734c5fe80bb19f",
            "node_id": "C_kwDOAhr4b9oAKDUwNjNmNzhjODRmMTRiNjAxZmExYWEwMDUxNzM0YzVmZTgwYmIxOWY",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/31e9bb73988fd6c77bcc419d702df748feb24b4a",
                    "sha": "31e9bb73988fd6c77bcc419d702df748feb24b4a",
                    "url": "https://api.github.com/repos/cython/cython/commits/31e9bb73988fd6c77bcc419d702df748feb24b4a"
                }
            ],
            "sha": "5063f78c84f14b601fa1aa0051734c5fe80bb19f",
            "url": "https://api.github.com/repos/cython/cython/commits/5063f78c84f14b601fa1aa0051734c5fe80bb19f"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/5780ee807521267ef681fc8db02cb9b6df40fd68/comments",
            "commit": {
                "author": {
                    "date": "2023-03-12T13:29:57Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-03-12T13:29:57Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Apply suggestions from code review\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                "tree": {
                    "sha": "5f7041a978549b910df87d10982dabd016d07f08",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/5f7041a978549b910df87d10982dabd016d07f08"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/5780ee807521267ef681fc8db02cb9b6df40fd68",
                "verification": {
                    "payload": "tree 5f7041a978549b910df87d10982dabd016d07f08\nparent 5063f78c84f14b601fa1aa0051734c5fe80bb19f\nauthor da-woods <dw-git@d-woods.co.uk> 1678627797 +0000\ncommitter GitHub <noreply@github.com> 1678627797 +0000\n\nApply suggestions from code review\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkDdPVCRBK7hj4Ov3rIwAA3GgIAJCEFW2sSht9V5pz+pUdrF78\nMwpZ/O4QJv693lOp9OmdYoep+Zn9hBjWu/xHK3XqXhJP1ogo7zdvgWToSNGxfjhH\nzrPkOieqttWl3Q7idNNPDctIAuU7NDMAjKAQKXER6wIBcy5fHBfxXEmyJ+xF9u0W\nG/idwOLKJfFrnD8mUypu2X0szOrnj/nrBOC+3tcZ2iYmDjok5tyEPydDQSsIdsdo\nnkDG1IapsaqRhZOcwTTUlen8zp432SNGS0dlflVwNLlHFUadTc0tjdOph0VO+JwP\nitpNhY7ungmctxYhts0Wc5eRJz0yMUo3Z9+NgrNVr0BrPdhnQxEL2jpUCFsiAtM=\n=owkG\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/5780ee807521267ef681fc8db02cb9b6df40fd68",
            "node_id": "C_kwDOAhr4b9oAKDU3ODBlZTgwNzUyMTI2N2VmNjgxZmM4ZGIwMmNiOWI2ZGY0MGZkNjg",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/5063f78c84f14b601fa1aa0051734c5fe80bb19f",
                    "sha": "5063f78c84f14b601fa1aa0051734c5fe80bb19f",
                    "url": "https://api.github.com/repos/cython/cython/commits/5063f78c84f14b601fa1aa0051734c5fe80bb19f"
                }
            ],
            "sha": "5780ee807521267ef681fc8db02cb9b6df40fd68",
            "url": "https://api.github.com/repos/cython/cython/commits/5780ee807521267ef681fc8db02cb9b6df40fd68"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/d3aa90fd3f2067a5d0c2bed636f711234da53955/comments",
            "commit": {
                "author": {
                    "date": "2023-03-12T13:33:28Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-03-12T13:33:28Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Suggestions from review\n\n(mainly line wrapping)",
                "tree": {
                    "sha": "61df77a43f8860cddab1f24459e1f3e3898891d0",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/61df77a43f8860cddab1f24459e1f3e3898891d0"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/d3aa90fd3f2067a5d0c2bed636f711234da53955",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/d3aa90fd3f2067a5d0c2bed636f711234da53955",
            "node_id": "C_kwDOAhr4b9oAKGQzYWE5MGZkM2YyMDY3YTVkMGMyYmVkNjM2ZjcxMTIzNGRhNTM5NTU",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/5780ee807521267ef681fc8db02cb9b6df40fd68",
                    "sha": "5780ee807521267ef681fc8db02cb9b6df40fd68",
                    "url": "https://api.github.com/repos/cython/cython/commits/5780ee807521267ef681fc8db02cb9b6df40fd68"
                }
            ],
            "sha": "d3aa90fd3f2067a5d0c2bed636f711234da53955",
            "url": "https://api.github.com/repos/cython/cython/commits/d3aa90fd3f2067a5d0c2bed636f711234da53955"
        }
    ],
    "commits_url": "https://api.github.com/repos/cython/cython/pulls/5310/commits",
    "created_at": "2023-03-12T12:00:22Z",
    "diff_url": "https://github.com/cython/cython/pull/5310.diff",
    "draft": false,
    "head": {
        "label": "da-woods:nogil_docs",
        "ref": "nogil_docs",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/da-woods/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/da-woods/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/da-woods/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/da-woods/cython/branches{/branch}",
            "clone_url": "https://github.com/da-woods/cython.git",
            "collaborators_url": "https://api.github.com/repos/da-woods/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/da-woods/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/da-woods/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/da-woods/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/da-woods/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/da-woods/cython/contributors",
            "created_at": "2015-05-09T08:55:00Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/da-woods/cython/deployments",
            "description": "A Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/da-woods/cython/downloads",
            "events_url": "https://api.github.com/repos/da-woods/cython/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/da-woods/cython/forks",
            "full_name": "da-woods/cython",
            "git_commits_url": "https://api.github.com/repos/da-woods/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/da-woods/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/da-woods/cython/git/tags{/sha}",
            "git_url": "git://github.com/da-woods/cython.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "http://cython.org",
            "hooks_url": "https://api.github.com/repos/da-woods/cython/hooks",
            "html_url": "https://github.com/da-woods/cython",
            "id": 35321967,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/da-woods/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/da-woods/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/da-woods/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/da-woods/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/da-woods/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/da-woods/cython/languages",
            "license": {
                "key": "apache-2.0",
                "name": "Apache License 2.0",
                "node_id": "MDc6TGljZW5zZTI=",
                "spdx_id": "Apache-2.0",
                "url": "https://api.github.com/licenses/apache-2.0"
            },
            "merges_url": "https://api.github.com/repos/da-woods/cython/merges",
            "milestones_url": "https://api.github.com/repos/da-woods/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkzNTMyMTk2Nw==",
            "notifications_url": "https://api.github.com/repos/da-woods/cython/notifications{?since,all,participating}",
            "open_issues": 1,
            "open_issues_count": 1,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/da-woods/cython/pulls{/number}",
            "pushed_at": "2023-03-12T16:54:06Z",
            "releases_url": "https://api.github.com/repos/da-woods/cython/releases{/id}",
            "size": 70046,
            "ssh_url": "git@github.com:da-woods/cython.git",
            "stargazers_count": 2,
            "stargazers_url": "https://api.github.com/repos/da-woods/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/da-woods/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/da-woods/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/da-woods/cython/subscription",
            "svn_url": "https://github.com/da-woods/cython",
            "tags_url": "https://api.github.com/repos/da-woods/cython/tags",
            "teams_url": "https://api.github.com/repos/da-woods/cython/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/da-woods/cython/git/trees{/sha}",
            "updated_at": "2022-08-11T09:03:48Z",
            "url": "https://api.github.com/repos/da-woods/cython",
            "visibility": "public",
            "watchers": 2,
            "watchers_count": 2,
            "web_commit_signoff_required": false
        },
        "sha": "d3aa90fd3f2067a5d0c2bed636f711234da53955",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
            "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
            "followers_url": "https://api.github.com/users/da-woods/followers",
            "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
            "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/da-woods",
            "id": 10536947,
            "login": "da-woods",
            "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
            "organizations_url": "https://api.github.com/users/da-woods/orgs",
            "received_events_url": "https://api.github.com/users/da-woods/received_events",
            "repos_url": "https://api.github.com/users/da-woods/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/da-woods"
        }
    },
    "html_url": "https://github.com/cython/cython/pull/5310",
    "id": 1272301680,
    "issue_url": "https://api.github.com/repos/cython/cython/issues/5310",
    "labels": [
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425561345,
            "name": "Documentation",
            "node_id": "MDU6TGFiZWw0MjU1NjEzNDU=",
            "url": "https://api.github.com/repos/cython/cython/labels/Documentation"
        }
    ],
    "locked": false,
    "merge_commit_sha": "c2f376f427156c4caeb695212c323a9b23c577c0",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOABDGAc5L1chw",
    "number": 5310,
    "patch_url": "https://github.com/cython/cython/pull/5310.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/cython/cython/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/cython/cython/pulls/5310/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/cython/cython/statuses/d3aa90fd3f2067a5d0c2bed636f711234da53955",
    "title": "Added documentation about the GIL",
    "updated_at": "2023-03-12T13:33:48Z",
    "url": "https://api.github.com/repos/cython/cython/pulls/5310",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
        "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
        "followers_url": "https://api.github.com/users/da-woods/followers",
        "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
        "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/da-woods",
        "id": 10536947,
        "login": "da-woods",
        "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
        "organizations_url": "https://api.github.com/users/da-woods/orgs",
        "received_events_url": "https://api.github.com/users/da-woods/received_events",
        "repos_url": "https://api.github.com/users/da-woods/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/da-woods"
    }
}