{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/cython/cython/issues/3400/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/cython/cython/pulls/3400/commits"
        },
        "html": {
            "href": "https://github.com/cython/cython/pull/3400"
        },
        "issue": {
            "href": "https://api.github.com/repos/cython/cython/issues/3400"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/cython/cython/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/cython/cython/pulls/3400/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/cython/cython/pulls/3400"
        },
        "statuses": {
            "href": "https://api.github.com/repos/cython/cython/statuses/9b2ae3ba72ebe693bd4a27a2d54b4ebe03d5da34"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "COLLABORATOR",
    "base": {
        "label": "cython:master",
        "ref": "master",
        "repo": {
            "archive_url": "https://api.github.com/repos/cython/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/cython/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/cython/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/cython/cython/branches{/branch}",
            "clone_url": "https://github.com/cython/cython.git",
            "collaborators_url": "https://api.github.com/repos/cython/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/cython/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/cython/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/cython/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/cython/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/cython/cython/contributors",
            "created_at": "2010-11-21T07:44:20Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/cython/cython/deployments",
            "description": "The most widely used Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/cython/cython/downloads",
            "events_url": "https://api.github.com/repos/cython/cython/events",
            "fork": false,
            "forks": 1074,
            "forks_count": 1074,
            "forks_url": "https://api.github.com/repos/cython/cython/forks",
            "full_name": "cython/cython",
            "git_commits_url": "https://api.github.com/repos/cython/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/cython/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/cython/cython/git/tags{/sha}",
            "git_url": "git://github.com/cython/cython.git",
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://cython.org",
            "hooks_url": "https://api.github.com/repos/cython/cython/hooks",
            "html_url": "https://github.com/cython/cython",
            "id": 1099265,
            "issue_comment_url": "https://api.github.com/repos/cython/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/cython/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/cython/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/cython/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/cython/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/cython/cython/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/cython/cython/merges",
            "milestones_url": "https://api.github.com/repos/cython/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkxMDk5MjY1",
            "notifications_url": "https://api.github.com/repos/cython/cython/notifications{?since,all,participating}",
            "open_issues": 897,
            "open_issues_count": 897,
            "owner": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/486082?v=4",
                "events_url": "https://api.github.com/users/cython/events{/privacy}",
                "followers_url": "https://api.github.com/users/cython/followers",
                "following_url": "https://api.github.com/users/cython/following{/other_user}",
                "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/cython",
                "id": 486082,
                "login": "cython",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
                "organizations_url": "https://api.github.com/users/cython/orgs",
                "received_events_url": "https://api.github.com/users/cython/received_events",
                "repos_url": "https://api.github.com/users/cython/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/cython"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/cython/cython/pulls{/number}",
            "pushed_at": "2020-09-27T14:19:09Z",
            "releases_url": "https://api.github.com/repos/cython/cython/releases{/id}",
            "size": 60435,
            "ssh_url": "git@github.com:cython/cython.git",
            "stargazers_count": 5463,
            "stargazers_url": "https://api.github.com/repos/cython/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/cython/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/cython/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/cython/cython/subscription",
            "svn_url": "https://github.com/cython/cython",
            "tags_url": "https://api.github.com/repos/cython/cython/tags",
            "teams_url": "https://api.github.com/repos/cython/cython/teams",
            "trees_url": "https://api.github.com/repos/cython/cython/git/trees{/sha}",
            "updated_at": "2020-09-27T10:34:21Z",
            "url": "https://api.github.com/repos/cython/cython",
            "watchers": 5463,
            "watchers_count": 5463
        },
        "sha": "cf89182f8181a58bd9102034566856e7280f443c",
        "user": {
            "avatar_url": "https://avatars3.githubusercontent.com/u/486082?v=4",
            "events_url": "https://api.github.com/users/cython/events{/privacy}",
            "followers_url": "https://api.github.com/users/cython/followers",
            "following_url": "https://api.github.com/users/cython/following{/other_user}",
            "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/cython",
            "id": 486082,
            "login": "cython",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
            "organizations_url": "https://api.github.com/users/cython/orgs",
            "received_events_url": "https://api.github.com/users/cython/received_events",
            "repos_url": "https://api.github.com/users/cython/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/cython"
        }
    },
    "body": "Used cython.dataclasses.dataclass and cython.dataclasses.field to mark dataclasses and their fields.\r\n\r\nTries to match the interface provided by a regular dataclass as much as possible.\r\nThis means taking the types from the dataclasses module if available (so they\r\nmatch exactly) or a fallback Python version that just implements the core\r\nparts (obtained with PyRun_SimpleString in the C source).\r\n\r\nUse of placeholders in generated `__init__` code means the code in the C file\r\nisn't hugely readable. Probably not a huge issue, but don't really see a\r\nway round that.\r\n\r\nAs part of this I've also also implemented a Cython version of `typing.ClassVar`. Although really designed for use with dataclasses it behaves sensibly when used in types in a normal `cdef class`. Potentially this might be worth documenting more thoroughly?\r\n\r\nStatus\r\n--------\r\n\r\n- [x] Both annotated variables and cdef attributes included in dataclass - done (but assignment syntax for cdef attributes is a bit clunky because it needs to be on a separate line)\r\n- [x] visibility of the attributes decided to be visible by default for annotations, invisible for cdef attributes\r\n- [x] non-public attributes omitted from `__dataclass_fields__`\r\n- [x] moving \"directives\" into `cython.dataclasses` and `cython.typing` submodules\r\n  - [ ] I'd quite like these `cython.dataclasses` submodules and their attributes to be available at runtime and just forwarded to their standard library modules if available. This may be fiddly\r\n- [x] \"frozen\" option of dataclasses works. (Obviously hard to enforce at C level)\r\n\r\n----------------------------------\r\n\r\nOld commentary on design decisions (can now mostly be ignored)\r\n--------------------------------\r\n\r\nWhen finished closes https://github.com/cython/cython/issues/2903 -\r\nhowever, some design decisions pending before it's finished:\r\n\r\nWhat attributes should be included in the dataclass? Definitely annotated variables. Maybe regular `cdef` variables?\r\n\r\nWhat should the visibility of the attributes be? There's a few options:\r\n1. Default to invisible, like for a standard `cdef class`. This is obviously consistent. The issue with this is that there's a few functions in the `dataclasses` module like [`asdict`](https://docs.python.org/3/library/dataclasses.html#dataclasses.asdict) which assume that every attribute declared in `__dataclass_fields__` is readable. If they aren't then the classes won't be compatible with those interfaces.\r\n\r\n     If so, should non-public attributes be omitted from `__dataclass_fields__`? This seems inconsistent since they do appear in the destructor, the repr, and affect the comparisons.\r\n\r\n2. Default to visible. This is inconsistent with the standard `cdef class` behaviour, but would make them as compatible as possible with standard `dataclasses`. It would also make sense for most use-cases I think. One problem is that the syntax doesn't really exist of override that (only `public` and `readonly` are defined).\r\n\r\n3. Annotated variables default to visible, `cdef` variables to invisible? It kind of makes sense and gives a way to control visibility, but it'd be a little inconsistent with everything. (I'm leaning towards this as the answer)\r\n\r\nThe likely implementation deviates from the normal `cdef class` behaviour where\r\n```\r\ncdef class C:\r\n   a: `int` = 0\r\n```\r\nmakes a class-variable instead of an instance variable. I think this is unavoidable and makes sense in this case, but comments on this welcome too?\r\n\r\nIt dumps a number of names in the `cython` scope (`dataclass`, `field`, `InitVar`, `ClassVar`). Would some sort of subscoping be better? Especially given that it isn't 100% obvious that any of these but `dataclass` related to dataclasses?",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r389394947"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/389394947"
                }
            },
            "author_association": "COLLABORATOR",
            "body": "This syntax (needing to put the assignment on a separate line) is a bit messy, however it's enforced at a pretty early stage (the PostParse transform) so it doesn't look easy to slacken it for dataclasses.",
            "commit_id": "9b2ae3ba72ebe693bd4a27a2d54b4ebe03d5da34",
            "created_at": "2020-03-08T18:46:22Z",
            "diff_hunk": "@@ -1032,5 +1032,38 @@ generated containing declarations for its object struct and type object. By\n including the ``.h`` file in external C code that you write, that code can\n access the attributes of the extension type.\n \n+Dataclass extension types\n+=========================\n+\n+Cython supports extension types that behave like the dataclasses defined in\n+the Python 3.7+ standard library. The main benefit of using a dataclasses is\n+that it can auto-generate simple `__init__`, `__repr__` and comparison\n+functions. The Cython implementation behaves as much like the Python\n+standard library implementation as possible and therefore the documentation\n+here only briefly outlines the differences - if you plan on using them\n+then please read the documentation for the standard library module.\n \n+Dataclasses can be declared using the `@cython.dataclass` decorator. If\n+you need to define special properties on a field then use `cython.field`::\n \n+    cimport cython\n+    \n+    @cython.dataclass\n+    cdef class MyDataclass:\n+        # fields can be declared using annotations\n+        a: int = 0\n+        b: double = cython.field(default_factory = lambda: 10, repr=False)\n+        \n+        # fields can also be declared using `cdef`:\n+        cdef str c\n+        c = \"hello\"  # assignment of default value on a separate line",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r389394947",
            "id": 389394947,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM5NDk0Nw==",
            "original_commit_id": "153f18af041f9e21a094ff80a72b9fff363fd4aa",
            "original_line": 1059,
            "original_position": 28,
            "original_start_line": null,
            "path": "docs/src/userguide/extension_types.rst",
            "position": null,
            "pull_request_review_id": 370849988,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-09-26T17:10:35Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/389394947",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r392082755"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/392082755"
                }
            },
            "author_association": "COLLABORATOR",
            "body": "Just highlighting this because: I don't think this is awful but I'm not sure all the details are quite right. It's probably worth getting right because if done well you could implement chunks of PEP-484 largely using the same model (although much of the PEP-484 detail is too generic to be useful to Cython)",
            "commit_id": "9b2ae3ba72ebe693bd4a27a2d54b4ebe03d5da34",
            "created_at": "2020-03-13T08:14:48Z",
            "diff_hunk": "@@ -4118,6 +4124,72 @@ def same_as_resolved_type(self, other_type):\n     def error_condition(self, result_code):\n         return \"dummy\"\n \n+class InitOrClassVar: #(PyrexType):",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r392082755",
            "id": 392082755,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA4Mjc1NQ==",
            "original_commit_id": "491bd771ea752d64b385470f84b36c31d7259b8b",
            "original_line": 4127,
            "original_position": 37,
            "original_start_line": null,
            "path": "Cython/Compiler/PyrexTypes.py",
            "position": null,
            "pull_request_review_id": 374112543,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-09-26T17:10:35Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/392082755",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r485897978"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/485897978"
                }
            },
            "author_association": "MEMBER",
            "body": "But public fields already have property nodes, right? Isn't that enough to handle them?",
            "commit_id": "9b2ae3ba72ebe693bd4a27a2d54b4ebe03d5da34",
            "created_at": "2020-09-09T20:19:27Z",
            "diff_hunk": "@@ -0,0 +1,611 @@\n+# functions to transform a c class into a dataclass\n+\n+from collections import OrderedDict\n+\n+from .Errors import error, warning\n+from . import ExprNodes, Nodes, PyrexTypes\n+from .Code import UtilityCode\n+from .Visitor import VisitorTransform\n+from . import UtilNodes, Builtin, Naming\n+from .StringEncoding import BytesLiteral, EncodedString\n+from .TreeFragment import TreeFragment\n+from .ParseTreeTransforms import (NormalizeTree, SkipDeclarations, AnalyseDeclarationsTransform,\n+                                  MarkClosureVisitor)\n+\n+def _make_module_callnode(pos, name):\n+    loader_utilitycode = UtilityCode.load_cached(\"%sModuleLoader\" % name, \"Dataclasses.c\")\n+    return ExprNodes.PythonCapiCallNode(pos, \"__Pyx_Load%sModule\" % name,\n+                                PyrexTypes.CFuncType(PyrexTypes.py_object_type, []),\n+                                utility_code = loader_utilitycode,\n+                                args=[])\n+\n+def make_dataclass_module_callnode(pos):\n+    return _make_module_callnode(pos, \"Dataclass\")\n+def make_typing_module_callnode(pos):\n+    return _make_module_callnode(pos, \"Typing\")\n+\n+_INTERNAL_DEFAULTSHOLDER_NAME = EncodedString('__pyx_dataclass_defaults')\n+\n+def make_common_utilitycode(scope):\n+    scope.global_scope().use_utility_code(\n+        UtilityCode.load_cached(\"DataclassModuleLoader\", \"Dataclasses.c\"))\n+\n+\n+class RemoveAssignments(VisitorTransform, SkipDeclarations):\n+    def __init__(self, names):\n+        super(RemoveAssignments, self).__init__()\n+        self.names = names\n+        self.removed_assignments = {}\n+\n+    def visit_CClassNode(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+    def visit_PyClassNode(self, node):\n+        return node  # go no further\n+\n+    def visit_FuncDefNode(self, node):\n+        return node  # go no further\n+\n+    def visit_SingleAssignmentNode(self, node):\n+        if node.lhs.is_name and node.lhs.name in self.names:\n+            if node.lhs.name in self.removed_assignments:\n+                warning(node.pos, (\"Multiple assignments for '%s' in dataclass; \"\n+                                   \"using most recent\") % node.lhs.name, 1)\n+            self.removed_assignments[node.lhs.name] = node.rhs\n+            return []\n+        return node\n+\n+    # I believe cascaded assignment is always a syntax error with decorators\n+    # so can be ignored\n+\n+    def visit_Node(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+class _MISSING_TYPE:\n+    pass\n+MISSING = _MISSING_TYPE()\n+\n+def process_class_get_fields(node):\n+    _TrueNode = ExprNodes.BoolNode(node.pos, value=True)\n+    _FalseNode = ExprNodes.BoolNode(node.pos, value=False)\n+    _NoneNode = ExprNodes.NoneNode(node.pos)\n+\n+    class Field:\n+        # store fields as nodes so they can be used in code construction\n+        # more readily; define class inside function so default arguments\n+        # have a useful pos",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r485897978",
            "id": 485897978,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg5Nzk3OA==",
            "original_commit_id": "043a102296c9949e1924c783c0b0d061810d85e9",
            "original_line": 78,
            "original_position": 78,
            "original_start_line": 76,
            "path": "Cython/Compiler/Dataclass.py",
            "position": null,
            "pull_request_review_id": 485373094,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2020-09-26T17:10:35Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/485897978",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r485900059"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/485900059"
                }
            },
            "author_association": "MEMBER",
            "body": "Lovely. ;-)",
            "commit_id": "9b2ae3ba72ebe693bd4a27a2d54b4ebe03d5da34",
            "created_at": "2020-09-09T20:23:29Z",
            "diff_hunk": "@@ -1,6 +1,6 @@\n /////////////// FetchCommonType.proto ///////////////\n \n-static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);\n+static CYTHON_UNUSED PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r485900059",
            "id": 485900059,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkwMDA1OQ==",
            "original_commit_id": "043a102296c9949e1924c783c0b0d061810d85e9",
            "original_line": 3,
            "original_position": 4,
            "original_start_line": 1,
            "path": "Cython/Utility/CommonStructures.c",
            "position": null,
            "pull_request_review_id": 485373094,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2020-09-26T17:10:35Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/485900059",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r485903258"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/485903258"
                }
            },
            "author_association": "MEMBER",
            "body": "Can you imagine that some people on this planet would sense the word \"hack\" floating by when facing this code?",
            "commit_id": "9b2ae3ba72ebe693bd4a27a2d54b4ebe03d5da34",
            "created_at": "2020-09-09T20:29:44Z",
            "diff_hunk": "@@ -177,3 +178,18 @@\n \n def py_version_hex(major, minor=0, micro=0, release_level=0, release_serial=0):\n     return (major << 24) | (minor << 16) | (micro << 8) | (release_level << 4) | (release_serial)\n+\n+class _py_code:\n+    # This is in Naming.py to be able to abuse the UtilityCode \"subsitute naming\" mechanism.",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r485903258",
            "id": 485903258,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkwMzI1OA==",
            "original_commit_id": "043a102296c9949e1924c783c0b0d061810d85e9",
            "original_line": 183,
            "original_position": 14,
            "original_start_line": null,
            "path": "Cython/Compiler/Naming.py",
            "position": null,
            "pull_request_review_id": 485373094,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-09-26T17:10:35Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/485903258",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r485906541"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/485906541"
                }
            },
            "author_association": "MEMBER",
            "body": "Can't this be done at a later stage, where we already _have_ the type available? And, is this really all that different from `typeof()`?",
            "commit_id": "9b2ae3ba72ebe693bd4a27a2d54b4ebe03d5da34",
            "created_at": "2020-09-09T20:35:42Z",
            "diff_hunk": "@@ -0,0 +1,611 @@\n+# functions to transform a c class into a dataclass\n+\n+from collections import OrderedDict\n+\n+from .Errors import error, warning\n+from . import ExprNodes, Nodes, PyrexTypes\n+from .Code import UtilityCode\n+from .Visitor import VisitorTransform\n+from . import UtilNodes, Builtin, Naming\n+from .StringEncoding import BytesLiteral, EncodedString\n+from .TreeFragment import TreeFragment\n+from .ParseTreeTransforms import (NormalizeTree, SkipDeclarations, AnalyseDeclarationsTransform,\n+                                  MarkClosureVisitor)\n+\n+def _make_module_callnode(pos, name):\n+    loader_utilitycode = UtilityCode.load_cached(\"%sModuleLoader\" % name, \"Dataclasses.c\")\n+    return ExprNodes.PythonCapiCallNode(pos, \"__Pyx_Load%sModule\" % name,\n+                                PyrexTypes.CFuncType(PyrexTypes.py_object_type, []),\n+                                utility_code = loader_utilitycode,\n+                                args=[])\n+\n+def make_dataclass_module_callnode(pos):\n+    return _make_module_callnode(pos, \"Dataclass\")\n+def make_typing_module_callnode(pos):\n+    return _make_module_callnode(pos, \"Typing\")\n+\n+_INTERNAL_DEFAULTSHOLDER_NAME = EncodedString('__pyx_dataclass_defaults')\n+\n+def make_common_utilitycode(scope):\n+    scope.global_scope().use_utility_code(\n+        UtilityCode.load_cached(\"DataclassModuleLoader\", \"Dataclasses.c\"))\n+\n+\n+class RemoveAssignments(VisitorTransform, SkipDeclarations):\n+    def __init__(self, names):\n+        super(RemoveAssignments, self).__init__()\n+        self.names = names\n+        self.removed_assignments = {}\n+\n+    def visit_CClassNode(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+    def visit_PyClassNode(self, node):\n+        return node  # go no further\n+\n+    def visit_FuncDefNode(self, node):\n+        return node  # go no further\n+\n+    def visit_SingleAssignmentNode(self, node):\n+        if node.lhs.is_name and node.lhs.name in self.names:\n+            if node.lhs.name in self.removed_assignments:\n+                warning(node.pos, (\"Multiple assignments for '%s' in dataclass; \"\n+                                   \"using most recent\") % node.lhs.name, 1)\n+            self.removed_assignments[node.lhs.name] = node.rhs\n+            return []\n+        return node\n+\n+    # I believe cascaded assignment is always a syntax error with decorators\n+    # so can be ignored\n+\n+    def visit_Node(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+class _MISSING_TYPE:\n+    pass\n+MISSING = _MISSING_TYPE()\n+\n+def process_class_get_fields(node):\n+    _TrueNode = ExprNodes.BoolNode(node.pos, value=True)\n+    _FalseNode = ExprNodes.BoolNode(node.pos, value=False)\n+    _NoneNode = ExprNodes.NoneNode(node.pos)\n+\n+    class Field:\n+        # store fields as nodes so they can be used in code construction\n+        # more readily; define class inside function so default arguments\n+        # have a useful pos\n+        default = MISSING\n+        default_factory = MISSING\n+        def __init__(self, default=MISSING, default_factory=MISSING,\n+                        repr=_TrueNode, hash=_NoneNode, init=_TrueNode,\n+                        compare=_TrueNode, metadata=_NoneNode,\n+                        is_initvar=False):\n+            if default is not MISSING:\n+                self.default = default\n+            if default_factory is not MISSING:\n+                self.default_factory = default_factory\n+            self.repr = repr\n+            self.hash = hash\n+            self.init = init\n+            self.compare = compare\n+            self.metadata = metadata\n+            self.is_initvar = is_initvar\n+\n+            for field_name in (\"repr\", \"hash\", \"init\", \"compare\", \"metadata\"):\n+                field_value = getattr(self, field_name)\n+                if not field_value.is_literal:\n+                    error(field_value.pos, \"cython.field parameter '%s' must be a literal value\"\n+                            % field_name)\n+\n+    var_entries = node.scope.var_entries\n+    # order of definition is used in the dataclass\n+    var_entries = sorted(var_entries, key=lambda entry: entry.pos)\n+    var_names = [ entry.name for entry in var_entries ]\n+\n+    # remove assignments for stat_list\n+    transform = RemoveAssignments(var_names)\n+    transform(node)\n+\n+    if node.base_type and node.base_type.dataclass_fields:\n+        fields = node.base_type.dataclass_fields.copy()\n+    else:\n+        fields = OrderedDict()\n+    for entry in var_entries:\n+        name = entry.name\n+        is_initvar = entry.type.is_initvar\n+        if name in transform.removed_assignments:\n+            assignment = transform.removed_assignments[name]\n+            if (isinstance(assignment, ExprNodes.CallNode)\n+                    and assignment.function.as_cython_attribute() == \"field\"):\n+                # I believe most of this is well-enforced when it's treated as a directive\n+                # but it doesn't hurt to make sure\n+                if (not isinstance(assignment, ExprNodes.GeneralCallNode)\n+                        or not isinstance(assignment.positional_args, ExprNodes.TupleNode)\n+                        or assignment.positional_args.args\n+                        or not isinstance(assignment.keyword_args, ExprNodes.DictNode)):\n+                    error(assignment.pos, \"Call to 'cython.field' must only consist of compile-time \"\n+                          \"keyword arguments\")\n+                    continue\n+                keyword_args = { k.value: v for k, v in assignment.keyword_args.key_value_pairs }\n+                if 'default' in keyword_args and 'default_factory' in keyword_args:\n+                    error(assignment.pos, \"You cannot specify both 'default' and 'default_factory'\"\n+                          \" for a dataclass member\")\n+                    continue\n+                field = Field(**keyword_args)\n+            else:\n+                if isinstance(assignment, ExprNodes.CallNode):\n+                    func = assignment.function\n+                    if ((func.is_name and func.name == \"field\")\n+                            or (isinstance(func, ExprNodes.AttributeNode)\n+                                and func.attribute == \"field\")):\n+                        warning(assignment.pos, \"Do you mean cython.field instead?\", 1)\n+                if assignment.type in [Builtin.list_type,\n+                                    Builtin.dict_type,\n+                                    Builtin.set_type]:\n+                    # The standard library module generates a TypeError at runtime\n+                    # in this situation\n+                    error(assignment.pos, \"Mutable default passed argument for '{0}' - \"\n+                          \"use 'default_factory' instead and see \"\n+                          \"'https://docs.python.org/library/dataclasses.html#mutable-default-values'\"\n+                          \"for more details\".format(name))\n+\n+                field = Field(default=assignment)\n+        else:\n+            field = Field()\n+        field.is_initvar = is_initvar\n+        fields[name] = field\n+    node.entry.type.dataclass_fields = fields\n+    return fields\n+\n+def handle_cclass_dataclass(node, dataclass_args, analyse_decs_transform):\n+    from .ExprNodes import (AttributeNode, TupleNode, NameNode,\n+                            GeneralCallNode, DictNode,\n+                            IdentifierStringNode, BoolNode, DictItemNode)\n+\n+    # https://docs.python.org/3/library/dataclasses.html\n+    kwargs = dict(init=True, repr=True, eq=True,\n+                  order=False, unsafe_hash=False, frozen=False)\n+    if dataclass_args is not None:\n+        if dataclass_args[0]:\n+            error(node.pos, \"cython.dataclass takes no positional arguments\")\n+        for k, v in dataclass_args[1].items():\n+            if k not in kwargs:\n+                error(node.pos,\n+                      \"Unrecognised keyword argument '{0}' to cython.dataclass\".format(k))\n+            if not isinstance(v, ExprNodes.BoolNode):\n+                error(node.pos,\n+                      \"Arguments to cython.dataclass must be True or False\")\n+            kwargs[k] = v\n+\n+    dataclass_scope = make_common_utilitycode(node.scope)\n+    fields = process_class_get_fields(node)\n+\n+    dataclass_module = make_dataclass_module_callnode(node.pos)\n+\n+    # create __dataclass_params__ attribute\n+    dataclass_params_func = AttributeNode(node.pos, obj=dataclass_module,\n+                                            attribute=EncodedString(\"_DataclassParams\"))\n+    dataclass_params_keywords = DictNode.from_pairs(node.pos,\n+            [ (IdentifierStringNode(node.pos, value=EncodedString(k)),\n+                BoolNode(node.pos, value=v))\n+                for k, v in kwargs.items() ])\n+    dataclass_params = GeneralCallNode(node.pos,\n+                                    function = dataclass_params_func,\n+                                    positional_args = TupleNode(node.pos, args=[]),\n+                                    keyword_args = dataclass_params_keywords)\n+    dataclass_params_assignment = \\\n+        Nodes.SingleAssignmentNode(node.pos,\n+                        lhs = NameNode(node.pos,\n+                                        name=EncodedString(\"__dataclass_params__\")),\n+                        rhs = dataclass_params)\n+\n+    dataclass_fields_stats = _setup_dataclass_fields(node, fields, dataclass_module)\n+\n+    stats = Nodes.StatListNode(node.pos,\n+                               stats=[dataclass_params_assignment]\n+                                    + dataclass_fields_stats)\n+\n+    init_stats = generate_init_code(kwargs['init'], node, fields)\n+    repr_stats = generate_repr_code(kwargs['repr'], node, fields)\n+    eq_stats = generate_eq_code(kwargs['eq'], node, fields)\n+    order_stats = generate_order_code(kwargs['order'], node, fields)\n+    hash_stats = generate_hash_code(kwargs['unsafe_hash'], kwargs['eq'], kwargs['frozen'],\n+                       node, fields)\n+\n+    stats.stats = stats.stats + init_stats + repr_stats + eq_stats + order_stats + hash_stats\n+\n+    # turn off annotation typing, so all arguments to __init__ are accepted as\n+    # generic objects and thus can accept _HAS_DEFAULT_FACTORY\n+    # type conversion done comes later\n+    # (for some reason this has to be on the class scope, so save and restore)\n+    annotation_typing = node.scope.directives['annotation_typing']\n+    node.scope.directives['annotation_typing'] = False\n+    stats.analyse_declarations(node.scope)\n+    # probably already in this scope, but it doesn't hurt to make sure\n+    analyse_decs_transform.enter_scope(node, node.scope)\n+    analyse_decs_transform.visit(stats)\n+    analyse_decs_transform.exit_scope()\n+    node.scope.directives['annotation_typing'] = annotation_typing\n+\n+    RemoveDontAnalyseDeclarations()(stats)\n+\n+    node.body.stats.extend(stats.stats)\n+\n+def generate_init_code(init, node, fields):\n+    if not init or node.scope.lookup_here(\"__init__\"):\n+        return []\n+    # selfname behaviour copied from the cpython module\n+    selfname = \"__dataclass_self__\" if \"self\" in fields else \"self\"\n+    args = [selfname]\n+\n+    placeholders = {}\n+    placeholder_count = [0]\n+\n+    # create a temp to get _HAS_DEFAULT_FACTORY\n+    dataclass_module = make_dataclass_module_callnode(node.pos)\n+    has_default_factory = ExprNodes.AttributeNode(node.pos,\n+                                        obj = dataclass_module,\n+                                        attribute = EncodedString(\"_HAS_DEFAULT_FACTORY\"))\n+\n+    def get_placeholder_name():\n+        while True:\n+            name = \"PLACEHOLDER_%s\" % placeholder_count[0]\n+            if (name not in placeholders\n+                    and name not in fields):\n+                # make sure name isn't already used and doesn't\n+                # conflict with a variable name (which is unlikely but possible)\n+                break\n+            placeholder_count[0] += 1\n+        return name\n+\n+    default_factory_placeholder = get_placeholder_name()\n+    placeholders[default_factory_placeholder] = has_default_factory\n+\n+    seen_default = False\n+    for name, field in fields.items():\n+        if not field.init.value:\n+            continue\n+        entry = node.scope.lookup(name)\n+        annotation = entry.pep563_annotation\n+        if annotation:\n+            annotation = u\": %s\" % annotation\n+        else:\n+            annotation = u\"\"\n+        assignment = u''\n+        if field.default is not MISSING or field.default_factory is not MISSING:\n+            seen_default = True\n+            if field.default_factory is not MISSING:\n+                ph_name = default_factory_placeholder\n+            else:\n+                ph_name = get_placeholder_name()\n+                placeholders[ph_name] = field.default  # should be node\n+            assignment = u\" = %s\" % ph_name\n+        elif seen_default:\n+            error(entry.pos, (\"non-default argument %s follows default argument \"\n+                             \"in dataclass __init__\") % name)\n+            return []\n+\n+        args.append(u\"%s%s%s\" % (name, annotation, assignment))\n+    args = u\", \".join(args)\n+    func_call = u\"def __init__(%s):\" % args\n+\n+    code_lines = [func_call,\n+                  \"    pass\",  # just in-case it's an empty body\n+                  ]\n+    for name, field in fields.items():\n+        if field.is_initvar:\n+            continue\n+        if field.default_factory is MISSING:\n+            if field.init.value:\n+                code_lines.append(u\"    %s.%s = %s\" % (selfname, name, name))\n+        else:\n+            ph_name = get_placeholder_name()\n+            placeholders[ph_name] = field.default_factory\n+            if field.init.value:\n+                code_lines.append(u\"    if %s is %s:\"\n+                                % (name, default_factory_placeholder))\n+                code_lines.append(u\"        %s.%s = %s()\"\n+                                % (selfname, name, ph_name))\n+                code_lines.append(u\"    else:\")\n+                code_lines.append(u\"        %s.%s = %s\" % (selfname, name, name))\n+            else:\n+                # still need to use the default factory to initialize\n+                code_lines.append(u\"    %s.%s = %s()\"\n+                                  % (selfname, name, ph_name))\n+    if node.scope.lookup(\"__post_init__\"):\n+        post_init_vars = \", \".join(name for name, field in fields.items()\n+                                    if field.is_initvar)\n+        code_lines.append(\"    %s.__post_init__(%s)\" % (selfname, post_init_vars))\n+    code_lines = u\"\\n\".join(code_lines)\n+\n+    code_tree = TreeFragment(code_lines, level='c_class',\n+                             pipeline=[NormalizeTree(node.scope),\n+                                       ]\n+                              ).substitute(placeholders)\n+\n+    return code_tree.stats\n+\n+\n+def generate_repr_code(repr, node, fields):\n+    if not repr or node.scope.lookup(\"__repr__\"):\n+        return []\n+    code_lines = [\"def __repr__(self):\"]\n+    strs = [ u\"%s={self.%s}\" % (name, name)\n+            for name, field in fields.items() if field.repr.value and not field.is_initvar ]\n+    format_string = u\", \".join(strs)\n+    code_lines.append(u\"    return f'{type(self).__name__}(%s)'\" % format_string)\n+    code_lines = u\"\\n\".join(code_lines)\n+\n+    code_tree = TreeFragment(code_lines,\n+                              level='c_class', pipeline=[NormalizeTree(None)]\n+                              ).substitute({})\n+    return code_tree.stats\n+\n+def generate_cmp_code(op, funcname, node, fields):\n+    if node.scope.lookup_here(funcname):\n+        return []  # already exists\n+\n+    names = [ name for name, field in fields.items()\n+                if (field.compare.value and not field.is_initvar) ]\n+\n+    if not names:\n+        return []  # no comparable types\n+\n+    code_lines = [\"def %s(self, other):\" % funcname,\n+                  \"    cdef %s other_cast\" % node.class_name,\n+                  \"    try:\",\n+                  \"        other_cast = other\",\n+                  \"    except TypeError:\",\n+                  \"        return NotImplemented\"]\n+\n+    for name in names:\n+        shared = \"if not (self.%s == other_cast.%s):\" % (name, name)\n+        if op == \"==\":\n+            code_lines.append(\"    %s return False\" % shared)\n+        else:\n+            code_lines.append(\"    %s return self.%s %s other_cast.%s\" %\n+                              (shared, name, op, name))\n+\n+    if \"=\" in op:\n+        code_lines.append(\"    return True\")\n+    else:\n+        code_lines.append(\"    return False\")\n+\n+    code_lines = u\"\\n\".join(code_lines)\n+\n+    code_tree = TreeFragment(code_lines,\n+                              level='c_class', pipeline=[NormalizeTree(None)]\n+                              ).substitute({})\n+    return code_tree.stats\n+\n+def generate_eq_code(eq, node, fields):\n+    if not eq:\n+        return []\n+    return generate_cmp_code(\"==\", \"__eq__\", node, fields)\n+\n+def generate_order_code(order, node, fields):\n+    if not order:\n+        return []\n+    stats = []\n+    for op, name in [(\"<\", \"__lt__\"),\n+                     (\"<=\", \"__le__\"),\n+                     (\">\", \"__gt__\"),\n+                     (\">=\", \"__ge__\")]:\n+        stats.extend(generate_cmp_code(op, name, node, fields))\n+    return stats\n+\n+def generate_hash_code(unsafe_hash, eq, frozen, node, fields):\n+    hash_entry = node.scope.lookup_here(\"__hash__\")\n+    if hash_entry:\n+        # TODO ideally assignment of __hash__ to None shouldn't trigger this\n+        # but difficult to get the right information here\n+        if unsafe_hash:\n+            error(node.pos, \"Request for dataclass unsafe_hash when a '__hash__' function\"\n+                  \" already exists\")\n+        return []\n+    if not unsafe_hash:\n+        if eq and not frozen:\n+            return [Nodes.SingleAssignmentNode(node.pos,\n+                                        lhs = ExprNodes.NameNode(node.pos, name=EncodedString(\"__hash__\")),\n+                                        rhs = ExprNodes.NoneNode(node.pos))]\n+        if not eq:\n+            return []\n+\n+    names = [ name for name, field in fields.items()\n+                if (not field.is_initvar and\n+                    (field.compare.value if field.hash.value is None else field.hash.value)) ]\n+    if not names:\n+        return []  # nothing to hash\n+\n+    # make a tuple of the hashes\n+    tpl = u\", \".join(u\"hash(self.%s)\" % name for name in names )\n+\n+    # if we're here we want to generate a hash\n+    code_lines = u\"\"\"def __hash__(self):\n+    return hash((%s))\n+\"\"\" % tpl\n+    code_tree = TreeFragment(code_lines,\n+                              level='c_class', pipeline=[NormalizeTree(None)]\n+                              ).substitute({})\n+    return code_tree.stats\n+\n+\n+class GetTypeNode(ExprNodes.ExprNode):\n+    # Tries to return a pytype_type if possible. However contains\n+    # some fallback provision if it turns out not to resolve to a Python object\n+    # Initialize with \"entry\"\n+\n+    subexprs = []\n+\n+    def __init__(self, entry):\n+        super(GetTypeNode, self).__init__(entry.pos, entry=entry)\n+\n+    def analyse_types(self, env):\n+        type = self.entry.type\n+\n+        if type.is_extension_type or type.is_builtin_type:\n+            return ExprNodes.RawCNameExprNode(self.pos, Builtin.type_type,\n+                                                type.typeptr_cname).analyse_types(env)\n+        else:\n+            names = None\n+            py_name = type.py_type_name()\n+            # int types can return \"(int, long)\"\n+            if py_name:\n+                names = py_name.split(\",\")\n+                names = [ n.strip(\"() \") for n in names ]\n+            if names:\n+                for name in names:\n+                    name = EncodedString(name)\n+                    nn = ExprNodes.NameNode(self.pos, name=name)\n+                    # try to set the entry now to prevent the user accidentally shadowing\n+                    # the name\n+                    nn.entry = env.builtin_scope().lookup(name)\n+                    if not nn.entry:\n+                        try:\n+                            nn.entry = env.declare_builtin(name, self.pos)\n+                        except:\n+                            pass  # not convinced a failure means much\n+                    if nn.entry:\n+                        return nn.analyse_types(env)\n+\n+        # otherwise we're left to return a string\n+        s = self.entry.pep563_annotation\n+        if not s:\n+            s = self.entry.type.declaration_code(\"\", for_display=1)\n+        return ExprNodes.StringNode(self.pos, value=s).analyse_types(env)\n+\n+class DontAnalyseDeclarationsNode(ExprNodes.ExprNode):\n+    # arg    ExprNode\n+    #\n+    # This is designed to wrap stuff that's already been analysed\n+    # so that lambdas aren't redeclared for example\n+    # and then immediately be replaced\n+\n+    subexprs = []\n+\n+    def analyse_declarations(self, env):\n+        return\n+\n+class RemoveDontAnalyseDeclarations(VisitorTransform):\n+    def visit_DontAnalyseDeclarationsNode(self, node):\n+        return node.arg\n+\n+    def visit_Node(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+\n+class FieldsValueNode(ExprNodes.ExprNode):\n+    # largely just forwards arg. Allows it to be coerced to a Python object\n+    # if possible, and if not then generates a sensible backup string\n+    subexprs = ['arg']\n+\n+    def __init__(self, pos, arg):\n+        super(FieldsValueNode, self).__init__(pos, arg=arg)\n+\n+    def analyse_types(self, env):\n+        self.arg.analyse_types(env)\n+        self.type = self.arg.type\n+        return self\n+\n+    def coerce_to_pyobject(self, env):\n+        if self.arg.type.can_coerce_to_pyobject(env):\n+            return self.arg.coerce_to_pyobject(env)\n+        else:\n+            # A string representation of the code that gave the field seems like a reasonable\n+            # fallback. This'll mostly happen for \"default\" and \"default_factory\" where the\n+            # type may be a C-type that can't be converted to Python.\n+            return self._make_string()\n+\n+    def _make_string(self):\n+        from .AutoDocTransforms import AnnotationWriter\n+        writer = AnnotationWriter(description=\"Dataclass field\")\n+        string = writer.write(self.arg)\n+        return ExprNodes.StringNode(self.pos, value=EncodedString(string))\n+\n+    def generate_evaluation_code(self, code):\n+        return self.arg.generate_evaluation_code(code)\n+\n+\n+def _setup_dataclass_fields(node, fields, dataclass_module):\n+    from .ExprNodes import (AttributeNode, TupleNode, NameNode,\n+                            GeneralCallNode, DictNode,\n+                            IdentifierStringNode, BoolNode, DictItemNode,\n+                            CloneNode)\n+\n+    # For defaults and default_factories containing things like lambda,\n+    # they're already declared in the class scope, and it creates a big\n+    # problem if multiple copies are floating around in both the __init__\n+    # function, and in the __dataclass_fields__ structure.\n+    # Therefore, create module-level constants holding these values and\n+    # pass those around instead\n+    variables_assignment_stats = []\n+    for name, field in fields.items():\n+        for attrname in [ \"default\", \"default_factory\" ]:\n+            f_def = getattr(field, attrname)\n+            if f_def is MISSING or f_def.is_literal or f_def.is_name:\n+                # some simple cases where we don't need to set up\n+                # the variable as a module-level constant\n+                continue\n+            global_scope = node.scope.global_scope()\n+            module_field_name = global_scope.mangle(global_scope.mangle(\n+                                    Naming.dataclass_field_default_cname,\n+                                    node.class_name), name)\n+            # create an entry in the global scope for this variable to live\n+            nn = NameNode(f_def.pos, name=EncodedString(module_field_name))\n+            nn.entry = global_scope.declare_var(nn.name, type=f_def.type or PyrexTypes.unspecified_type,\n+                                                pos=f_def.pos, cname=nn.name, is_cdef=1)\n+            # replace the field so that future users just receive the namenode\n+            setattr(field, attrname, nn)\n+\n+            variables_assignment_stats.append(\n+                Nodes.SingleAssignmentNode(f_def.pos,\n+                                           lhs = nn,\n+                                           rhs = DontAnalyseDeclarationsNode(f_def.pos, arg=f_def)))\n+\n+    placeholders = {}\n+    field_func = AttributeNode(node.pos, obj = dataclass_module,\n+                                    attribute=EncodedString(\"field\"))\n+    dc_fields = DictNode(node.pos, key_value_pairs=[])\n+    dc_fields_namevalue_assignments = []\n+    for name, field in fields.items():\n+        placeholder_name = \"PLACEHOLDER_%s\" % name\n+        placeholders[placeholder_name] = GetTypeNode(node.scope.entries[name])",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r485906541",
            "id": 485906541,
            "line": 593,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkwNjU0MQ==",
            "original_commit_id": "043a102296c9949e1924c783c0b0d061810d85e9",
            "original_line": 575,
            "original_position": 575,
            "original_start_line": null,
            "path": "Cython/Compiler/Dataclass.py",
            "position": 593,
            "pull_request_review_id": 485373094,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-09-26T17:10:35Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/485906541",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r485917198"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/485917198"
                }
            },
            "author_association": "COLLABORATOR",
            "body": "This is because I'm only requiring this from utilitycode but only `__Pyx_FetchSharedCythonABIModule`. On second look it'd probably be better splitting it into 2 bits so I can get `__Pyx_FetchSharedCythonABIModule` on its own.",
            "commit_id": "9b2ae3ba72ebe693bd4a27a2d54b4ebe03d5da34",
            "created_at": "2020-09-09T20:56:35Z",
            "diff_hunk": "@@ -1,6 +1,6 @@\n /////////////// FetchCommonType.proto ///////////////\n \n-static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);\n+static CYTHON_UNUSED PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r485917198",
            "id": 485917198,
            "in_reply_to_id": 485900059,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkxNzE5OA==",
            "original_commit_id": "043a102296c9949e1924c783c0b0d061810d85e9",
            "original_line": 3,
            "original_position": 4,
            "original_start_line": 1,
            "path": "Cython/Utility/CommonStructures.c",
            "position": null,
            "pull_request_review_id": 485397552,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2020-09-26T17:10:35Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/485917198",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r485931754"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/485931754"
                }
            },
            "author_association": "COLLABORATOR",
            "body": "The difference/complication between this and `typeof` is that `typeof` always returns a string, while I'm trying to return a Python type object if at all possible (to match what goes in `__dataclass_fields__` when generated by the standard library). It isn't always possible but I was trying to match what's generated by the standard library as closely as I could.\r\n\r\nI think the idea for doing it here was to try to have (almost) a single transformation which adds all the methods and attributes that make a class a dataclass. After that it can just pass through the normal Cython pipeline as normal.",
            "commit_id": "9b2ae3ba72ebe693bd4a27a2d54b4ebe03d5da34",
            "created_at": "2020-09-09T21:27:22Z",
            "diff_hunk": "@@ -0,0 +1,611 @@\n+# functions to transform a c class into a dataclass\n+\n+from collections import OrderedDict\n+\n+from .Errors import error, warning\n+from . import ExprNodes, Nodes, PyrexTypes\n+from .Code import UtilityCode\n+from .Visitor import VisitorTransform\n+from . import UtilNodes, Builtin, Naming\n+from .StringEncoding import BytesLiteral, EncodedString\n+from .TreeFragment import TreeFragment\n+from .ParseTreeTransforms import (NormalizeTree, SkipDeclarations, AnalyseDeclarationsTransform,\n+                                  MarkClosureVisitor)\n+\n+def _make_module_callnode(pos, name):\n+    loader_utilitycode = UtilityCode.load_cached(\"%sModuleLoader\" % name, \"Dataclasses.c\")\n+    return ExprNodes.PythonCapiCallNode(pos, \"__Pyx_Load%sModule\" % name,\n+                                PyrexTypes.CFuncType(PyrexTypes.py_object_type, []),\n+                                utility_code = loader_utilitycode,\n+                                args=[])\n+\n+def make_dataclass_module_callnode(pos):\n+    return _make_module_callnode(pos, \"Dataclass\")\n+def make_typing_module_callnode(pos):\n+    return _make_module_callnode(pos, \"Typing\")\n+\n+_INTERNAL_DEFAULTSHOLDER_NAME = EncodedString('__pyx_dataclass_defaults')\n+\n+def make_common_utilitycode(scope):\n+    scope.global_scope().use_utility_code(\n+        UtilityCode.load_cached(\"DataclassModuleLoader\", \"Dataclasses.c\"))\n+\n+\n+class RemoveAssignments(VisitorTransform, SkipDeclarations):\n+    def __init__(self, names):\n+        super(RemoveAssignments, self).__init__()\n+        self.names = names\n+        self.removed_assignments = {}\n+\n+    def visit_CClassNode(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+    def visit_PyClassNode(self, node):\n+        return node  # go no further\n+\n+    def visit_FuncDefNode(self, node):\n+        return node  # go no further\n+\n+    def visit_SingleAssignmentNode(self, node):\n+        if node.lhs.is_name and node.lhs.name in self.names:\n+            if node.lhs.name in self.removed_assignments:\n+                warning(node.pos, (\"Multiple assignments for '%s' in dataclass; \"\n+                                   \"using most recent\") % node.lhs.name, 1)\n+            self.removed_assignments[node.lhs.name] = node.rhs\n+            return []\n+        return node\n+\n+    # I believe cascaded assignment is always a syntax error with decorators\n+    # so can be ignored\n+\n+    def visit_Node(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+class _MISSING_TYPE:\n+    pass\n+MISSING = _MISSING_TYPE()\n+\n+def process_class_get_fields(node):\n+    _TrueNode = ExprNodes.BoolNode(node.pos, value=True)\n+    _FalseNode = ExprNodes.BoolNode(node.pos, value=False)\n+    _NoneNode = ExprNodes.NoneNode(node.pos)\n+\n+    class Field:\n+        # store fields as nodes so they can be used in code construction\n+        # more readily; define class inside function so default arguments\n+        # have a useful pos\n+        default = MISSING\n+        default_factory = MISSING\n+        def __init__(self, default=MISSING, default_factory=MISSING,\n+                        repr=_TrueNode, hash=_NoneNode, init=_TrueNode,\n+                        compare=_TrueNode, metadata=_NoneNode,\n+                        is_initvar=False):\n+            if default is not MISSING:\n+                self.default = default\n+            if default_factory is not MISSING:\n+                self.default_factory = default_factory\n+            self.repr = repr\n+            self.hash = hash\n+            self.init = init\n+            self.compare = compare\n+            self.metadata = metadata\n+            self.is_initvar = is_initvar\n+\n+            for field_name in (\"repr\", \"hash\", \"init\", \"compare\", \"metadata\"):\n+                field_value = getattr(self, field_name)\n+                if not field_value.is_literal:\n+                    error(field_value.pos, \"cython.field parameter '%s' must be a literal value\"\n+                            % field_name)\n+\n+    var_entries = node.scope.var_entries\n+    # order of definition is used in the dataclass\n+    var_entries = sorted(var_entries, key=lambda entry: entry.pos)\n+    var_names = [ entry.name for entry in var_entries ]\n+\n+    # remove assignments for stat_list\n+    transform = RemoveAssignments(var_names)\n+    transform(node)\n+\n+    if node.base_type and node.base_type.dataclass_fields:\n+        fields = node.base_type.dataclass_fields.copy()\n+    else:\n+        fields = OrderedDict()\n+    for entry in var_entries:\n+        name = entry.name\n+        is_initvar = entry.type.is_initvar\n+        if name in transform.removed_assignments:\n+            assignment = transform.removed_assignments[name]\n+            if (isinstance(assignment, ExprNodes.CallNode)\n+                    and assignment.function.as_cython_attribute() == \"field\"):\n+                # I believe most of this is well-enforced when it's treated as a directive\n+                # but it doesn't hurt to make sure\n+                if (not isinstance(assignment, ExprNodes.GeneralCallNode)\n+                        or not isinstance(assignment.positional_args, ExprNodes.TupleNode)\n+                        or assignment.positional_args.args\n+                        or not isinstance(assignment.keyword_args, ExprNodes.DictNode)):\n+                    error(assignment.pos, \"Call to 'cython.field' must only consist of compile-time \"\n+                          \"keyword arguments\")\n+                    continue\n+                keyword_args = { k.value: v for k, v in assignment.keyword_args.key_value_pairs }\n+                if 'default' in keyword_args and 'default_factory' in keyword_args:\n+                    error(assignment.pos, \"You cannot specify both 'default' and 'default_factory'\"\n+                          \" for a dataclass member\")\n+                    continue\n+                field = Field(**keyword_args)\n+            else:\n+                if isinstance(assignment, ExprNodes.CallNode):\n+                    func = assignment.function\n+                    if ((func.is_name and func.name == \"field\")\n+                            or (isinstance(func, ExprNodes.AttributeNode)\n+                                and func.attribute == \"field\")):\n+                        warning(assignment.pos, \"Do you mean cython.field instead?\", 1)\n+                if assignment.type in [Builtin.list_type,\n+                                    Builtin.dict_type,\n+                                    Builtin.set_type]:\n+                    # The standard library module generates a TypeError at runtime\n+                    # in this situation\n+                    error(assignment.pos, \"Mutable default passed argument for '{0}' - \"\n+                          \"use 'default_factory' instead and see \"\n+                          \"'https://docs.python.org/library/dataclasses.html#mutable-default-values'\"\n+                          \"for more details\".format(name))\n+\n+                field = Field(default=assignment)\n+        else:\n+            field = Field()\n+        field.is_initvar = is_initvar\n+        fields[name] = field\n+    node.entry.type.dataclass_fields = fields\n+    return fields\n+\n+def handle_cclass_dataclass(node, dataclass_args, analyse_decs_transform):\n+    from .ExprNodes import (AttributeNode, TupleNode, NameNode,\n+                            GeneralCallNode, DictNode,\n+                            IdentifierStringNode, BoolNode, DictItemNode)\n+\n+    # https://docs.python.org/3/library/dataclasses.html\n+    kwargs = dict(init=True, repr=True, eq=True,\n+                  order=False, unsafe_hash=False, frozen=False)\n+    if dataclass_args is not None:\n+        if dataclass_args[0]:\n+            error(node.pos, \"cython.dataclass takes no positional arguments\")\n+        for k, v in dataclass_args[1].items():\n+            if k not in kwargs:\n+                error(node.pos,\n+                      \"Unrecognised keyword argument '{0}' to cython.dataclass\".format(k))\n+            if not isinstance(v, ExprNodes.BoolNode):\n+                error(node.pos,\n+                      \"Arguments to cython.dataclass must be True or False\")\n+            kwargs[k] = v\n+\n+    dataclass_scope = make_common_utilitycode(node.scope)\n+    fields = process_class_get_fields(node)\n+\n+    dataclass_module = make_dataclass_module_callnode(node.pos)\n+\n+    # create __dataclass_params__ attribute\n+    dataclass_params_func = AttributeNode(node.pos, obj=dataclass_module,\n+                                            attribute=EncodedString(\"_DataclassParams\"))\n+    dataclass_params_keywords = DictNode.from_pairs(node.pos,\n+            [ (IdentifierStringNode(node.pos, value=EncodedString(k)),\n+                BoolNode(node.pos, value=v))\n+                for k, v in kwargs.items() ])\n+    dataclass_params = GeneralCallNode(node.pos,\n+                                    function = dataclass_params_func,\n+                                    positional_args = TupleNode(node.pos, args=[]),\n+                                    keyword_args = dataclass_params_keywords)\n+    dataclass_params_assignment = \\\n+        Nodes.SingleAssignmentNode(node.pos,\n+                        lhs = NameNode(node.pos,\n+                                        name=EncodedString(\"__dataclass_params__\")),\n+                        rhs = dataclass_params)\n+\n+    dataclass_fields_stats = _setup_dataclass_fields(node, fields, dataclass_module)\n+\n+    stats = Nodes.StatListNode(node.pos,\n+                               stats=[dataclass_params_assignment]\n+                                    + dataclass_fields_stats)\n+\n+    init_stats = generate_init_code(kwargs['init'], node, fields)\n+    repr_stats = generate_repr_code(kwargs['repr'], node, fields)\n+    eq_stats = generate_eq_code(kwargs['eq'], node, fields)\n+    order_stats = generate_order_code(kwargs['order'], node, fields)\n+    hash_stats = generate_hash_code(kwargs['unsafe_hash'], kwargs['eq'], kwargs['frozen'],\n+                       node, fields)\n+\n+    stats.stats = stats.stats + init_stats + repr_stats + eq_stats + order_stats + hash_stats\n+\n+    # turn off annotation typing, so all arguments to __init__ are accepted as\n+    # generic objects and thus can accept _HAS_DEFAULT_FACTORY\n+    # type conversion done comes later\n+    # (for some reason this has to be on the class scope, so save and restore)\n+    annotation_typing = node.scope.directives['annotation_typing']\n+    node.scope.directives['annotation_typing'] = False\n+    stats.analyse_declarations(node.scope)\n+    # probably already in this scope, but it doesn't hurt to make sure\n+    analyse_decs_transform.enter_scope(node, node.scope)\n+    analyse_decs_transform.visit(stats)\n+    analyse_decs_transform.exit_scope()\n+    node.scope.directives['annotation_typing'] = annotation_typing\n+\n+    RemoveDontAnalyseDeclarations()(stats)\n+\n+    node.body.stats.extend(stats.stats)\n+\n+def generate_init_code(init, node, fields):\n+    if not init or node.scope.lookup_here(\"__init__\"):\n+        return []\n+    # selfname behaviour copied from the cpython module\n+    selfname = \"__dataclass_self__\" if \"self\" in fields else \"self\"\n+    args = [selfname]\n+\n+    placeholders = {}\n+    placeholder_count = [0]\n+\n+    # create a temp to get _HAS_DEFAULT_FACTORY\n+    dataclass_module = make_dataclass_module_callnode(node.pos)\n+    has_default_factory = ExprNodes.AttributeNode(node.pos,\n+                                        obj = dataclass_module,\n+                                        attribute = EncodedString(\"_HAS_DEFAULT_FACTORY\"))\n+\n+    def get_placeholder_name():\n+        while True:\n+            name = \"PLACEHOLDER_%s\" % placeholder_count[0]\n+            if (name not in placeholders\n+                    and name not in fields):\n+                # make sure name isn't already used and doesn't\n+                # conflict with a variable name (which is unlikely but possible)\n+                break\n+            placeholder_count[0] += 1\n+        return name\n+\n+    default_factory_placeholder = get_placeholder_name()\n+    placeholders[default_factory_placeholder] = has_default_factory\n+\n+    seen_default = False\n+    for name, field in fields.items():\n+        if not field.init.value:\n+            continue\n+        entry = node.scope.lookup(name)\n+        annotation = entry.pep563_annotation\n+        if annotation:\n+            annotation = u\": %s\" % annotation\n+        else:\n+            annotation = u\"\"\n+        assignment = u''\n+        if field.default is not MISSING or field.default_factory is not MISSING:\n+            seen_default = True\n+            if field.default_factory is not MISSING:\n+                ph_name = default_factory_placeholder\n+            else:\n+                ph_name = get_placeholder_name()\n+                placeholders[ph_name] = field.default  # should be node\n+            assignment = u\" = %s\" % ph_name\n+        elif seen_default:\n+            error(entry.pos, (\"non-default argument %s follows default argument \"\n+                             \"in dataclass __init__\") % name)\n+            return []\n+\n+        args.append(u\"%s%s%s\" % (name, annotation, assignment))\n+    args = u\", \".join(args)\n+    func_call = u\"def __init__(%s):\" % args\n+\n+    code_lines = [func_call,\n+                  \"    pass\",  # just in-case it's an empty body\n+                  ]\n+    for name, field in fields.items():\n+        if field.is_initvar:\n+            continue\n+        if field.default_factory is MISSING:\n+            if field.init.value:\n+                code_lines.append(u\"    %s.%s = %s\" % (selfname, name, name))\n+        else:\n+            ph_name = get_placeholder_name()\n+            placeholders[ph_name] = field.default_factory\n+            if field.init.value:\n+                code_lines.append(u\"    if %s is %s:\"\n+                                % (name, default_factory_placeholder))\n+                code_lines.append(u\"        %s.%s = %s()\"\n+                                % (selfname, name, ph_name))\n+                code_lines.append(u\"    else:\")\n+                code_lines.append(u\"        %s.%s = %s\" % (selfname, name, name))\n+            else:\n+                # still need to use the default factory to initialize\n+                code_lines.append(u\"    %s.%s = %s()\"\n+                                  % (selfname, name, ph_name))\n+    if node.scope.lookup(\"__post_init__\"):\n+        post_init_vars = \", \".join(name for name, field in fields.items()\n+                                    if field.is_initvar)\n+        code_lines.append(\"    %s.__post_init__(%s)\" % (selfname, post_init_vars))\n+    code_lines = u\"\\n\".join(code_lines)\n+\n+    code_tree = TreeFragment(code_lines, level='c_class',\n+                             pipeline=[NormalizeTree(node.scope),\n+                                       ]\n+                              ).substitute(placeholders)\n+\n+    return code_tree.stats\n+\n+\n+def generate_repr_code(repr, node, fields):\n+    if not repr or node.scope.lookup(\"__repr__\"):\n+        return []\n+    code_lines = [\"def __repr__(self):\"]\n+    strs = [ u\"%s={self.%s}\" % (name, name)\n+            for name, field in fields.items() if field.repr.value and not field.is_initvar ]\n+    format_string = u\", \".join(strs)\n+    code_lines.append(u\"    return f'{type(self).__name__}(%s)'\" % format_string)\n+    code_lines = u\"\\n\".join(code_lines)\n+\n+    code_tree = TreeFragment(code_lines,\n+                              level='c_class', pipeline=[NormalizeTree(None)]\n+                              ).substitute({})\n+    return code_tree.stats\n+\n+def generate_cmp_code(op, funcname, node, fields):\n+    if node.scope.lookup_here(funcname):\n+        return []  # already exists\n+\n+    names = [ name for name, field in fields.items()\n+                if (field.compare.value and not field.is_initvar) ]\n+\n+    if not names:\n+        return []  # no comparable types\n+\n+    code_lines = [\"def %s(self, other):\" % funcname,\n+                  \"    cdef %s other_cast\" % node.class_name,\n+                  \"    try:\",\n+                  \"        other_cast = other\",\n+                  \"    except TypeError:\",\n+                  \"        return NotImplemented\"]\n+\n+    for name in names:\n+        shared = \"if not (self.%s == other_cast.%s):\" % (name, name)\n+        if op == \"==\":\n+            code_lines.append(\"    %s return False\" % shared)\n+        else:\n+            code_lines.append(\"    %s return self.%s %s other_cast.%s\" %\n+                              (shared, name, op, name))\n+\n+    if \"=\" in op:\n+        code_lines.append(\"    return True\")\n+    else:\n+        code_lines.append(\"    return False\")\n+\n+    code_lines = u\"\\n\".join(code_lines)\n+\n+    code_tree = TreeFragment(code_lines,\n+                              level='c_class', pipeline=[NormalizeTree(None)]\n+                              ).substitute({})\n+    return code_tree.stats\n+\n+def generate_eq_code(eq, node, fields):\n+    if not eq:\n+        return []\n+    return generate_cmp_code(\"==\", \"__eq__\", node, fields)\n+\n+def generate_order_code(order, node, fields):\n+    if not order:\n+        return []\n+    stats = []\n+    for op, name in [(\"<\", \"__lt__\"),\n+                     (\"<=\", \"__le__\"),\n+                     (\">\", \"__gt__\"),\n+                     (\">=\", \"__ge__\")]:\n+        stats.extend(generate_cmp_code(op, name, node, fields))\n+    return stats\n+\n+def generate_hash_code(unsafe_hash, eq, frozen, node, fields):\n+    hash_entry = node.scope.lookup_here(\"__hash__\")\n+    if hash_entry:\n+        # TODO ideally assignment of __hash__ to None shouldn't trigger this\n+        # but difficult to get the right information here\n+        if unsafe_hash:\n+            error(node.pos, \"Request for dataclass unsafe_hash when a '__hash__' function\"\n+                  \" already exists\")\n+        return []\n+    if not unsafe_hash:\n+        if eq and not frozen:\n+            return [Nodes.SingleAssignmentNode(node.pos,\n+                                        lhs = ExprNodes.NameNode(node.pos, name=EncodedString(\"__hash__\")),\n+                                        rhs = ExprNodes.NoneNode(node.pos))]\n+        if not eq:\n+            return []\n+\n+    names = [ name for name, field in fields.items()\n+                if (not field.is_initvar and\n+                    (field.compare.value if field.hash.value is None else field.hash.value)) ]\n+    if not names:\n+        return []  # nothing to hash\n+\n+    # make a tuple of the hashes\n+    tpl = u\", \".join(u\"hash(self.%s)\" % name for name in names )\n+\n+    # if we're here we want to generate a hash\n+    code_lines = u\"\"\"def __hash__(self):\n+    return hash((%s))\n+\"\"\" % tpl\n+    code_tree = TreeFragment(code_lines,\n+                              level='c_class', pipeline=[NormalizeTree(None)]\n+                              ).substitute({})\n+    return code_tree.stats\n+\n+\n+class GetTypeNode(ExprNodes.ExprNode):\n+    # Tries to return a pytype_type if possible. However contains\n+    # some fallback provision if it turns out not to resolve to a Python object\n+    # Initialize with \"entry\"\n+\n+    subexprs = []\n+\n+    def __init__(self, entry):\n+        super(GetTypeNode, self).__init__(entry.pos, entry=entry)\n+\n+    def analyse_types(self, env):\n+        type = self.entry.type\n+\n+        if type.is_extension_type or type.is_builtin_type:\n+            return ExprNodes.RawCNameExprNode(self.pos, Builtin.type_type,\n+                                                type.typeptr_cname).analyse_types(env)\n+        else:\n+            names = None\n+            py_name = type.py_type_name()\n+            # int types can return \"(int, long)\"\n+            if py_name:\n+                names = py_name.split(\",\")\n+                names = [ n.strip(\"() \") for n in names ]\n+            if names:\n+                for name in names:\n+                    name = EncodedString(name)\n+                    nn = ExprNodes.NameNode(self.pos, name=name)\n+                    # try to set the entry now to prevent the user accidentally shadowing\n+                    # the name\n+                    nn.entry = env.builtin_scope().lookup(name)\n+                    if not nn.entry:\n+                        try:\n+                            nn.entry = env.declare_builtin(name, self.pos)\n+                        except:\n+                            pass  # not convinced a failure means much\n+                    if nn.entry:\n+                        return nn.analyse_types(env)\n+\n+        # otherwise we're left to return a string\n+        s = self.entry.pep563_annotation\n+        if not s:\n+            s = self.entry.type.declaration_code(\"\", for_display=1)\n+        return ExprNodes.StringNode(self.pos, value=s).analyse_types(env)\n+\n+class DontAnalyseDeclarationsNode(ExprNodes.ExprNode):\n+    # arg    ExprNode\n+    #\n+    # This is designed to wrap stuff that's already been analysed\n+    # so that lambdas aren't redeclared for example\n+    # and then immediately be replaced\n+\n+    subexprs = []\n+\n+    def analyse_declarations(self, env):\n+        return\n+\n+class RemoveDontAnalyseDeclarations(VisitorTransform):\n+    def visit_DontAnalyseDeclarationsNode(self, node):\n+        return node.arg\n+\n+    def visit_Node(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+\n+class FieldsValueNode(ExprNodes.ExprNode):\n+    # largely just forwards arg. Allows it to be coerced to a Python object\n+    # if possible, and if not then generates a sensible backup string\n+    subexprs = ['arg']\n+\n+    def __init__(self, pos, arg):\n+        super(FieldsValueNode, self).__init__(pos, arg=arg)\n+\n+    def analyse_types(self, env):\n+        self.arg.analyse_types(env)\n+        self.type = self.arg.type\n+        return self\n+\n+    def coerce_to_pyobject(self, env):\n+        if self.arg.type.can_coerce_to_pyobject(env):\n+            return self.arg.coerce_to_pyobject(env)\n+        else:\n+            # A string representation of the code that gave the field seems like a reasonable\n+            # fallback. This'll mostly happen for \"default\" and \"default_factory\" where the\n+            # type may be a C-type that can't be converted to Python.\n+            return self._make_string()\n+\n+    def _make_string(self):\n+        from .AutoDocTransforms import AnnotationWriter\n+        writer = AnnotationWriter(description=\"Dataclass field\")\n+        string = writer.write(self.arg)\n+        return ExprNodes.StringNode(self.pos, value=EncodedString(string))\n+\n+    def generate_evaluation_code(self, code):\n+        return self.arg.generate_evaluation_code(code)\n+\n+\n+def _setup_dataclass_fields(node, fields, dataclass_module):\n+    from .ExprNodes import (AttributeNode, TupleNode, NameNode,\n+                            GeneralCallNode, DictNode,\n+                            IdentifierStringNode, BoolNode, DictItemNode,\n+                            CloneNode)\n+\n+    # For defaults and default_factories containing things like lambda,\n+    # they're already declared in the class scope, and it creates a big\n+    # problem if multiple copies are floating around in both the __init__\n+    # function, and in the __dataclass_fields__ structure.\n+    # Therefore, create module-level constants holding these values and\n+    # pass those around instead\n+    variables_assignment_stats = []\n+    for name, field in fields.items():\n+        for attrname in [ \"default\", \"default_factory\" ]:\n+            f_def = getattr(field, attrname)\n+            if f_def is MISSING or f_def.is_literal or f_def.is_name:\n+                # some simple cases where we don't need to set up\n+                # the variable as a module-level constant\n+                continue\n+            global_scope = node.scope.global_scope()\n+            module_field_name = global_scope.mangle(global_scope.mangle(\n+                                    Naming.dataclass_field_default_cname,\n+                                    node.class_name), name)\n+            # create an entry in the global scope for this variable to live\n+            nn = NameNode(f_def.pos, name=EncodedString(module_field_name))\n+            nn.entry = global_scope.declare_var(nn.name, type=f_def.type or PyrexTypes.unspecified_type,\n+                                                pos=f_def.pos, cname=nn.name, is_cdef=1)\n+            # replace the field so that future users just receive the namenode\n+            setattr(field, attrname, nn)\n+\n+            variables_assignment_stats.append(\n+                Nodes.SingleAssignmentNode(f_def.pos,\n+                                           lhs = nn,\n+                                           rhs = DontAnalyseDeclarationsNode(f_def.pos, arg=f_def)))\n+\n+    placeholders = {}\n+    field_func = AttributeNode(node.pos, obj = dataclass_module,\n+                                    attribute=EncodedString(\"field\"))\n+    dc_fields = DictNode(node.pos, key_value_pairs=[])\n+    dc_fields_namevalue_assignments = []\n+    for name, field in fields.items():\n+        placeholder_name = \"PLACEHOLDER_%s\" % name\n+        placeholders[placeholder_name] = GetTypeNode(node.scope.entries[name])",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r485931754",
            "id": 485931754,
            "in_reply_to_id": 485906541,
            "line": 593,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkzMTc1NA==",
            "original_commit_id": "043a102296c9949e1924c783c0b0d061810d85e9",
            "original_line": 575,
            "original_position": 575,
            "original_start_line": null,
            "path": "Cython/Compiler/Dataclass.py",
            "position": 593,
            "pull_request_review_id": 485415803,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-09-26T17:10:35Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/485931754",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r486132635"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/486132635"
                }
            },
            "author_association": "COLLABORATOR",
            "body": "In fairness this was the one bit of code I still understood 6 months later, which suggests it was probably the best bit.\r\n\r\nI've replaced it with Tempita though.",
            "commit_id": "9b2ae3ba72ebe693bd4a27a2d54b4ebe03d5da34",
            "created_at": "2020-09-10T07:44:29Z",
            "diff_hunk": "@@ -177,3 +178,18 @@\n \n def py_version_hex(major, minor=0, micro=0, release_level=0, release_serial=0):\n     return (major << 24) | (minor << 16) | (micro << 8) | (release_level << 4) | (release_serial)\n+\n+class _py_code:\n+    # This is in Naming.py to be able to abuse the UtilityCode \"subsitute naming\" mechanism.",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r486132635",
            "id": 486132635,
            "in_reply_to_id": 485903258,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjEzMjYzNQ==",
            "original_commit_id": "043a102296c9949e1924c783c0b0d061810d85e9",
            "original_line": 183,
            "original_position": 14,
            "original_start_line": null,
            "path": "Cython/Compiler/Naming.py",
            "position": null,
            "pull_request_review_id": 485664395,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-09-26T17:10:35Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/486132635",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r486511899"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/486511899"
                }
            },
            "author_association": "COLLABORATOR",
            "body": "The CPython dataclass implementation defines [`field`](https://docs.python.org/3/library/dataclasses.html#dataclasses.field) which is used to give extra control - for example for turning saying \"this attribute doesn't appear in `__repr__`\" or for setting up a default factory function.\r\n\r\n`field` ends up being used in two places: controlling the code generation and as inspectable information in `__dataclass_fields__`. In the standard library module the same structure is naturally used for both. In Cython that doesn't quite work as naturally. Even so I found it useful to replicate the `dataclasses.field` structure at the code generation stage to keep track of what options are set for each attribute.\r\n\r\nWhen I was writing this I was copying from the standard library module quite a bit so it made sense to try to use similar structures.\r\n\r\nI'll try to get some of this in comments next to the code though since the comments currently next to the code aren't particularly helpful.",
            "commit_id": "9b2ae3ba72ebe693bd4a27a2d54b4ebe03d5da34",
            "created_at": "2020-09-10T17:25:57Z",
            "diff_hunk": "@@ -0,0 +1,611 @@\n+# functions to transform a c class into a dataclass\n+\n+from collections import OrderedDict\n+\n+from .Errors import error, warning\n+from . import ExprNodes, Nodes, PyrexTypes\n+from .Code import UtilityCode\n+from .Visitor import VisitorTransform\n+from . import UtilNodes, Builtin, Naming\n+from .StringEncoding import BytesLiteral, EncodedString\n+from .TreeFragment import TreeFragment\n+from .ParseTreeTransforms import (NormalizeTree, SkipDeclarations, AnalyseDeclarationsTransform,\n+                                  MarkClosureVisitor)\n+\n+def _make_module_callnode(pos, name):\n+    loader_utilitycode = UtilityCode.load_cached(\"%sModuleLoader\" % name, \"Dataclasses.c\")\n+    return ExprNodes.PythonCapiCallNode(pos, \"__Pyx_Load%sModule\" % name,\n+                                PyrexTypes.CFuncType(PyrexTypes.py_object_type, []),\n+                                utility_code = loader_utilitycode,\n+                                args=[])\n+\n+def make_dataclass_module_callnode(pos):\n+    return _make_module_callnode(pos, \"Dataclass\")\n+def make_typing_module_callnode(pos):\n+    return _make_module_callnode(pos, \"Typing\")\n+\n+_INTERNAL_DEFAULTSHOLDER_NAME = EncodedString('__pyx_dataclass_defaults')\n+\n+def make_common_utilitycode(scope):\n+    scope.global_scope().use_utility_code(\n+        UtilityCode.load_cached(\"DataclassModuleLoader\", \"Dataclasses.c\"))\n+\n+\n+class RemoveAssignments(VisitorTransform, SkipDeclarations):\n+    def __init__(self, names):\n+        super(RemoveAssignments, self).__init__()\n+        self.names = names\n+        self.removed_assignments = {}\n+\n+    def visit_CClassNode(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+    def visit_PyClassNode(self, node):\n+        return node  # go no further\n+\n+    def visit_FuncDefNode(self, node):\n+        return node  # go no further\n+\n+    def visit_SingleAssignmentNode(self, node):\n+        if node.lhs.is_name and node.lhs.name in self.names:\n+            if node.lhs.name in self.removed_assignments:\n+                warning(node.pos, (\"Multiple assignments for '%s' in dataclass; \"\n+                                   \"using most recent\") % node.lhs.name, 1)\n+            self.removed_assignments[node.lhs.name] = node.rhs\n+            return []\n+        return node\n+\n+    # I believe cascaded assignment is always a syntax error with decorators\n+    # so can be ignored\n+\n+    def visit_Node(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+class _MISSING_TYPE:\n+    pass\n+MISSING = _MISSING_TYPE()\n+\n+def process_class_get_fields(node):\n+    _TrueNode = ExprNodes.BoolNode(node.pos, value=True)\n+    _FalseNode = ExprNodes.BoolNode(node.pos, value=False)\n+    _NoneNode = ExprNodes.NoneNode(node.pos)\n+\n+    class Field:\n+        # store fields as nodes so they can be used in code construction\n+        # more readily; define class inside function so default arguments\n+        # have a useful pos",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r486511899",
            "id": 486511899,
            "in_reply_to_id": 485897978,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUxMTg5OQ==",
            "original_commit_id": "043a102296c9949e1924c783c0b0d061810d85e9",
            "original_line": 78,
            "original_position": 78,
            "original_start_line": 76,
            "path": "Cython/Compiler/Dataclass.py",
            "position": null,
            "pull_request_review_id": 486154801,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2020-09-26T17:10:35Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/486511899",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/cython/cython/issues/3400/comments",
    "commit_data": [
        {
            "author": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/1298172e6348b8719ef10f39faf9fcec611f6c13/comments",
            "commit": {
                "author": {
                    "date": "2020-03-07T22:10:48Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-03-07T22:14:48Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "cdef dataclasses\n\nUsed cython.dataclass and cython.field to mark dataclasses and their fields.\n\nTries to match the interface provided by a regular dataclass as much as possible.\nThis means taking the types from the dataclasses module if available (so they\nmatch exactly) or a fallback Python version that just implements the core\nparts (obtained with PyRun_SimpleString in the C source).\n\nDoesn't try to handle ClassVar or InitVar at this stage. Otherwise\npretty complete.\n\nI don't really have a good idea of how to handle non-Python-compatible types\nhere and haven't hugely tested it. Bits will rpobably work to an extent\n\nUse of placeholders in generated __init__ code means the code in the C file\nisn't hugely readable. Probably not a huge issue, but don't really see a\nway round that\n\nTODO: frozen? - when set it either needs to set attributes to readonly\nand/or at least enforce readonlyness\n\n----------------------------------\n\nWhen finished closes https://github.com/cython/cython/issues/2903 -\nhowever, some design decisions pending before it's finished",
                "tree": {
                    "sha": "7c026401df016abe8fd10a42cf71b92e5cd2414a",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/7c026401df016abe8fd10a42cf71b92e5cd2414a"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/1298172e6348b8719ef10f39faf9fcec611f6c13",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/1298172e6348b8719ef10f39faf9fcec611f6c13",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6MTI5ODE3MmU2MzQ4Yjg3MTllZjEwZjM5ZmFmOWZjZWM2MTFmNmMxMw==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/a8cb127df0cb970b00a8f58797740ef571dc8817",
                    "sha": "a8cb127df0cb970b00a8f58797740ef571dc8817",
                    "url": "https://api.github.com/repos/cython/cython/commits/a8cb127df0cb970b00a8f58797740ef571dc8817"
                }
            ],
            "sha": "1298172e6348b8719ef10f39faf9fcec611f6c13",
            "url": "https://api.github.com/repos/cython/cython/commits/1298172e6348b8719ef10f39faf9fcec611f6c13"
        },
        {
            "author": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/153f18af041f9e21a094ff80a72b9fff363fd4aa/comments",
            "commit": {
                "author": {
                    "date": "2020-03-08T18:42:49Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-03-08T18:42:49Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Fixed bug, added more tests documentation\n\nAlso removed some dead code",
                "tree": {
                    "sha": "8bd39103bd3f78755ec475916edd78ecd9b668d1",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/8bd39103bd3f78755ec475916edd78ecd9b668d1"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/153f18af041f9e21a094ff80a72b9fff363fd4aa",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/153f18af041f9e21a094ff80a72b9fff363fd4aa",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6MTUzZjE4YWYwNDFmOWUyMWEwOTRmZjgwYTcyYjlmZmYzNjNmZDRhYQ==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/1298172e6348b8719ef10f39faf9fcec611f6c13",
                    "sha": "1298172e6348b8719ef10f39faf9fcec611f6c13",
                    "url": "https://api.github.com/repos/cython/cython/commits/1298172e6348b8719ef10f39faf9fcec611f6c13"
                }
            ],
            "sha": "153f18af041f9e21a094ff80a72b9fff363fd4aa",
            "url": "https://api.github.com/repos/cython/cython/commits/153f18af041f9e21a094ff80a72b9fff363fd4aa"
        },
        {
            "author": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/2d6de5a2596802dcc769936f29c61f8e81781abe/comments",
            "commit": {
                "author": {
                    "date": "2020-03-08T20:48:05Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-03-08T20:48:05Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "py2 test\n\narray.array didn't define the buffer interface. So used\nthe standard cythonarrayutil for the test",
                "tree": {
                    "sha": "c88307ff3bc857530b04f63ced768fabd31ac16f",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/c88307ff3bc857530b04f63ced768fabd31ac16f"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/2d6de5a2596802dcc769936f29c61f8e81781abe",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/2d6de5a2596802dcc769936f29c61f8e81781abe",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6MmQ2ZGU1YTI1OTY4MDJkY2M3Njk5MzZmMjljNjFmOGU4MTc4MWFiZQ==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/153f18af041f9e21a094ff80a72b9fff363fd4aa",
                    "sha": "153f18af041f9e21a094ff80a72b9fff363fd4aa",
                    "url": "https://api.github.com/repos/cython/cython/commits/153f18af041f9e21a094ff80a72b9fff363fd4aa"
                }
            ],
            "sha": "2d6de5a2596802dcc769936f29c61f8e81781abe",
            "url": "https://api.github.com/repos/cython/cython/commits/2d6de5a2596802dcc769936f29c61f8e81781abe"
        },
        {
            "author": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/5cd5885fcbeb2429be84890f4782030ba1d6e361/comments",
            "commit": {
                "author": {
                    "date": "2020-03-09T09:26:53Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-03-09T09:28:01Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Added InitVar and ClassVar",
                "tree": {
                    "sha": "27e19c5a1b611cf50a49f0aa49433704e2823724",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/27e19c5a1b611cf50a49f0aa49433704e2823724"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/5cd5885fcbeb2429be84890f4782030ba1d6e361",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/5cd5885fcbeb2429be84890f4782030ba1d6e361",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6NWNkNTg4NWZjYmViMjQyOWJlODQ4OTBmNDc4MjAzMGJhMWQ2ZTM2MQ==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/2d6de5a2596802dcc769936f29c61f8e81781abe",
                    "sha": "2d6de5a2596802dcc769936f29c61f8e81781abe",
                    "url": "https://api.github.com/repos/cython/cython/commits/2d6de5a2596802dcc769936f29c61f8e81781abe"
                }
            ],
            "sha": "5cd5885fcbeb2429be84890f4782030ba1d6e361",
            "url": "https://api.github.com/repos/cython/cython/commits/5cd5885fcbeb2429be84890f4782030ba1d6e361"
        },
        {
            "author": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/f1aceb752d2c250d9b55d15ace4ea18cefe59f3a/comments",
            "commit": {
                "author": {
                    "date": "2020-03-10T09:34:29Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-03-10T18:06:16Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Version using module-level globals to store default/default_factory\n\nAvoids lambda nodes/etc being duplicated in __init__\nand __dataclass_fields__ - simplest solution to this problem",
                "tree": {
                    "sha": "3af74af8f02f82d84bbe5217a26e85b22b556ce6",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/3af74af8f02f82d84bbe5217a26e85b22b556ce6"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/f1aceb752d2c250d9b55d15ace4ea18cefe59f3a",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/f1aceb752d2c250d9b55d15ace4ea18cefe59f3a",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6ZjFhY2ViNzUyZDJjMjUwZDliNTVkMTVhY2U0ZWExOGNlZmU1OWYzYQ==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/5cd5885fcbeb2429be84890f4782030ba1d6e361",
                    "sha": "5cd5885fcbeb2429be84890f4782030ba1d6e361",
                    "url": "https://api.github.com/repos/cython/cython/commits/5cd5885fcbeb2429be84890f4782030ba1d6e361"
                }
            ],
            "sha": "f1aceb752d2c250d9b55d15ace4ea18cefe59f3a",
            "url": "https://api.github.com/repos/cython/cython/commits/f1aceb752d2c250d9b55d15ace4ea18cefe59f3a"
        },
        {
            "author": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/491bd771ea752d64b385470f84b36c31d7259b8b/comments",
            "commit": {
                "author": {
                    "date": "2020-03-10T20:16:34Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-03-10T20:16:34Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Fixed py2 module-getting issues (and refcount)",
                "tree": {
                    "sha": "4be9ddc7b01cc8939ca9b857236de3ed9972f91d",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/4be9ddc7b01cc8939ca9b857236de3ed9972f91d"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/491bd771ea752d64b385470f84b36c31d7259b8b",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/491bd771ea752d64b385470f84b36c31d7259b8b",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6NDkxYmQ3NzFlYTc1MmQ2NGIzODU0NzBmODRiMzZjMzFkNzI1OWI4Yg==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/f1aceb752d2c250d9b55d15ace4ea18cefe59f3a",
                    "sha": "f1aceb752d2c250d9b55d15ace4ea18cefe59f3a",
                    "url": "https://api.github.com/repos/cython/cython/commits/f1aceb752d2c250d9b55d15ace4ea18cefe59f3a"
                }
            ],
            "sha": "491bd771ea752d64b385470f84b36c31d7259b8b",
            "url": "https://api.github.com/repos/cython/cython/commits/491bd771ea752d64b385470f84b36c31d7259b8b"
        },
        {
            "author": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/cc1d0002b315a3f1c8f78abcfe558c393102ce3e/comments",
            "commit": {
                "author": {
                    "date": "2020-08-27T18:51:15Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-08-27T18:51:15Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Merge branch 'master' into dataclass",
                "tree": {
                    "sha": "54f9598a12bdde60a56adc5e495f2df3b81ba768",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/54f9598a12bdde60a56adc5e495f2df3b81ba768"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/cc1d0002b315a3f1c8f78abcfe558c393102ce3e",
                "verification": {
                    "payload": "tree 54f9598a12bdde60a56adc5e495f2df3b81ba768\nparent 491bd771ea752d64b385470f84b36c31d7259b8b\nparent 4d54aeff34753551cf0ac9977d50c292dbf9d5d5\nauthor da-woods <dw-git@d-woods.co.uk> 1598554275 +0100\ncommitter GitHub <noreply@github.com> 1598554275 +0100\n\nMerge branch 'master' into dataclass",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfSACjCRBK7hj4Ov3rIwAAdHIIAH6jjqD6GVCoZ4DIy182KZGa\noK2NKfAzrcxiEKE+HmsCQcicv93GvAuZwRxxhp8zUaCBfwL+9CJQCbdBjpr7Jl3Z\ntHuBt8l8QRHGvv+/gwDqd/wrSKzfIwy4D7t8mVIIN4nz7hv03oqqmUVhNUMD5lDe\nNAwY3pCavEKxoMi49OoZI4Olm/LLW0v1Gqox6Q34ZwIamk0uSoQB25Fx8495tOqR\nMu8l0PFGQ4DGWW6+sPOII0c59GOeKWRRjja7hdkcxG2A9huBqabHlux09ohBvQg+\n2m4RWl43a+GGltrB+xmGPg8AKg78cYzj58a0vCpHLtvmmMhM5fR1g80KHXb62mQ=\n=Bh4f\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/cc1d0002b315a3f1c8f78abcfe558c393102ce3e",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6Y2MxZDAwMDJiMzE1YTNmMWM4Zjc4YWJjZmU1NThjMzkzMTAyY2UzZQ==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/491bd771ea752d64b385470f84b36c31d7259b8b",
                    "sha": "491bd771ea752d64b385470f84b36c31d7259b8b",
                    "url": "https://api.github.com/repos/cython/cython/commits/491bd771ea752d64b385470f84b36c31d7259b8b"
                },
                {
                    "html_url": "https://github.com/cython/cython/commit/4d54aeff34753551cf0ac9977d50c292dbf9d5d5",
                    "sha": "4d54aeff34753551cf0ac9977d50c292dbf9d5d5",
                    "url": "https://api.github.com/repos/cython/cython/commits/4d54aeff34753551cf0ac9977d50c292dbf9d5d5"
                }
            ],
            "sha": "cc1d0002b315a3f1c8f78abcfe558c393102ce3e",
            "url": "https://api.github.com/repos/cython/cython/commits/cc1d0002b315a3f1c8f78abcfe558c393102ce3e"
        },
        {
            "author": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/603b0399979be20cd93931cdfc9bc6a67f6428ee/comments",
            "commit": {
                "author": {
                    "date": "2020-08-28T07:16:08Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-08-28T07:16:08Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Fixed code-style and pypy tests\n\n(I think - pypy compilation currently seems broken on my pc)",
                "tree": {
                    "sha": "e6cd576e1f338a0b99e124783d5e65978dc9652e",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/e6cd576e1f338a0b99e124783d5e65978dc9652e"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/603b0399979be20cd93931cdfc9bc6a67f6428ee",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/603b0399979be20cd93931cdfc9bc6a67f6428ee",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6NjAzYjAzOTk5NzliZTIwY2Q5MzkzMWNkZmM5YmM2YTY3ZjY0MjhlZQ==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/cc1d0002b315a3f1c8f78abcfe558c393102ce3e",
                    "sha": "cc1d0002b315a3f1c8f78abcfe558c393102ce3e",
                    "url": "https://api.github.com/repos/cython/cython/commits/cc1d0002b315a3f1c8f78abcfe558c393102ce3e"
                }
            ],
            "sha": "603b0399979be20cd93931cdfc9bc6a67f6428ee",
            "url": "https://api.github.com/repos/cython/cython/commits/603b0399979be20cd93931cdfc9bc6a67f6428ee"
        },
        {
            "author": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/043a102296c9949e1924c783c0b0d061810d85e9/comments",
            "commit": {
                "author": {
                    "date": "2020-08-28T16:46:01Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-08-28T16:46:01Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Fixed PyPy3\n\nIt doesn't have PyImport_AddModuleObject",
                "tree": {
                    "sha": "4d56dcf8d6b5a18b17beff55cf516584ca5f4f76",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/4d56dcf8d6b5a18b17beff55cf516584ca5f4f76"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/043a102296c9949e1924c783c0b0d061810d85e9",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/043a102296c9949e1924c783c0b0d061810d85e9",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6MDQzYTEwMjI5NmM5OTQ5ZTE5MjRjNzgzYzBiMGQwNjE4MTBkODVlOQ==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/603b0399979be20cd93931cdfc9bc6a67f6428ee",
                    "sha": "603b0399979be20cd93931cdfc9bc6a67f6428ee",
                    "url": "https://api.github.com/repos/cython/cython/commits/603b0399979be20cd93931cdfc9bc6a67f6428ee"
                }
            ],
            "sha": "043a102296c9949e1924c783c0b0d061810d85e9",
            "url": "https://api.github.com/repos/cython/cython/commits/043a102296c9949e1924c783c0b0d061810d85e9"
        },
        {
            "author": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/3449117240c87f7746fbb3bf0dbf79d96d5841f2/comments",
            "commit": {
                "author": {
                    "date": "2020-09-10T07:41:45Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-09-10T07:41:45Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Avoid name loading hack\n\nFix typo in documentation\n\nDon't make utilitycode CYTHON_UNUSED",
                "tree": {
                    "sha": "040c7c35e32d81c5cf4d24421c78e83acb2cdcd6",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/040c7c35e32d81c5cf4d24421c78e83acb2cdcd6"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/3449117240c87f7746fbb3bf0dbf79d96d5841f2",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/3449117240c87f7746fbb3bf0dbf79d96d5841f2",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6MzQ0OTExNzI0MGM4N2Y3NzQ2ZmJiM2JmMGRiZjc5ZDk2ZDU4NDFmMg==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/043a102296c9949e1924c783c0b0d061810d85e9",
                    "sha": "043a102296c9949e1924c783c0b0d061810d85e9",
                    "url": "https://api.github.com/repos/cython/cython/commits/043a102296c9949e1924c783c0b0d061810d85e9"
                }
            ],
            "sha": "3449117240c87f7746fbb3bf0dbf79d96d5841f2",
            "url": "https://api.github.com/repos/cython/cython/commits/3449117240c87f7746fbb3bf0dbf79d96d5841f2"
        },
        {
            "author": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/4adb73a5ebd7b8986c87d3cdf85e716a24305e86/comments",
            "commit": {
                "author": {
                    "date": "2020-09-10T17:38:53Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-09-10T17:38:53Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Improved comments, handled \"annotation_typing\" directive better",
                "tree": {
                    "sha": "2134618fe6be158261d5ea52b8469534dc4a5e24",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/2134618fe6be158261d5ea52b8469534dc4a5e24"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/4adb73a5ebd7b8986c87d3cdf85e716a24305e86",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/4adb73a5ebd7b8986c87d3cdf85e716a24305e86",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6NGFkYjczYTVlYmQ3Yjg5ODZjODdkM2NkZjg1ZTcxNmEyNDMwNWU4Ng==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/3449117240c87f7746fbb3bf0dbf79d96d5841f2",
                    "sha": "3449117240c87f7746fbb3bf0dbf79d96d5841f2",
                    "url": "https://api.github.com/repos/cython/cython/commits/3449117240c87f7746fbb3bf0dbf79d96d5841f2"
                }
            ],
            "sha": "4adb73a5ebd7b8986c87d3cdf85e716a24305e86",
            "url": "https://api.github.com/repos/cython/cython/commits/4adb73a5ebd7b8986c87d3cdf85e716a24305e86"
        },
        {
            "author": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/8b8138a302d309e41d0a6b0cdbcc51fc63e86fc3/comments",
            "commit": {
                "author": {
                    "date": "2020-09-14T16:27:11Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-09-26T17:01:10Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Move cython.dataclass -> cython.dataclasses.dataclass\n\nfrozen should also work as an option",
                "tree": {
                    "sha": "286d0cbdc8db85d06d4db73ea94e7b52a8ebfc53",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/286d0cbdc8db85d06d4db73ea94e7b52a8ebfc53"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/8b8138a302d309e41d0a6b0cdbcc51fc63e86fc3",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/8b8138a302d309e41d0a6b0cdbcc51fc63e86fc3",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6OGI4MTM4YTMwMmQzMDllNDFkMGE2YjBjZGJjYzUxZmM2M2U4NmZjMw==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/4adb73a5ebd7b8986c87d3cdf85e716a24305e86",
                    "sha": "4adb73a5ebd7b8986c87d3cdf85e716a24305e86",
                    "url": "https://api.github.com/repos/cython/cython/commits/4adb73a5ebd7b8986c87d3cdf85e716a24305e86"
                }
            ],
            "sha": "8b8138a302d309e41d0a6b0cdbcc51fc63e86fc3",
            "url": "https://api.github.com/repos/cython/cython/commits/8b8138a302d309e41d0a6b0cdbcc51fc63e86fc3"
        },
        {
            "author": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/9b2ae3ba72ebe693bd4a27a2d54b4ebe03d5da34/comments",
            "commit": {
                "author": {
                    "date": "2020-09-26T17:10:33Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-09-26T17:10:33Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Merge branch 'master' into dataclass",
                "tree": {
                    "sha": "104959ff19d77e8fe4fce3f2b5c2d5c9e4696011",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/104959ff19d77e8fe4fce3f2b5c2d5c9e4696011"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/9b2ae3ba72ebe693bd4a27a2d54b4ebe03d5da34",
                "verification": {
                    "payload": "tree 104959ff19d77e8fe4fce3f2b5c2d5c9e4696011\nparent 8b8138a302d309e41d0a6b0cdbcc51fc63e86fc3\nparent cf89182f8181a58bd9102034566856e7280f443c\nauthor da-woods <dw-git@d-woods.co.uk> 1601140233 +0100\ncommitter GitHub <noreply@github.com> 1601140233 +0100\n\nMerge branch 'master' into dataclass",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfb3YJCRBK7hj4Ov3rIwAAdHIIAA0de/wCD6Fs3qHbZjYY1H60\nvkVTKKm18lJuu8PO3BdYHEPnJzSTMBzD6l+tsTJItCzWioD40FBPL6do18J1ITEm\nKW4TvHBumbYs31ovP6hYG1B4SM3ZhjLQVHdwvmfPVub77Sjf87nAN4e4sxj3TVmK\nYBiK/hyHf2NNG/QM2a0CZ0maWLX1gjGaLCHZnCoaZG19Oizxia2rET9vBpks3PHb\nGCXMGTFGbMSGwixxFT1PHc56DbGDp/thOHnf7cMR+ecbYnIIk0hjqekwYlW98lbv\n+xMXqGq2KU7vJ9G8HjOXkDyO2+yhMbkguFP+2IO/MyTkCYVuF6+Pob+diLM80ns=\n=CCFC\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/9b2ae3ba72ebe693bd4a27a2d54b4ebe03d5da34",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6OWIyYWUzYmE3MmViZTY5M2JkNGEyN2EyZDU0YjRlYmUwM2Q1ZGEzNA==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/8b8138a302d309e41d0a6b0cdbcc51fc63e86fc3",
                    "sha": "8b8138a302d309e41d0a6b0cdbcc51fc63e86fc3",
                    "url": "https://api.github.com/repos/cython/cython/commits/8b8138a302d309e41d0a6b0cdbcc51fc63e86fc3"
                },
                {
                    "html_url": "https://github.com/cython/cython/commit/cf89182f8181a58bd9102034566856e7280f443c",
                    "sha": "cf89182f8181a58bd9102034566856e7280f443c",
                    "url": "https://api.github.com/repos/cython/cython/commits/cf89182f8181a58bd9102034566856e7280f443c"
                }
            ],
            "sha": "9b2ae3ba72ebe693bd4a27a2d54b4ebe03d5da34",
            "url": "https://api.github.com/repos/cython/cython/commits/9b2ae3ba72ebe693bd4a27a2d54b4ebe03d5da34"
        }
    ],
    "commits_url": "https://api.github.com/repos/cython/cython/pulls/3400/commits",
    "created_at": "2020-03-07T22:19:14Z",
    "diff_url": "https://github.com/cython/cython/pull/3400.diff",
    "draft": false,
    "head": {
        "label": "da-woods:dataclass",
        "ref": "dataclass",
        "repo": {
            "archive_url": "https://api.github.com/repos/da-woods/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/da-woods/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/da-woods/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/da-woods/cython/branches{/branch}",
            "clone_url": "https://github.com/da-woods/cython.git",
            "collaborators_url": "https://api.github.com/repos/da-woods/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/da-woods/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/da-woods/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/da-woods/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/da-woods/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/da-woods/cython/contributors",
            "created_at": "2015-05-09T08:55:00Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/da-woods/cython/deployments",
            "description": "A Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/da-woods/cython/downloads",
            "events_url": "https://api.github.com/repos/da-woods/cython/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/da-woods/cython/forks",
            "full_name": "da-woods/cython",
            "git_commits_url": "https://api.github.com/repos/da-woods/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/da-woods/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/da-woods/cython/git/tags{/sha}",
            "git_url": "git://github.com/da-woods/cython.git",
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "http://cython.org",
            "hooks_url": "https://api.github.com/repos/da-woods/cython/hooks",
            "html_url": "https://github.com/da-woods/cython",
            "id": 35321967,
            "issue_comment_url": "https://api.github.com/repos/da-woods/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/da-woods/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/da-woods/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/da-woods/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/da-woods/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/da-woods/cython/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/da-woods/cython/merges",
            "milestones_url": "https://api.github.com/repos/da-woods/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkzNTMyMTk2Nw==",
            "notifications_url": "https://api.github.com/repos/da-woods/cython/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/da-woods/cython/pulls{/number}",
            "pushed_at": "2020-09-27T14:18:25Z",
            "releases_url": "https://api.github.com/repos/da-woods/cython/releases{/id}",
            "size": 62062,
            "ssh_url": "git@github.com:da-woods/cython.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/da-woods/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/da-woods/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/da-woods/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/da-woods/cython/subscription",
            "svn_url": "https://github.com/da-woods/cython",
            "tags_url": "https://api.github.com/repos/da-woods/cython/tags",
            "teams_url": "https://api.github.com/repos/da-woods/cython/teams",
            "trees_url": "https://api.github.com/repos/da-woods/cython/git/trees{/sha}",
            "updated_at": "2020-08-05T07:40:32Z",
            "url": "https://api.github.com/repos/da-woods/cython",
            "watchers": 0,
            "watchers_count": 0
        },
        "sha": "9b2ae3ba72ebe693bd4a27a2d54b4ebe03d5da34",
        "user": {
            "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
            "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
            "followers_url": "https://api.github.com/users/da-woods/followers",
            "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
            "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/da-woods",
            "id": 10536947,
            "login": "da-woods",
            "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
            "organizations_url": "https://api.github.com/users/da-woods/orgs",
            "received_events_url": "https://api.github.com/users/da-woods/received_events",
            "repos_url": "https://api.github.com/users/da-woods/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/da-woods"
        }
    },
    "html_url": "https://github.com/cython/cython/pull/3400",
    "id": 385199483,
    "issue_url": "https://api.github.com/repos/cython/cython/issues/3400",
    "labels": [],
    "locked": false,
    "merge_commit_sha": "a11691e1738fbb134643d0bbd56bd7524cd3ad7a",
    "merged_at": null,
    "milestone": null,
    "node_id": "MDExOlB1bGxSZXF1ZXN0Mzg1MTk5NDgz",
    "number": 3400,
    "patch_url": "https://github.com/cython/cython/pull/3400.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/cython/cython/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/cython/cython/pulls/3400/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/cython/cython/statuses/9b2ae3ba72ebe693bd4a27a2d54b4ebe03d5da34",
    "title": "cdef dataclasses",
    "updated_at": "2020-09-26T17:10:35Z",
    "url": "https://api.github.com/repos/cython/cython/pulls/3400",
    "user": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
        "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
        "followers_url": "https://api.github.com/users/da-woods/followers",
        "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
        "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/da-woods",
        "id": 10536947,
        "login": "da-woods",
        "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
        "organizations_url": "https://api.github.com/users/da-woods/orgs",
        "received_events_url": "https://api.github.com/users/da-woods/received_events",
        "repos_url": "https://api.github.com/users/da-woods/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/da-woods"
    }
}