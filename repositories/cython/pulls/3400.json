{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/cython/cython/issues/3400/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/cython/cython/pulls/3400/commits"
        },
        "html": {
            "href": "https://github.com/cython/cython/pull/3400"
        },
        "issue": {
            "href": "https://api.github.com/repos/cython/cython/issues/3400"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/cython/cython/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/cython/cython/pulls/3400/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/cython/cython/pulls/3400"
        },
        "statuses": {
            "href": "https://api.github.com/repos/cython/cython/statuses/67287e48cf538845fc90a2deac907917b1594600"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "COLLABORATOR",
    "auto_merge": null,
    "base": {
        "label": "cython:master",
        "ref": "master",
        "repo": {
            "archive_url": "https://api.github.com/repos/cython/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/cython/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/cython/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/cython/cython/branches{/branch}",
            "clone_url": "https://github.com/cython/cython.git",
            "collaborators_url": "https://api.github.com/repos/cython/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/cython/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/cython/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/cython/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/cython/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/cython/cython/contributors",
            "created_at": "2010-11-21T07:44:20Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/cython/cython/deployments",
            "description": "The most widely used Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/cython/cython/downloads",
            "events_url": "https://api.github.com/repos/cython/cython/events",
            "fork": false,
            "forks": 1154,
            "forks_count": 1154,
            "forks_url": "https://api.github.com/repos/cython/cython/forks",
            "full_name": "cython/cython",
            "git_commits_url": "https://api.github.com/repos/cython/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/cython/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/cython/cython/git/tags{/sha}",
            "git_url": "git://github.com/cython/cython.git",
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://cython.org",
            "hooks_url": "https://api.github.com/repos/cython/cython/hooks",
            "html_url": "https://github.com/cython/cython",
            "id": 1099265,
            "issue_comment_url": "https://api.github.com/repos/cython/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/cython/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/cython/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/cython/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/cython/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/cython/cython/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/cython/cython/merges",
            "milestones_url": "https://api.github.com/repos/cython/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkxMDk5MjY1",
            "notifications_url": "https://api.github.com/repos/cython/cython/notifications{?since,all,participating}",
            "open_issues": 943,
            "open_issues_count": 943,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/486082?v=4",
                "events_url": "https://api.github.com/users/cython/events{/privacy}",
                "followers_url": "https://api.github.com/users/cython/followers",
                "following_url": "https://api.github.com/users/cython/following{/other_user}",
                "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/cython",
                "id": 486082,
                "login": "cython",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
                "organizations_url": "https://api.github.com/users/cython/orgs",
                "received_events_url": "https://api.github.com/users/cython/received_events",
                "repos_url": "https://api.github.com/users/cython/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/cython"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/cython/cython/pulls{/number}",
            "pushed_at": "2021-05-26T18:15:17Z",
            "releases_url": "https://api.github.com/repos/cython/cython/releases{/id}",
            "size": 62446,
            "ssh_url": "git@github.com:cython/cython.git",
            "stargazers_count": 6118,
            "stargazers_url": "https://api.github.com/repos/cython/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/cython/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/cython/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/cython/cython/subscription",
            "svn_url": "https://github.com/cython/cython",
            "tags_url": "https://api.github.com/repos/cython/cython/tags",
            "teams_url": "https://api.github.com/repos/cython/cython/teams",
            "trees_url": "https://api.github.com/repos/cython/cython/git/trees{/sha}",
            "updated_at": "2021-05-27T13:31:21Z",
            "url": "https://api.github.com/repos/cython/cython",
            "watchers": 6118,
            "watchers_count": 6118
        },
        "sha": "565ba94e883e9bff328ade1e1cdefc70355d2b54",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/486082?v=4",
            "events_url": "https://api.github.com/users/cython/events{/privacy}",
            "followers_url": "https://api.github.com/users/cython/followers",
            "following_url": "https://api.github.com/users/cython/following{/other_user}",
            "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/cython",
            "id": 486082,
            "login": "cython",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
            "organizations_url": "https://api.github.com/users/cython/orgs",
            "received_events_url": "https://api.github.com/users/cython/received_events",
            "repos_url": "https://api.github.com/users/cython/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/cython"
        }
    },
    "body": "Used cython.dataclasses.dataclass and cython.dataclasses.field to mark dataclasses and their fields.\r\n\r\nTries to match the interface provided by a regular dataclass as much as possible.\r\nThis means taking the types from the dataclasses module if available (so they\r\nmatch exactly) or a fallback Python version that just implements the core\r\nparts (obtained with PyRun_SimpleString in the C source).\r\n\r\nUse of placeholders in generated `__init__` code means the code in the C file\r\nisn't hugely readable. Probably not a huge issue, but don't really see a\r\nway round that.\r\n\r\nAs part of this I've also also implemented a Cython version of `typing.ClassVar`. Although really designed for use with dataclasses it behaves sensibly when used in types in a normal `cdef class`. Potentially this might be worth documenting more thoroughly?\r\n\r\nStatus\r\n--------\r\n\r\n- [x] Both annotated variables and cdef attributes included in dataclass - done (but assignment syntax for cdef attributes is a bit clunky because it needs to be on a separate line)\r\n- [x] visibility of the attributes decided to be visible by default for annotations, invisible for cdef attributes\r\n- [x] non-public attributes omitted from `__dataclass_fields__`\r\n- [x] moving \"directives\" into `cython.dataclasses` and `cython.typing` submodules\r\n  - [ ] I'd quite like these `cython.dataclasses` submodules and their attributes to be available at runtime and just forwarded to their standard library modules if available. This may be fiddly\r\n- [x] \"frozen\" option of dataclasses works. (Obviously hard to enforce at C level)\r\n\r\n----------------------------------\r\n\r\nOld commentary on design decisions (can now mostly be ignored)\r\n--------------------------------\r\n\r\nWhen finished closes https://github.com/cython/cython/issues/2903 -\r\nhowever, some design decisions pending before it's finished:\r\n\r\nWhat attributes should be included in the dataclass? Definitely annotated variables. Maybe regular `cdef` variables?\r\n\r\nWhat should the visibility of the attributes be? There's a few options:\r\n1. Default to invisible, like for a standard `cdef class`. This is obviously consistent. The issue with this is that there's a few functions in the `dataclasses` module like [`asdict`](https://docs.python.org/3/library/dataclasses.html#dataclasses.asdict) which assume that every attribute declared in `__dataclass_fields__` is readable. If they aren't then the classes won't be compatible with those interfaces.\r\n\r\n     If so, should non-public attributes be omitted from `__dataclass_fields__`? This seems inconsistent since they do appear in the destructor, the repr, and affect the comparisons.\r\n\r\n2. Default to visible. This is inconsistent with the standard `cdef class` behaviour, but would make them as compatible as possible with standard `dataclasses`. It would also make sense for most use-cases I think. One problem is that the syntax doesn't really exist of override that (only `public` and `readonly` are defined).\r\n\r\n3. Annotated variables default to visible, `cdef` variables to invisible? It kind of makes sense and gives a way to control visibility, but it'd be a little inconsistent with everything. (I'm leaning towards this as the answer)\r\n\r\nThe likely implementation deviates from the normal `cdef class` behaviour where\r\n```\r\ncdef class C:\r\n   a: `int` = 0\r\n```\r\nmakes a class-variable instead of an instance variable. I think this is unavoidable and makes sense in this case, but comments on this welcome too?\r\n\r\nIt dumps a number of names in the `cython` scope (`dataclass`, `field`, `InitVar`, `ClassVar`). Would some sort of subscoping be better? Especially given that it isn't 100% obvious that any of these but `dataclass` related to dataclasses?",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r389394947"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/389394947"
                }
            },
            "author_association": "COLLABORATOR",
            "body": "This syntax (needing to put the assignment on a separate line) is a bit messy, however it's enforced at a pretty early stage (the PostParse transform) so it doesn't look easy to slacken it for dataclasses.",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2020-03-08T18:46:22Z",
            "diff_hunk": "@@ -1032,5 +1032,38 @@ generated containing declarations for its object struct and type object. By\n including the ``.h`` file in external C code that you write, that code can\n access the attributes of the extension type.\n \n+Dataclass extension types\n+=========================\n+\n+Cython supports extension types that behave like the dataclasses defined in\n+the Python 3.7+ standard library. The main benefit of using a dataclasses is\n+that it can auto-generate simple `__init__`, `__repr__` and comparison\n+functions. The Cython implementation behaves as much like the Python\n+standard library implementation as possible and therefore the documentation\n+here only briefly outlines the differences - if you plan on using them\n+then please read the documentation for the standard library module.\n \n+Dataclasses can be declared using the `@cython.dataclass` decorator. If\n+you need to define special properties on a field then use `cython.field`::\n \n+    cimport cython\n+    \n+    @cython.dataclass\n+    cdef class MyDataclass:\n+        # fields can be declared using annotations\n+        a: int = 0\n+        b: double = cython.field(default_factory = lambda: 10, repr=False)\n+        \n+        # fields can also be declared using `cdef`:\n+        cdef str c\n+        c = \"hello\"  # assignment of default value on a separate line",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r389394947",
            "id": 389394947,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM5NDk0Nw==",
            "original_commit_id": "153f18af041f9e21a094ff80a72b9fff363fd4aa",
            "original_line": 1059,
            "original_position": 28,
            "original_start_line": null,
            "path": "docs/src/userguide/extension_types.rst",
            "position": null,
            "pull_request_review_id": 370849988,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/389394947",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r392082755"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/392082755"
                }
            },
            "author_association": "COLLABORATOR",
            "body": "Just highlighting this because: I don't think this is awful but I'm not sure all the details are quite right. It's probably worth getting right because if done well you could implement chunks of PEP-484 largely using the same model (although much of the PEP-484 detail is too generic to be useful to Cython)",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2020-03-13T08:14:48Z",
            "diff_hunk": "@@ -4118,6 +4124,72 @@ def same_as_resolved_type(self, other_type):\n     def error_condition(self, result_code):\n         return \"dummy\"\n \n+class InitOrClassVar: #(PyrexType):",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r392082755",
            "id": 392082755,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA4Mjc1NQ==",
            "original_commit_id": "491bd771ea752d64b385470f84b36c31d7259b8b",
            "original_line": 4127,
            "original_position": 37,
            "original_start_line": null,
            "path": "Cython/Compiler/PyrexTypes.py",
            "position": null,
            "pull_request_review_id": 374112543,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/392082755",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r485897978"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/485897978"
                }
            },
            "author_association": "MEMBER",
            "body": "But public fields already have property nodes, right? Isn't that enough to handle them?",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2020-09-09T20:19:27Z",
            "diff_hunk": "@@ -0,0 +1,611 @@\n+# functions to transform a c class into a dataclass\n+\n+from collections import OrderedDict\n+\n+from .Errors import error, warning\n+from . import ExprNodes, Nodes, PyrexTypes\n+from .Code import UtilityCode\n+from .Visitor import VisitorTransform\n+from . import UtilNodes, Builtin, Naming\n+from .StringEncoding import BytesLiteral, EncodedString\n+from .TreeFragment import TreeFragment\n+from .ParseTreeTransforms import (NormalizeTree, SkipDeclarations, AnalyseDeclarationsTransform,\n+                                  MarkClosureVisitor)\n+\n+def _make_module_callnode(pos, name):\n+    loader_utilitycode = UtilityCode.load_cached(\"%sModuleLoader\" % name, \"Dataclasses.c\")\n+    return ExprNodes.PythonCapiCallNode(pos, \"__Pyx_Load%sModule\" % name,\n+                                PyrexTypes.CFuncType(PyrexTypes.py_object_type, []),\n+                                utility_code = loader_utilitycode,\n+                                args=[])\n+\n+def make_dataclass_module_callnode(pos):\n+    return _make_module_callnode(pos, \"Dataclass\")\n+def make_typing_module_callnode(pos):\n+    return _make_module_callnode(pos, \"Typing\")\n+\n+_INTERNAL_DEFAULTSHOLDER_NAME = EncodedString('__pyx_dataclass_defaults')\n+\n+def make_common_utilitycode(scope):\n+    scope.global_scope().use_utility_code(\n+        UtilityCode.load_cached(\"DataclassModuleLoader\", \"Dataclasses.c\"))\n+\n+\n+class RemoveAssignments(VisitorTransform, SkipDeclarations):\n+    def __init__(self, names):\n+        super(RemoveAssignments, self).__init__()\n+        self.names = names\n+        self.removed_assignments = {}\n+\n+    def visit_CClassNode(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+    def visit_PyClassNode(self, node):\n+        return node  # go no further\n+\n+    def visit_FuncDefNode(self, node):\n+        return node  # go no further\n+\n+    def visit_SingleAssignmentNode(self, node):\n+        if node.lhs.is_name and node.lhs.name in self.names:\n+            if node.lhs.name in self.removed_assignments:\n+                warning(node.pos, (\"Multiple assignments for '%s' in dataclass; \"\n+                                   \"using most recent\") % node.lhs.name, 1)\n+            self.removed_assignments[node.lhs.name] = node.rhs\n+            return []\n+        return node\n+\n+    # I believe cascaded assignment is always a syntax error with decorators\n+    # so can be ignored\n+\n+    def visit_Node(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+class _MISSING_TYPE:\n+    pass\n+MISSING = _MISSING_TYPE()\n+\n+def process_class_get_fields(node):\n+    _TrueNode = ExprNodes.BoolNode(node.pos, value=True)\n+    _FalseNode = ExprNodes.BoolNode(node.pos, value=False)\n+    _NoneNode = ExprNodes.NoneNode(node.pos)\n+\n+    class Field:\n+        # store fields as nodes so they can be used in code construction\n+        # more readily; define class inside function so default arguments\n+        # have a useful pos",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r485897978",
            "id": 485897978,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg5Nzk3OA==",
            "original_commit_id": "043a102296c9949e1924c783c0b0d061810d85e9",
            "original_line": 78,
            "original_position": 78,
            "original_start_line": 76,
            "path": "Cython/Compiler/Dataclass.py",
            "position": null,
            "pull_request_review_id": 485373094,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/485897978",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r485900059"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/485900059"
                }
            },
            "author_association": "MEMBER",
            "body": "Lovely. ;-)",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2020-09-09T20:23:29Z",
            "diff_hunk": "@@ -1,6 +1,6 @@\n /////////////// FetchCommonType.proto ///////////////\n \n-static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);\n+static CYTHON_UNUSED PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r485900059",
            "id": 485900059,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkwMDA1OQ==",
            "original_commit_id": "043a102296c9949e1924c783c0b0d061810d85e9",
            "original_line": 3,
            "original_position": 4,
            "original_start_line": 1,
            "path": "Cython/Utility/CommonStructures.c",
            "position": null,
            "pull_request_review_id": 485373094,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/485900059",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r485903258"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/485903258"
                }
            },
            "author_association": "MEMBER",
            "body": "Can you imagine that some people on this planet would sense the word \"hack\" floating by when facing this code?",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2020-09-09T20:29:44Z",
            "diff_hunk": "@@ -177,3 +178,18 @@\n \n def py_version_hex(major, minor=0, micro=0, release_level=0, release_serial=0):\n     return (major << 24) | (minor << 16) | (micro << 8) | (release_level << 4) | (release_serial)\n+\n+class _py_code:\n+    # This is in Naming.py to be able to abuse the UtilityCode \"subsitute naming\" mechanism.",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r485903258",
            "id": 485903258,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkwMzI1OA==",
            "original_commit_id": "043a102296c9949e1924c783c0b0d061810d85e9",
            "original_line": 183,
            "original_position": 14,
            "original_start_line": null,
            "path": "Cython/Compiler/Naming.py",
            "position": null,
            "pull_request_review_id": 485373094,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/485903258",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r485906541"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/485906541"
                }
            },
            "author_association": "MEMBER",
            "body": "Can't this be done at a later stage, where we already _have_ the type available? And, is this really all that different from `typeof()`?",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2020-09-09T20:35:42Z",
            "diff_hunk": "@@ -0,0 +1,611 @@\n+# functions to transform a c class into a dataclass\n+\n+from collections import OrderedDict\n+\n+from .Errors import error, warning\n+from . import ExprNodes, Nodes, PyrexTypes\n+from .Code import UtilityCode\n+from .Visitor import VisitorTransform\n+from . import UtilNodes, Builtin, Naming\n+from .StringEncoding import BytesLiteral, EncodedString\n+from .TreeFragment import TreeFragment\n+from .ParseTreeTransforms import (NormalizeTree, SkipDeclarations, AnalyseDeclarationsTransform,\n+                                  MarkClosureVisitor)\n+\n+def _make_module_callnode(pos, name):\n+    loader_utilitycode = UtilityCode.load_cached(\"%sModuleLoader\" % name, \"Dataclasses.c\")\n+    return ExprNodes.PythonCapiCallNode(pos, \"__Pyx_Load%sModule\" % name,\n+                                PyrexTypes.CFuncType(PyrexTypes.py_object_type, []),\n+                                utility_code = loader_utilitycode,\n+                                args=[])\n+\n+def make_dataclass_module_callnode(pos):\n+    return _make_module_callnode(pos, \"Dataclass\")\n+def make_typing_module_callnode(pos):\n+    return _make_module_callnode(pos, \"Typing\")\n+\n+_INTERNAL_DEFAULTSHOLDER_NAME = EncodedString('__pyx_dataclass_defaults')\n+\n+def make_common_utilitycode(scope):\n+    scope.global_scope().use_utility_code(\n+        UtilityCode.load_cached(\"DataclassModuleLoader\", \"Dataclasses.c\"))\n+\n+\n+class RemoveAssignments(VisitorTransform, SkipDeclarations):\n+    def __init__(self, names):\n+        super(RemoveAssignments, self).__init__()\n+        self.names = names\n+        self.removed_assignments = {}\n+\n+    def visit_CClassNode(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+    def visit_PyClassNode(self, node):\n+        return node  # go no further\n+\n+    def visit_FuncDefNode(self, node):\n+        return node  # go no further\n+\n+    def visit_SingleAssignmentNode(self, node):\n+        if node.lhs.is_name and node.lhs.name in self.names:\n+            if node.lhs.name in self.removed_assignments:\n+                warning(node.pos, (\"Multiple assignments for '%s' in dataclass; \"\n+                                   \"using most recent\") % node.lhs.name, 1)\n+            self.removed_assignments[node.lhs.name] = node.rhs\n+            return []\n+        return node\n+\n+    # I believe cascaded assignment is always a syntax error with decorators\n+    # so can be ignored\n+\n+    def visit_Node(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+class _MISSING_TYPE:\n+    pass\n+MISSING = _MISSING_TYPE()\n+\n+def process_class_get_fields(node):\n+    _TrueNode = ExprNodes.BoolNode(node.pos, value=True)\n+    _FalseNode = ExprNodes.BoolNode(node.pos, value=False)\n+    _NoneNode = ExprNodes.NoneNode(node.pos)\n+\n+    class Field:\n+        # store fields as nodes so they can be used in code construction\n+        # more readily; define class inside function so default arguments\n+        # have a useful pos\n+        default = MISSING\n+        default_factory = MISSING\n+        def __init__(self, default=MISSING, default_factory=MISSING,\n+                        repr=_TrueNode, hash=_NoneNode, init=_TrueNode,\n+                        compare=_TrueNode, metadata=_NoneNode,\n+                        is_initvar=False):\n+            if default is not MISSING:\n+                self.default = default\n+            if default_factory is not MISSING:\n+                self.default_factory = default_factory\n+            self.repr = repr\n+            self.hash = hash\n+            self.init = init\n+            self.compare = compare\n+            self.metadata = metadata\n+            self.is_initvar = is_initvar\n+\n+            for field_name in (\"repr\", \"hash\", \"init\", \"compare\", \"metadata\"):\n+                field_value = getattr(self, field_name)\n+                if not field_value.is_literal:\n+                    error(field_value.pos, \"cython.field parameter '%s' must be a literal value\"\n+                            % field_name)\n+\n+    var_entries = node.scope.var_entries\n+    # order of definition is used in the dataclass\n+    var_entries = sorted(var_entries, key=lambda entry: entry.pos)\n+    var_names = [ entry.name for entry in var_entries ]\n+\n+    # remove assignments for stat_list\n+    transform = RemoveAssignments(var_names)\n+    transform(node)\n+\n+    if node.base_type and node.base_type.dataclass_fields:\n+        fields = node.base_type.dataclass_fields.copy()\n+    else:\n+        fields = OrderedDict()\n+    for entry in var_entries:\n+        name = entry.name\n+        is_initvar = entry.type.is_initvar\n+        if name in transform.removed_assignments:\n+            assignment = transform.removed_assignments[name]\n+            if (isinstance(assignment, ExprNodes.CallNode)\n+                    and assignment.function.as_cython_attribute() == \"field\"):\n+                # I believe most of this is well-enforced when it's treated as a directive\n+                # but it doesn't hurt to make sure\n+                if (not isinstance(assignment, ExprNodes.GeneralCallNode)\n+                        or not isinstance(assignment.positional_args, ExprNodes.TupleNode)\n+                        or assignment.positional_args.args\n+                        or not isinstance(assignment.keyword_args, ExprNodes.DictNode)):\n+                    error(assignment.pos, \"Call to 'cython.field' must only consist of compile-time \"\n+                          \"keyword arguments\")\n+                    continue\n+                keyword_args = { k.value: v for k, v in assignment.keyword_args.key_value_pairs }\n+                if 'default' in keyword_args and 'default_factory' in keyword_args:\n+                    error(assignment.pos, \"You cannot specify both 'default' and 'default_factory'\"\n+                          \" for a dataclass member\")\n+                    continue\n+                field = Field(**keyword_args)\n+            else:\n+                if isinstance(assignment, ExprNodes.CallNode):\n+                    func = assignment.function\n+                    if ((func.is_name and func.name == \"field\")\n+                            or (isinstance(func, ExprNodes.AttributeNode)\n+                                and func.attribute == \"field\")):\n+                        warning(assignment.pos, \"Do you mean cython.field instead?\", 1)\n+                if assignment.type in [Builtin.list_type,\n+                                    Builtin.dict_type,\n+                                    Builtin.set_type]:\n+                    # The standard library module generates a TypeError at runtime\n+                    # in this situation\n+                    error(assignment.pos, \"Mutable default passed argument for '{0}' - \"\n+                          \"use 'default_factory' instead and see \"\n+                          \"'https://docs.python.org/library/dataclasses.html#mutable-default-values'\"\n+                          \"for more details\".format(name))\n+\n+                field = Field(default=assignment)\n+        else:\n+            field = Field()\n+        field.is_initvar = is_initvar\n+        fields[name] = field\n+    node.entry.type.dataclass_fields = fields\n+    return fields\n+\n+def handle_cclass_dataclass(node, dataclass_args, analyse_decs_transform):\n+    from .ExprNodes import (AttributeNode, TupleNode, NameNode,\n+                            GeneralCallNode, DictNode,\n+                            IdentifierStringNode, BoolNode, DictItemNode)\n+\n+    # https://docs.python.org/3/library/dataclasses.html\n+    kwargs = dict(init=True, repr=True, eq=True,\n+                  order=False, unsafe_hash=False, frozen=False)\n+    if dataclass_args is not None:\n+        if dataclass_args[0]:\n+            error(node.pos, \"cython.dataclass takes no positional arguments\")\n+        for k, v in dataclass_args[1].items():\n+            if k not in kwargs:\n+                error(node.pos,\n+                      \"Unrecognised keyword argument '{0}' to cython.dataclass\".format(k))\n+            if not isinstance(v, ExprNodes.BoolNode):\n+                error(node.pos,\n+                      \"Arguments to cython.dataclass must be True or False\")\n+            kwargs[k] = v\n+\n+    dataclass_scope = make_common_utilitycode(node.scope)\n+    fields = process_class_get_fields(node)\n+\n+    dataclass_module = make_dataclass_module_callnode(node.pos)\n+\n+    # create __dataclass_params__ attribute\n+    dataclass_params_func = AttributeNode(node.pos, obj=dataclass_module,\n+                                            attribute=EncodedString(\"_DataclassParams\"))\n+    dataclass_params_keywords = DictNode.from_pairs(node.pos,\n+            [ (IdentifierStringNode(node.pos, value=EncodedString(k)),\n+                BoolNode(node.pos, value=v))\n+                for k, v in kwargs.items() ])\n+    dataclass_params = GeneralCallNode(node.pos,\n+                                    function = dataclass_params_func,\n+                                    positional_args = TupleNode(node.pos, args=[]),\n+                                    keyword_args = dataclass_params_keywords)\n+    dataclass_params_assignment = \\\n+        Nodes.SingleAssignmentNode(node.pos,\n+                        lhs = NameNode(node.pos,\n+                                        name=EncodedString(\"__dataclass_params__\")),\n+                        rhs = dataclass_params)\n+\n+    dataclass_fields_stats = _setup_dataclass_fields(node, fields, dataclass_module)\n+\n+    stats = Nodes.StatListNode(node.pos,\n+                               stats=[dataclass_params_assignment]\n+                                    + dataclass_fields_stats)\n+\n+    init_stats = generate_init_code(kwargs['init'], node, fields)\n+    repr_stats = generate_repr_code(kwargs['repr'], node, fields)\n+    eq_stats = generate_eq_code(kwargs['eq'], node, fields)\n+    order_stats = generate_order_code(kwargs['order'], node, fields)\n+    hash_stats = generate_hash_code(kwargs['unsafe_hash'], kwargs['eq'], kwargs['frozen'],\n+                       node, fields)\n+\n+    stats.stats = stats.stats + init_stats + repr_stats + eq_stats + order_stats + hash_stats\n+\n+    # turn off annotation typing, so all arguments to __init__ are accepted as\n+    # generic objects and thus can accept _HAS_DEFAULT_FACTORY\n+    # type conversion done comes later\n+    # (for some reason this has to be on the class scope, so save and restore)\n+    annotation_typing = node.scope.directives['annotation_typing']\n+    node.scope.directives['annotation_typing'] = False\n+    stats.analyse_declarations(node.scope)\n+    # probably already in this scope, but it doesn't hurt to make sure\n+    analyse_decs_transform.enter_scope(node, node.scope)\n+    analyse_decs_transform.visit(stats)\n+    analyse_decs_transform.exit_scope()\n+    node.scope.directives['annotation_typing'] = annotation_typing\n+\n+    RemoveDontAnalyseDeclarations()(stats)\n+\n+    node.body.stats.extend(stats.stats)\n+\n+def generate_init_code(init, node, fields):\n+    if not init or node.scope.lookup_here(\"__init__\"):\n+        return []\n+    # selfname behaviour copied from the cpython module\n+    selfname = \"__dataclass_self__\" if \"self\" in fields else \"self\"\n+    args = [selfname]\n+\n+    placeholders = {}\n+    placeholder_count = [0]\n+\n+    # create a temp to get _HAS_DEFAULT_FACTORY\n+    dataclass_module = make_dataclass_module_callnode(node.pos)\n+    has_default_factory = ExprNodes.AttributeNode(node.pos,\n+                                        obj = dataclass_module,\n+                                        attribute = EncodedString(\"_HAS_DEFAULT_FACTORY\"))\n+\n+    def get_placeholder_name():\n+        while True:\n+            name = \"PLACEHOLDER_%s\" % placeholder_count[0]\n+            if (name not in placeholders\n+                    and name not in fields):\n+                # make sure name isn't already used and doesn't\n+                # conflict with a variable name (which is unlikely but possible)\n+                break\n+            placeholder_count[0] += 1\n+        return name\n+\n+    default_factory_placeholder = get_placeholder_name()\n+    placeholders[default_factory_placeholder] = has_default_factory\n+\n+    seen_default = False\n+    for name, field in fields.items():\n+        if not field.init.value:\n+            continue\n+        entry = node.scope.lookup(name)\n+        annotation = entry.pep563_annotation\n+        if annotation:\n+            annotation = u\": %s\" % annotation\n+        else:\n+            annotation = u\"\"\n+        assignment = u''\n+        if field.default is not MISSING or field.default_factory is not MISSING:\n+            seen_default = True\n+            if field.default_factory is not MISSING:\n+                ph_name = default_factory_placeholder\n+            else:\n+                ph_name = get_placeholder_name()\n+                placeholders[ph_name] = field.default  # should be node\n+            assignment = u\" = %s\" % ph_name\n+        elif seen_default:\n+            error(entry.pos, (\"non-default argument %s follows default argument \"\n+                             \"in dataclass __init__\") % name)\n+            return []\n+\n+        args.append(u\"%s%s%s\" % (name, annotation, assignment))\n+    args = u\", \".join(args)\n+    func_call = u\"def __init__(%s):\" % args\n+\n+    code_lines = [func_call,\n+                  \"    pass\",  # just in-case it's an empty body\n+                  ]\n+    for name, field in fields.items():\n+        if field.is_initvar:\n+            continue\n+        if field.default_factory is MISSING:\n+            if field.init.value:\n+                code_lines.append(u\"    %s.%s = %s\" % (selfname, name, name))\n+        else:\n+            ph_name = get_placeholder_name()\n+            placeholders[ph_name] = field.default_factory\n+            if field.init.value:\n+                code_lines.append(u\"    if %s is %s:\"\n+                                % (name, default_factory_placeholder))\n+                code_lines.append(u\"        %s.%s = %s()\"\n+                                % (selfname, name, ph_name))\n+                code_lines.append(u\"    else:\")\n+                code_lines.append(u\"        %s.%s = %s\" % (selfname, name, name))\n+            else:\n+                # still need to use the default factory to initialize\n+                code_lines.append(u\"    %s.%s = %s()\"\n+                                  % (selfname, name, ph_name))\n+    if node.scope.lookup(\"__post_init__\"):\n+        post_init_vars = \", \".join(name for name, field in fields.items()\n+                                    if field.is_initvar)\n+        code_lines.append(\"    %s.__post_init__(%s)\" % (selfname, post_init_vars))\n+    code_lines = u\"\\n\".join(code_lines)\n+\n+    code_tree = TreeFragment(code_lines, level='c_class',\n+                             pipeline=[NormalizeTree(node.scope),\n+                                       ]\n+                              ).substitute(placeholders)\n+\n+    return code_tree.stats\n+\n+\n+def generate_repr_code(repr, node, fields):\n+    if not repr or node.scope.lookup(\"__repr__\"):\n+        return []\n+    code_lines = [\"def __repr__(self):\"]\n+    strs = [ u\"%s={self.%s}\" % (name, name)\n+            for name, field in fields.items() if field.repr.value and not field.is_initvar ]\n+    format_string = u\", \".join(strs)\n+    code_lines.append(u\"    return f'{type(self).__name__}(%s)'\" % format_string)\n+    code_lines = u\"\\n\".join(code_lines)\n+\n+    code_tree = TreeFragment(code_lines,\n+                              level='c_class', pipeline=[NormalizeTree(None)]\n+                              ).substitute({})\n+    return code_tree.stats\n+\n+def generate_cmp_code(op, funcname, node, fields):\n+    if node.scope.lookup_here(funcname):\n+        return []  # already exists\n+\n+    names = [ name for name, field in fields.items()\n+                if (field.compare.value and not field.is_initvar) ]\n+\n+    if not names:\n+        return []  # no comparable types\n+\n+    code_lines = [\"def %s(self, other):\" % funcname,\n+                  \"    cdef %s other_cast\" % node.class_name,\n+                  \"    try:\",\n+                  \"        other_cast = other\",\n+                  \"    except TypeError:\",\n+                  \"        return NotImplemented\"]\n+\n+    for name in names:\n+        shared = \"if not (self.%s == other_cast.%s):\" % (name, name)\n+        if op == \"==\":\n+            code_lines.append(\"    %s return False\" % shared)\n+        else:\n+            code_lines.append(\"    %s return self.%s %s other_cast.%s\" %\n+                              (shared, name, op, name))\n+\n+    if \"=\" in op:\n+        code_lines.append(\"    return True\")\n+    else:\n+        code_lines.append(\"    return False\")\n+\n+    code_lines = u\"\\n\".join(code_lines)\n+\n+    code_tree = TreeFragment(code_lines,\n+                              level='c_class', pipeline=[NormalizeTree(None)]\n+                              ).substitute({})\n+    return code_tree.stats\n+\n+def generate_eq_code(eq, node, fields):\n+    if not eq:\n+        return []\n+    return generate_cmp_code(\"==\", \"__eq__\", node, fields)\n+\n+def generate_order_code(order, node, fields):\n+    if not order:\n+        return []\n+    stats = []\n+    for op, name in [(\"<\", \"__lt__\"),\n+                     (\"<=\", \"__le__\"),\n+                     (\">\", \"__gt__\"),\n+                     (\">=\", \"__ge__\")]:\n+        stats.extend(generate_cmp_code(op, name, node, fields))\n+    return stats\n+\n+def generate_hash_code(unsafe_hash, eq, frozen, node, fields):\n+    hash_entry = node.scope.lookup_here(\"__hash__\")\n+    if hash_entry:\n+        # TODO ideally assignment of __hash__ to None shouldn't trigger this\n+        # but difficult to get the right information here\n+        if unsafe_hash:\n+            error(node.pos, \"Request for dataclass unsafe_hash when a '__hash__' function\"\n+                  \" already exists\")\n+        return []\n+    if not unsafe_hash:\n+        if eq and not frozen:\n+            return [Nodes.SingleAssignmentNode(node.pos,\n+                                        lhs = ExprNodes.NameNode(node.pos, name=EncodedString(\"__hash__\")),\n+                                        rhs = ExprNodes.NoneNode(node.pos))]\n+        if not eq:\n+            return []\n+\n+    names = [ name for name, field in fields.items()\n+                if (not field.is_initvar and\n+                    (field.compare.value if field.hash.value is None else field.hash.value)) ]\n+    if not names:\n+        return []  # nothing to hash\n+\n+    # make a tuple of the hashes\n+    tpl = u\", \".join(u\"hash(self.%s)\" % name for name in names )\n+\n+    # if we're here we want to generate a hash\n+    code_lines = u\"\"\"def __hash__(self):\n+    return hash((%s))\n+\"\"\" % tpl\n+    code_tree = TreeFragment(code_lines,\n+                              level='c_class', pipeline=[NormalizeTree(None)]\n+                              ).substitute({})\n+    return code_tree.stats\n+\n+\n+class GetTypeNode(ExprNodes.ExprNode):\n+    # Tries to return a pytype_type if possible. However contains\n+    # some fallback provision if it turns out not to resolve to a Python object\n+    # Initialize with \"entry\"\n+\n+    subexprs = []\n+\n+    def __init__(self, entry):\n+        super(GetTypeNode, self).__init__(entry.pos, entry=entry)\n+\n+    def analyse_types(self, env):\n+        type = self.entry.type\n+\n+        if type.is_extension_type or type.is_builtin_type:\n+            return ExprNodes.RawCNameExprNode(self.pos, Builtin.type_type,\n+                                                type.typeptr_cname).analyse_types(env)\n+        else:\n+            names = None\n+            py_name = type.py_type_name()\n+            # int types can return \"(int, long)\"\n+            if py_name:\n+                names = py_name.split(\",\")\n+                names = [ n.strip(\"() \") for n in names ]\n+            if names:\n+                for name in names:\n+                    name = EncodedString(name)\n+                    nn = ExprNodes.NameNode(self.pos, name=name)\n+                    # try to set the entry now to prevent the user accidentally shadowing\n+                    # the name\n+                    nn.entry = env.builtin_scope().lookup(name)\n+                    if not nn.entry:\n+                        try:\n+                            nn.entry = env.declare_builtin(name, self.pos)\n+                        except:\n+                            pass  # not convinced a failure means much\n+                    if nn.entry:\n+                        return nn.analyse_types(env)\n+\n+        # otherwise we're left to return a string\n+        s = self.entry.pep563_annotation\n+        if not s:\n+            s = self.entry.type.declaration_code(\"\", for_display=1)\n+        return ExprNodes.StringNode(self.pos, value=s).analyse_types(env)\n+\n+class DontAnalyseDeclarationsNode(ExprNodes.ExprNode):\n+    # arg    ExprNode\n+    #\n+    # This is designed to wrap stuff that's already been analysed\n+    # so that lambdas aren't redeclared for example\n+    # and then immediately be replaced\n+\n+    subexprs = []\n+\n+    def analyse_declarations(self, env):\n+        return\n+\n+class RemoveDontAnalyseDeclarations(VisitorTransform):\n+    def visit_DontAnalyseDeclarationsNode(self, node):\n+        return node.arg\n+\n+    def visit_Node(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+\n+class FieldsValueNode(ExprNodes.ExprNode):\n+    # largely just forwards arg. Allows it to be coerced to a Python object\n+    # if possible, and if not then generates a sensible backup string\n+    subexprs = ['arg']\n+\n+    def __init__(self, pos, arg):\n+        super(FieldsValueNode, self).__init__(pos, arg=arg)\n+\n+    def analyse_types(self, env):\n+        self.arg.analyse_types(env)\n+        self.type = self.arg.type\n+        return self\n+\n+    def coerce_to_pyobject(self, env):\n+        if self.arg.type.can_coerce_to_pyobject(env):\n+            return self.arg.coerce_to_pyobject(env)\n+        else:\n+            # A string representation of the code that gave the field seems like a reasonable\n+            # fallback. This'll mostly happen for \"default\" and \"default_factory\" where the\n+            # type may be a C-type that can't be converted to Python.\n+            return self._make_string()\n+\n+    def _make_string(self):\n+        from .AutoDocTransforms import AnnotationWriter\n+        writer = AnnotationWriter(description=\"Dataclass field\")\n+        string = writer.write(self.arg)\n+        return ExprNodes.StringNode(self.pos, value=EncodedString(string))\n+\n+    def generate_evaluation_code(self, code):\n+        return self.arg.generate_evaluation_code(code)\n+\n+\n+def _setup_dataclass_fields(node, fields, dataclass_module):\n+    from .ExprNodes import (AttributeNode, TupleNode, NameNode,\n+                            GeneralCallNode, DictNode,\n+                            IdentifierStringNode, BoolNode, DictItemNode,\n+                            CloneNode)\n+\n+    # For defaults and default_factories containing things like lambda,\n+    # they're already declared in the class scope, and it creates a big\n+    # problem if multiple copies are floating around in both the __init__\n+    # function, and in the __dataclass_fields__ structure.\n+    # Therefore, create module-level constants holding these values and\n+    # pass those around instead\n+    variables_assignment_stats = []\n+    for name, field in fields.items():\n+        for attrname in [ \"default\", \"default_factory\" ]:\n+            f_def = getattr(field, attrname)\n+            if f_def is MISSING or f_def.is_literal or f_def.is_name:\n+                # some simple cases where we don't need to set up\n+                # the variable as a module-level constant\n+                continue\n+            global_scope = node.scope.global_scope()\n+            module_field_name = global_scope.mangle(global_scope.mangle(\n+                                    Naming.dataclass_field_default_cname,\n+                                    node.class_name), name)\n+            # create an entry in the global scope for this variable to live\n+            nn = NameNode(f_def.pos, name=EncodedString(module_field_name))\n+            nn.entry = global_scope.declare_var(nn.name, type=f_def.type or PyrexTypes.unspecified_type,\n+                                                pos=f_def.pos, cname=nn.name, is_cdef=1)\n+            # replace the field so that future users just receive the namenode\n+            setattr(field, attrname, nn)\n+\n+            variables_assignment_stats.append(\n+                Nodes.SingleAssignmentNode(f_def.pos,\n+                                           lhs = nn,\n+                                           rhs = DontAnalyseDeclarationsNode(f_def.pos, arg=f_def)))\n+\n+    placeholders = {}\n+    field_func = AttributeNode(node.pos, obj = dataclass_module,\n+                                    attribute=EncodedString(\"field\"))\n+    dc_fields = DictNode(node.pos, key_value_pairs=[])\n+    dc_fields_namevalue_assignments = []\n+    for name, field in fields.items():\n+        placeholder_name = \"PLACEHOLDER_%s\" % name\n+        placeholders[placeholder_name] = GetTypeNode(node.scope.entries[name])",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r485906541",
            "id": 485906541,
            "line": 558,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkwNjU0MQ==",
            "original_commit_id": "043a102296c9949e1924c783c0b0d061810d85e9",
            "original_line": 575,
            "original_position": 575,
            "original_start_line": null,
            "path": "Cython/Compiler/Dataclass.py",
            "position": 558,
            "pull_request_review_id": 485373094,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/485906541",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r485917198"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/485917198"
                }
            },
            "author_association": "COLLABORATOR",
            "body": "This is because I'm only requiring this from utilitycode but only `__Pyx_FetchSharedCythonABIModule`. On second look it'd probably be better splitting it into 2 bits so I can get `__Pyx_FetchSharedCythonABIModule` on its own.",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2020-09-09T20:56:35Z",
            "diff_hunk": "@@ -1,6 +1,6 @@\n /////////////// FetchCommonType.proto ///////////////\n \n-static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);\n+static CYTHON_UNUSED PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r485917198",
            "id": 485917198,
            "in_reply_to_id": 485900059,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkxNzE5OA==",
            "original_commit_id": "043a102296c9949e1924c783c0b0d061810d85e9",
            "original_line": 3,
            "original_position": 4,
            "original_start_line": 1,
            "path": "Cython/Utility/CommonStructures.c",
            "position": null,
            "pull_request_review_id": 485397552,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/485917198",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r485931754"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/485931754"
                }
            },
            "author_association": "COLLABORATOR",
            "body": "The difference/complication between this and `typeof` is that `typeof` always returns a string, while I'm trying to return a Python type object if at all possible (to match what goes in `__dataclass_fields__` when generated by the standard library). It isn't always possible but I was trying to match what's generated by the standard library as closely as I could.\r\n\r\nI think the idea for doing it here was to try to have (almost) a single transformation which adds all the methods and attributes that make a class a dataclass. After that it can just pass through the normal Cython pipeline as normal.",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2020-09-09T21:27:22Z",
            "diff_hunk": "@@ -0,0 +1,611 @@\n+# functions to transform a c class into a dataclass\n+\n+from collections import OrderedDict\n+\n+from .Errors import error, warning\n+from . import ExprNodes, Nodes, PyrexTypes\n+from .Code import UtilityCode\n+from .Visitor import VisitorTransform\n+from . import UtilNodes, Builtin, Naming\n+from .StringEncoding import BytesLiteral, EncodedString\n+from .TreeFragment import TreeFragment\n+from .ParseTreeTransforms import (NormalizeTree, SkipDeclarations, AnalyseDeclarationsTransform,\n+                                  MarkClosureVisitor)\n+\n+def _make_module_callnode(pos, name):\n+    loader_utilitycode = UtilityCode.load_cached(\"%sModuleLoader\" % name, \"Dataclasses.c\")\n+    return ExprNodes.PythonCapiCallNode(pos, \"__Pyx_Load%sModule\" % name,\n+                                PyrexTypes.CFuncType(PyrexTypes.py_object_type, []),\n+                                utility_code = loader_utilitycode,\n+                                args=[])\n+\n+def make_dataclass_module_callnode(pos):\n+    return _make_module_callnode(pos, \"Dataclass\")\n+def make_typing_module_callnode(pos):\n+    return _make_module_callnode(pos, \"Typing\")\n+\n+_INTERNAL_DEFAULTSHOLDER_NAME = EncodedString('__pyx_dataclass_defaults')\n+\n+def make_common_utilitycode(scope):\n+    scope.global_scope().use_utility_code(\n+        UtilityCode.load_cached(\"DataclassModuleLoader\", \"Dataclasses.c\"))\n+\n+\n+class RemoveAssignments(VisitorTransform, SkipDeclarations):\n+    def __init__(self, names):\n+        super(RemoveAssignments, self).__init__()\n+        self.names = names\n+        self.removed_assignments = {}\n+\n+    def visit_CClassNode(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+    def visit_PyClassNode(self, node):\n+        return node  # go no further\n+\n+    def visit_FuncDefNode(self, node):\n+        return node  # go no further\n+\n+    def visit_SingleAssignmentNode(self, node):\n+        if node.lhs.is_name and node.lhs.name in self.names:\n+            if node.lhs.name in self.removed_assignments:\n+                warning(node.pos, (\"Multiple assignments for '%s' in dataclass; \"\n+                                   \"using most recent\") % node.lhs.name, 1)\n+            self.removed_assignments[node.lhs.name] = node.rhs\n+            return []\n+        return node\n+\n+    # I believe cascaded assignment is always a syntax error with decorators\n+    # so can be ignored\n+\n+    def visit_Node(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+class _MISSING_TYPE:\n+    pass\n+MISSING = _MISSING_TYPE()\n+\n+def process_class_get_fields(node):\n+    _TrueNode = ExprNodes.BoolNode(node.pos, value=True)\n+    _FalseNode = ExprNodes.BoolNode(node.pos, value=False)\n+    _NoneNode = ExprNodes.NoneNode(node.pos)\n+\n+    class Field:\n+        # store fields as nodes so they can be used in code construction\n+        # more readily; define class inside function so default arguments\n+        # have a useful pos\n+        default = MISSING\n+        default_factory = MISSING\n+        def __init__(self, default=MISSING, default_factory=MISSING,\n+                        repr=_TrueNode, hash=_NoneNode, init=_TrueNode,\n+                        compare=_TrueNode, metadata=_NoneNode,\n+                        is_initvar=False):\n+            if default is not MISSING:\n+                self.default = default\n+            if default_factory is not MISSING:\n+                self.default_factory = default_factory\n+            self.repr = repr\n+            self.hash = hash\n+            self.init = init\n+            self.compare = compare\n+            self.metadata = metadata\n+            self.is_initvar = is_initvar\n+\n+            for field_name in (\"repr\", \"hash\", \"init\", \"compare\", \"metadata\"):\n+                field_value = getattr(self, field_name)\n+                if not field_value.is_literal:\n+                    error(field_value.pos, \"cython.field parameter '%s' must be a literal value\"\n+                            % field_name)\n+\n+    var_entries = node.scope.var_entries\n+    # order of definition is used in the dataclass\n+    var_entries = sorted(var_entries, key=lambda entry: entry.pos)\n+    var_names = [ entry.name for entry in var_entries ]\n+\n+    # remove assignments for stat_list\n+    transform = RemoveAssignments(var_names)\n+    transform(node)\n+\n+    if node.base_type and node.base_type.dataclass_fields:\n+        fields = node.base_type.dataclass_fields.copy()\n+    else:\n+        fields = OrderedDict()\n+    for entry in var_entries:\n+        name = entry.name\n+        is_initvar = entry.type.is_initvar\n+        if name in transform.removed_assignments:\n+            assignment = transform.removed_assignments[name]\n+            if (isinstance(assignment, ExprNodes.CallNode)\n+                    and assignment.function.as_cython_attribute() == \"field\"):\n+                # I believe most of this is well-enforced when it's treated as a directive\n+                # but it doesn't hurt to make sure\n+                if (not isinstance(assignment, ExprNodes.GeneralCallNode)\n+                        or not isinstance(assignment.positional_args, ExprNodes.TupleNode)\n+                        or assignment.positional_args.args\n+                        or not isinstance(assignment.keyword_args, ExprNodes.DictNode)):\n+                    error(assignment.pos, \"Call to 'cython.field' must only consist of compile-time \"\n+                          \"keyword arguments\")\n+                    continue\n+                keyword_args = { k.value: v for k, v in assignment.keyword_args.key_value_pairs }\n+                if 'default' in keyword_args and 'default_factory' in keyword_args:\n+                    error(assignment.pos, \"You cannot specify both 'default' and 'default_factory'\"\n+                          \" for a dataclass member\")\n+                    continue\n+                field = Field(**keyword_args)\n+            else:\n+                if isinstance(assignment, ExprNodes.CallNode):\n+                    func = assignment.function\n+                    if ((func.is_name and func.name == \"field\")\n+                            or (isinstance(func, ExprNodes.AttributeNode)\n+                                and func.attribute == \"field\")):\n+                        warning(assignment.pos, \"Do you mean cython.field instead?\", 1)\n+                if assignment.type in [Builtin.list_type,\n+                                    Builtin.dict_type,\n+                                    Builtin.set_type]:\n+                    # The standard library module generates a TypeError at runtime\n+                    # in this situation\n+                    error(assignment.pos, \"Mutable default passed argument for '{0}' - \"\n+                          \"use 'default_factory' instead and see \"\n+                          \"'https://docs.python.org/library/dataclasses.html#mutable-default-values'\"\n+                          \"for more details\".format(name))\n+\n+                field = Field(default=assignment)\n+        else:\n+            field = Field()\n+        field.is_initvar = is_initvar\n+        fields[name] = field\n+    node.entry.type.dataclass_fields = fields\n+    return fields\n+\n+def handle_cclass_dataclass(node, dataclass_args, analyse_decs_transform):\n+    from .ExprNodes import (AttributeNode, TupleNode, NameNode,\n+                            GeneralCallNode, DictNode,\n+                            IdentifierStringNode, BoolNode, DictItemNode)\n+\n+    # https://docs.python.org/3/library/dataclasses.html\n+    kwargs = dict(init=True, repr=True, eq=True,\n+                  order=False, unsafe_hash=False, frozen=False)\n+    if dataclass_args is not None:\n+        if dataclass_args[0]:\n+            error(node.pos, \"cython.dataclass takes no positional arguments\")\n+        for k, v in dataclass_args[1].items():\n+            if k not in kwargs:\n+                error(node.pos,\n+                      \"Unrecognised keyword argument '{0}' to cython.dataclass\".format(k))\n+            if not isinstance(v, ExprNodes.BoolNode):\n+                error(node.pos,\n+                      \"Arguments to cython.dataclass must be True or False\")\n+            kwargs[k] = v\n+\n+    dataclass_scope = make_common_utilitycode(node.scope)\n+    fields = process_class_get_fields(node)\n+\n+    dataclass_module = make_dataclass_module_callnode(node.pos)\n+\n+    # create __dataclass_params__ attribute\n+    dataclass_params_func = AttributeNode(node.pos, obj=dataclass_module,\n+                                            attribute=EncodedString(\"_DataclassParams\"))\n+    dataclass_params_keywords = DictNode.from_pairs(node.pos,\n+            [ (IdentifierStringNode(node.pos, value=EncodedString(k)),\n+                BoolNode(node.pos, value=v))\n+                for k, v in kwargs.items() ])\n+    dataclass_params = GeneralCallNode(node.pos,\n+                                    function = dataclass_params_func,\n+                                    positional_args = TupleNode(node.pos, args=[]),\n+                                    keyword_args = dataclass_params_keywords)\n+    dataclass_params_assignment = \\\n+        Nodes.SingleAssignmentNode(node.pos,\n+                        lhs = NameNode(node.pos,\n+                                        name=EncodedString(\"__dataclass_params__\")),\n+                        rhs = dataclass_params)\n+\n+    dataclass_fields_stats = _setup_dataclass_fields(node, fields, dataclass_module)\n+\n+    stats = Nodes.StatListNode(node.pos,\n+                               stats=[dataclass_params_assignment]\n+                                    + dataclass_fields_stats)\n+\n+    init_stats = generate_init_code(kwargs['init'], node, fields)\n+    repr_stats = generate_repr_code(kwargs['repr'], node, fields)\n+    eq_stats = generate_eq_code(kwargs['eq'], node, fields)\n+    order_stats = generate_order_code(kwargs['order'], node, fields)\n+    hash_stats = generate_hash_code(kwargs['unsafe_hash'], kwargs['eq'], kwargs['frozen'],\n+                       node, fields)\n+\n+    stats.stats = stats.stats + init_stats + repr_stats + eq_stats + order_stats + hash_stats\n+\n+    # turn off annotation typing, so all arguments to __init__ are accepted as\n+    # generic objects and thus can accept _HAS_DEFAULT_FACTORY\n+    # type conversion done comes later\n+    # (for some reason this has to be on the class scope, so save and restore)\n+    annotation_typing = node.scope.directives['annotation_typing']\n+    node.scope.directives['annotation_typing'] = False\n+    stats.analyse_declarations(node.scope)\n+    # probably already in this scope, but it doesn't hurt to make sure\n+    analyse_decs_transform.enter_scope(node, node.scope)\n+    analyse_decs_transform.visit(stats)\n+    analyse_decs_transform.exit_scope()\n+    node.scope.directives['annotation_typing'] = annotation_typing\n+\n+    RemoveDontAnalyseDeclarations()(stats)\n+\n+    node.body.stats.extend(stats.stats)\n+\n+def generate_init_code(init, node, fields):\n+    if not init or node.scope.lookup_here(\"__init__\"):\n+        return []\n+    # selfname behaviour copied from the cpython module\n+    selfname = \"__dataclass_self__\" if \"self\" in fields else \"self\"\n+    args = [selfname]\n+\n+    placeholders = {}\n+    placeholder_count = [0]\n+\n+    # create a temp to get _HAS_DEFAULT_FACTORY\n+    dataclass_module = make_dataclass_module_callnode(node.pos)\n+    has_default_factory = ExprNodes.AttributeNode(node.pos,\n+                                        obj = dataclass_module,\n+                                        attribute = EncodedString(\"_HAS_DEFAULT_FACTORY\"))\n+\n+    def get_placeholder_name():\n+        while True:\n+            name = \"PLACEHOLDER_%s\" % placeholder_count[0]\n+            if (name not in placeholders\n+                    and name not in fields):\n+                # make sure name isn't already used and doesn't\n+                # conflict with a variable name (which is unlikely but possible)\n+                break\n+            placeholder_count[0] += 1\n+        return name\n+\n+    default_factory_placeholder = get_placeholder_name()\n+    placeholders[default_factory_placeholder] = has_default_factory\n+\n+    seen_default = False\n+    for name, field in fields.items():\n+        if not field.init.value:\n+            continue\n+        entry = node.scope.lookup(name)\n+        annotation = entry.pep563_annotation\n+        if annotation:\n+            annotation = u\": %s\" % annotation\n+        else:\n+            annotation = u\"\"\n+        assignment = u''\n+        if field.default is not MISSING or field.default_factory is not MISSING:\n+            seen_default = True\n+            if field.default_factory is not MISSING:\n+                ph_name = default_factory_placeholder\n+            else:\n+                ph_name = get_placeholder_name()\n+                placeholders[ph_name] = field.default  # should be node\n+            assignment = u\" = %s\" % ph_name\n+        elif seen_default:\n+            error(entry.pos, (\"non-default argument %s follows default argument \"\n+                             \"in dataclass __init__\") % name)\n+            return []\n+\n+        args.append(u\"%s%s%s\" % (name, annotation, assignment))\n+    args = u\", \".join(args)\n+    func_call = u\"def __init__(%s):\" % args\n+\n+    code_lines = [func_call,\n+                  \"    pass\",  # just in-case it's an empty body\n+                  ]\n+    for name, field in fields.items():\n+        if field.is_initvar:\n+            continue\n+        if field.default_factory is MISSING:\n+            if field.init.value:\n+                code_lines.append(u\"    %s.%s = %s\" % (selfname, name, name))\n+        else:\n+            ph_name = get_placeholder_name()\n+            placeholders[ph_name] = field.default_factory\n+            if field.init.value:\n+                code_lines.append(u\"    if %s is %s:\"\n+                                % (name, default_factory_placeholder))\n+                code_lines.append(u\"        %s.%s = %s()\"\n+                                % (selfname, name, ph_name))\n+                code_lines.append(u\"    else:\")\n+                code_lines.append(u\"        %s.%s = %s\" % (selfname, name, name))\n+            else:\n+                # still need to use the default factory to initialize\n+                code_lines.append(u\"    %s.%s = %s()\"\n+                                  % (selfname, name, ph_name))\n+    if node.scope.lookup(\"__post_init__\"):\n+        post_init_vars = \", \".join(name for name, field in fields.items()\n+                                    if field.is_initvar)\n+        code_lines.append(\"    %s.__post_init__(%s)\" % (selfname, post_init_vars))\n+    code_lines = u\"\\n\".join(code_lines)\n+\n+    code_tree = TreeFragment(code_lines, level='c_class',\n+                             pipeline=[NormalizeTree(node.scope),\n+                                       ]\n+                              ).substitute(placeholders)\n+\n+    return code_tree.stats\n+\n+\n+def generate_repr_code(repr, node, fields):\n+    if not repr or node.scope.lookup(\"__repr__\"):\n+        return []\n+    code_lines = [\"def __repr__(self):\"]\n+    strs = [ u\"%s={self.%s}\" % (name, name)\n+            for name, field in fields.items() if field.repr.value and not field.is_initvar ]\n+    format_string = u\", \".join(strs)\n+    code_lines.append(u\"    return f'{type(self).__name__}(%s)'\" % format_string)\n+    code_lines = u\"\\n\".join(code_lines)\n+\n+    code_tree = TreeFragment(code_lines,\n+                              level='c_class', pipeline=[NormalizeTree(None)]\n+                              ).substitute({})\n+    return code_tree.stats\n+\n+def generate_cmp_code(op, funcname, node, fields):\n+    if node.scope.lookup_here(funcname):\n+        return []  # already exists\n+\n+    names = [ name for name, field in fields.items()\n+                if (field.compare.value and not field.is_initvar) ]\n+\n+    if not names:\n+        return []  # no comparable types\n+\n+    code_lines = [\"def %s(self, other):\" % funcname,\n+                  \"    cdef %s other_cast\" % node.class_name,\n+                  \"    try:\",\n+                  \"        other_cast = other\",\n+                  \"    except TypeError:\",\n+                  \"        return NotImplemented\"]\n+\n+    for name in names:\n+        shared = \"if not (self.%s == other_cast.%s):\" % (name, name)\n+        if op == \"==\":\n+            code_lines.append(\"    %s return False\" % shared)\n+        else:\n+            code_lines.append(\"    %s return self.%s %s other_cast.%s\" %\n+                              (shared, name, op, name))\n+\n+    if \"=\" in op:\n+        code_lines.append(\"    return True\")\n+    else:\n+        code_lines.append(\"    return False\")\n+\n+    code_lines = u\"\\n\".join(code_lines)\n+\n+    code_tree = TreeFragment(code_lines,\n+                              level='c_class', pipeline=[NormalizeTree(None)]\n+                              ).substitute({})\n+    return code_tree.stats\n+\n+def generate_eq_code(eq, node, fields):\n+    if not eq:\n+        return []\n+    return generate_cmp_code(\"==\", \"__eq__\", node, fields)\n+\n+def generate_order_code(order, node, fields):\n+    if not order:\n+        return []\n+    stats = []\n+    for op, name in [(\"<\", \"__lt__\"),\n+                     (\"<=\", \"__le__\"),\n+                     (\">\", \"__gt__\"),\n+                     (\">=\", \"__ge__\")]:\n+        stats.extend(generate_cmp_code(op, name, node, fields))\n+    return stats\n+\n+def generate_hash_code(unsafe_hash, eq, frozen, node, fields):\n+    hash_entry = node.scope.lookup_here(\"__hash__\")\n+    if hash_entry:\n+        # TODO ideally assignment of __hash__ to None shouldn't trigger this\n+        # but difficult to get the right information here\n+        if unsafe_hash:\n+            error(node.pos, \"Request for dataclass unsafe_hash when a '__hash__' function\"\n+                  \" already exists\")\n+        return []\n+    if not unsafe_hash:\n+        if eq and not frozen:\n+            return [Nodes.SingleAssignmentNode(node.pos,\n+                                        lhs = ExprNodes.NameNode(node.pos, name=EncodedString(\"__hash__\")),\n+                                        rhs = ExprNodes.NoneNode(node.pos))]\n+        if not eq:\n+            return []\n+\n+    names = [ name for name, field in fields.items()\n+                if (not field.is_initvar and\n+                    (field.compare.value if field.hash.value is None else field.hash.value)) ]\n+    if not names:\n+        return []  # nothing to hash\n+\n+    # make a tuple of the hashes\n+    tpl = u\", \".join(u\"hash(self.%s)\" % name for name in names )\n+\n+    # if we're here we want to generate a hash\n+    code_lines = u\"\"\"def __hash__(self):\n+    return hash((%s))\n+\"\"\" % tpl\n+    code_tree = TreeFragment(code_lines,\n+                              level='c_class', pipeline=[NormalizeTree(None)]\n+                              ).substitute({})\n+    return code_tree.stats\n+\n+\n+class GetTypeNode(ExprNodes.ExprNode):\n+    # Tries to return a pytype_type if possible. However contains\n+    # some fallback provision if it turns out not to resolve to a Python object\n+    # Initialize with \"entry\"\n+\n+    subexprs = []\n+\n+    def __init__(self, entry):\n+        super(GetTypeNode, self).__init__(entry.pos, entry=entry)\n+\n+    def analyse_types(self, env):\n+        type = self.entry.type\n+\n+        if type.is_extension_type or type.is_builtin_type:\n+            return ExprNodes.RawCNameExprNode(self.pos, Builtin.type_type,\n+                                                type.typeptr_cname).analyse_types(env)\n+        else:\n+            names = None\n+            py_name = type.py_type_name()\n+            # int types can return \"(int, long)\"\n+            if py_name:\n+                names = py_name.split(\",\")\n+                names = [ n.strip(\"() \") for n in names ]\n+            if names:\n+                for name in names:\n+                    name = EncodedString(name)\n+                    nn = ExprNodes.NameNode(self.pos, name=name)\n+                    # try to set the entry now to prevent the user accidentally shadowing\n+                    # the name\n+                    nn.entry = env.builtin_scope().lookup(name)\n+                    if not nn.entry:\n+                        try:\n+                            nn.entry = env.declare_builtin(name, self.pos)\n+                        except:\n+                            pass  # not convinced a failure means much\n+                    if nn.entry:\n+                        return nn.analyse_types(env)\n+\n+        # otherwise we're left to return a string\n+        s = self.entry.pep563_annotation\n+        if not s:\n+            s = self.entry.type.declaration_code(\"\", for_display=1)\n+        return ExprNodes.StringNode(self.pos, value=s).analyse_types(env)\n+\n+class DontAnalyseDeclarationsNode(ExprNodes.ExprNode):\n+    # arg    ExprNode\n+    #\n+    # This is designed to wrap stuff that's already been analysed\n+    # so that lambdas aren't redeclared for example\n+    # and then immediately be replaced\n+\n+    subexprs = []\n+\n+    def analyse_declarations(self, env):\n+        return\n+\n+class RemoveDontAnalyseDeclarations(VisitorTransform):\n+    def visit_DontAnalyseDeclarationsNode(self, node):\n+        return node.arg\n+\n+    def visit_Node(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+\n+class FieldsValueNode(ExprNodes.ExprNode):\n+    # largely just forwards arg. Allows it to be coerced to a Python object\n+    # if possible, and if not then generates a sensible backup string\n+    subexprs = ['arg']\n+\n+    def __init__(self, pos, arg):\n+        super(FieldsValueNode, self).__init__(pos, arg=arg)\n+\n+    def analyse_types(self, env):\n+        self.arg.analyse_types(env)\n+        self.type = self.arg.type\n+        return self\n+\n+    def coerce_to_pyobject(self, env):\n+        if self.arg.type.can_coerce_to_pyobject(env):\n+            return self.arg.coerce_to_pyobject(env)\n+        else:\n+            # A string representation of the code that gave the field seems like a reasonable\n+            # fallback. This'll mostly happen for \"default\" and \"default_factory\" where the\n+            # type may be a C-type that can't be converted to Python.\n+            return self._make_string()\n+\n+    def _make_string(self):\n+        from .AutoDocTransforms import AnnotationWriter\n+        writer = AnnotationWriter(description=\"Dataclass field\")\n+        string = writer.write(self.arg)\n+        return ExprNodes.StringNode(self.pos, value=EncodedString(string))\n+\n+    def generate_evaluation_code(self, code):\n+        return self.arg.generate_evaluation_code(code)\n+\n+\n+def _setup_dataclass_fields(node, fields, dataclass_module):\n+    from .ExprNodes import (AttributeNode, TupleNode, NameNode,\n+                            GeneralCallNode, DictNode,\n+                            IdentifierStringNode, BoolNode, DictItemNode,\n+                            CloneNode)\n+\n+    # For defaults and default_factories containing things like lambda,\n+    # they're already declared in the class scope, and it creates a big\n+    # problem if multiple copies are floating around in both the __init__\n+    # function, and in the __dataclass_fields__ structure.\n+    # Therefore, create module-level constants holding these values and\n+    # pass those around instead\n+    variables_assignment_stats = []\n+    for name, field in fields.items():\n+        for attrname in [ \"default\", \"default_factory\" ]:\n+            f_def = getattr(field, attrname)\n+            if f_def is MISSING or f_def.is_literal or f_def.is_name:\n+                # some simple cases where we don't need to set up\n+                # the variable as a module-level constant\n+                continue\n+            global_scope = node.scope.global_scope()\n+            module_field_name = global_scope.mangle(global_scope.mangle(\n+                                    Naming.dataclass_field_default_cname,\n+                                    node.class_name), name)\n+            # create an entry in the global scope for this variable to live\n+            nn = NameNode(f_def.pos, name=EncodedString(module_field_name))\n+            nn.entry = global_scope.declare_var(nn.name, type=f_def.type or PyrexTypes.unspecified_type,\n+                                                pos=f_def.pos, cname=nn.name, is_cdef=1)\n+            # replace the field so that future users just receive the namenode\n+            setattr(field, attrname, nn)\n+\n+            variables_assignment_stats.append(\n+                Nodes.SingleAssignmentNode(f_def.pos,\n+                                           lhs = nn,\n+                                           rhs = DontAnalyseDeclarationsNode(f_def.pos, arg=f_def)))\n+\n+    placeholders = {}\n+    field_func = AttributeNode(node.pos, obj = dataclass_module,\n+                                    attribute=EncodedString(\"field\"))\n+    dc_fields = DictNode(node.pos, key_value_pairs=[])\n+    dc_fields_namevalue_assignments = []\n+    for name, field in fields.items():\n+        placeholder_name = \"PLACEHOLDER_%s\" % name\n+        placeholders[placeholder_name] = GetTypeNode(node.scope.entries[name])",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r485931754",
            "id": 485931754,
            "in_reply_to_id": 485906541,
            "line": 558,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkzMTc1NA==",
            "original_commit_id": "043a102296c9949e1924c783c0b0d061810d85e9",
            "original_line": 575,
            "original_position": 575,
            "original_start_line": null,
            "path": "Cython/Compiler/Dataclass.py",
            "position": 558,
            "pull_request_review_id": 485415803,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/485931754",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r486132635"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/486132635"
                }
            },
            "author_association": "COLLABORATOR",
            "body": "In fairness this was the one bit of code I still understood 6 months later, which suggests it was probably the best bit.\r\n\r\nI've replaced it with Tempita though.",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2020-09-10T07:44:29Z",
            "diff_hunk": "@@ -177,3 +178,18 @@\n \n def py_version_hex(major, minor=0, micro=0, release_level=0, release_serial=0):\n     return (major << 24) | (minor << 16) | (micro << 8) | (release_level << 4) | (release_serial)\n+\n+class _py_code:\n+    # This is in Naming.py to be able to abuse the UtilityCode \"subsitute naming\" mechanism.",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r486132635",
            "id": 486132635,
            "in_reply_to_id": 485903258,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjEzMjYzNQ==",
            "original_commit_id": "043a102296c9949e1924c783c0b0d061810d85e9",
            "original_line": 183,
            "original_position": 14,
            "original_start_line": null,
            "path": "Cython/Compiler/Naming.py",
            "position": null,
            "pull_request_review_id": 485664395,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/486132635",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r486152428"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/486152428"
                }
            },
            "author_association": "MEMBER",
            "body": "I'd try to stick the `@requires` where the dependency actually arises, and that's in the implementation part most of the time.\r\n```suggestion\r\n\r\nstatic PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);\r\n#if CYTHON_COMPILING_IN_LIMITED_API\r\nstatic PyTypeObject* __Pyx_FetchCommonTypeFromSpec(PyType_Spec *spec, PyObject *bases);\r\n#endif\r\n\r\n/////////////// FetchCommonType ///////////////\r\n//@requires: FetchSharedCythonModule\r\n\r\n```",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2020-09-10T08:16:53Z",
            "diff_hunk": "@@ -14,6 +11,16 @@ static PyObject *__Pyx_FetchSharedCythonABIModule(void) {\n     return abi_module;\n }\n \n+/////////////// FetchCommonType.proto ///////////////\n+//@requires: FetchSharedCythonModule\n+\n+static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);\n+#if CYTHON_COMPILING_IN_LIMITED_API\n+static PyTypeObject* __Pyx_FetchCommonTypeFromSpec(PyType_Spec *spec, PyObject *bases);\n+#endif\n+\n+/////////////// FetchCommonType ///////////////\n+",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r486152428",
            "id": 486152428,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE1MjQyOA==",
            "original_commit_id": "3449117240c87f7746fbb3bf0dbf79d96d5841f2",
            "original_line": 23,
            "original_position": 28,
            "original_start_line": 15,
            "path": "Cython/Utility/CommonStructures.c",
            "position": null,
            "pull_request_review_id": 485691787,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/486152428",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r486511899"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/486511899"
                }
            },
            "author_association": "COLLABORATOR",
            "body": "The CPython dataclass implementation defines [`field`](https://docs.python.org/3/library/dataclasses.html#dataclasses.field) which is used to give extra control - for example for turning saying \"this attribute doesn't appear in `__repr__`\" or for setting up a default factory function.\r\n\r\n`field` ends up being used in two places: controlling the code generation and as inspectable information in `__dataclass_fields__`. In the standard library module the same structure is naturally used for both. In Cython that doesn't quite work as naturally. Even so I found it useful to replicate the `dataclasses.field` structure at the code generation stage to keep track of what options are set for each attribute.\r\n\r\nWhen I was writing this I was copying from the standard library module quite a bit so it made sense to try to use similar structures.\r\n\r\nI'll try to get some of this in comments next to the code though since the comments currently next to the code aren't particularly helpful.",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2020-09-10T17:25:57Z",
            "diff_hunk": "@@ -0,0 +1,611 @@\n+# functions to transform a c class into a dataclass\n+\n+from collections import OrderedDict\n+\n+from .Errors import error, warning\n+from . import ExprNodes, Nodes, PyrexTypes\n+from .Code import UtilityCode\n+from .Visitor import VisitorTransform\n+from . import UtilNodes, Builtin, Naming\n+from .StringEncoding import BytesLiteral, EncodedString\n+from .TreeFragment import TreeFragment\n+from .ParseTreeTransforms import (NormalizeTree, SkipDeclarations, AnalyseDeclarationsTransform,\n+                                  MarkClosureVisitor)\n+\n+def _make_module_callnode(pos, name):\n+    loader_utilitycode = UtilityCode.load_cached(\"%sModuleLoader\" % name, \"Dataclasses.c\")\n+    return ExprNodes.PythonCapiCallNode(pos, \"__Pyx_Load%sModule\" % name,\n+                                PyrexTypes.CFuncType(PyrexTypes.py_object_type, []),\n+                                utility_code = loader_utilitycode,\n+                                args=[])\n+\n+def make_dataclass_module_callnode(pos):\n+    return _make_module_callnode(pos, \"Dataclass\")\n+def make_typing_module_callnode(pos):\n+    return _make_module_callnode(pos, \"Typing\")\n+\n+_INTERNAL_DEFAULTSHOLDER_NAME = EncodedString('__pyx_dataclass_defaults')\n+\n+def make_common_utilitycode(scope):\n+    scope.global_scope().use_utility_code(\n+        UtilityCode.load_cached(\"DataclassModuleLoader\", \"Dataclasses.c\"))\n+\n+\n+class RemoveAssignments(VisitorTransform, SkipDeclarations):\n+    def __init__(self, names):\n+        super(RemoveAssignments, self).__init__()\n+        self.names = names\n+        self.removed_assignments = {}\n+\n+    def visit_CClassNode(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+    def visit_PyClassNode(self, node):\n+        return node  # go no further\n+\n+    def visit_FuncDefNode(self, node):\n+        return node  # go no further\n+\n+    def visit_SingleAssignmentNode(self, node):\n+        if node.lhs.is_name and node.lhs.name in self.names:\n+            if node.lhs.name in self.removed_assignments:\n+                warning(node.pos, (\"Multiple assignments for '%s' in dataclass; \"\n+                                   \"using most recent\") % node.lhs.name, 1)\n+            self.removed_assignments[node.lhs.name] = node.rhs\n+            return []\n+        return node\n+\n+    # I believe cascaded assignment is always a syntax error with decorators\n+    # so can be ignored\n+\n+    def visit_Node(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+class _MISSING_TYPE:\n+    pass\n+MISSING = _MISSING_TYPE()\n+\n+def process_class_get_fields(node):\n+    _TrueNode = ExprNodes.BoolNode(node.pos, value=True)\n+    _FalseNode = ExprNodes.BoolNode(node.pos, value=False)\n+    _NoneNode = ExprNodes.NoneNode(node.pos)\n+\n+    class Field:\n+        # store fields as nodes so they can be used in code construction\n+        # more readily; define class inside function so default arguments\n+        # have a useful pos",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r486511899",
            "id": 486511899,
            "in_reply_to_id": 485897978,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUxMTg5OQ==",
            "original_commit_id": "043a102296c9949e1924c783c0b0d061810d85e9",
            "original_line": 78,
            "original_position": 78,
            "original_start_line": 76,
            "path": "Cython/Compiler/Dataclass.py",
            "position": null,
            "pull_request_review_id": 486154801,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/486511899",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r499348658"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/499348658"
                }
            },
            "author_association": "MEMBER",
            "body": "Isn't there a way that this wouldn't be needed, rather than creating a fake entry? (same below)",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2020-10-05T05:11:05Z",
            "diff_hunk": "@@ -135,9 +137,28 @@ def load_cythonscope(self):\n         for ext_type in ext_types:\n             ext_type.is_cython_builtin_type = 1\n \n-\n         # self.entries[\"array\"] = view_utility_scope.entries.pop(\"array\")\n \n+        # dataclasses and typing scopes\n+        dataclassesscope = ModuleScope(u'dataclasses', self, None)\n+        self.declare_module('dataclasses', dataclassesscope, None).as_module = dataclassesscope\n+        dataclassesscope.is_cython_builtin = True\n+        dataclassesscope.pxd_file_loaded = True\n+        entry = dataclassesscope.declare_type(\"InitVar\", InitOrClassVar(\"InitVar\"), pos = None)\n+        # just need .as_variable to appear like an entry - the namenode is swapped\n+        # out in TransformBuiltinMethods anyway\n+        dummy_entry = Entry(\"InitVar\", \"<error>\", py_object_type)\n+        entry.as_variable = dummy_entry",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r499348658",
            "id": 499348658,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM0ODY1OA==",
            "original_commit_id": "6956615ac956190a819fbf0c493adba20f3cd39a",
            "original_line": 151,
            "original_position": 40,
            "original_start_line": 148,
            "path": "Cython/Compiler/CythonScope.py",
            "position": null,
            "pull_request_review_id": 485691787,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/499348658",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r499348984"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/499348984"
                }
            },
            "author_association": "MEMBER",
            "body": "Suggests to me that `name` would better be named `cname`.",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2020-10-05T05:12:44Z",
            "diff_hunk": "@@ -0,0 +1,629 @@\n+# functions to transform a c class into a dataclass\n+\n+from collections import OrderedDict\n+\n+from .Errors import error, warning\n+from . import ExprNodes, Nodes, PyrexTypes\n+from .Code import UtilityCode, TempitaUtilityCode\n+from .Visitor import VisitorTransform\n+from . import UtilNodes, Builtin, Naming\n+from .StringEncoding import BytesLiteral, EncodedString\n+from .TreeFragment import TreeFragment\n+from .ParseTreeTransforms import (NormalizeTree, SkipDeclarations, AnalyseDeclarationsTransform,\n+                                  MarkClosureVisitor)\n+\n+def _make_module_callnode_and_utilcode(pos, name, py_code):\n+    loader_utilitycode = TempitaUtilityCode.load_cached(\"SpecificModuleLoader\", \"Dataclasses.c\",\n+                                                        context={'name': name, 'py_code': py_code})\n+    return (ExprNodes.PythonCapiCallNode(pos, \"__Pyx_Load_%s_Module\" % name,",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r499348984",
            "id": 499348984,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM0ODk4NA==",
            "original_commit_id": "6956615ac956190a819fbf0c493adba20f3cd39a",
            "original_line": 18,
            "original_position": 18,
            "original_start_line": null,
            "path": "Cython/Compiler/Dataclass.py",
            "position": null,
            "pull_request_review_id": 485691787,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/499348984",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r499350639"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/499350639"
                }
            },
            "author_association": "MEMBER",
            "body": "Link to the CPython docs here.",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2020-10-05T05:20:27Z",
            "diff_hunk": "@@ -1046,5 +1046,26 @@ generated containing declarations for its object struct and type object. By\n including the ``.h`` file in external C code that you write, that code can\n access the attributes of the extension type.\n \n+Dataclass extension types\n+=========================\n \n+Cython supports extension types that behave like the dataclasses defined in\n+the Python 3.7+ standard library. The main benefit of using a dataclass is\n+that it can auto-generate simple `__init__`, `__repr__` and comparison\n+functions. The Cython implementation behaves as much like the Python\n+standard library implementation as possible and therefore the documentation\n+here only briefly outlines the differences - if you plan on using them\n+then please read the documentation for the standard library module.",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r499350639",
            "id": 499350639,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM1MDYzOQ==",
            "original_commit_id": "6956615ac956190a819fbf0c493adba20f3cd39a",
            "original_line": 1058,
            "original_position": 13,
            "original_start_line": null,
            "path": "docs/src/userguide/extension_types.rst",
            "position": null,
            "pull_request_review_id": 485691787,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/499350639",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r499352761"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/499352761"
                }
            },
            "author_association": "MEMBER",
            "body": "Would be nice if we didn't need these. I don't think there is value in having our own copies, compared to the ones in the stdlib. I think having our own (slightly more explicit) decorator is good, but for the declarations, having our own copies seems more excessive than helpful. As you can see from your implementation, it also requires a lot of complexity and infrastructure.\r\n\r\nBasically, if you use this feature in `.pyx` files, then the fallbacks aren't really needed for the compile time declarations. If you use it in `.py` files, then you'll need a suitable Python version anyway, and still don't need the fallbacks.",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2020-10-05T05:30:52Z",
            "diff_hunk": "@@ -0,0 +1,15 @@\n+cimport cython\n+\n+@cython.dataclasses.dataclass\n+cdef class MyDataclass:\n+    # fields can be declared using annotations\n+    a: cython.int = 0\n+    b: double = cython.dataclasses.field(default_factory = lambda: 10, repr=False)\n+\n+    # fields can also be declared using `cdef`:\n+    cdef str c\n+    c = \"hello\"  # assignment of default value on a separate line\n+\n+    # cython equivalents to InitVar and typing.ClassVar also work\n+    d: cython.dataclasses.InitVar[double] = 5\n+    e: cython.typing.ClassVar[list] = []",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r499352761",
            "id": 499352761,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM1Mjc2MQ==",
            "original_commit_id": "6956615ac956190a819fbf0c493adba20f3cd39a",
            "original_line": 15,
            "original_position": 15,
            "original_start_line": 13,
            "path": "docs/examples/userguide/extension_types/dataclass.pyx",
            "position": null,
            "pull_request_review_id": 485691787,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/499352761",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r499354160"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/499354160"
                }
            },
            "author_association": "MEMBER",
            "body": "Unless this is intended as a Py3-only feature, Py2 should use \"new\"-style classes here.\r\n```suggestion\r\nclass Field(object):\r\n```",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2020-10-05T05:37:17Z",
            "diff_hunk": "@@ -0,0 +1,113 @@\n+################### Dataclasses_fallback ###############################\n+\n+# This is the fallback dataclass code if the stdlib module isn't available.\n+# It defines enough of the support types to be used with cdef classes\n+# and to fail if used on regular types.\n+\n+# (Intended to be included as py code - not compiled)\n+\n+from collections import namedtuple\n+try:\n+    from types import MappingProxyType\n+except ImportError:\n+    # mutable fallback if unavailable\n+    MappingProxyType = lambda x: x\n+\n+class _MISSING_TYPE:\n+    pass\n+MISSING = _MISSING_TYPE()\n+\n+_DataclassParams = namedtuple('_DataclassParams',\n+    [\"init\", \"repr\", \"eq\", \"order\", \"unsafe_hash\", \"frozen\"])\n+class Field:",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r499354160",
            "id": 499354160,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM1NDE2MA==",
            "original_commit_id": "6956615ac956190a819fbf0c493adba20f3cd39a",
            "original_line": 22,
            "original_position": 22,
            "original_start_line": null,
            "path": "Cython/Utility/Dataclasses.py",
            "position": null,
            "pull_request_review_id": 485691787,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/499354160",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r499355395"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/499355395"
                }
            },
            "author_association": "MEMBER",
            "body": "Is this annotation needed? Doesn't it even require an explicit replacement context?",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2020-10-05T05:42:19Z",
            "diff_hunk": "@@ -0,0 +1,82 @@\n+///////////////////// ModuleLoader.proto //////////////////////////\n+\n+static PyObject* __Pyx_LoadInternalModule(const char* name, const char* fallback_code); /* proto */\n+\n+//////////////////// ModuleLoader ///////////////////////\n+//@requires: CommonStructures.c::FetchSharedCythonModule\n+\n+static PyObject* __Pyx_LoadInternalModule(const char* name, const char* fallback_code) {\n+    // In supporting dataclasses we want to be able to use directives like:\n+    //  cython.dataclasses.dataclass, cython.dataclasses.field, cython.dataclasses.InitVar\n+    //   (based on the Standard Library dataclasses module)\n+    //  cython.typing.ClassVar (based on the standard library tying module)\n+    // These are processed efficiently by Cython as much as possible, but if they are treated\n+    // as a Python object then the objects from the standard library module should be substituted.\n+    // If those objects aren't available (due to Python version) then a simple fallback is substituted\n+    // instead, which largely just fails with a not-implemented error.\n+    //\n+    // The fallbacks are placed in the \"shared abi module\" as a convenient internal place to\n+    // store them\n+\n+    PyObject *shared_abi_module = 0, *module = 0;\n+\n+    shared_abi_module = __Pyx_FetchSharedCythonABIModule();\n+    if (!shared_abi_module) return NULL;\n+\n+    if (PyObject_HasAttrString(shared_abi_module, name)) {\n+        PyObject* result = PyObject_GetAttrString(shared_abi_module, name);\n+        Py_DECREF(shared_abi_module);\n+        return result;\n+    }\n+\n+    // the best and simplest case is simply to defer to the standard library (if available)\n+    module = PyImport_ImportModule(name);\n+    if (!module) {\n+        PyObject *localDict, *runValue, *builtins, *modulename;\n+        if (PyErr_ExceptionMatches(PyExc_ImportError)) {\n+            PyErr_Clear();  // this is reasonably likely (especially on older versions of Python)\n+        } else {\n+            goto bad;\n+        }\n+        modulename = PyBytes_FromFormat(\"_cython_\" CYTHON_ABI \".%s\", name);\n+        if (!modulename) goto bad;\n+#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_CPYTHON\n+        module = PyImport_AddModuleObject(modulename); // borrowed\n+#else\n+        module = PyImport_AddModule(PyBytes_AsString(modulename)); // borrowed\n+#endif\n+        Py_DECREF(modulename);\n+        if (!module) goto bad;\n+        Py_INCREF(module);\n+        if (PyObject_SetAttrString(shared_abi_module, name, module)<0) goto bad;\n+        localDict = PyModule_GetDict(module); // borrowed\n+        if (!localDict) goto bad;\n+        builtins = PyEval_GetBuiltins(); // borrowed\n+        if (!builtins) goto bad;\n+        if (PyDict_SetItemString(localDict, \"__builtins__\", builtins) <0) goto bad;\n+\n+        runValue = PyRun_String(fallback_code, Py_file_input, localDict, localDict);\n+        if (!runValue) goto bad;\n+        Py_DECREF(runValue);\n+    }\n+    goto shared_cleanup;\n+\n+    bad:\n+        Py_CLEAR(module);\n+    shared_cleanup:\n+        Py_XDECREF(shared_abi_module);\n+    return module;\n+}\n+\n+///////////////////// SpecificModuleLoader.proto //////////////////////\n+//@substitute: tempita",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r499355395",
            "id": 499355395,
            "line": 65,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM1NTM5NQ==",
            "original_commit_id": "6956615ac956190a819fbf0c493adba20f3cd39a",
            "original_line": 72,
            "original_position": 72,
            "original_start_line": null,
            "path": "Cython/Utility/Dataclasses.c",
            "position": 65,
            "pull_request_review_id": 485691787,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/499355395",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r499359647"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/499359647"
                }
            },
            "author_association": "MEMBER",
            "body": "I'd rather see the `AnnotationNode` stored in `entry.annotation` than duplicating the fields here.",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2020-10-05T05:59:03Z",
            "diff_hunk": "@@ -84,6 +84,7 @@ class Entry(object):\n     # type             PyrexType  Type of entity\n     # doc              string     Doc string\n     # annotation       ExprNode   PEP 484/526 annotation\n+    # pep563_annotation string    PEP563 string version of the annotation",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r499359647",
            "id": 499359647,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM1OTY0Nw==",
            "original_commit_id": "6956615ac956190a819fbf0c493adba20f3cd39a",
            "original_line": 87,
            "original_position": 4,
            "original_start_line": 86,
            "path": "Cython/Compiler/Symtab.py",
            "position": null,
            "pull_request_review_id": 485691787,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/499359647",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r499359823"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/499359823"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nclass InitOrClassVar(object):\r\n```",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2020-10-05T05:59:41Z",
            "diff_hunk": "@@ -4368,6 +4374,72 @@ def same_as_resolved_type(self, other_type):\n     def error_condition(self, result_code):\n         return \"dummy\"\n \n+class InitOrClassVar:",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r499359823",
            "id": 499359823,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM1OTgyMw==",
            "original_commit_id": "6956615ac956190a819fbf0c493adba20f3cd39a",
            "original_line": 4377,
            "original_position": 37,
            "original_start_line": null,
            "path": "Cython/Compiler/PyrexTypes.py",
            "position": null,
            "pull_request_review_id": 485691787,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/499359823",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r499360629"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/499360629"
                }
            },
            "author_association": "MEMBER",
            "body": "I had to read this sentence three times in order to make it pass my parser.\r\n```suggestion\r\n    Although not really a CppClassType, it uses a template-like syntax.\r\n    So it mimics the interface to let existing code use it with minimal fuss.\r\n```",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2020-10-05T06:02:32Z",
            "diff_hunk": "@@ -4368,6 +4374,72 @@ def same_as_resolved_type(self, other_type):\n     def error_condition(self, result_code):\n         return \"dummy\"\n \n+class InitOrClassVar:\n+    \"\"\"Used to help Cython interpret dataclass InitVar or ClassVar.\n+\n+    Although not really a CppClassType, it uses a template-like syntax\n+    so claims to be to allow exisiting code to use it with minimal fuss",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r499360629",
            "id": 499360629,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM2MDYyOQ==",
            "original_commit_id": "6956615ac956190a819fbf0c493adba20f3cd39a",
            "original_line": 4381,
            "original_position": 41,
            "original_start_line": 4380,
            "path": "Cython/Compiler/PyrexTypes.py",
            "position": null,
            "pull_request_review_id": 485691787,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/499360629",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r499361671"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/499361671"
                }
            },
            "author_association": "MEMBER",
            "body": "I think these erequire context. Otherwise they'd read too generic when used in code.\r\n```suggestion\r\n    #  is_dataclass_initvar            boolean     Is a dataclass InitVar\r\n    #  is_dataclass_classvar           boolean     Is a dataclass ClassVar\r\n```",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2020-10-05T06:06:19Z",
            "diff_hunk": "@@ -198,6 +198,8 @@ class PyrexType(BaseType):\n     #  is_buffer             boolean     Is buffer access type\n     #  is_pythran_expr       boolean     Is Pythran expr\n     #  is_numpy_buffer       boolean     Is Numpy array buffer\n+    #  is_initvar            boolean     Is a dataclass InitVar\n+    #  is_classvar            boolean     Is a dataclass ClassVar",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r499361671",
            "id": 499361671,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM2MTY3MQ==",
            "original_commit_id": "6956615ac956190a819fbf0c493adba20f3cd39a",
            "original_line": 202,
            "original_position": 5,
            "original_start_line": 201,
            "path": "Cython/Compiler/PyrexTypes.py",
            "position": null,
            "pull_request_review_id": 485691787,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/499361671",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r499363815"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/499363815"
                }
            },
            "author_association": "MEMBER",
            "body": "unused?",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2020-10-05T06:14:17Z",
            "diff_hunk": "@@ -790,6 +790,7 @@ def visit_CImportStatNode(self, node):\n         return node\n \n     def visit_FromCImportStatNode(self, node):\n+        extra_stats = []",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r499363815",
            "id": 499363815,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM2MzgxNQ==",
            "original_commit_id": "6956615ac956190a819fbf0c493adba20f3cd39a",
            "original_line": 793,
            "original_position": 4,
            "original_start_line": null,
            "path": "Cython/Compiler/ParseTreeTransforms.py",
            "position": null,
            "pull_request_review_id": 485691787,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/499363815",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r499364166"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/499364166"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    'dataclasses.dataclass' : ('class', 'cclass',)\r\n```",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2020-10-05T06:15:22Z",
            "diff_hunk": "@@ -369,6 +373,7 @@ def normalise_encoding_name(option_name, encoding):\n     'fast_gil': ('module',),\n     'iterable_coroutine': ('module', 'function'),\n     'trashcan' : ('cclass',),\n+    'dataclass.dataclass' : ('class', 'cclass',)",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r499364166",
            "id": 499364166,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM2NDE2Ng==",
            "original_commit_id": "6956615ac956190a819fbf0c493adba20f3cd39a",
            "original_line": 376,
            "original_position": 15,
            "original_start_line": null,
            "path": "Cython/Compiler/Options.py",
            "position": null,
            "pull_request_review_id": 485691787,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/499364166",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r499364447"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/499364447"
                }
            },
            "author_association": "MEMBER",
            "body": "why not?",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2020-10-05T06:16:25Z",
            "diff_hunk": "@@ -326,6 +326,10 @@ def normalise_encoding_name(option_name, encoding):\n     'c_string_type': one_of('bytes', 'bytearray', 'str', 'unicode'),\n     'c_string_encoding': normalise_encoding_name,\n     'trashcan': bool,\n+    'dataclasses.dataclass': Ellipsis,  # use Ellipsis as a flag not to attempt to analyse the arguments\n+                            # when the directive is applied",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r499364447",
            "id": 499364447,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM2NDQ0Nw==",
            "original_commit_id": "6956615ac956190a819fbf0c493adba20f3cd39a",
            "original_line": 330,
            "original_position": 5,
            "original_start_line": 329,
            "path": "Cython/Compiler/Options.py",
            "position": null,
            "pull_request_review_id": 485691787,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/499364447",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r499364884"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/499364884"
                }
            },
            "author_association": "MEMBER",
            "body": "Did you mean \"instance attribute\" or \"class attribute\" here?\r\n```suggestion\r\n                # in a dataclass an assignment should not prevent a name becoming an instance attribute\r\n```",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2020-10-05T06:18:02Z",
            "diff_hunk": "@@ -2055,7 +2064,12 @@ def analyse_target_declaration(self, env):\n             self.entry = env.lookup_here(self.name)\n         if not self.entry and self.annotation is not None:\n             # name : type = ...\n-            self.declare_from_annotation(env, as_target=True)\n+            if 'dataclasses.dataclass' in env.directives:\n+                # in a dataclass an assignment should not prevent a name becoming a class member",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r499364884",
            "id": 499364884,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM2NDg4NA==",
            "original_commit_id": "6956615ac956190a819fbf0c493adba20f3cd39a",
            "original_line": 2068,
            "original_position": 29,
            "original_start_line": null,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_review_id": 485691787,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/499364884",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r499365785"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/499365785"
                }
            },
            "author_association": "MEMBER",
            "body": "Just assign `is_dataclass = 'dataclasses.dataclass' in env.directives` and pass that to `as_target`. No need to duplicate the calls. (The more code I have to read in order to spot the difference, the more I get distracted while trying to understand the code. Don't make me think, just give it a name.)",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2020-10-05T06:21:03Z",
            "diff_hunk": "@@ -2055,7 +2064,12 @@ def analyse_target_declaration(self, env):\n             self.entry = env.lookup_here(self.name)\n         if not self.entry and self.annotation is not None:\n             # name : type = ...\n-            self.declare_from_annotation(env, as_target=True)\n+            if 'dataclasses.dataclass' in env.directives:\n+                # in a dataclass an assignment should not prevent a name becoming a class member\n+                # hence \"as_target = False\"\n+                self.declare_from_annotation(env, as_target=False)\n+            else:\n+                self.declare_from_annotation(env, as_target=True)",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r499365785",
            "id": 499365785,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM2NTc4NQ==",
            "original_commit_id": "6956615ac956190a819fbf0c493adba20f3cd39a",
            "original_line": 2072,
            "original_position": 33,
            "original_start_line": 2069,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_review_id": 485691787,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/499365785",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r499368461"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/499368461"
                }
            },
            "author_association": "MEMBER",
            "body": "I'd rather have this as an explicit marker that makes the property generation optional or sets it as internally requested.\r\n\r\nOTOH, we have a type here already, don't we? Why not look at it? Even if the decision is non-trivial, it can be taken by the type itself.",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2020-10-05T06:29:19Z",
            "diff_hunk": "@@ -2008,11 +2008,20 @@ def declare_from_annotation(self, env, as_target=False):\n                           \"'%s' cannot be specialized since its type is not a fused argument to this function\" %\n                           self.name)\n                     atype = error_type\n-\n-            entry = self.entry = env.declare_var(name, atype, self.pos, is_cdef=not as_target)\n+            kwds = {}\n+            if 'dataclasses.dataclass' in env.directives:\n+                # handle \"frozen\" directive - full inspection of the dataclass directives happens\n+                # in Dataclass.py\n+                frozen_directive = env.directives['dataclasses.dataclass']\n+                if frozen_directive:\n+                    frozen_directive = frozen_directive[1].get('frozen', None)\n+                is_frozen = frozen_directive and frozen_directive.is_literal and frozen_directive.value\n+                kwds = {'visibility': 'readonly?' if is_frozen else 'public?'}",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r499368461",
            "id": 499368461,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM2ODQ2MQ==",
            "original_commit_id": "6956615ac956190a819fbf0c493adba20f3cd39a",
            "original_line": 2019,
            "original_position": 14,
            "original_start_line": null,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_review_id": 485691787,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/499368461",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r499372354"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/499372354"
                }
            },
            "author_association": "MEMBER",
            "body": "`setup` is a noun. This function does something.\r\n```suggestion\r\ndef _set_up_dataclass_fields(node, fields, dataclass_module):\r\n```",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2020-10-05T06:41:21Z",
            "diff_hunk": "@@ -0,0 +1,629 @@\n+# functions to transform a c class into a dataclass\n+\n+from collections import OrderedDict\n+\n+from .Errors import error, warning\n+from . import ExprNodes, Nodes, PyrexTypes\n+from .Code import UtilityCode, TempitaUtilityCode\n+from .Visitor import VisitorTransform\n+from . import UtilNodes, Builtin, Naming\n+from .StringEncoding import BytesLiteral, EncodedString\n+from .TreeFragment import TreeFragment\n+from .ParseTreeTransforms import (NormalizeTree, SkipDeclarations, AnalyseDeclarationsTransform,\n+                                  MarkClosureVisitor)\n+\n+def _make_module_callnode_and_utilcode(pos, name, py_code):\n+    loader_utilitycode = TempitaUtilityCode.load_cached(\"SpecificModuleLoader\", \"Dataclasses.c\",\n+                                                        context={'name': name, 'py_code': py_code})\n+    return (ExprNodes.PythonCapiCallNode(pos, \"__Pyx_Load_%s_Module\" % name,\n+                                PyrexTypes.CFuncType(PyrexTypes.py_object_type, []),\n+                                utility_code = loader_utilitycode,\n+                                args=[]),\n+            loader_utilitycode)\n+\n+def make_dataclasses_module_callnode_and_utilcode(pos):\n+    python_utility_code = UtilityCode.load_cached(\"Dataclasses_fallback\", \"Dataclasses.py\")\n+    python_utility_code = EncodedString(python_utility_code.impl)\n+    return _make_module_callnode_and_utilcode(pos, \"dataclasses\", python_utility_code.as_c_string_literal())\n+def make_dataclasses_module_callnode(pos):\n+    return make_dataclasses_module_callnode_and_utilcode(pos)[0]\n+def make_typing_module_callnode(pos):\n+    python_utility_code = UtilityCode.load_cached(\"Typing_fallback\", \"Dataclasses.py\")\n+    python_utility_code = EncodedString(python_utility_code.impl)\n+    return _make_module_callnode_and_utilcode(pos, \"typing\", python_utility_code.as_c_string_literal())[0]\n+\n+_INTERNAL_DEFAULTSHOLDER_NAME = EncodedString('__pyx_dataclass_defaults')\n+\n+def make_common_utilitycode(scope):\n+    scope.global_scope().use_utility_code(make_dataclasses_module_callnode_and_utilcode(None)[1])\n+\n+\n+class RemoveAssignments(VisitorTransform, SkipDeclarations):\n+    def __init__(self, names):\n+        super(RemoveAssignments, self).__init__()\n+        self.names = names\n+        self.removed_assignments = {}\n+\n+    def visit_CClassNode(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+    def visit_PyClassNode(self, node):\n+        return node  # go no further\n+\n+    def visit_FuncDefNode(self, node):\n+        return node  # go no further\n+\n+    def visit_SingleAssignmentNode(self, node):\n+        if node.lhs.is_name and node.lhs.name in self.names:\n+            if node.lhs.name in self.removed_assignments:\n+                warning(node.pos, (\"Multiple assignments for '%s' in dataclass; \"\n+                                   \"using most recent\") % node.lhs.name, 1)\n+            self.removed_assignments[node.lhs.name] = node.rhs\n+            return []\n+        return node\n+\n+    # I believe cascaded assignment is always a syntax error with decorators\n+    # so can be ignored\n+\n+    def visit_Node(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+class _MISSING_TYPE:\n+    pass\n+MISSING = _MISSING_TYPE()\n+\n+def process_class_get_fields(node):\n+    _TrueNode = ExprNodes.BoolNode(node.pos, value=True)\n+    _FalseNode = ExprNodes.BoolNode(node.pos, value=False)\n+    _NoneNode = ExprNodes.NoneNode(node.pos)\n+\n+    class Field:\n+        \"\"\"\n+        Field is based on the dataclasses.field class from the standard library module.\n+        It is used internally during the generation of Cython dataclasses to keep track\n+        of the settings for individual attributes.\n+\n+        Attributes of this class are stored as nodes so they can be used in code construction\n+        more readily (i.e. we store BoolNode rather than bool)\n+        The class (+ _TrueNode, _FalseNode and _NoneNode) are defined inside a function\n+        that when _TrueNode (etc) are used as default arguments they can have a useful pos\n+        \"\"\"\n+        default = MISSING\n+        default_factory = MISSING\n+        private = False\n+        def __init__(self, default=MISSING, default_factory=MISSING,\n+                        repr=_TrueNode, hash=_NoneNode, init=_TrueNode,\n+                        compare=_TrueNode, metadata=_NoneNode,\n+                        is_initvar=False):\n+            if default is not MISSING:\n+                self.default = default\n+            if default_factory is not MISSING:\n+                self.default_factory = default_factory\n+            self.repr = repr\n+            self.hash = hash\n+            self.init = init\n+            self.compare = compare\n+            self.metadata = metadata\n+            self.is_initvar = is_initvar\n+\n+            for field_name in (\"repr\", \"hash\", \"init\", \"compare\", \"metadata\"):\n+                field_value = getattr(self, field_name)\n+                if not field_value.is_literal:\n+                    error(field_value.pos, \"cython.dataclasses.field parameter '%s' must be a literal value\"\n+                            % field_name)\n+\n+    var_entries = node.scope.var_entries\n+    # order of definition is used in the dataclass\n+    var_entries = sorted(var_entries, key=lambda entry: entry.pos)\n+    var_names = [ entry.name for entry in var_entries ]\n+\n+    # remove assignments for stat_list\n+    transform = RemoveAssignments(var_names)\n+    transform(node)\n+\n+    if node.base_type and node.base_type.dataclass_fields:\n+        fields = node.base_type.dataclass_fields.copy()\n+    else:\n+        fields = OrderedDict()\n+    for entry in var_entries:\n+        name = entry.name\n+        is_initvar = entry.type.is_initvar\n+        if name in transform.removed_assignments:\n+            assignment = transform.removed_assignments[name]\n+            if (isinstance(assignment, ExprNodes.CallNode)\n+                    and assignment.function.as_cython_attribute() == \"dataclasses.field\"):\n+                # I believe most of this is well-enforced when it's treated as a directive\n+                # but it doesn't hurt to make sure\n+                if (not isinstance(assignment, ExprNodes.GeneralCallNode)\n+                        or not isinstance(assignment.positional_args, ExprNodes.TupleNode)\n+                        or assignment.positional_args.args\n+                        or not isinstance(assignment.keyword_args, ExprNodes.DictNode)):\n+                    error(assignment.pos, \"Call to 'cython.dataclasses.field' must only consist \"\n+                          \"of compile-time keyword arguments\")\n+                    continue\n+                keyword_args = { k.value: v for k, v in assignment.keyword_args.key_value_pairs }\n+                if 'default' in keyword_args and 'default_factory' in keyword_args:\n+                    error(assignment.pos, \"You cannot specify both 'default' and 'default_factory'\"\n+                          \" for a dataclass member\")\n+                    continue\n+                field = Field(**keyword_args)\n+            else:\n+                if isinstance(assignment, ExprNodes.CallNode):\n+                    func = assignment.function\n+                    if ((func.is_name and func.name == \"field\")\n+                            or (isinstance(func, ExprNodes.AttributeNode)\n+                                and func.attribute == \"field\")):\n+                        warning(assignment.pos, \"Do you mean cython.dataclasses.field instead?\", 1)\n+                if assignment.type in [Builtin.list_type,\n+                                    Builtin.dict_type,\n+                                    Builtin.set_type]:\n+                    # The standard library module generates a TypeError at runtime\n+                    # in this situation\n+                    error(assignment.pos, \"Mutable default passed argument for '{0}' - \"\n+                          \"use 'default_factory' instead\".format(name))\n+\n+                field = Field(default=assignment)\n+        else:\n+            field = Field()\n+        field.is_initvar = is_initvar\n+        if entry.visibility == \"private\":\n+            field.private = True\n+        fields[name] = field\n+    node.entry.type.dataclass_fields = fields\n+    return fields\n+\n+def handle_cclass_dataclass(node, dataclass_args, analyse_decs_transform):\n+    from .ExprNodes import (AttributeNode, TupleNode, NameNode,\n+                            GeneralCallNode, DictNode,\n+                            IdentifierStringNode, BoolNode, DictItemNode)\n+    # default argument values from https://docs.python.org/3/library/dataclasses.html\n+    kwargs = dict(init=True, repr=True, eq=True,\n+                  order=False, unsafe_hash=False, frozen=False)\n+    if dataclass_args is not None:\n+        if dataclass_args[0]:\n+            error(node.pos, \"cython.dataclasses.dataclass takes no positional arguments\")\n+        for k, v in dataclass_args[1].items():\n+            if k not in kwargs:\n+                error(node.pos,\n+                      \"Unrecognised keyword argument '{0}' to cython.dataclasses.dataclass\".format(k))\n+            if not isinstance(v, ExprNodes.BoolNode):\n+                error(node.pos,\n+                      \"Arguments to cython.dataclasses.dataclass must be True or False\")\n+            kwargs[k] = v\n+\n+    dataclass_scope = make_common_utilitycode(node.scope)\n+    fields = process_class_get_fields(node)\n+\n+    dataclass_module = make_dataclasses_module_callnode(node.pos)\n+\n+    # create __dataclass_params__ attribute\n+    dataclass_params_func = AttributeNode(node.pos, obj=dataclass_module,\n+                                            attribute=EncodedString(\"_DataclassParams\"))\n+    dataclass_params_keywords = DictNode.from_pairs(node.pos,\n+            [ (IdentifierStringNode(node.pos, value=EncodedString(k)),\n+                BoolNode(node.pos, value=v))\n+                for k, v in kwargs.items() ])\n+    dataclass_params = GeneralCallNode(node.pos,\n+                                    function = dataclass_params_func,\n+                                    positional_args = TupleNode(node.pos, args=[]),\n+                                    keyword_args = dataclass_params_keywords)\n+    dataclass_params_assignment = \\\n+        Nodes.SingleAssignmentNode(node.pos,\n+                        lhs = NameNode(node.pos,\n+                                        name=EncodedString(\"__dataclass_params__\")),\n+                        rhs = dataclass_params)\n+\n+    dataclass_fields_stats = _setup_dataclass_fields(node, fields, dataclass_module)\n+\n+    stats = Nodes.StatListNode(node.pos,\n+                               stats=[dataclass_params_assignment]\n+                                    + dataclass_fields_stats)\n+\n+    init_stats = generate_init_code(kwargs['init'], node, fields)\n+    repr_stats = generate_repr_code(kwargs['repr'], node, fields)\n+    eq_stats = generate_eq_code(kwargs['eq'], node, fields)\n+    order_stats = generate_order_code(kwargs['order'], node, fields)\n+    hash_stats = generate_hash_code(kwargs['unsafe_hash'], kwargs['eq'], kwargs['frozen'],\n+                       node, fields)\n+\n+    stats.stats = stats.stats + init_stats + repr_stats + eq_stats + order_stats + hash_stats\n+\n+    # turn off annotation typing, so all arguments to __init__ are accepted as\n+    # generic objects and thus can accept _HAS_DEFAULT_FACTORY\n+    # type conversion comes later\n+    comp_directives = Nodes.CompilerDirectivesNode(node.pos,\n+        directives = node.scope.directives.copy(),\n+        body=stats)\n+    comp_directives.directives['annotation_typing'] = False\n+\n+    comp_directives.analyse_declarations(node.scope)\n+    # probably already in this scope, but it doesn't hurt to make sure\n+    analyse_decs_transform.enter_scope(node, node.scope)\n+    analyse_decs_transform.visit(comp_directives)\n+    analyse_decs_transform.exit_scope()\n+\n+    RemoveDontAnalyseDeclarations()(comp_directives)\n+    node.body.stats.append(comp_directives)\n+\n+def generate_init_code(init, node, fields):\n+    if not init or node.scope.lookup_here(\"__init__\"):\n+        return []\n+    # selfname behaviour copied from the cpython module\n+    selfname = \"__dataclass_self__\" if \"self\" in fields else \"self\"\n+    args = [selfname]\n+\n+    placeholders = {}\n+    placeholder_count = [0]\n+\n+    # create a temp to get _HAS_DEFAULT_FACTORY\n+    dataclass_module = make_dataclasses_module_callnode(node.pos)\n+    has_default_factory = ExprNodes.AttributeNode(node.pos,\n+                                        obj = dataclass_module,\n+                                        attribute = EncodedString(\"_HAS_DEFAULT_FACTORY\"))\n+\n+    def get_placeholder_name():\n+        while True:\n+            name = \"PLACEHOLDER_%s\" % placeholder_count[0]\n+            if (name not in placeholders\n+                    and name not in fields):\n+                # make sure name isn't already used and doesn't\n+                # conflict with a variable name (which is unlikely but possible)\n+                break\n+            placeholder_count[0] += 1\n+        return name\n+\n+    default_factory_placeholder = get_placeholder_name()\n+    placeholders[default_factory_placeholder] = has_default_factory\n+\n+    seen_default = False\n+    for name, field in fields.items():\n+        if not field.init.value:\n+            continue\n+        entry = node.scope.lookup(name)\n+        annotation = entry.pep563_annotation\n+        if annotation:\n+            annotation = u\": %s\" % annotation\n+        else:\n+            annotation = u\"\"\n+        assignment = u''\n+        if field.default is not MISSING or field.default_factory is not MISSING:\n+            seen_default = True\n+            if field.default_factory is not MISSING:\n+                ph_name = default_factory_placeholder\n+            else:\n+                ph_name = get_placeholder_name()\n+                placeholders[ph_name] = field.default  # should be node\n+            assignment = u\" = %s\" % ph_name\n+        elif seen_default:\n+            error(entry.pos, (\"non-default argument %s follows default argument \"\n+                             \"in dataclass __init__\") % name)\n+            return []\n+\n+        args.append(u\"%s%s%s\" % (name, annotation, assignment))\n+    args = u\", \".join(args)\n+    func_call = u\"def __init__(%s):\" % args\n+\n+    code_lines = [func_call,\n+                  \"    pass\",  # just in-case it's an empty body\n+                  ]\n+    for name, field in fields.items():\n+        if field.is_initvar:\n+            continue\n+        if field.default_factory is MISSING:\n+            if field.init.value:\n+                code_lines.append(u\"    %s.%s = %s\" % (selfname, name, name))\n+        else:\n+            ph_name = get_placeholder_name()\n+            placeholders[ph_name] = field.default_factory\n+            if field.init.value:\n+                code_lines.append(u\"    if %s is %s:\"\n+                                % (name, default_factory_placeholder))\n+                code_lines.append(u\"        %s.%s = %s()\"\n+                                % (selfname, name, ph_name))\n+                code_lines.append(u\"    else:\")\n+                code_lines.append(u\"        %s.%s = %s\" % (selfname, name, name))\n+            else:\n+                # still need to use the default factory to initialize\n+                code_lines.append(u\"    %s.%s = %s()\"\n+                                  % (selfname, name, ph_name))\n+    if node.scope.lookup(\"__post_init__\"):\n+        post_init_vars = \", \".join(name for name, field in fields.items()\n+                                    if field.is_initvar)\n+        code_lines.append(\"    %s.__post_init__(%s)\" % (selfname, post_init_vars))\n+    code_lines = u\"\\n\".join(code_lines)\n+\n+    code_tree = TreeFragment(code_lines, level='c_class',\n+                             pipeline=[NormalizeTree(node.scope),\n+                                       ]\n+                              ).substitute(placeholders)\n+\n+    return code_tree.stats\n+\n+\n+def generate_repr_code(repr, node, fields):\n+    if not repr or node.scope.lookup(\"__repr__\"):\n+        return []\n+    code_lines = [\"def __repr__(self):\"]\n+    strs = [ u\"%s={self.%s}\" % (name, name)\n+            for name, field in fields.items() if field.repr.value and not field.is_initvar ]\n+    format_string = u\", \".join(strs)\n+    code_lines.append(u\"    return f'{type(self).__name__}(%s)'\" % format_string)\n+    code_lines = u\"\\n\".join(code_lines)\n+\n+    code_tree = TreeFragment(code_lines,\n+                              level='c_class', pipeline=[NormalizeTree(None)]\n+                              ).substitute({})\n+    return code_tree.stats\n+\n+def generate_cmp_code(op, funcname, node, fields):\n+    if node.scope.lookup_here(funcname):\n+        return []  # already exists\n+\n+    names = [ name for name, field in fields.items()\n+                if (field.compare.value and not field.is_initvar) ]\n+\n+    if not names:\n+        return []  # no comparable types\n+\n+    code_lines = [\"def %s(self, other):\" % funcname,\n+                  \"    cdef %s other_cast\" % node.class_name,\n+                  \"    try:\",\n+                  \"        other_cast = other\",\n+                  \"    except TypeError:\",\n+                  \"        return NotImplemented\"]\n+\n+    for name in names:\n+        shared = \"if not (self.%s == other_cast.%s):\" % (name, name)\n+        if op == \"==\":\n+            code_lines.append(\"    %s return False\" % shared)\n+        else:\n+            code_lines.append(\"    %s return self.%s %s other_cast.%s\" %\n+                              (shared, name, op, name))\n+\n+    if \"=\" in op:\n+        code_lines.append(\"    return True\")\n+    else:\n+        code_lines.append(\"    return False\")\n+\n+    code_lines = u\"\\n\".join(code_lines)\n+\n+    code_tree = TreeFragment(code_lines,\n+                              level='c_class', pipeline=[NormalizeTree(None)]\n+                              ).substitute({})\n+    return code_tree.stats\n+\n+def generate_eq_code(eq, node, fields):\n+    if not eq:\n+        return []\n+    return generate_cmp_code(\"==\", \"__eq__\", node, fields)\n+\n+def generate_order_code(order, node, fields):\n+    if not order:\n+        return []\n+    stats = []\n+    for op, name in [(\"<\", \"__lt__\"),\n+                     (\"<=\", \"__le__\"),\n+                     (\">\", \"__gt__\"),\n+                     (\">=\", \"__ge__\")]:\n+        stats.extend(generate_cmp_code(op, name, node, fields))\n+    return stats\n+\n+def generate_hash_code(unsafe_hash, eq, frozen, node, fields):\n+    hash_entry = node.scope.lookup_here(\"__hash__\")\n+    if hash_entry:\n+        # TODO ideally assignment of __hash__ to None shouldn't trigger this\n+        # but difficult to get the right information here\n+        if unsafe_hash:\n+            error(node.pos, \"Request for dataclass unsafe_hash when a '__hash__' function\"\n+                  \" already exists\")\n+        return []\n+    if not unsafe_hash:\n+        if eq and not frozen:\n+            return [Nodes.SingleAssignmentNode(node.pos,\n+                                        lhs = ExprNodes.NameNode(node.pos, name=EncodedString(\"__hash__\")),\n+                                        rhs = ExprNodes.NoneNode(node.pos))]\n+        if not eq:\n+            return []\n+\n+    names = [ name for name, field in fields.items()\n+                if (not field.is_initvar and\n+                    (field.compare.value if field.hash.value is None else field.hash.value)) ]\n+    if not names:\n+        return []  # nothing to hash\n+\n+    # make a tuple of the hashes\n+    tpl = u\", \".join(u\"hash(self.%s)\" % name for name in names )\n+\n+    # if we're here we want to generate a hash\n+    code_lines = u\"\"\"def __hash__(self):\n+    return hash((%s))\n+\"\"\" % tpl\n+    code_tree = TreeFragment(code_lines,\n+                              level='c_class', pipeline=[NormalizeTree(None)]\n+                              ).substitute({})\n+    return code_tree.stats\n+\n+\n+class GetTypeNode(ExprNodes.ExprNode):\n+    # Tries to return a pytype_type if possible. However contains\n+    # some fallback provision if it turns out not to resolve to a Python object\n+    # Initialize with \"entry\"\n+\n+    subexprs = []\n+\n+    def __init__(self, entry):\n+        super(GetTypeNode, self).__init__(entry.pos, entry=entry)\n+\n+    def analyse_types(self, env):\n+        type = self.entry.type\n+\n+        if type.is_extension_type or type.is_builtin_type:\n+            return ExprNodes.RawCNameExprNode(self.pos, Builtin.type_type,\n+                                                type.typeptr_cname).analyse_types(env)\n+        else:\n+            names = None\n+            py_name = type.py_type_name()\n+            # int types can return \"(int, long)\"\n+            if py_name:\n+                names = py_name.split(\",\")\n+                names = [ n.strip(\"() \") for n in names ]\n+            if names:\n+                for name in names:\n+                    name = EncodedString(name)\n+                    nn = ExprNodes.NameNode(self.pos, name=name)\n+                    # try to set the entry now to prevent the user accidentally shadowing\n+                    # the name\n+                    nn.entry = env.builtin_scope().lookup(name)\n+                    if not nn.entry:\n+                        try:\n+                            nn.entry = env.declare_builtin(name, self.pos)\n+                        except:\n+                            pass  # not convinced a failure means much\n+                    if nn.entry:\n+                        return nn.analyse_types(env)\n+\n+        # otherwise we're left to return a string\n+        s = self.entry.pep563_annotation\n+        if not s:\n+            s = self.entry.type.declaration_code(\"\", for_display=1)\n+        return ExprNodes.StringNode(self.pos, value=s).analyse_types(env)\n+\n+class DontAnalyseDeclarationsNode(ExprNodes.ExprNode):\n+    # arg    ExprNode\n+    #\n+    # This is designed to wrap stuff that's already been analysed\n+    # so that lambdas aren't redeclared for example\n+    # and then immediately be replaced\n+\n+    subexprs = []\n+\n+    def analyse_declarations(self, env):\n+        return\n+\n+class RemoveDontAnalyseDeclarations(VisitorTransform):\n+    def visit_DontAnalyseDeclarationsNode(self, node):\n+        return node.arg\n+\n+    def visit_Node(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+\n+class FieldsValueNode(ExprNodes.ExprNode):\n+    # largely just forwards arg. Allows it to be coerced to a Python object\n+    # if possible, and if not then generates a sensible backup string\n+    subexprs = ['arg']\n+\n+    def __init__(self, pos, arg):\n+        super(FieldsValueNode, self).__init__(pos, arg=arg)\n+\n+    def analyse_types(self, env):\n+        self.arg.analyse_types(env)\n+        self.type = self.arg.type\n+        return self\n+\n+    def coerce_to_pyobject(self, env):\n+        if self.arg.type.can_coerce_to_pyobject(env):\n+            return self.arg.coerce_to_pyobject(env)\n+        else:\n+            # A string representation of the code that gave the field seems like a reasonable\n+            # fallback. This'll mostly happen for \"default\" and \"default_factory\" where the\n+            # type may be a C-type that can't be converted to Python.\n+            return self._make_string()\n+\n+    def _make_string(self):\n+        from .AutoDocTransforms import AnnotationWriter\n+        writer = AnnotationWriter(description=\"Dataclass field\")\n+        string = writer.write(self.arg)\n+        return ExprNodes.StringNode(self.pos, value=EncodedString(string))\n+\n+    def generate_evaluation_code(self, code):\n+        return self.arg.generate_evaluation_code(code)\n+\n+\n+def _setup_dataclass_fields(node, fields, dataclass_module):",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r499372354",
            "id": 499372354,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM3MjM1NA==",
            "original_commit_id": "6956615ac956190a819fbf0c493adba20f3cd39a",
            "original_line": 546,
            "original_position": 546,
            "original_start_line": null,
            "path": "Cython/Compiler/Dataclass.py",
            "position": null,
            "pull_request_review_id": 485691787,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/499372354",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r499373073"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/499373073"
                }
            },
            "author_association": "MEMBER",
            "body": "There must be a better way to do this. If it's about lambdas, then why can't they detect themselves whether they actually need to do something or not? Or maybe the transformation that uses this runs too late and should be executed before (or as part of) the analysis?",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2020-10-05T06:43:25Z",
            "diff_hunk": "@@ -0,0 +1,629 @@\n+# functions to transform a c class into a dataclass\n+\n+from collections import OrderedDict\n+\n+from .Errors import error, warning\n+from . import ExprNodes, Nodes, PyrexTypes\n+from .Code import UtilityCode, TempitaUtilityCode\n+from .Visitor import VisitorTransform\n+from . import UtilNodes, Builtin, Naming\n+from .StringEncoding import BytesLiteral, EncodedString\n+from .TreeFragment import TreeFragment\n+from .ParseTreeTransforms import (NormalizeTree, SkipDeclarations, AnalyseDeclarationsTransform,\n+                                  MarkClosureVisitor)\n+\n+def _make_module_callnode_and_utilcode(pos, name, py_code):\n+    loader_utilitycode = TempitaUtilityCode.load_cached(\"SpecificModuleLoader\", \"Dataclasses.c\",\n+                                                        context={'name': name, 'py_code': py_code})\n+    return (ExprNodes.PythonCapiCallNode(pos, \"__Pyx_Load_%s_Module\" % name,\n+                                PyrexTypes.CFuncType(PyrexTypes.py_object_type, []),\n+                                utility_code = loader_utilitycode,\n+                                args=[]),\n+            loader_utilitycode)\n+\n+def make_dataclasses_module_callnode_and_utilcode(pos):\n+    python_utility_code = UtilityCode.load_cached(\"Dataclasses_fallback\", \"Dataclasses.py\")\n+    python_utility_code = EncodedString(python_utility_code.impl)\n+    return _make_module_callnode_and_utilcode(pos, \"dataclasses\", python_utility_code.as_c_string_literal())\n+def make_dataclasses_module_callnode(pos):\n+    return make_dataclasses_module_callnode_and_utilcode(pos)[0]\n+def make_typing_module_callnode(pos):\n+    python_utility_code = UtilityCode.load_cached(\"Typing_fallback\", \"Dataclasses.py\")\n+    python_utility_code = EncodedString(python_utility_code.impl)\n+    return _make_module_callnode_and_utilcode(pos, \"typing\", python_utility_code.as_c_string_literal())[0]\n+\n+_INTERNAL_DEFAULTSHOLDER_NAME = EncodedString('__pyx_dataclass_defaults')\n+\n+def make_common_utilitycode(scope):\n+    scope.global_scope().use_utility_code(make_dataclasses_module_callnode_and_utilcode(None)[1])\n+\n+\n+class RemoveAssignments(VisitorTransform, SkipDeclarations):\n+    def __init__(self, names):\n+        super(RemoveAssignments, self).__init__()\n+        self.names = names\n+        self.removed_assignments = {}\n+\n+    def visit_CClassNode(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+    def visit_PyClassNode(self, node):\n+        return node  # go no further\n+\n+    def visit_FuncDefNode(self, node):\n+        return node  # go no further\n+\n+    def visit_SingleAssignmentNode(self, node):\n+        if node.lhs.is_name and node.lhs.name in self.names:\n+            if node.lhs.name in self.removed_assignments:\n+                warning(node.pos, (\"Multiple assignments for '%s' in dataclass; \"\n+                                   \"using most recent\") % node.lhs.name, 1)\n+            self.removed_assignments[node.lhs.name] = node.rhs\n+            return []\n+        return node\n+\n+    # I believe cascaded assignment is always a syntax error with decorators\n+    # so can be ignored\n+\n+    def visit_Node(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+class _MISSING_TYPE:\n+    pass\n+MISSING = _MISSING_TYPE()\n+\n+def process_class_get_fields(node):\n+    _TrueNode = ExprNodes.BoolNode(node.pos, value=True)\n+    _FalseNode = ExprNodes.BoolNode(node.pos, value=False)\n+    _NoneNode = ExprNodes.NoneNode(node.pos)\n+\n+    class Field:\n+        \"\"\"\n+        Field is based on the dataclasses.field class from the standard library module.\n+        It is used internally during the generation of Cython dataclasses to keep track\n+        of the settings for individual attributes.\n+\n+        Attributes of this class are stored as nodes so they can be used in code construction\n+        more readily (i.e. we store BoolNode rather than bool)\n+        The class (+ _TrueNode, _FalseNode and _NoneNode) are defined inside a function\n+        that when _TrueNode (etc) are used as default arguments they can have a useful pos\n+        \"\"\"\n+        default = MISSING\n+        default_factory = MISSING\n+        private = False\n+        def __init__(self, default=MISSING, default_factory=MISSING,\n+                        repr=_TrueNode, hash=_NoneNode, init=_TrueNode,\n+                        compare=_TrueNode, metadata=_NoneNode,\n+                        is_initvar=False):\n+            if default is not MISSING:\n+                self.default = default\n+            if default_factory is not MISSING:\n+                self.default_factory = default_factory\n+            self.repr = repr\n+            self.hash = hash\n+            self.init = init\n+            self.compare = compare\n+            self.metadata = metadata\n+            self.is_initvar = is_initvar\n+\n+            for field_name in (\"repr\", \"hash\", \"init\", \"compare\", \"metadata\"):\n+                field_value = getattr(self, field_name)\n+                if not field_value.is_literal:\n+                    error(field_value.pos, \"cython.dataclasses.field parameter '%s' must be a literal value\"\n+                            % field_name)\n+\n+    var_entries = node.scope.var_entries\n+    # order of definition is used in the dataclass\n+    var_entries = sorted(var_entries, key=lambda entry: entry.pos)\n+    var_names = [ entry.name for entry in var_entries ]\n+\n+    # remove assignments for stat_list\n+    transform = RemoveAssignments(var_names)\n+    transform(node)\n+\n+    if node.base_type and node.base_type.dataclass_fields:\n+        fields = node.base_type.dataclass_fields.copy()\n+    else:\n+        fields = OrderedDict()\n+    for entry in var_entries:\n+        name = entry.name\n+        is_initvar = entry.type.is_initvar\n+        if name in transform.removed_assignments:\n+            assignment = transform.removed_assignments[name]\n+            if (isinstance(assignment, ExprNodes.CallNode)\n+                    and assignment.function.as_cython_attribute() == \"dataclasses.field\"):\n+                # I believe most of this is well-enforced when it's treated as a directive\n+                # but it doesn't hurt to make sure\n+                if (not isinstance(assignment, ExprNodes.GeneralCallNode)\n+                        or not isinstance(assignment.positional_args, ExprNodes.TupleNode)\n+                        or assignment.positional_args.args\n+                        or not isinstance(assignment.keyword_args, ExprNodes.DictNode)):\n+                    error(assignment.pos, \"Call to 'cython.dataclasses.field' must only consist \"\n+                          \"of compile-time keyword arguments\")\n+                    continue\n+                keyword_args = { k.value: v for k, v in assignment.keyword_args.key_value_pairs }\n+                if 'default' in keyword_args and 'default_factory' in keyword_args:\n+                    error(assignment.pos, \"You cannot specify both 'default' and 'default_factory'\"\n+                          \" for a dataclass member\")\n+                    continue\n+                field = Field(**keyword_args)\n+            else:\n+                if isinstance(assignment, ExprNodes.CallNode):\n+                    func = assignment.function\n+                    if ((func.is_name and func.name == \"field\")\n+                            or (isinstance(func, ExprNodes.AttributeNode)\n+                                and func.attribute == \"field\")):\n+                        warning(assignment.pos, \"Do you mean cython.dataclasses.field instead?\", 1)\n+                if assignment.type in [Builtin.list_type,\n+                                    Builtin.dict_type,\n+                                    Builtin.set_type]:\n+                    # The standard library module generates a TypeError at runtime\n+                    # in this situation\n+                    error(assignment.pos, \"Mutable default passed argument for '{0}' - \"\n+                          \"use 'default_factory' instead\".format(name))\n+\n+                field = Field(default=assignment)\n+        else:\n+            field = Field()\n+        field.is_initvar = is_initvar\n+        if entry.visibility == \"private\":\n+            field.private = True\n+        fields[name] = field\n+    node.entry.type.dataclass_fields = fields\n+    return fields\n+\n+def handle_cclass_dataclass(node, dataclass_args, analyse_decs_transform):\n+    from .ExprNodes import (AttributeNode, TupleNode, NameNode,\n+                            GeneralCallNode, DictNode,\n+                            IdentifierStringNode, BoolNode, DictItemNode)\n+    # default argument values from https://docs.python.org/3/library/dataclasses.html\n+    kwargs = dict(init=True, repr=True, eq=True,\n+                  order=False, unsafe_hash=False, frozen=False)\n+    if dataclass_args is not None:\n+        if dataclass_args[0]:\n+            error(node.pos, \"cython.dataclasses.dataclass takes no positional arguments\")\n+        for k, v in dataclass_args[1].items():\n+            if k not in kwargs:\n+                error(node.pos,\n+                      \"Unrecognised keyword argument '{0}' to cython.dataclasses.dataclass\".format(k))\n+            if not isinstance(v, ExprNodes.BoolNode):\n+                error(node.pos,\n+                      \"Arguments to cython.dataclasses.dataclass must be True or False\")\n+            kwargs[k] = v\n+\n+    dataclass_scope = make_common_utilitycode(node.scope)\n+    fields = process_class_get_fields(node)\n+\n+    dataclass_module = make_dataclasses_module_callnode(node.pos)\n+\n+    # create __dataclass_params__ attribute\n+    dataclass_params_func = AttributeNode(node.pos, obj=dataclass_module,\n+                                            attribute=EncodedString(\"_DataclassParams\"))\n+    dataclass_params_keywords = DictNode.from_pairs(node.pos,\n+            [ (IdentifierStringNode(node.pos, value=EncodedString(k)),\n+                BoolNode(node.pos, value=v))\n+                for k, v in kwargs.items() ])\n+    dataclass_params = GeneralCallNode(node.pos,\n+                                    function = dataclass_params_func,\n+                                    positional_args = TupleNode(node.pos, args=[]),\n+                                    keyword_args = dataclass_params_keywords)\n+    dataclass_params_assignment = \\\n+        Nodes.SingleAssignmentNode(node.pos,\n+                        lhs = NameNode(node.pos,\n+                                        name=EncodedString(\"__dataclass_params__\")),\n+                        rhs = dataclass_params)\n+\n+    dataclass_fields_stats = _setup_dataclass_fields(node, fields, dataclass_module)\n+\n+    stats = Nodes.StatListNode(node.pos,\n+                               stats=[dataclass_params_assignment]\n+                                    + dataclass_fields_stats)\n+\n+    init_stats = generate_init_code(kwargs['init'], node, fields)\n+    repr_stats = generate_repr_code(kwargs['repr'], node, fields)\n+    eq_stats = generate_eq_code(kwargs['eq'], node, fields)\n+    order_stats = generate_order_code(kwargs['order'], node, fields)\n+    hash_stats = generate_hash_code(kwargs['unsafe_hash'], kwargs['eq'], kwargs['frozen'],\n+                       node, fields)\n+\n+    stats.stats = stats.stats + init_stats + repr_stats + eq_stats + order_stats + hash_stats\n+\n+    # turn off annotation typing, so all arguments to __init__ are accepted as\n+    # generic objects and thus can accept _HAS_DEFAULT_FACTORY\n+    # type conversion comes later\n+    comp_directives = Nodes.CompilerDirectivesNode(node.pos,\n+        directives = node.scope.directives.copy(),\n+        body=stats)\n+    comp_directives.directives['annotation_typing'] = False\n+\n+    comp_directives.analyse_declarations(node.scope)\n+    # probably already in this scope, but it doesn't hurt to make sure\n+    analyse_decs_transform.enter_scope(node, node.scope)\n+    analyse_decs_transform.visit(comp_directives)\n+    analyse_decs_transform.exit_scope()\n+\n+    RemoveDontAnalyseDeclarations()(comp_directives)\n+    node.body.stats.append(comp_directives)\n+\n+def generate_init_code(init, node, fields):\n+    if not init or node.scope.lookup_here(\"__init__\"):\n+        return []\n+    # selfname behaviour copied from the cpython module\n+    selfname = \"__dataclass_self__\" if \"self\" in fields else \"self\"\n+    args = [selfname]\n+\n+    placeholders = {}\n+    placeholder_count = [0]\n+\n+    # create a temp to get _HAS_DEFAULT_FACTORY\n+    dataclass_module = make_dataclasses_module_callnode(node.pos)\n+    has_default_factory = ExprNodes.AttributeNode(node.pos,\n+                                        obj = dataclass_module,\n+                                        attribute = EncodedString(\"_HAS_DEFAULT_FACTORY\"))\n+\n+    def get_placeholder_name():\n+        while True:\n+            name = \"PLACEHOLDER_%s\" % placeholder_count[0]\n+            if (name not in placeholders\n+                    and name not in fields):\n+                # make sure name isn't already used and doesn't\n+                # conflict with a variable name (which is unlikely but possible)\n+                break\n+            placeholder_count[0] += 1\n+        return name\n+\n+    default_factory_placeholder = get_placeholder_name()\n+    placeholders[default_factory_placeholder] = has_default_factory\n+\n+    seen_default = False\n+    for name, field in fields.items():\n+        if not field.init.value:\n+            continue\n+        entry = node.scope.lookup(name)\n+        annotation = entry.pep563_annotation\n+        if annotation:\n+            annotation = u\": %s\" % annotation\n+        else:\n+            annotation = u\"\"\n+        assignment = u''\n+        if field.default is not MISSING or field.default_factory is not MISSING:\n+            seen_default = True\n+            if field.default_factory is not MISSING:\n+                ph_name = default_factory_placeholder\n+            else:\n+                ph_name = get_placeholder_name()\n+                placeholders[ph_name] = field.default  # should be node\n+            assignment = u\" = %s\" % ph_name\n+        elif seen_default:\n+            error(entry.pos, (\"non-default argument %s follows default argument \"\n+                             \"in dataclass __init__\") % name)\n+            return []\n+\n+        args.append(u\"%s%s%s\" % (name, annotation, assignment))\n+    args = u\", \".join(args)\n+    func_call = u\"def __init__(%s):\" % args\n+\n+    code_lines = [func_call,\n+                  \"    pass\",  # just in-case it's an empty body\n+                  ]\n+    for name, field in fields.items():\n+        if field.is_initvar:\n+            continue\n+        if field.default_factory is MISSING:\n+            if field.init.value:\n+                code_lines.append(u\"    %s.%s = %s\" % (selfname, name, name))\n+        else:\n+            ph_name = get_placeholder_name()\n+            placeholders[ph_name] = field.default_factory\n+            if field.init.value:\n+                code_lines.append(u\"    if %s is %s:\"\n+                                % (name, default_factory_placeholder))\n+                code_lines.append(u\"        %s.%s = %s()\"\n+                                % (selfname, name, ph_name))\n+                code_lines.append(u\"    else:\")\n+                code_lines.append(u\"        %s.%s = %s\" % (selfname, name, name))\n+            else:\n+                # still need to use the default factory to initialize\n+                code_lines.append(u\"    %s.%s = %s()\"\n+                                  % (selfname, name, ph_name))\n+    if node.scope.lookup(\"__post_init__\"):\n+        post_init_vars = \", \".join(name for name, field in fields.items()\n+                                    if field.is_initvar)\n+        code_lines.append(\"    %s.__post_init__(%s)\" % (selfname, post_init_vars))\n+    code_lines = u\"\\n\".join(code_lines)\n+\n+    code_tree = TreeFragment(code_lines, level='c_class',\n+                             pipeline=[NormalizeTree(node.scope),\n+                                       ]\n+                              ).substitute(placeholders)\n+\n+    return code_tree.stats\n+\n+\n+def generate_repr_code(repr, node, fields):\n+    if not repr or node.scope.lookup(\"__repr__\"):\n+        return []\n+    code_lines = [\"def __repr__(self):\"]\n+    strs = [ u\"%s={self.%s}\" % (name, name)\n+            for name, field in fields.items() if field.repr.value and not field.is_initvar ]\n+    format_string = u\", \".join(strs)\n+    code_lines.append(u\"    return f'{type(self).__name__}(%s)'\" % format_string)\n+    code_lines = u\"\\n\".join(code_lines)\n+\n+    code_tree = TreeFragment(code_lines,\n+                              level='c_class', pipeline=[NormalizeTree(None)]\n+                              ).substitute({})\n+    return code_tree.stats\n+\n+def generate_cmp_code(op, funcname, node, fields):\n+    if node.scope.lookup_here(funcname):\n+        return []  # already exists\n+\n+    names = [ name for name, field in fields.items()\n+                if (field.compare.value and not field.is_initvar) ]\n+\n+    if not names:\n+        return []  # no comparable types\n+\n+    code_lines = [\"def %s(self, other):\" % funcname,\n+                  \"    cdef %s other_cast\" % node.class_name,\n+                  \"    try:\",\n+                  \"        other_cast = other\",\n+                  \"    except TypeError:\",\n+                  \"        return NotImplemented\"]\n+\n+    for name in names:\n+        shared = \"if not (self.%s == other_cast.%s):\" % (name, name)\n+        if op == \"==\":\n+            code_lines.append(\"    %s return False\" % shared)\n+        else:\n+            code_lines.append(\"    %s return self.%s %s other_cast.%s\" %\n+                              (shared, name, op, name))\n+\n+    if \"=\" in op:\n+        code_lines.append(\"    return True\")\n+    else:\n+        code_lines.append(\"    return False\")\n+\n+    code_lines = u\"\\n\".join(code_lines)\n+\n+    code_tree = TreeFragment(code_lines,\n+                              level='c_class', pipeline=[NormalizeTree(None)]\n+                              ).substitute({})\n+    return code_tree.stats\n+\n+def generate_eq_code(eq, node, fields):\n+    if not eq:\n+        return []\n+    return generate_cmp_code(\"==\", \"__eq__\", node, fields)\n+\n+def generate_order_code(order, node, fields):\n+    if not order:\n+        return []\n+    stats = []\n+    for op, name in [(\"<\", \"__lt__\"),\n+                     (\"<=\", \"__le__\"),\n+                     (\">\", \"__gt__\"),\n+                     (\">=\", \"__ge__\")]:\n+        stats.extend(generate_cmp_code(op, name, node, fields))\n+    return stats\n+\n+def generate_hash_code(unsafe_hash, eq, frozen, node, fields):\n+    hash_entry = node.scope.lookup_here(\"__hash__\")\n+    if hash_entry:\n+        # TODO ideally assignment of __hash__ to None shouldn't trigger this\n+        # but difficult to get the right information here\n+        if unsafe_hash:\n+            error(node.pos, \"Request for dataclass unsafe_hash when a '__hash__' function\"\n+                  \" already exists\")\n+        return []\n+    if not unsafe_hash:\n+        if eq and not frozen:\n+            return [Nodes.SingleAssignmentNode(node.pos,\n+                                        lhs = ExprNodes.NameNode(node.pos, name=EncodedString(\"__hash__\")),\n+                                        rhs = ExprNodes.NoneNode(node.pos))]\n+        if not eq:\n+            return []\n+\n+    names = [ name for name, field in fields.items()\n+                if (not field.is_initvar and\n+                    (field.compare.value if field.hash.value is None else field.hash.value)) ]\n+    if not names:\n+        return []  # nothing to hash\n+\n+    # make a tuple of the hashes\n+    tpl = u\", \".join(u\"hash(self.%s)\" % name for name in names )\n+\n+    # if we're here we want to generate a hash\n+    code_lines = u\"\"\"def __hash__(self):\n+    return hash((%s))\n+\"\"\" % tpl\n+    code_tree = TreeFragment(code_lines,\n+                              level='c_class', pipeline=[NormalizeTree(None)]\n+                              ).substitute({})\n+    return code_tree.stats\n+\n+\n+class GetTypeNode(ExprNodes.ExprNode):\n+    # Tries to return a pytype_type if possible. However contains\n+    # some fallback provision if it turns out not to resolve to a Python object\n+    # Initialize with \"entry\"\n+\n+    subexprs = []\n+\n+    def __init__(self, entry):\n+        super(GetTypeNode, self).__init__(entry.pos, entry=entry)\n+\n+    def analyse_types(self, env):\n+        type = self.entry.type\n+\n+        if type.is_extension_type or type.is_builtin_type:\n+            return ExprNodes.RawCNameExprNode(self.pos, Builtin.type_type,\n+                                                type.typeptr_cname).analyse_types(env)\n+        else:\n+            names = None\n+            py_name = type.py_type_name()\n+            # int types can return \"(int, long)\"\n+            if py_name:\n+                names = py_name.split(\",\")\n+                names = [ n.strip(\"() \") for n in names ]\n+            if names:\n+                for name in names:\n+                    name = EncodedString(name)\n+                    nn = ExprNodes.NameNode(self.pos, name=name)\n+                    # try to set the entry now to prevent the user accidentally shadowing\n+                    # the name\n+                    nn.entry = env.builtin_scope().lookup(name)\n+                    if not nn.entry:\n+                        try:\n+                            nn.entry = env.declare_builtin(name, self.pos)\n+                        except:\n+                            pass  # not convinced a failure means much\n+                    if nn.entry:\n+                        return nn.analyse_types(env)\n+\n+        # otherwise we're left to return a string\n+        s = self.entry.pep563_annotation\n+        if not s:\n+            s = self.entry.type.declaration_code(\"\", for_display=1)\n+        return ExprNodes.StringNode(self.pos, value=s).analyse_types(env)\n+\n+class DontAnalyseDeclarationsNode(ExprNodes.ExprNode):",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r499373073",
            "id": 499373073,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM3MzA3Mw==",
            "original_commit_id": "6956615ac956190a819fbf0c493adba20f3cd39a",
            "original_line": 493,
            "original_position": 493,
            "original_start_line": null,
            "path": "Cython/Compiler/Dataclass.py",
            "position": null,
            "pull_request_review_id": 485691787,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/499373073",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r499375279"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/499375279"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    class Field(object):\r\n```",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2020-10-05T06:49:29Z",
            "diff_hunk": "@@ -0,0 +1,629 @@\n+# functions to transform a c class into a dataclass\n+\n+from collections import OrderedDict\n+\n+from .Errors import error, warning\n+from . import ExprNodes, Nodes, PyrexTypes\n+from .Code import UtilityCode, TempitaUtilityCode\n+from .Visitor import VisitorTransform\n+from . import UtilNodes, Builtin, Naming\n+from .StringEncoding import BytesLiteral, EncodedString\n+from .TreeFragment import TreeFragment\n+from .ParseTreeTransforms import (NormalizeTree, SkipDeclarations, AnalyseDeclarationsTransform,\n+                                  MarkClosureVisitor)\n+\n+def _make_module_callnode_and_utilcode(pos, name, py_code):\n+    loader_utilitycode = TempitaUtilityCode.load_cached(\"SpecificModuleLoader\", \"Dataclasses.c\",\n+                                                        context={'name': name, 'py_code': py_code})\n+    return (ExprNodes.PythonCapiCallNode(pos, \"__Pyx_Load_%s_Module\" % name,\n+                                PyrexTypes.CFuncType(PyrexTypes.py_object_type, []),\n+                                utility_code = loader_utilitycode,\n+                                args=[]),\n+            loader_utilitycode)\n+\n+def make_dataclasses_module_callnode_and_utilcode(pos):\n+    python_utility_code = UtilityCode.load_cached(\"Dataclasses_fallback\", \"Dataclasses.py\")\n+    python_utility_code = EncodedString(python_utility_code.impl)\n+    return _make_module_callnode_and_utilcode(pos, \"dataclasses\", python_utility_code.as_c_string_literal())\n+def make_dataclasses_module_callnode(pos):\n+    return make_dataclasses_module_callnode_and_utilcode(pos)[0]\n+def make_typing_module_callnode(pos):\n+    python_utility_code = UtilityCode.load_cached(\"Typing_fallback\", \"Dataclasses.py\")\n+    python_utility_code = EncodedString(python_utility_code.impl)\n+    return _make_module_callnode_and_utilcode(pos, \"typing\", python_utility_code.as_c_string_literal())[0]\n+\n+_INTERNAL_DEFAULTSHOLDER_NAME = EncodedString('__pyx_dataclass_defaults')\n+\n+def make_common_utilitycode(scope):\n+    scope.global_scope().use_utility_code(make_dataclasses_module_callnode_and_utilcode(None)[1])\n+\n+\n+class RemoveAssignments(VisitorTransform, SkipDeclarations):\n+    def __init__(self, names):\n+        super(RemoveAssignments, self).__init__()\n+        self.names = names\n+        self.removed_assignments = {}\n+\n+    def visit_CClassNode(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+    def visit_PyClassNode(self, node):\n+        return node  # go no further\n+\n+    def visit_FuncDefNode(self, node):\n+        return node  # go no further\n+\n+    def visit_SingleAssignmentNode(self, node):\n+        if node.lhs.is_name and node.lhs.name in self.names:\n+            if node.lhs.name in self.removed_assignments:\n+                warning(node.pos, (\"Multiple assignments for '%s' in dataclass; \"\n+                                   \"using most recent\") % node.lhs.name, 1)\n+            self.removed_assignments[node.lhs.name] = node.rhs\n+            return []\n+        return node\n+\n+    # I believe cascaded assignment is always a syntax error with decorators\n+    # so can be ignored\n+\n+    def visit_Node(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+class _MISSING_TYPE:\n+    pass\n+MISSING = _MISSING_TYPE()\n+\n+def process_class_get_fields(node):\n+    _TrueNode = ExprNodes.BoolNode(node.pos, value=True)\n+    _FalseNode = ExprNodes.BoolNode(node.pos, value=False)\n+    _NoneNode = ExprNodes.NoneNode(node.pos)\n+\n+    class Field:",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r499375279",
            "id": 499375279,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM3NTI3OQ==",
            "original_commit_id": "6956615ac956190a819fbf0c493adba20f3cd39a",
            "original_line": 82,
            "original_position": 82,
            "original_start_line": null,
            "path": "Cython/Compiler/Dataclass.py",
            "position": null,
            "pull_request_review_id": 485691787,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/499375279",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r499792776"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/499792776"
                }
            },
            "author_association": "COLLABORATOR",
            "body": "I definitely agree that making our own copies of these is awkward. It needs some mechanism to track these attributes (i.e. how do we know that a name `ClassVar` comes from the dataclass module) which I don't think currently exists. It might be useful infrastructure though for dealing with things like the `typing` module.\r\n\r\n> Basically, if you use this feature in .pyx files, then the fallbacks aren't really needed for the compile time declarations. If you use it in .py files, then you'll need a suitable Python version anyway, and still don't need the fallbacks.\r\n\r\nI can see the value in not trying to provide fallbacks. For something like:\r\n\r\n```\r\n# some_py_file.py\r\nimport cython\r\nimport dataclasses\r\n\r\n@cython.cclass\r\n@cython.dataclass\r\nclass C:\r\n  d: dataclasses.InitVar[double] = 5\r\n```\r\n\r\nthe `import dataclasses` line would still be executable and still fail on older versions of Python, even if Cython interpreted the rest correctly. I don't really know how to deal with that.",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2020-10-05T18:32:15Z",
            "diff_hunk": "@@ -0,0 +1,15 @@\n+cimport cython\n+\n+@cython.dataclasses.dataclass\n+cdef class MyDataclass:\n+    # fields can be declared using annotations\n+    a: cython.int = 0\n+    b: double = cython.dataclasses.field(default_factory = lambda: 10, repr=False)\n+\n+    # fields can also be declared using `cdef`:\n+    cdef str c\n+    c = \"hello\"  # assignment of default value on a separate line\n+\n+    # cython equivalents to InitVar and typing.ClassVar also work\n+    d: cython.dataclasses.InitVar[double] = 5\n+    e: cython.typing.ClassVar[list] = []",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r499792776",
            "id": 499792776,
            "in_reply_to_id": 499352761,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc5Mjc3Ng==",
            "original_commit_id": "6956615ac956190a819fbf0c493adba20f3cd39a",
            "original_line": 15,
            "original_position": 15,
            "original_start_line": 13,
            "path": "docs/examples/userguide/extension_types/dataclass.pyx",
            "position": null,
            "pull_request_review_id": 502316244,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/499792776",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r502886930"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/502886930"
                }
            },
            "author_association": "COLLABORATOR",
            "body": "I won't take this exact suggestion but I'll make a similar change - `classvar` is actually from `typing` instead.",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2020-10-11T08:56:32Z",
            "diff_hunk": "@@ -198,6 +198,8 @@ class PyrexType(BaseType):\n     #  is_buffer             boolean     Is buffer access type\n     #  is_pythran_expr       boolean     Is Pythran expr\n     #  is_numpy_buffer       boolean     Is Numpy array buffer\n+    #  is_initvar            boolean     Is a dataclass InitVar\n+    #  is_classvar            boolean     Is a dataclass ClassVar",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r502886930",
            "id": 502886930,
            "in_reply_to_id": 499361671,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg4NjkzMA==",
            "original_commit_id": "6956615ac956190a819fbf0c493adba20f3cd39a",
            "original_line": 202,
            "original_position": 5,
            "original_start_line": 201,
            "path": "Cython/Compiler/PyrexTypes.py",
            "position": null,
            "pull_request_review_id": 506158547,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/502886930",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r502887205"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/502887205"
                }
            },
            "author_association": "COLLABORATOR",
            "body": "Because `ClassVar` comes from typing rather than `dataclasses` so I was using the same mechanism to handle both modules.\r\n\r\nIt's possible it may not be necessary though. Not sure yet.",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2020-10-11T08:59:03Z",
            "diff_hunk": "@@ -0,0 +1,82 @@\n+///////////////////// ModuleLoader.proto //////////////////////////\n+\n+static PyObject* __Pyx_LoadInternalModule(const char* name, const char* fallback_code); /* proto */\n+\n+//////////////////// ModuleLoader ///////////////////////\n+//@requires: CommonStructures.c::FetchSharedCythonModule\n+\n+static PyObject* __Pyx_LoadInternalModule(const char* name, const char* fallback_code) {\n+    // In supporting dataclasses we want to be able to use directives like:\n+    //  cython.dataclasses.dataclass, cython.dataclasses.field, cython.dataclasses.InitVar\n+    //   (based on the Standard Library dataclasses module)\n+    //  cython.typing.ClassVar (based on the standard library tying module)\n+    // These are processed efficiently by Cython as much as possible, but if they are treated\n+    // as a Python object then the objects from the standard library module should be substituted.\n+    // If those objects aren't available (due to Python version) then a simple fallback is substituted\n+    // instead, which largely just fails with a not-implemented error.\n+    //\n+    // The fallbacks are placed in the \"shared abi module\" as a convenient internal place to\n+    // store them\n+\n+    PyObject *shared_abi_module = 0, *module = 0;\n+\n+    shared_abi_module = __Pyx_FetchSharedCythonABIModule();\n+    if (!shared_abi_module) return NULL;\n+\n+    if (PyObject_HasAttrString(shared_abi_module, name)) {\n+        PyObject* result = PyObject_GetAttrString(shared_abi_module, name);\n+        Py_DECREF(shared_abi_module);\n+        return result;\n+    }\n+\n+    // the best and simplest case is simply to defer to the standard library (if available)\n+    module = PyImport_ImportModule(name);\n+    if (!module) {\n+        PyObject *localDict, *runValue, *builtins, *modulename;\n+        if (PyErr_ExceptionMatches(PyExc_ImportError)) {\n+            PyErr_Clear();  // this is reasonably likely (especially on older versions of Python)\n+        } else {\n+            goto bad;\n+        }\n+        modulename = PyBytes_FromFormat(\"_cython_\" CYTHON_ABI \".%s\", name);\n+        if (!modulename) goto bad;\n+#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_CPYTHON\n+        module = PyImport_AddModuleObject(modulename); // borrowed\n+#else\n+        module = PyImport_AddModule(PyBytes_AsString(modulename)); // borrowed\n+#endif\n+        Py_DECREF(modulename);\n+        if (!module) goto bad;\n+        Py_INCREF(module);\n+        if (PyObject_SetAttrString(shared_abi_module, name, module)<0) goto bad;\n+        localDict = PyModule_GetDict(module); // borrowed\n+        if (!localDict) goto bad;\n+        builtins = PyEval_GetBuiltins(); // borrowed\n+        if (!builtins) goto bad;\n+        if (PyDict_SetItemString(localDict, \"__builtins__\", builtins) <0) goto bad;\n+\n+        runValue = PyRun_String(fallback_code, Py_file_input, localDict, localDict);\n+        if (!runValue) goto bad;\n+        Py_DECREF(runValue);\n+    }\n+    goto shared_cleanup;\n+\n+    bad:\n+        Py_CLEAR(module);\n+    shared_cleanup:\n+        Py_XDECREF(shared_abi_module);\n+    return module;\n+}\n+\n+///////////////////// SpecificModuleLoader.proto //////////////////////\n+//@substitute: tempita",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r502887205",
            "id": 502887205,
            "in_reply_to_id": 499355395,
            "line": 65,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg4NzIwNQ==",
            "original_commit_id": "6956615ac956190a819fbf0c493adba20f3cd39a",
            "original_line": 72,
            "original_position": 72,
            "original_start_line": null,
            "path": "Cython/Utility/Dataclasses.c",
            "position": 65,
            "pull_request_review_id": 506158547,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/502887205",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r546410153"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/546410153"
                }
            },
            "author_association": "COLLABORATOR",
            "body": "Right - with the current version of changes based on https://github.com/cython/cython/pull/3910 we don't need these any more.",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2020-12-20T18:08:51Z",
            "diff_hunk": "@@ -0,0 +1,15 @@\n+cimport cython\n+\n+@cython.dataclasses.dataclass\n+cdef class MyDataclass:\n+    # fields can be declared using annotations\n+    a: cython.int = 0\n+    b: double = cython.dataclasses.field(default_factory = lambda: 10, repr=False)\n+\n+    # fields can also be declared using `cdef`:\n+    cdef str c\n+    c = \"hello\"  # assignment of default value on a separate line\n+\n+    # cython equivalents to InitVar and typing.ClassVar also work\n+    d: cython.dataclasses.InitVar[double] = 5\n+    e: cython.typing.ClassVar[list] = []",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r546410153",
            "id": 546410153,
            "in_reply_to_id": 499352761,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQxMDE1Mw==",
            "original_commit_id": "6956615ac956190a819fbf0c493adba20f3cd39a",
            "original_line": 15,
            "original_position": 15,
            "original_start_line": 13,
            "path": "docs/examples/userguide/extension_types/dataclass.pyx",
            "position": null,
            "pull_request_review_id": 556039289,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/546410153",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r549092067"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/549092067"
                }
            },
            "author_association": "COLLABORATOR",
            "body": "Comment is updated slightly to clarify the reasoning.",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2020-12-27T09:59:44Z",
            "diff_hunk": "@@ -326,6 +326,10 @@ def normalise_encoding_name(option_name, encoding):\n     'c_string_type': one_of('bytes', 'bytearray', 'str', 'unicode'),\n     'c_string_encoding': normalise_encoding_name,\n     'trashcan': bool,\n+    'dataclasses.dataclass': Ellipsis,  # use Ellipsis as a flag not to attempt to analyse the arguments\n+                            # when the directive is applied",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r549092067",
            "id": 549092067,
            "in_reply_to_id": 499364447,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA5MjA2Nw==",
            "original_commit_id": "6956615ac956190a819fbf0c493adba20f3cd39a",
            "original_line": 330,
            "original_position": 5,
            "original_start_line": 329,
            "path": "Cython/Compiler/Options.py",
            "position": null,
            "pull_request_review_id": 558916859,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/549092067",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r549092096"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/549092096"
                }
            },
            "author_association": "COLLABORATOR",
            "body": "Not exactly what you suggested, but I think it gets simplified a lot by making the decision here in ExprNodes (since we have all the information needed).",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2020-12-27T10:00:06Z",
            "diff_hunk": "@@ -2008,11 +2008,20 @@ def declare_from_annotation(self, env, as_target=False):\n                           \"'%s' cannot be specialized since its type is not a fused argument to this function\" %\n                           self.name)\n                     atype = error_type\n-\n-            entry = self.entry = env.declare_var(name, atype, self.pos, is_cdef=not as_target)\n+            kwds = {}\n+            if 'dataclasses.dataclass' in env.directives:\n+                # handle \"frozen\" directive - full inspection of the dataclass directives happens\n+                # in Dataclass.py\n+                frozen_directive = env.directives['dataclasses.dataclass']\n+                if frozen_directive:\n+                    frozen_directive = frozen_directive[1].get('frozen', None)\n+                is_frozen = frozen_directive and frozen_directive.is_literal and frozen_directive.value\n+                kwds = {'visibility': 'readonly?' if is_frozen else 'public?'}",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r549092096",
            "id": 549092096,
            "in_reply_to_id": 499368461,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA5MjA5Ng==",
            "original_commit_id": "6956615ac956190a819fbf0c493adba20f3cd39a",
            "original_line": 2019,
            "original_position": 14,
            "original_start_line": null,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_review_id": 558916883,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/549092096",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r549092125"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/549092125"
                }
            },
            "author_association": "COLLABORATOR",
            "body": "I've added a guard to allow analyse_declarations be run twice on lambdas and generator expressions. I don't think it's possible to move the dataclass generation any earlier - it relies on the analyse_declarations stage having been run so that it know the types of things",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2020-12-27T10:00:24Z",
            "diff_hunk": "@@ -0,0 +1,629 @@\n+# functions to transform a c class into a dataclass\n+\n+from collections import OrderedDict\n+\n+from .Errors import error, warning\n+from . import ExprNodes, Nodes, PyrexTypes\n+from .Code import UtilityCode, TempitaUtilityCode\n+from .Visitor import VisitorTransform\n+from . import UtilNodes, Builtin, Naming\n+from .StringEncoding import BytesLiteral, EncodedString\n+from .TreeFragment import TreeFragment\n+from .ParseTreeTransforms import (NormalizeTree, SkipDeclarations, AnalyseDeclarationsTransform,\n+                                  MarkClosureVisitor)\n+\n+def _make_module_callnode_and_utilcode(pos, name, py_code):\n+    loader_utilitycode = TempitaUtilityCode.load_cached(\"SpecificModuleLoader\", \"Dataclasses.c\",\n+                                                        context={'name': name, 'py_code': py_code})\n+    return (ExprNodes.PythonCapiCallNode(pos, \"__Pyx_Load_%s_Module\" % name,\n+                                PyrexTypes.CFuncType(PyrexTypes.py_object_type, []),\n+                                utility_code = loader_utilitycode,\n+                                args=[]),\n+            loader_utilitycode)\n+\n+def make_dataclasses_module_callnode_and_utilcode(pos):\n+    python_utility_code = UtilityCode.load_cached(\"Dataclasses_fallback\", \"Dataclasses.py\")\n+    python_utility_code = EncodedString(python_utility_code.impl)\n+    return _make_module_callnode_and_utilcode(pos, \"dataclasses\", python_utility_code.as_c_string_literal())\n+def make_dataclasses_module_callnode(pos):\n+    return make_dataclasses_module_callnode_and_utilcode(pos)[0]\n+def make_typing_module_callnode(pos):\n+    python_utility_code = UtilityCode.load_cached(\"Typing_fallback\", \"Dataclasses.py\")\n+    python_utility_code = EncodedString(python_utility_code.impl)\n+    return _make_module_callnode_and_utilcode(pos, \"typing\", python_utility_code.as_c_string_literal())[0]\n+\n+_INTERNAL_DEFAULTSHOLDER_NAME = EncodedString('__pyx_dataclass_defaults')\n+\n+def make_common_utilitycode(scope):\n+    scope.global_scope().use_utility_code(make_dataclasses_module_callnode_and_utilcode(None)[1])\n+\n+\n+class RemoveAssignments(VisitorTransform, SkipDeclarations):\n+    def __init__(self, names):\n+        super(RemoveAssignments, self).__init__()\n+        self.names = names\n+        self.removed_assignments = {}\n+\n+    def visit_CClassNode(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+    def visit_PyClassNode(self, node):\n+        return node  # go no further\n+\n+    def visit_FuncDefNode(self, node):\n+        return node  # go no further\n+\n+    def visit_SingleAssignmentNode(self, node):\n+        if node.lhs.is_name and node.lhs.name in self.names:\n+            if node.lhs.name in self.removed_assignments:\n+                warning(node.pos, (\"Multiple assignments for '%s' in dataclass; \"\n+                                   \"using most recent\") % node.lhs.name, 1)\n+            self.removed_assignments[node.lhs.name] = node.rhs\n+            return []\n+        return node\n+\n+    # I believe cascaded assignment is always a syntax error with decorators\n+    # so can be ignored\n+\n+    def visit_Node(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+class _MISSING_TYPE:\n+    pass\n+MISSING = _MISSING_TYPE()\n+\n+def process_class_get_fields(node):\n+    _TrueNode = ExprNodes.BoolNode(node.pos, value=True)\n+    _FalseNode = ExprNodes.BoolNode(node.pos, value=False)\n+    _NoneNode = ExprNodes.NoneNode(node.pos)\n+\n+    class Field:\n+        \"\"\"\n+        Field is based on the dataclasses.field class from the standard library module.\n+        It is used internally during the generation of Cython dataclasses to keep track\n+        of the settings for individual attributes.\n+\n+        Attributes of this class are stored as nodes so they can be used in code construction\n+        more readily (i.e. we store BoolNode rather than bool)\n+        The class (+ _TrueNode, _FalseNode and _NoneNode) are defined inside a function\n+        that when _TrueNode (etc) are used as default arguments they can have a useful pos\n+        \"\"\"\n+        default = MISSING\n+        default_factory = MISSING\n+        private = False\n+        def __init__(self, default=MISSING, default_factory=MISSING,\n+                        repr=_TrueNode, hash=_NoneNode, init=_TrueNode,\n+                        compare=_TrueNode, metadata=_NoneNode,\n+                        is_initvar=False):\n+            if default is not MISSING:\n+                self.default = default\n+            if default_factory is not MISSING:\n+                self.default_factory = default_factory\n+            self.repr = repr\n+            self.hash = hash\n+            self.init = init\n+            self.compare = compare\n+            self.metadata = metadata\n+            self.is_initvar = is_initvar\n+\n+            for field_name in (\"repr\", \"hash\", \"init\", \"compare\", \"metadata\"):\n+                field_value = getattr(self, field_name)\n+                if not field_value.is_literal:\n+                    error(field_value.pos, \"cython.dataclasses.field parameter '%s' must be a literal value\"\n+                            % field_name)\n+\n+    var_entries = node.scope.var_entries\n+    # order of definition is used in the dataclass\n+    var_entries = sorted(var_entries, key=lambda entry: entry.pos)\n+    var_names = [ entry.name for entry in var_entries ]\n+\n+    # remove assignments for stat_list\n+    transform = RemoveAssignments(var_names)\n+    transform(node)\n+\n+    if node.base_type and node.base_type.dataclass_fields:\n+        fields = node.base_type.dataclass_fields.copy()\n+    else:\n+        fields = OrderedDict()\n+    for entry in var_entries:\n+        name = entry.name\n+        is_initvar = entry.type.is_initvar\n+        if name in transform.removed_assignments:\n+            assignment = transform.removed_assignments[name]\n+            if (isinstance(assignment, ExprNodes.CallNode)\n+                    and assignment.function.as_cython_attribute() == \"dataclasses.field\"):\n+                # I believe most of this is well-enforced when it's treated as a directive\n+                # but it doesn't hurt to make sure\n+                if (not isinstance(assignment, ExprNodes.GeneralCallNode)\n+                        or not isinstance(assignment.positional_args, ExprNodes.TupleNode)\n+                        or assignment.positional_args.args\n+                        or not isinstance(assignment.keyword_args, ExprNodes.DictNode)):\n+                    error(assignment.pos, \"Call to 'cython.dataclasses.field' must only consist \"\n+                          \"of compile-time keyword arguments\")\n+                    continue\n+                keyword_args = { k.value: v for k, v in assignment.keyword_args.key_value_pairs }\n+                if 'default' in keyword_args and 'default_factory' in keyword_args:\n+                    error(assignment.pos, \"You cannot specify both 'default' and 'default_factory'\"\n+                          \" for a dataclass member\")\n+                    continue\n+                field = Field(**keyword_args)\n+            else:\n+                if isinstance(assignment, ExprNodes.CallNode):\n+                    func = assignment.function\n+                    if ((func.is_name and func.name == \"field\")\n+                            or (isinstance(func, ExprNodes.AttributeNode)\n+                                and func.attribute == \"field\")):\n+                        warning(assignment.pos, \"Do you mean cython.dataclasses.field instead?\", 1)\n+                if assignment.type in [Builtin.list_type,\n+                                    Builtin.dict_type,\n+                                    Builtin.set_type]:\n+                    # The standard library module generates a TypeError at runtime\n+                    # in this situation\n+                    error(assignment.pos, \"Mutable default passed argument for '{0}' - \"\n+                          \"use 'default_factory' instead\".format(name))\n+\n+                field = Field(default=assignment)\n+        else:\n+            field = Field()\n+        field.is_initvar = is_initvar\n+        if entry.visibility == \"private\":\n+            field.private = True\n+        fields[name] = field\n+    node.entry.type.dataclass_fields = fields\n+    return fields\n+\n+def handle_cclass_dataclass(node, dataclass_args, analyse_decs_transform):\n+    from .ExprNodes import (AttributeNode, TupleNode, NameNode,\n+                            GeneralCallNode, DictNode,\n+                            IdentifierStringNode, BoolNode, DictItemNode)\n+    # default argument values from https://docs.python.org/3/library/dataclasses.html\n+    kwargs = dict(init=True, repr=True, eq=True,\n+                  order=False, unsafe_hash=False, frozen=False)\n+    if dataclass_args is not None:\n+        if dataclass_args[0]:\n+            error(node.pos, \"cython.dataclasses.dataclass takes no positional arguments\")\n+        for k, v in dataclass_args[1].items():\n+            if k not in kwargs:\n+                error(node.pos,\n+                      \"Unrecognised keyword argument '{0}' to cython.dataclasses.dataclass\".format(k))\n+            if not isinstance(v, ExprNodes.BoolNode):\n+                error(node.pos,\n+                      \"Arguments to cython.dataclasses.dataclass must be True or False\")\n+            kwargs[k] = v\n+\n+    dataclass_scope = make_common_utilitycode(node.scope)\n+    fields = process_class_get_fields(node)\n+\n+    dataclass_module = make_dataclasses_module_callnode(node.pos)\n+\n+    # create __dataclass_params__ attribute\n+    dataclass_params_func = AttributeNode(node.pos, obj=dataclass_module,\n+                                            attribute=EncodedString(\"_DataclassParams\"))\n+    dataclass_params_keywords = DictNode.from_pairs(node.pos,\n+            [ (IdentifierStringNode(node.pos, value=EncodedString(k)),\n+                BoolNode(node.pos, value=v))\n+                for k, v in kwargs.items() ])\n+    dataclass_params = GeneralCallNode(node.pos,\n+                                    function = dataclass_params_func,\n+                                    positional_args = TupleNode(node.pos, args=[]),\n+                                    keyword_args = dataclass_params_keywords)\n+    dataclass_params_assignment = \\\n+        Nodes.SingleAssignmentNode(node.pos,\n+                        lhs = NameNode(node.pos,\n+                                        name=EncodedString(\"__dataclass_params__\")),\n+                        rhs = dataclass_params)\n+\n+    dataclass_fields_stats = _setup_dataclass_fields(node, fields, dataclass_module)\n+\n+    stats = Nodes.StatListNode(node.pos,\n+                               stats=[dataclass_params_assignment]\n+                                    + dataclass_fields_stats)\n+\n+    init_stats = generate_init_code(kwargs['init'], node, fields)\n+    repr_stats = generate_repr_code(kwargs['repr'], node, fields)\n+    eq_stats = generate_eq_code(kwargs['eq'], node, fields)\n+    order_stats = generate_order_code(kwargs['order'], node, fields)\n+    hash_stats = generate_hash_code(kwargs['unsafe_hash'], kwargs['eq'], kwargs['frozen'],\n+                       node, fields)\n+\n+    stats.stats = stats.stats + init_stats + repr_stats + eq_stats + order_stats + hash_stats\n+\n+    # turn off annotation typing, so all arguments to __init__ are accepted as\n+    # generic objects and thus can accept _HAS_DEFAULT_FACTORY\n+    # type conversion comes later\n+    comp_directives = Nodes.CompilerDirectivesNode(node.pos,\n+        directives = node.scope.directives.copy(),\n+        body=stats)\n+    comp_directives.directives['annotation_typing'] = False\n+\n+    comp_directives.analyse_declarations(node.scope)\n+    # probably already in this scope, but it doesn't hurt to make sure\n+    analyse_decs_transform.enter_scope(node, node.scope)\n+    analyse_decs_transform.visit(comp_directives)\n+    analyse_decs_transform.exit_scope()\n+\n+    RemoveDontAnalyseDeclarations()(comp_directives)\n+    node.body.stats.append(comp_directives)\n+\n+def generate_init_code(init, node, fields):\n+    if not init or node.scope.lookup_here(\"__init__\"):\n+        return []\n+    # selfname behaviour copied from the cpython module\n+    selfname = \"__dataclass_self__\" if \"self\" in fields else \"self\"\n+    args = [selfname]\n+\n+    placeholders = {}\n+    placeholder_count = [0]\n+\n+    # create a temp to get _HAS_DEFAULT_FACTORY\n+    dataclass_module = make_dataclasses_module_callnode(node.pos)\n+    has_default_factory = ExprNodes.AttributeNode(node.pos,\n+                                        obj = dataclass_module,\n+                                        attribute = EncodedString(\"_HAS_DEFAULT_FACTORY\"))\n+\n+    def get_placeholder_name():\n+        while True:\n+            name = \"PLACEHOLDER_%s\" % placeholder_count[0]\n+            if (name not in placeholders\n+                    and name not in fields):\n+                # make sure name isn't already used and doesn't\n+                # conflict with a variable name (which is unlikely but possible)\n+                break\n+            placeholder_count[0] += 1\n+        return name\n+\n+    default_factory_placeholder = get_placeholder_name()\n+    placeholders[default_factory_placeholder] = has_default_factory\n+\n+    seen_default = False\n+    for name, field in fields.items():\n+        if not field.init.value:\n+            continue\n+        entry = node.scope.lookup(name)\n+        annotation = entry.pep563_annotation\n+        if annotation:\n+            annotation = u\": %s\" % annotation\n+        else:\n+            annotation = u\"\"\n+        assignment = u''\n+        if field.default is not MISSING or field.default_factory is not MISSING:\n+            seen_default = True\n+            if field.default_factory is not MISSING:\n+                ph_name = default_factory_placeholder\n+            else:\n+                ph_name = get_placeholder_name()\n+                placeholders[ph_name] = field.default  # should be node\n+            assignment = u\" = %s\" % ph_name\n+        elif seen_default:\n+            error(entry.pos, (\"non-default argument %s follows default argument \"\n+                             \"in dataclass __init__\") % name)\n+            return []\n+\n+        args.append(u\"%s%s%s\" % (name, annotation, assignment))\n+    args = u\", \".join(args)\n+    func_call = u\"def __init__(%s):\" % args\n+\n+    code_lines = [func_call,\n+                  \"    pass\",  # just in-case it's an empty body\n+                  ]\n+    for name, field in fields.items():\n+        if field.is_initvar:\n+            continue\n+        if field.default_factory is MISSING:\n+            if field.init.value:\n+                code_lines.append(u\"    %s.%s = %s\" % (selfname, name, name))\n+        else:\n+            ph_name = get_placeholder_name()\n+            placeholders[ph_name] = field.default_factory\n+            if field.init.value:\n+                code_lines.append(u\"    if %s is %s:\"\n+                                % (name, default_factory_placeholder))\n+                code_lines.append(u\"        %s.%s = %s()\"\n+                                % (selfname, name, ph_name))\n+                code_lines.append(u\"    else:\")\n+                code_lines.append(u\"        %s.%s = %s\" % (selfname, name, name))\n+            else:\n+                # still need to use the default factory to initialize\n+                code_lines.append(u\"    %s.%s = %s()\"\n+                                  % (selfname, name, ph_name))\n+    if node.scope.lookup(\"__post_init__\"):\n+        post_init_vars = \", \".join(name for name, field in fields.items()\n+                                    if field.is_initvar)\n+        code_lines.append(\"    %s.__post_init__(%s)\" % (selfname, post_init_vars))\n+    code_lines = u\"\\n\".join(code_lines)\n+\n+    code_tree = TreeFragment(code_lines, level='c_class',\n+                             pipeline=[NormalizeTree(node.scope),\n+                                       ]\n+                              ).substitute(placeholders)\n+\n+    return code_tree.stats\n+\n+\n+def generate_repr_code(repr, node, fields):\n+    if not repr or node.scope.lookup(\"__repr__\"):\n+        return []\n+    code_lines = [\"def __repr__(self):\"]\n+    strs = [ u\"%s={self.%s}\" % (name, name)\n+            for name, field in fields.items() if field.repr.value and not field.is_initvar ]\n+    format_string = u\", \".join(strs)\n+    code_lines.append(u\"    return f'{type(self).__name__}(%s)'\" % format_string)\n+    code_lines = u\"\\n\".join(code_lines)\n+\n+    code_tree = TreeFragment(code_lines,\n+                              level='c_class', pipeline=[NormalizeTree(None)]\n+                              ).substitute({})\n+    return code_tree.stats\n+\n+def generate_cmp_code(op, funcname, node, fields):\n+    if node.scope.lookup_here(funcname):\n+        return []  # already exists\n+\n+    names = [ name for name, field in fields.items()\n+                if (field.compare.value and not field.is_initvar) ]\n+\n+    if not names:\n+        return []  # no comparable types\n+\n+    code_lines = [\"def %s(self, other):\" % funcname,\n+                  \"    cdef %s other_cast\" % node.class_name,\n+                  \"    try:\",\n+                  \"        other_cast = other\",\n+                  \"    except TypeError:\",\n+                  \"        return NotImplemented\"]\n+\n+    for name in names:\n+        shared = \"if not (self.%s == other_cast.%s):\" % (name, name)\n+        if op == \"==\":\n+            code_lines.append(\"    %s return False\" % shared)\n+        else:\n+            code_lines.append(\"    %s return self.%s %s other_cast.%s\" %\n+                              (shared, name, op, name))\n+\n+    if \"=\" in op:\n+        code_lines.append(\"    return True\")\n+    else:\n+        code_lines.append(\"    return False\")\n+\n+    code_lines = u\"\\n\".join(code_lines)\n+\n+    code_tree = TreeFragment(code_lines,\n+                              level='c_class', pipeline=[NormalizeTree(None)]\n+                              ).substitute({})\n+    return code_tree.stats\n+\n+def generate_eq_code(eq, node, fields):\n+    if not eq:\n+        return []\n+    return generate_cmp_code(\"==\", \"__eq__\", node, fields)\n+\n+def generate_order_code(order, node, fields):\n+    if not order:\n+        return []\n+    stats = []\n+    for op, name in [(\"<\", \"__lt__\"),\n+                     (\"<=\", \"__le__\"),\n+                     (\">\", \"__gt__\"),\n+                     (\">=\", \"__ge__\")]:\n+        stats.extend(generate_cmp_code(op, name, node, fields))\n+    return stats\n+\n+def generate_hash_code(unsafe_hash, eq, frozen, node, fields):\n+    hash_entry = node.scope.lookup_here(\"__hash__\")\n+    if hash_entry:\n+        # TODO ideally assignment of __hash__ to None shouldn't trigger this\n+        # but difficult to get the right information here\n+        if unsafe_hash:\n+            error(node.pos, \"Request for dataclass unsafe_hash when a '__hash__' function\"\n+                  \" already exists\")\n+        return []\n+    if not unsafe_hash:\n+        if eq and not frozen:\n+            return [Nodes.SingleAssignmentNode(node.pos,\n+                                        lhs = ExprNodes.NameNode(node.pos, name=EncodedString(\"__hash__\")),\n+                                        rhs = ExprNodes.NoneNode(node.pos))]\n+        if not eq:\n+            return []\n+\n+    names = [ name for name, field in fields.items()\n+                if (not field.is_initvar and\n+                    (field.compare.value if field.hash.value is None else field.hash.value)) ]\n+    if not names:\n+        return []  # nothing to hash\n+\n+    # make a tuple of the hashes\n+    tpl = u\", \".join(u\"hash(self.%s)\" % name for name in names )\n+\n+    # if we're here we want to generate a hash\n+    code_lines = u\"\"\"def __hash__(self):\n+    return hash((%s))\n+\"\"\" % tpl\n+    code_tree = TreeFragment(code_lines,\n+                              level='c_class', pipeline=[NormalizeTree(None)]\n+                              ).substitute({})\n+    return code_tree.stats\n+\n+\n+class GetTypeNode(ExprNodes.ExprNode):\n+    # Tries to return a pytype_type if possible. However contains\n+    # some fallback provision if it turns out not to resolve to a Python object\n+    # Initialize with \"entry\"\n+\n+    subexprs = []\n+\n+    def __init__(self, entry):\n+        super(GetTypeNode, self).__init__(entry.pos, entry=entry)\n+\n+    def analyse_types(self, env):\n+        type = self.entry.type\n+\n+        if type.is_extension_type or type.is_builtin_type:\n+            return ExprNodes.RawCNameExprNode(self.pos, Builtin.type_type,\n+                                                type.typeptr_cname).analyse_types(env)\n+        else:\n+            names = None\n+            py_name = type.py_type_name()\n+            # int types can return \"(int, long)\"\n+            if py_name:\n+                names = py_name.split(\",\")\n+                names = [ n.strip(\"() \") for n in names ]\n+            if names:\n+                for name in names:\n+                    name = EncodedString(name)\n+                    nn = ExprNodes.NameNode(self.pos, name=name)\n+                    # try to set the entry now to prevent the user accidentally shadowing\n+                    # the name\n+                    nn.entry = env.builtin_scope().lookup(name)\n+                    if not nn.entry:\n+                        try:\n+                            nn.entry = env.declare_builtin(name, self.pos)\n+                        except:\n+                            pass  # not convinced a failure means much\n+                    if nn.entry:\n+                        return nn.analyse_types(env)\n+\n+        # otherwise we're left to return a string\n+        s = self.entry.pep563_annotation\n+        if not s:\n+            s = self.entry.type.declaration_code(\"\", for_display=1)\n+        return ExprNodes.StringNode(self.pos, value=s).analyse_types(env)\n+\n+class DontAnalyseDeclarationsNode(ExprNodes.ExprNode):",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r549092125",
            "id": 549092125,
            "in_reply_to_id": 499373073,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA5MjEyNQ==",
            "original_commit_id": "6956615ac956190a819fbf0c493adba20f3cd39a",
            "original_line": 493,
            "original_position": 493,
            "original_start_line": null,
            "path": "Cython/Compiler/Dataclass.py",
            "position": null,
            "pull_request_review_id": 558916899,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/549092125",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r579708333"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/579708333"
                }
            },
            "author_association": "MEMBER",
            "body": "This import seems unused now.",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2021-02-20T21:00:30Z",
            "diff_hunk": "@@ -1,6 +1,6 @@\n from __future__ import absolute_import\n \n-from .Symtab import ModuleScope\n+from .Symtab import ModuleScope, Entry",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r579708333",
            "id": 579708333,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTcwODMzMw==",
            "original_commit_id": "de0ff9e6da6dad8a774c33a88ff9273aad7813e0",
            "original_line": 3,
            "original_position": 4,
            "original_start_line": null,
            "path": "Cython/Compiler/CythonScope.py",
            "position": null,
            "pull_request_review_id": 594785037,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/579708333",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r579708532"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/579708532"
                }
            },
            "author_association": "MEMBER",
            "body": "Should be an `EncodedString`, judging by its usage. Same for the type names below, etc.",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2021-02-20T21:02:53Z",
            "diff_hunk": "@@ -171,3 +181,45 @@ def load_testscope_utility(cy_util_name, **kwargs):\n                                      test_cython_utility_dep])\n \n cythonview_testscope_utility_code = load_testscope_utility(\"View.TestScope\")\n+\n+_known_module_scopes = {}\n+\n+def get_known_python_import(qualified_name):\n+    # I don't think this is in the right place, but it isn't clear where it should be\n+\n+    qualified_name = qualified_name.split(\".\")\n+    module_name = qualified_name[0]",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r579708532",
            "id": 579708532,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTcwODUzMg==",
            "original_commit_id": "de0ff9e6da6dad8a774c33a88ff9273aad7813e0",
            "original_line": 191,
            "original_position": 54,
            "original_start_line": null,
            "path": "Cython/Compiler/CythonScope.py",
            "position": null,
            "pull_request_review_id": 594785037,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/579708532",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r579708717"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/579708717"
                }
            },
            "author_association": "MEMBER",
            "body": "Inconsistent indentation of the trailing lines. One indentation level should be 4 spaces.",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2021-02-20T21:05:13Z",
            "diff_hunk": "@@ -0,0 +1,593 @@\n+# functions to transform a c class into a dataclass\n+\n+from collections import OrderedDict\n+\n+from .Errors import error, warning\n+from . import ExprNodes, Nodes, PyrexTypes\n+from .Code import UtilityCode, TempitaUtilityCode\n+from .Visitor import VisitorTransform\n+from . import UtilNodes, Builtin, Naming\n+from .StringEncoding import BytesLiteral, EncodedString\n+from .TreeFragment import TreeFragment\n+from .ParseTreeTransforms import (NormalizeTree, SkipDeclarations, AnalyseDeclarationsTransform,\n+                                  MarkClosureVisitor)\n+\n+def make_dataclasses_module_callnode(pos):\n+    python_utility_code = UtilityCode.load_cached(\"Dataclasses_fallback\", \"Dataclasses.py\")\n+    python_utility_code = EncodedString(python_utility_code.impl)\n+    loader_utilitycode = TempitaUtilityCode.load_cached(\"SpecificModuleLoader\", \"Dataclasses.c\",\n+            context={'cname': \"dataclasses\", 'py_code': python_utility_code.as_c_string_literal()})\n+    return ExprNodes.PythonCapiCallNode(pos, \"__Pyx_Load_dataclasses_Module\",\n+                                PyrexTypes.CFuncType(PyrexTypes.py_object_type, []),\n+                                utility_code = loader_utilitycode,\n+                                args=[])",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r579708717",
            "id": 579708717,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTcwODcxNw==",
            "original_commit_id": "de0ff9e6da6dad8a774c33a88ff9273aad7813e0",
            "original_line": 23,
            "original_position": 23,
            "original_start_line": 18,
            "path": "Cython/Compiler/Dataclass.py",
            "position": null,
            "pull_request_review_id": 594785037,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/579708717",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r579709038"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/579709038"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nclass _MISSING_TYPE(object):\r\n```",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2021-02-20T21:07:15Z",
            "diff_hunk": "@@ -0,0 +1,593 @@\n+# functions to transform a c class into a dataclass\n+\n+from collections import OrderedDict\n+\n+from .Errors import error, warning\n+from . import ExprNodes, Nodes, PyrexTypes\n+from .Code import UtilityCode, TempitaUtilityCode\n+from .Visitor import VisitorTransform\n+from . import UtilNodes, Builtin, Naming\n+from .StringEncoding import BytesLiteral, EncodedString\n+from .TreeFragment import TreeFragment\n+from .ParseTreeTransforms import (NormalizeTree, SkipDeclarations, AnalyseDeclarationsTransform,\n+                                  MarkClosureVisitor)\n+\n+def make_dataclasses_module_callnode(pos):\n+    python_utility_code = UtilityCode.load_cached(\"Dataclasses_fallback\", \"Dataclasses.py\")\n+    python_utility_code = EncodedString(python_utility_code.impl)\n+    loader_utilitycode = TempitaUtilityCode.load_cached(\"SpecificModuleLoader\", \"Dataclasses.c\",\n+            context={'cname': \"dataclasses\", 'py_code': python_utility_code.as_c_string_literal()})\n+    return ExprNodes.PythonCapiCallNode(pos, \"__Pyx_Load_dataclasses_Module\",\n+                                PyrexTypes.CFuncType(PyrexTypes.py_object_type, []),\n+                                utility_code = loader_utilitycode,\n+                                args=[])\n+\n+_INTERNAL_DEFAULTSHOLDER_NAME = EncodedString('__pyx_dataclass_defaults')\n+\n+class RemoveAssignments(VisitorTransform, SkipDeclarations):\n+    def __init__(self, names):\n+        super(RemoveAssignments, self).__init__()\n+        self.names = names\n+        self.removed_assignments = {}\n+\n+    def visit_CClassNode(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+    def visit_PyClassNode(self, node):\n+        return node  # go no further\n+\n+    def visit_FuncDefNode(self, node):\n+        return node  # go no further\n+\n+    def visit_SingleAssignmentNode(self, node):\n+        if node.lhs.is_name and node.lhs.name in self.names:\n+            if node.lhs.name in self.removed_assignments:\n+                warning(node.pos, (\"Multiple assignments for '%s' in dataclass; \"\n+                                   \"using most recent\") % node.lhs.name, 1)\n+            self.removed_assignments[node.lhs.name] = node.rhs\n+            return []\n+        return node\n+\n+    # I believe cascaded assignment is always a syntax error with decorators\n+    # so can be ignored\n+\n+    def visit_Node(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+class _MISSING_TYPE:",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r579709038",
            "id": 579709038,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTcwOTAzOA==",
            "original_commit_id": "de0ff9e6da6dad8a774c33a88ff9273aad7813e0",
            "original_line": 59,
            "original_position": 59,
            "original_start_line": null,
            "path": "Cython/Compiler/Dataclass.py",
            "position": null,
            "pull_request_review_id": 594785037,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/579709038",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r579709424"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/579709424"
                }
            },
            "author_association": "MEMBER",
            "body": "Does this have to be a nested class?",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2021-02-20T21:09:47Z",
            "diff_hunk": "@@ -0,0 +1,593 @@\n+# functions to transform a c class into a dataclass\n+\n+from collections import OrderedDict\n+\n+from .Errors import error, warning\n+from . import ExprNodes, Nodes, PyrexTypes\n+from .Code import UtilityCode, TempitaUtilityCode\n+from .Visitor import VisitorTransform\n+from . import UtilNodes, Builtin, Naming\n+from .StringEncoding import BytesLiteral, EncodedString\n+from .TreeFragment import TreeFragment\n+from .ParseTreeTransforms import (NormalizeTree, SkipDeclarations, AnalyseDeclarationsTransform,\n+                                  MarkClosureVisitor)\n+\n+def make_dataclasses_module_callnode(pos):\n+    python_utility_code = UtilityCode.load_cached(\"Dataclasses_fallback\", \"Dataclasses.py\")\n+    python_utility_code = EncodedString(python_utility_code.impl)\n+    loader_utilitycode = TempitaUtilityCode.load_cached(\"SpecificModuleLoader\", \"Dataclasses.c\",\n+            context={'cname': \"dataclasses\", 'py_code': python_utility_code.as_c_string_literal()})\n+    return ExprNodes.PythonCapiCallNode(pos, \"__Pyx_Load_dataclasses_Module\",\n+                                PyrexTypes.CFuncType(PyrexTypes.py_object_type, []),\n+                                utility_code = loader_utilitycode,\n+                                args=[])\n+\n+_INTERNAL_DEFAULTSHOLDER_NAME = EncodedString('__pyx_dataclass_defaults')\n+\n+class RemoveAssignments(VisitorTransform, SkipDeclarations):\n+    def __init__(self, names):\n+        super(RemoveAssignments, self).__init__()\n+        self.names = names\n+        self.removed_assignments = {}\n+\n+    def visit_CClassNode(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+    def visit_PyClassNode(self, node):\n+        return node  # go no further\n+\n+    def visit_FuncDefNode(self, node):\n+        return node  # go no further\n+\n+    def visit_SingleAssignmentNode(self, node):\n+        if node.lhs.is_name and node.lhs.name in self.names:\n+            if node.lhs.name in self.removed_assignments:\n+                warning(node.pos, (\"Multiple assignments for '%s' in dataclass; \"\n+                                   \"using most recent\") % node.lhs.name, 1)\n+            self.removed_assignments[node.lhs.name] = node.rhs\n+            return []\n+        return node\n+\n+    # I believe cascaded assignment is always a syntax error with decorators\n+    # so can be ignored\n+\n+    def visit_Node(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+class _MISSING_TYPE:\n+    pass\n+MISSING = _MISSING_TYPE()\n+\n+def process_class_get_fields(node):\n+    _TrueNode = ExprNodes.BoolNode(node.pos, value=True)\n+    _FalseNode = ExprNodes.BoolNode(node.pos, value=False)\n+    _NoneNode = ExprNodes.NoneNode(node.pos)\n+\n+    class Field(object):",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r579709424",
            "id": 579709424,
            "line": 68,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTcwOTQyNA==",
            "original_commit_id": "de0ff9e6da6dad8a774c33a88ff9273aad7813e0",
            "original_line": 68,
            "original_position": 68,
            "original_start_line": null,
            "path": "Cython/Compiler/Dataclass.py",
            "position": 68,
            "pull_request_review_id": 594785037,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/579709424",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r579709964"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/579709964"
                }
            },
            "author_association": "MEMBER",
            "body": "Isn't there a specific exception to catch here? A bare `except` seems rather dangerous.",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2021-02-20T21:14:53Z",
            "diff_hunk": "@@ -0,0 +1,593 @@\n+# functions to transform a c class into a dataclass\n+\n+from collections import OrderedDict\n+\n+from .Errors import error, warning\n+from . import ExprNodes, Nodes, PyrexTypes\n+from .Code import UtilityCode, TempitaUtilityCode\n+from .Visitor import VisitorTransform\n+from . import UtilNodes, Builtin, Naming\n+from .StringEncoding import BytesLiteral, EncodedString\n+from .TreeFragment import TreeFragment\n+from .ParseTreeTransforms import (NormalizeTree, SkipDeclarations, AnalyseDeclarationsTransform,\n+                                  MarkClosureVisitor)\n+\n+def make_dataclasses_module_callnode(pos):\n+    python_utility_code = UtilityCode.load_cached(\"Dataclasses_fallback\", \"Dataclasses.py\")\n+    python_utility_code = EncodedString(python_utility_code.impl)\n+    loader_utilitycode = TempitaUtilityCode.load_cached(\"SpecificModuleLoader\", \"Dataclasses.c\",\n+            context={'cname': \"dataclasses\", 'py_code': python_utility_code.as_c_string_literal()})\n+    return ExprNodes.PythonCapiCallNode(pos, \"__Pyx_Load_dataclasses_Module\",\n+                                PyrexTypes.CFuncType(PyrexTypes.py_object_type, []),\n+                                utility_code = loader_utilitycode,\n+                                args=[])\n+\n+_INTERNAL_DEFAULTSHOLDER_NAME = EncodedString('__pyx_dataclass_defaults')\n+\n+class RemoveAssignments(VisitorTransform, SkipDeclarations):\n+    def __init__(self, names):\n+        super(RemoveAssignments, self).__init__()\n+        self.names = names\n+        self.removed_assignments = {}\n+\n+    def visit_CClassNode(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+    def visit_PyClassNode(self, node):\n+        return node  # go no further\n+\n+    def visit_FuncDefNode(self, node):\n+        return node  # go no further\n+\n+    def visit_SingleAssignmentNode(self, node):\n+        if node.lhs.is_name and node.lhs.name in self.names:\n+            if node.lhs.name in self.removed_assignments:\n+                warning(node.pos, (\"Multiple assignments for '%s' in dataclass; \"\n+                                   \"using most recent\") % node.lhs.name, 1)\n+            self.removed_assignments[node.lhs.name] = node.rhs\n+            return []\n+        return node\n+\n+    # I believe cascaded assignment is always a syntax error with decorators\n+    # so can be ignored\n+\n+    def visit_Node(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+class _MISSING_TYPE:\n+    pass\n+MISSING = _MISSING_TYPE()\n+\n+def process_class_get_fields(node):\n+    _TrueNode = ExprNodes.BoolNode(node.pos, value=True)\n+    _FalseNode = ExprNodes.BoolNode(node.pos, value=False)\n+    _NoneNode = ExprNodes.NoneNode(node.pos)\n+\n+    class Field(object):\n+        \"\"\"\n+        Field is based on the dataclasses.field class from the standard library module.\n+        It is used internally during the generation of Cython dataclasses to keep track\n+        of the settings for individual attributes.\n+\n+        Attributes of this class are stored as nodes so they can be used in code construction\n+        more readily (i.e. we store BoolNode rather than bool)\n+        The class (+ _TrueNode, _FalseNode and _NoneNode) are defined inside a function\n+        that when _TrueNode (etc) are used as default arguments they can have a useful pos\n+        \"\"\"\n+        default = MISSING\n+        default_factory = MISSING\n+        private = False\n+        def __init__(self, default=MISSING, default_factory=MISSING,\n+                        repr=_TrueNode, hash=_NoneNode, init=_TrueNode,\n+                        compare=_TrueNode, metadata=_NoneNode,\n+                        is_initvar=False):\n+            if default is not MISSING:\n+                self.default = default\n+            if default_factory is not MISSING:\n+                self.default_factory = default_factory\n+            self.repr = repr\n+            self.hash = hash\n+            self.init = init\n+            self.compare = compare\n+            self.metadata = metadata\n+            self.is_initvar = is_initvar\n+\n+            for field_name in (\"repr\", \"hash\", \"init\", \"compare\", \"metadata\"):\n+                field_value = getattr(self, field_name)\n+                if not field_value.is_literal:\n+                    error(field_value.pos, \"cython.dataclasses.field parameter '%s' must be a literal value\"\n+                            % field_name)\n+\n+    var_entries = node.scope.var_entries\n+    # order of definition is used in the dataclass\n+    var_entries = sorted(var_entries, key=lambda entry: entry.pos)\n+    var_names = [ entry.name for entry in var_entries ]\n+\n+    # remove assignments for stat_list\n+    transform = RemoveAssignments(var_names)\n+    transform(node)\n+\n+    if node.base_type and node.base_type.dataclass_fields:\n+        fields = node.base_type.dataclass_fields.copy()\n+    else:\n+        fields = OrderedDict()\n+    for entry in var_entries:\n+        name = entry.name\n+        is_initvar = entry.type.is_dataclasses_initvar\n+        if name in transform.removed_assignments:\n+            assignment = transform.removed_assignments[name]\n+            if (isinstance(assignment, ExprNodes.CallNode)\n+                    and assignment.function.as_cython_attribute() == \"dataclasses.field\"):\n+                # I believe most of this is well-enforced when it's treated as a directive\n+                # but it doesn't hurt to make sure\n+                if (not isinstance(assignment, ExprNodes.GeneralCallNode)\n+                        or not isinstance(assignment.positional_args, ExprNodes.TupleNode)\n+                        or assignment.positional_args.args\n+                        or not isinstance(assignment.keyword_args, ExprNodes.DictNode)):\n+                    error(assignment.pos, \"Call to 'cython.dataclasses.field' must only consist \"\n+                          \"of compile-time keyword arguments\")\n+                    continue\n+                keyword_args = { k.value: v for k, v in assignment.keyword_args.key_value_pairs }\n+                if 'default' in keyword_args and 'default_factory' in keyword_args:\n+                    error(assignment.pos, \"You cannot specify both 'default' and 'default_factory'\"\n+                          \" for a dataclass member\")\n+                    continue\n+                field = Field(**keyword_args)\n+            else:\n+                if isinstance(assignment, ExprNodes.CallNode):\n+                    func = assignment.function\n+                    if ((func.is_name and func.name == \"field\")\n+                            or (isinstance(func, ExprNodes.AttributeNode)\n+                                and func.attribute == \"field\")):\n+                        warning(assignment.pos, \"Do you mean cython.dataclasses.field instead?\", 1)\n+                if assignment.type in [Builtin.list_type,\n+                                    Builtin.dict_type,\n+                                    Builtin.set_type]:\n+                    # The standard library module generates a TypeError at runtime\n+                    # in this situation\n+                    error(assignment.pos, \"Mutable default passed argument for '{0}' - \"\n+                          \"use 'default_factory' instead\".format(name))\n+\n+                field = Field(default=assignment)\n+        else:\n+            field = Field()\n+        field.is_initvar = is_initvar\n+        if entry.visibility == \"private\":\n+            field.private = True\n+        fields[name] = field\n+    node.entry.type.dataclass_fields = fields\n+    return fields\n+\n+def handle_cclass_dataclass(node, dataclass_args, analyse_decs_transform):\n+    from .ExprNodes import (AttributeNode, TupleNode, NameNode,\n+                            GeneralCallNode, DictNode,\n+                            IdentifierStringNode, BoolNode, DictItemNode)\n+    # default argument values from https://docs.python.org/3/library/dataclasses.html\n+    kwargs = dict(init=True, repr=True, eq=True,\n+                  order=False, unsafe_hash=False, frozen=False)\n+    if dataclass_args is not None:\n+        if dataclass_args[0]:\n+            error(node.pos, \"cython.dataclasses.dataclass takes no positional arguments\")\n+        for k, v in dataclass_args[1].items():\n+            if k not in kwargs:\n+                error(node.pos,\n+                      \"Unrecognised keyword argument '{0}' to cython.dataclasses.dataclass\".format(k))\n+            if not isinstance(v, ExprNodes.BoolNode):\n+                error(node.pos,\n+                      \"Arguments to cython.dataclasses.dataclass must be True or False\")\n+            kwargs[k] = v\n+\n+    fields = process_class_get_fields(node)\n+\n+    dataclass_module = make_dataclasses_module_callnode(node.pos)\n+\n+    # create __dataclass_params__ attribute\n+    dataclass_params_func = AttributeNode(node.pos, obj=dataclass_module,\n+                                            attribute=EncodedString(\"_DataclassParams\"))\n+    dataclass_params_keywords = DictNode.from_pairs(node.pos,\n+            [ (IdentifierStringNode(node.pos, value=EncodedString(k)),\n+                BoolNode(node.pos, value=v))\n+                for k, v in kwargs.items() ])\n+    dataclass_params = GeneralCallNode(node.pos,\n+                                    function = dataclass_params_func,\n+                                    positional_args = TupleNode(node.pos, args=[]),\n+                                    keyword_args = dataclass_params_keywords)\n+    dataclass_params_assignment = \\\n+        Nodes.SingleAssignmentNode(node.pos,\n+                        lhs = NameNode(node.pos,\n+                                        name=EncodedString(\"__dataclass_params__\")),\n+                        rhs = dataclass_params)\n+\n+    dataclass_fields_stats = _set_up_dataclass_fields(node, fields, dataclass_module)\n+\n+    stats = Nodes.StatListNode(node.pos,\n+                               stats=[dataclass_params_assignment]\n+                                    + dataclass_fields_stats)\n+\n+    init_stats = generate_init_code(kwargs['init'], node, fields)\n+    repr_stats = generate_repr_code(kwargs['repr'], node, fields)\n+    eq_stats = generate_eq_code(kwargs['eq'], node, fields)\n+    order_stats = generate_order_code(kwargs['order'], node, fields)\n+    hash_stats = generate_hash_code(kwargs['unsafe_hash'], kwargs['eq'], kwargs['frozen'],\n+                       node, fields)\n+\n+    stats.stats = stats.stats + init_stats + repr_stats + eq_stats + order_stats + hash_stats\n+\n+    # turn off annotation typing, so all arguments to __init__ are accepted as\n+    # generic objects and thus can accept _HAS_DEFAULT_FACTORY\n+    # type conversion comes later\n+    comp_directives = Nodes.CompilerDirectivesNode(node.pos,\n+        directives = node.scope.directives.copy(),\n+        body=stats)\n+    comp_directives.directives['annotation_typing'] = False\n+\n+    comp_directives.analyse_declarations(node.scope)\n+    # probably already in this scope, but it doesn't hurt to make sure\n+    analyse_decs_transform.enter_scope(node, node.scope)\n+    analyse_decs_transform.visit(comp_directives)\n+    analyse_decs_transform.exit_scope()\n+\n+    node.body.stats.append(comp_directives)\n+\n+def generate_init_code(init, node, fields):\n+    if not init or node.scope.lookup_here(\"__init__\"):\n+        return []\n+    # selfname behaviour copied from the cpython module\n+    selfname = \"__dataclass_self__\" if \"self\" in fields else \"self\"\n+    args = [selfname]\n+\n+    placeholders = {}\n+    placeholder_count = [0]\n+\n+    # create a temp to get _HAS_DEFAULT_FACTORY\n+    dataclass_module = make_dataclasses_module_callnode(node.pos)\n+    has_default_factory = ExprNodes.AttributeNode(node.pos,\n+                                        obj = dataclass_module,\n+                                        attribute = EncodedString(\"_HAS_DEFAULT_FACTORY\"))\n+\n+    def get_placeholder_name():\n+        while True:\n+            name = \"PLACEHOLDER_%s\" % placeholder_count[0]\n+            if (name not in placeholders\n+                    and name not in fields):\n+                # make sure name isn't already used and doesn't\n+                # conflict with a variable name (which is unlikely but possible)\n+                break\n+            placeholder_count[0] += 1\n+        return name\n+\n+    default_factory_placeholder = get_placeholder_name()\n+    placeholders[default_factory_placeholder] = has_default_factory\n+\n+    seen_default = False\n+    for name, field in fields.items():\n+        if not field.init.value:\n+            continue\n+        entry = node.scope.lookup(name)\n+        annotation = entry.annotation.string if entry.annotation else None\n+        if annotation:\n+            annotation = u\": %s\" % annotation.value\n+        else:\n+            annotation = u\"\"\n+        assignment = u''\n+        if field.default is not MISSING or field.default_factory is not MISSING:\n+            seen_default = True\n+            if field.default_factory is not MISSING:\n+                ph_name = default_factory_placeholder\n+            else:\n+                ph_name = get_placeholder_name()\n+                placeholders[ph_name] = field.default  # should be node\n+            assignment = u\" = %s\" % ph_name\n+        elif seen_default:\n+            error(entry.pos, (\"non-default argument %s follows default argument \"\n+                             \"in dataclass __init__\") % name)\n+            return []\n+\n+        args.append(u\"%s%s%s\" % (name, annotation, assignment))\n+    args = u\", \".join(args)\n+    func_call = u\"def __init__(%s):\" % args\n+\n+    code_lines = [func_call,\n+                  \"    pass\",  # just in-case it's an empty body\n+                  ]\n+    for name, field in fields.items():\n+        if field.is_initvar:\n+            continue\n+        if field.default_factory is MISSING:\n+            if field.init.value:\n+                code_lines.append(u\"    %s.%s = %s\" % (selfname, name, name))\n+        else:\n+            ph_name = get_placeholder_name()\n+            placeholders[ph_name] = field.default_factory\n+            if field.init.value:\n+                code_lines.append(u\"    if %s is %s:\"\n+                                % (name, default_factory_placeholder))\n+                code_lines.append(u\"        %s.%s = %s()\"\n+                                % (selfname, name, ph_name))\n+                code_lines.append(u\"    else:\")\n+                code_lines.append(u\"        %s.%s = %s\" % (selfname, name, name))\n+            else:\n+                # still need to use the default factory to initialize\n+                code_lines.append(u\"    %s.%s = %s()\"\n+                                  % (selfname, name, ph_name))\n+    if node.scope.lookup(\"__post_init__\"):\n+        post_init_vars = \", \".join(name for name, field in fields.items()\n+                                    if field.is_initvar)\n+        code_lines.append(\"    %s.__post_init__(%s)\" % (selfname, post_init_vars))\n+    code_lines = u\"\\n\".join(code_lines)\n+\n+    code_tree = TreeFragment(code_lines, level='c_class',\n+                             pipeline=[NormalizeTree(node.scope),\n+                                       ]\n+                              ).substitute(placeholders)\n+\n+    return code_tree.stats\n+\n+\n+def generate_repr_code(repr, node, fields):\n+    if not repr or node.scope.lookup(\"__repr__\"):\n+        return []\n+    code_lines = [\"def __repr__(self):\"]\n+    strs = [ u\"%s={self.%s}\" % (name, name)\n+            for name, field in fields.items() if field.repr.value and not field.is_initvar ]\n+    format_string = u\", \".join(strs)\n+    code_lines.append(u\"    return f'{type(self).__name__}(%s)'\" % format_string)\n+    code_lines = u\"\\n\".join(code_lines)\n+\n+    code_tree = TreeFragment(code_lines,\n+                              level='c_class', pipeline=[NormalizeTree(None)]\n+                              ).substitute({})\n+    return code_tree.stats\n+\n+def generate_cmp_code(op, funcname, node, fields):\n+    if node.scope.lookup_here(funcname):\n+        return []  # already exists\n+\n+    names = [ name for name, field in fields.items()\n+                if (field.compare.value and not field.is_initvar) ]\n+\n+    if not names:\n+        return []  # no comparable types\n+\n+    code_lines = [\"def %s(self, other):\" % funcname,\n+                  \"    cdef %s other_cast\" % node.class_name,\n+                  \"    try:\",\n+                  \"        other_cast = other\",\n+                  \"    except TypeError:\",\n+                  \"        return NotImplemented\"]\n+\n+    for name in names:\n+        shared = \"if not (self.%s == other_cast.%s):\" % (name, name)\n+        if op == \"==\":\n+            code_lines.append(\"    %s return False\" % shared)\n+        else:\n+            code_lines.append(\"    %s return self.%s %s other_cast.%s\" %\n+                              (shared, name, op, name))\n+\n+    if \"=\" in op:\n+        code_lines.append(\"    return True\")\n+    else:\n+        code_lines.append(\"    return False\")\n+\n+    code_lines = u\"\\n\".join(code_lines)\n+\n+    code_tree = TreeFragment(code_lines,\n+                              level='c_class', pipeline=[NormalizeTree(None)]\n+                              ).substitute({})\n+    return code_tree.stats\n+\n+def generate_eq_code(eq, node, fields):\n+    if not eq:\n+        return []\n+    return generate_cmp_code(\"==\", \"__eq__\", node, fields)\n+\n+def generate_order_code(order, node, fields):\n+    if not order:\n+        return []\n+    stats = []\n+    for op, name in [(\"<\", \"__lt__\"),\n+                     (\"<=\", \"__le__\"),\n+                     (\">\", \"__gt__\"),\n+                     (\">=\", \"__ge__\")]:\n+        stats.extend(generate_cmp_code(op, name, node, fields))\n+    return stats\n+\n+def generate_hash_code(unsafe_hash, eq, frozen, node, fields):\n+    hash_entry = node.scope.lookup_here(\"__hash__\")\n+    if hash_entry:\n+        # TODO ideally assignment of __hash__ to None shouldn't trigger this\n+        # but difficult to get the right information here\n+        if unsafe_hash:\n+            error(node.pos, \"Request for dataclass unsafe_hash when a '__hash__' function\"\n+                  \" already exists\")\n+        return []\n+    if not unsafe_hash:\n+        if eq and not frozen:\n+            return [Nodes.SingleAssignmentNode(node.pos,\n+                                        lhs = ExprNodes.NameNode(node.pos, name=EncodedString(\"__hash__\")),\n+                                        rhs = ExprNodes.NoneNode(node.pos))]\n+        if not eq:\n+            return []\n+\n+    names = [ name for name, field in fields.items()\n+                if (not field.is_initvar and\n+                    (field.compare.value if field.hash.value is None else field.hash.value)) ]\n+    if not names:\n+        return []  # nothing to hash\n+\n+    # make a tuple of the hashes\n+    tpl = u\", \".join(u\"hash(self.%s)\" % name for name in names )\n+\n+    # if we're here we want to generate a hash\n+    code_lines = u\"\"\"def __hash__(self):\n+    return hash((%s))\n+\"\"\" % tpl\n+    code_tree = TreeFragment(code_lines,\n+                              level='c_class', pipeline=[NormalizeTree(None)]\n+                              ).substitute({})\n+    return code_tree.stats\n+\n+\n+class GetTypeNode(ExprNodes.ExprNode):\n+    # Tries to return a pytype_type if possible. However contains\n+    # some fallback provision if it turns out not to resolve to a Python object\n+    # Initialize with \"entry\"\n+\n+    subexprs = []\n+\n+    def __init__(self, entry):\n+        super(GetTypeNode, self).__init__(entry.pos, entry=entry)\n+\n+    def analyse_types(self, env):\n+        type = self.entry.type\n+\n+        if type.is_extension_type or type.is_builtin_type:\n+            return ExprNodes.RawCNameExprNode(self.pos, Builtin.type_type,\n+                                                type.typeptr_cname).analyse_types(env)\n+        else:\n+            names = None\n+            py_name = type.py_type_name()\n+            # int types can return \"(int, long)\"\n+            if py_name:\n+                names = py_name.split(\",\")\n+                names = [ n.strip(\"() \") for n in names ]\n+            if names:\n+                for name in names:\n+                    name = EncodedString(name)\n+                    nn = ExprNodes.NameNode(self.pos, name=name)\n+                    # try to set the entry now to prevent the user accidentally shadowing\n+                    # the name\n+                    nn.entry = env.builtin_scope().lookup(name)\n+                    if not nn.entry:\n+                        try:\n+                            nn.entry = env.declare_builtin(name, self.pos)\n+                        except:",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r579709964",
            "id": 579709964,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTcwOTk2NA==",
            "original_commit_id": "de0ff9e6da6dad8a774c33a88ff9273aad7813e0",
            "original_line": 466,
            "original_position": 466,
            "original_start_line": null,
            "path": "Cython/Compiler/Dataclass.py",
            "position": null,
            "pull_request_review_id": 594785037,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/579709964",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r579710259"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/579710259"
                }
            },
            "author_association": "MEMBER",
            "body": "Weird indentation.",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2021-02-20T21:17:24Z",
            "diff_hunk": "@@ -0,0 +1,593 @@\n+# functions to transform a c class into a dataclass\n+\n+from collections import OrderedDict\n+\n+from .Errors import error, warning\n+from . import ExprNodes, Nodes, PyrexTypes\n+from .Code import UtilityCode, TempitaUtilityCode\n+from .Visitor import VisitorTransform\n+from . import UtilNodes, Builtin, Naming\n+from .StringEncoding import BytesLiteral, EncodedString\n+from .TreeFragment import TreeFragment\n+from .ParseTreeTransforms import (NormalizeTree, SkipDeclarations, AnalyseDeclarationsTransform,\n+                                  MarkClosureVisitor)\n+\n+def make_dataclasses_module_callnode(pos):\n+    python_utility_code = UtilityCode.load_cached(\"Dataclasses_fallback\", \"Dataclasses.py\")\n+    python_utility_code = EncodedString(python_utility_code.impl)\n+    loader_utilitycode = TempitaUtilityCode.load_cached(\"SpecificModuleLoader\", \"Dataclasses.c\",\n+            context={'cname': \"dataclasses\", 'py_code': python_utility_code.as_c_string_literal()})\n+    return ExprNodes.PythonCapiCallNode(pos, \"__Pyx_Load_dataclasses_Module\",\n+                                PyrexTypes.CFuncType(PyrexTypes.py_object_type, []),\n+                                utility_code = loader_utilitycode,\n+                                args=[])\n+\n+_INTERNAL_DEFAULTSHOLDER_NAME = EncodedString('__pyx_dataclass_defaults')\n+\n+class RemoveAssignments(VisitorTransform, SkipDeclarations):\n+    def __init__(self, names):\n+        super(RemoveAssignments, self).__init__()\n+        self.names = names\n+        self.removed_assignments = {}\n+\n+    def visit_CClassNode(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+    def visit_PyClassNode(self, node):\n+        return node  # go no further\n+\n+    def visit_FuncDefNode(self, node):\n+        return node  # go no further\n+\n+    def visit_SingleAssignmentNode(self, node):\n+        if node.lhs.is_name and node.lhs.name in self.names:\n+            if node.lhs.name in self.removed_assignments:\n+                warning(node.pos, (\"Multiple assignments for '%s' in dataclass; \"\n+                                   \"using most recent\") % node.lhs.name, 1)\n+            self.removed_assignments[node.lhs.name] = node.rhs\n+            return []\n+        return node\n+\n+    # I believe cascaded assignment is always a syntax error with decorators\n+    # so can be ignored\n+\n+    def visit_Node(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+class _MISSING_TYPE:\n+    pass\n+MISSING = _MISSING_TYPE()\n+\n+def process_class_get_fields(node):\n+    _TrueNode = ExprNodes.BoolNode(node.pos, value=True)\n+    _FalseNode = ExprNodes.BoolNode(node.pos, value=False)\n+    _NoneNode = ExprNodes.NoneNode(node.pos)\n+\n+    class Field(object):\n+        \"\"\"\n+        Field is based on the dataclasses.field class from the standard library module.\n+        It is used internally during the generation of Cython dataclasses to keep track\n+        of the settings for individual attributes.\n+\n+        Attributes of this class are stored as nodes so they can be used in code construction\n+        more readily (i.e. we store BoolNode rather than bool)\n+        The class (+ _TrueNode, _FalseNode and _NoneNode) are defined inside a function\n+        that when _TrueNode (etc) are used as default arguments they can have a useful pos\n+        \"\"\"\n+        default = MISSING\n+        default_factory = MISSING\n+        private = False\n+        def __init__(self, default=MISSING, default_factory=MISSING,\n+                        repr=_TrueNode, hash=_NoneNode, init=_TrueNode,\n+                        compare=_TrueNode, metadata=_NoneNode,\n+                        is_initvar=False):\n+            if default is not MISSING:\n+                self.default = default\n+            if default_factory is not MISSING:\n+                self.default_factory = default_factory\n+            self.repr = repr\n+            self.hash = hash\n+            self.init = init\n+            self.compare = compare\n+            self.metadata = metadata\n+            self.is_initvar = is_initvar\n+\n+            for field_name in (\"repr\", \"hash\", \"init\", \"compare\", \"metadata\"):\n+                field_value = getattr(self, field_name)\n+                if not field_value.is_literal:\n+                    error(field_value.pos, \"cython.dataclasses.field parameter '%s' must be a literal value\"\n+                            % field_name)\n+\n+    var_entries = node.scope.var_entries\n+    # order of definition is used in the dataclass\n+    var_entries = sorted(var_entries, key=lambda entry: entry.pos)\n+    var_names = [ entry.name for entry in var_entries ]\n+\n+    # remove assignments for stat_list\n+    transform = RemoveAssignments(var_names)\n+    transform(node)\n+\n+    if node.base_type and node.base_type.dataclass_fields:\n+        fields = node.base_type.dataclass_fields.copy()\n+    else:\n+        fields = OrderedDict()\n+    for entry in var_entries:\n+        name = entry.name\n+        is_initvar = entry.type.is_dataclasses_initvar\n+        if name in transform.removed_assignments:\n+            assignment = transform.removed_assignments[name]\n+            if (isinstance(assignment, ExprNodes.CallNode)\n+                    and assignment.function.as_cython_attribute() == \"dataclasses.field\"):\n+                # I believe most of this is well-enforced when it's treated as a directive\n+                # but it doesn't hurt to make sure\n+                if (not isinstance(assignment, ExprNodes.GeneralCallNode)\n+                        or not isinstance(assignment.positional_args, ExprNodes.TupleNode)\n+                        or assignment.positional_args.args\n+                        or not isinstance(assignment.keyword_args, ExprNodes.DictNode)):\n+                    error(assignment.pos, \"Call to 'cython.dataclasses.field' must only consist \"\n+                          \"of compile-time keyword arguments\")\n+                    continue\n+                keyword_args = { k.value: v for k, v in assignment.keyword_args.key_value_pairs }\n+                if 'default' in keyword_args and 'default_factory' in keyword_args:\n+                    error(assignment.pos, \"You cannot specify both 'default' and 'default_factory'\"\n+                          \" for a dataclass member\")\n+                    continue\n+                field = Field(**keyword_args)\n+            else:\n+                if isinstance(assignment, ExprNodes.CallNode):\n+                    func = assignment.function\n+                    if ((func.is_name and func.name == \"field\")\n+                            or (isinstance(func, ExprNodes.AttributeNode)\n+                                and func.attribute == \"field\")):\n+                        warning(assignment.pos, \"Do you mean cython.dataclasses.field instead?\", 1)\n+                if assignment.type in [Builtin.list_type,\n+                                    Builtin.dict_type,\n+                                    Builtin.set_type]:",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r579710259",
            "id": 579710259,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTcxMDI1OQ==",
            "original_commit_id": "de0ff9e6da6dad8a774c33a88ff9273aad7813e0",
            "original_line": 147,
            "original_position": 147,
            "original_start_line": 145,
            "path": "Cython/Compiler/Dataclass.py",
            "position": null,
            "pull_request_review_id": 594785037,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/579710259",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r579710599"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/579710599"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    hash_stats = generate_hash_code(kwargs['unsafe_hash'], kwargs['eq'], kwargs['frozen'], node, fields)\r\n```",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2021-02-20T21:20:04Z",
            "diff_hunk": "@@ -0,0 +1,593 @@\n+# functions to transform a c class into a dataclass\n+\n+from collections import OrderedDict\n+\n+from .Errors import error, warning\n+from . import ExprNodes, Nodes, PyrexTypes\n+from .Code import UtilityCode, TempitaUtilityCode\n+from .Visitor import VisitorTransform\n+from . import UtilNodes, Builtin, Naming\n+from .StringEncoding import BytesLiteral, EncodedString\n+from .TreeFragment import TreeFragment\n+from .ParseTreeTransforms import (NormalizeTree, SkipDeclarations, AnalyseDeclarationsTransform,\n+                                  MarkClosureVisitor)\n+\n+def make_dataclasses_module_callnode(pos):\n+    python_utility_code = UtilityCode.load_cached(\"Dataclasses_fallback\", \"Dataclasses.py\")\n+    python_utility_code = EncodedString(python_utility_code.impl)\n+    loader_utilitycode = TempitaUtilityCode.load_cached(\"SpecificModuleLoader\", \"Dataclasses.c\",\n+            context={'cname': \"dataclasses\", 'py_code': python_utility_code.as_c_string_literal()})\n+    return ExprNodes.PythonCapiCallNode(pos, \"__Pyx_Load_dataclasses_Module\",\n+                                PyrexTypes.CFuncType(PyrexTypes.py_object_type, []),\n+                                utility_code = loader_utilitycode,\n+                                args=[])\n+\n+_INTERNAL_DEFAULTSHOLDER_NAME = EncodedString('__pyx_dataclass_defaults')\n+\n+class RemoveAssignments(VisitorTransform, SkipDeclarations):\n+    def __init__(self, names):\n+        super(RemoveAssignments, self).__init__()\n+        self.names = names\n+        self.removed_assignments = {}\n+\n+    def visit_CClassNode(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+    def visit_PyClassNode(self, node):\n+        return node  # go no further\n+\n+    def visit_FuncDefNode(self, node):\n+        return node  # go no further\n+\n+    def visit_SingleAssignmentNode(self, node):\n+        if node.lhs.is_name and node.lhs.name in self.names:\n+            if node.lhs.name in self.removed_assignments:\n+                warning(node.pos, (\"Multiple assignments for '%s' in dataclass; \"\n+                                   \"using most recent\") % node.lhs.name, 1)\n+            self.removed_assignments[node.lhs.name] = node.rhs\n+            return []\n+        return node\n+\n+    # I believe cascaded assignment is always a syntax error with decorators\n+    # so can be ignored\n+\n+    def visit_Node(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+class _MISSING_TYPE:\n+    pass\n+MISSING = _MISSING_TYPE()\n+\n+def process_class_get_fields(node):\n+    _TrueNode = ExprNodes.BoolNode(node.pos, value=True)\n+    _FalseNode = ExprNodes.BoolNode(node.pos, value=False)\n+    _NoneNode = ExprNodes.NoneNode(node.pos)\n+\n+    class Field(object):\n+        \"\"\"\n+        Field is based on the dataclasses.field class from the standard library module.\n+        It is used internally during the generation of Cython dataclasses to keep track\n+        of the settings for individual attributes.\n+\n+        Attributes of this class are stored as nodes so they can be used in code construction\n+        more readily (i.e. we store BoolNode rather than bool)\n+        The class (+ _TrueNode, _FalseNode and _NoneNode) are defined inside a function\n+        that when _TrueNode (etc) are used as default arguments they can have a useful pos\n+        \"\"\"\n+        default = MISSING\n+        default_factory = MISSING\n+        private = False\n+        def __init__(self, default=MISSING, default_factory=MISSING,\n+                        repr=_TrueNode, hash=_NoneNode, init=_TrueNode,\n+                        compare=_TrueNode, metadata=_NoneNode,\n+                        is_initvar=False):\n+            if default is not MISSING:\n+                self.default = default\n+            if default_factory is not MISSING:\n+                self.default_factory = default_factory\n+            self.repr = repr\n+            self.hash = hash\n+            self.init = init\n+            self.compare = compare\n+            self.metadata = metadata\n+            self.is_initvar = is_initvar\n+\n+            for field_name in (\"repr\", \"hash\", \"init\", \"compare\", \"metadata\"):\n+                field_value = getattr(self, field_name)\n+                if not field_value.is_literal:\n+                    error(field_value.pos, \"cython.dataclasses.field parameter '%s' must be a literal value\"\n+                            % field_name)\n+\n+    var_entries = node.scope.var_entries\n+    # order of definition is used in the dataclass\n+    var_entries = sorted(var_entries, key=lambda entry: entry.pos)\n+    var_names = [ entry.name for entry in var_entries ]\n+\n+    # remove assignments for stat_list\n+    transform = RemoveAssignments(var_names)\n+    transform(node)\n+\n+    if node.base_type and node.base_type.dataclass_fields:\n+        fields = node.base_type.dataclass_fields.copy()\n+    else:\n+        fields = OrderedDict()\n+    for entry in var_entries:\n+        name = entry.name\n+        is_initvar = entry.type.is_dataclasses_initvar\n+        if name in transform.removed_assignments:\n+            assignment = transform.removed_assignments[name]\n+            if (isinstance(assignment, ExprNodes.CallNode)\n+                    and assignment.function.as_cython_attribute() == \"dataclasses.field\"):\n+                # I believe most of this is well-enforced when it's treated as a directive\n+                # but it doesn't hurt to make sure\n+                if (not isinstance(assignment, ExprNodes.GeneralCallNode)\n+                        or not isinstance(assignment.positional_args, ExprNodes.TupleNode)\n+                        or assignment.positional_args.args\n+                        or not isinstance(assignment.keyword_args, ExprNodes.DictNode)):\n+                    error(assignment.pos, \"Call to 'cython.dataclasses.field' must only consist \"\n+                          \"of compile-time keyword arguments\")\n+                    continue\n+                keyword_args = { k.value: v for k, v in assignment.keyword_args.key_value_pairs }\n+                if 'default' in keyword_args and 'default_factory' in keyword_args:\n+                    error(assignment.pos, \"You cannot specify both 'default' and 'default_factory'\"\n+                          \" for a dataclass member\")\n+                    continue\n+                field = Field(**keyword_args)\n+            else:\n+                if isinstance(assignment, ExprNodes.CallNode):\n+                    func = assignment.function\n+                    if ((func.is_name and func.name == \"field\")\n+                            or (isinstance(func, ExprNodes.AttributeNode)\n+                                and func.attribute == \"field\")):\n+                        warning(assignment.pos, \"Do you mean cython.dataclasses.field instead?\", 1)\n+                if assignment.type in [Builtin.list_type,\n+                                    Builtin.dict_type,\n+                                    Builtin.set_type]:\n+                    # The standard library module generates a TypeError at runtime\n+                    # in this situation\n+                    error(assignment.pos, \"Mutable default passed argument for '{0}' - \"\n+                          \"use 'default_factory' instead\".format(name))\n+\n+                field = Field(default=assignment)\n+        else:\n+            field = Field()\n+        field.is_initvar = is_initvar\n+        if entry.visibility == \"private\":\n+            field.private = True\n+        fields[name] = field\n+    node.entry.type.dataclass_fields = fields\n+    return fields\n+\n+def handle_cclass_dataclass(node, dataclass_args, analyse_decs_transform):\n+    from .ExprNodes import (AttributeNode, TupleNode, NameNode,\n+                            GeneralCallNode, DictNode,\n+                            IdentifierStringNode, BoolNode, DictItemNode)\n+    # default argument values from https://docs.python.org/3/library/dataclasses.html\n+    kwargs = dict(init=True, repr=True, eq=True,\n+                  order=False, unsafe_hash=False, frozen=False)\n+    if dataclass_args is not None:\n+        if dataclass_args[0]:\n+            error(node.pos, \"cython.dataclasses.dataclass takes no positional arguments\")\n+        for k, v in dataclass_args[1].items():\n+            if k not in kwargs:\n+                error(node.pos,\n+                      \"Unrecognised keyword argument '{0}' to cython.dataclasses.dataclass\".format(k))\n+            if not isinstance(v, ExprNodes.BoolNode):\n+                error(node.pos,\n+                      \"Arguments to cython.dataclasses.dataclass must be True or False\")\n+            kwargs[k] = v\n+\n+    fields = process_class_get_fields(node)\n+\n+    dataclass_module = make_dataclasses_module_callnode(node.pos)\n+\n+    # create __dataclass_params__ attribute\n+    dataclass_params_func = AttributeNode(node.pos, obj=dataclass_module,\n+                                            attribute=EncodedString(\"_DataclassParams\"))\n+    dataclass_params_keywords = DictNode.from_pairs(node.pos,\n+            [ (IdentifierStringNode(node.pos, value=EncodedString(k)),\n+                BoolNode(node.pos, value=v))\n+                for k, v in kwargs.items() ])\n+    dataclass_params = GeneralCallNode(node.pos,\n+                                    function = dataclass_params_func,\n+                                    positional_args = TupleNode(node.pos, args=[]),\n+                                    keyword_args = dataclass_params_keywords)\n+    dataclass_params_assignment = \\\n+        Nodes.SingleAssignmentNode(node.pos,\n+                        lhs = NameNode(node.pos,\n+                                        name=EncodedString(\"__dataclass_params__\")),\n+                        rhs = dataclass_params)\n+\n+    dataclass_fields_stats = _set_up_dataclass_fields(node, fields, dataclass_module)\n+\n+    stats = Nodes.StatListNode(node.pos,\n+                               stats=[dataclass_params_assignment]\n+                                    + dataclass_fields_stats)\n+\n+    init_stats = generate_init_code(kwargs['init'], node, fields)\n+    repr_stats = generate_repr_code(kwargs['repr'], node, fields)\n+    eq_stats = generate_eq_code(kwargs['eq'], node, fields)\n+    order_stats = generate_order_code(kwargs['order'], node, fields)\n+    hash_stats = generate_hash_code(kwargs['unsafe_hash'], kwargs['eq'], kwargs['frozen'],\n+                       node, fields)",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r579710599",
            "id": 579710599,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTcxMDU5OQ==",
            "original_commit_id": "de0ff9e6da6dad8a774c33a88ff9273aad7813e0",
            "original_line": 214,
            "original_position": 214,
            "original_start_line": 213,
            "path": "Cython/Compiler/Dataclass.py",
            "position": null,
            "pull_request_review_id": 594785037,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/579710599",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r579710637"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/579710637"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n        directives=node.scope.directives.copy(),\r\n        body=stats)\r\n```",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2021-02-20T21:20:38Z",
            "diff_hunk": "@@ -0,0 +1,593 @@\n+# functions to transform a c class into a dataclass\n+\n+from collections import OrderedDict\n+\n+from .Errors import error, warning\n+from . import ExprNodes, Nodes, PyrexTypes\n+from .Code import UtilityCode, TempitaUtilityCode\n+from .Visitor import VisitorTransform\n+from . import UtilNodes, Builtin, Naming\n+from .StringEncoding import BytesLiteral, EncodedString\n+from .TreeFragment import TreeFragment\n+from .ParseTreeTransforms import (NormalizeTree, SkipDeclarations, AnalyseDeclarationsTransform,\n+                                  MarkClosureVisitor)\n+\n+def make_dataclasses_module_callnode(pos):\n+    python_utility_code = UtilityCode.load_cached(\"Dataclasses_fallback\", \"Dataclasses.py\")\n+    python_utility_code = EncodedString(python_utility_code.impl)\n+    loader_utilitycode = TempitaUtilityCode.load_cached(\"SpecificModuleLoader\", \"Dataclasses.c\",\n+            context={'cname': \"dataclasses\", 'py_code': python_utility_code.as_c_string_literal()})\n+    return ExprNodes.PythonCapiCallNode(pos, \"__Pyx_Load_dataclasses_Module\",\n+                                PyrexTypes.CFuncType(PyrexTypes.py_object_type, []),\n+                                utility_code = loader_utilitycode,\n+                                args=[])\n+\n+_INTERNAL_DEFAULTSHOLDER_NAME = EncodedString('__pyx_dataclass_defaults')\n+\n+class RemoveAssignments(VisitorTransform, SkipDeclarations):\n+    def __init__(self, names):\n+        super(RemoveAssignments, self).__init__()\n+        self.names = names\n+        self.removed_assignments = {}\n+\n+    def visit_CClassNode(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+    def visit_PyClassNode(self, node):\n+        return node  # go no further\n+\n+    def visit_FuncDefNode(self, node):\n+        return node  # go no further\n+\n+    def visit_SingleAssignmentNode(self, node):\n+        if node.lhs.is_name and node.lhs.name in self.names:\n+            if node.lhs.name in self.removed_assignments:\n+                warning(node.pos, (\"Multiple assignments for '%s' in dataclass; \"\n+                                   \"using most recent\") % node.lhs.name, 1)\n+            self.removed_assignments[node.lhs.name] = node.rhs\n+            return []\n+        return node\n+\n+    # I believe cascaded assignment is always a syntax error with decorators\n+    # so can be ignored\n+\n+    def visit_Node(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+class _MISSING_TYPE:\n+    pass\n+MISSING = _MISSING_TYPE()\n+\n+def process_class_get_fields(node):\n+    _TrueNode = ExprNodes.BoolNode(node.pos, value=True)\n+    _FalseNode = ExprNodes.BoolNode(node.pos, value=False)\n+    _NoneNode = ExprNodes.NoneNode(node.pos)\n+\n+    class Field(object):\n+        \"\"\"\n+        Field is based on the dataclasses.field class from the standard library module.\n+        It is used internally during the generation of Cython dataclasses to keep track\n+        of the settings for individual attributes.\n+\n+        Attributes of this class are stored as nodes so they can be used in code construction\n+        more readily (i.e. we store BoolNode rather than bool)\n+        The class (+ _TrueNode, _FalseNode and _NoneNode) are defined inside a function\n+        that when _TrueNode (etc) are used as default arguments they can have a useful pos\n+        \"\"\"\n+        default = MISSING\n+        default_factory = MISSING\n+        private = False\n+        def __init__(self, default=MISSING, default_factory=MISSING,\n+                        repr=_TrueNode, hash=_NoneNode, init=_TrueNode,\n+                        compare=_TrueNode, metadata=_NoneNode,\n+                        is_initvar=False):\n+            if default is not MISSING:\n+                self.default = default\n+            if default_factory is not MISSING:\n+                self.default_factory = default_factory\n+            self.repr = repr\n+            self.hash = hash\n+            self.init = init\n+            self.compare = compare\n+            self.metadata = metadata\n+            self.is_initvar = is_initvar\n+\n+            for field_name in (\"repr\", \"hash\", \"init\", \"compare\", \"metadata\"):\n+                field_value = getattr(self, field_name)\n+                if not field_value.is_literal:\n+                    error(field_value.pos, \"cython.dataclasses.field parameter '%s' must be a literal value\"\n+                            % field_name)\n+\n+    var_entries = node.scope.var_entries\n+    # order of definition is used in the dataclass\n+    var_entries = sorted(var_entries, key=lambda entry: entry.pos)\n+    var_names = [ entry.name for entry in var_entries ]\n+\n+    # remove assignments for stat_list\n+    transform = RemoveAssignments(var_names)\n+    transform(node)\n+\n+    if node.base_type and node.base_type.dataclass_fields:\n+        fields = node.base_type.dataclass_fields.copy()\n+    else:\n+        fields = OrderedDict()\n+    for entry in var_entries:\n+        name = entry.name\n+        is_initvar = entry.type.is_dataclasses_initvar\n+        if name in transform.removed_assignments:\n+            assignment = transform.removed_assignments[name]\n+            if (isinstance(assignment, ExprNodes.CallNode)\n+                    and assignment.function.as_cython_attribute() == \"dataclasses.field\"):\n+                # I believe most of this is well-enforced when it's treated as a directive\n+                # but it doesn't hurt to make sure\n+                if (not isinstance(assignment, ExprNodes.GeneralCallNode)\n+                        or not isinstance(assignment.positional_args, ExprNodes.TupleNode)\n+                        or assignment.positional_args.args\n+                        or not isinstance(assignment.keyword_args, ExprNodes.DictNode)):\n+                    error(assignment.pos, \"Call to 'cython.dataclasses.field' must only consist \"\n+                          \"of compile-time keyword arguments\")\n+                    continue\n+                keyword_args = { k.value: v for k, v in assignment.keyword_args.key_value_pairs }\n+                if 'default' in keyword_args and 'default_factory' in keyword_args:\n+                    error(assignment.pos, \"You cannot specify both 'default' and 'default_factory'\"\n+                          \" for a dataclass member\")\n+                    continue\n+                field = Field(**keyword_args)\n+            else:\n+                if isinstance(assignment, ExprNodes.CallNode):\n+                    func = assignment.function\n+                    if ((func.is_name and func.name == \"field\")\n+                            or (isinstance(func, ExprNodes.AttributeNode)\n+                                and func.attribute == \"field\")):\n+                        warning(assignment.pos, \"Do you mean cython.dataclasses.field instead?\", 1)\n+                if assignment.type in [Builtin.list_type,\n+                                    Builtin.dict_type,\n+                                    Builtin.set_type]:\n+                    # The standard library module generates a TypeError at runtime\n+                    # in this situation\n+                    error(assignment.pos, \"Mutable default passed argument for '{0}' - \"\n+                          \"use 'default_factory' instead\".format(name))\n+\n+                field = Field(default=assignment)\n+        else:\n+            field = Field()\n+        field.is_initvar = is_initvar\n+        if entry.visibility == \"private\":\n+            field.private = True\n+        fields[name] = field\n+    node.entry.type.dataclass_fields = fields\n+    return fields\n+\n+def handle_cclass_dataclass(node, dataclass_args, analyse_decs_transform):\n+    from .ExprNodes import (AttributeNode, TupleNode, NameNode,\n+                            GeneralCallNode, DictNode,\n+                            IdentifierStringNode, BoolNode, DictItemNode)\n+    # default argument values from https://docs.python.org/3/library/dataclasses.html\n+    kwargs = dict(init=True, repr=True, eq=True,\n+                  order=False, unsafe_hash=False, frozen=False)\n+    if dataclass_args is not None:\n+        if dataclass_args[0]:\n+            error(node.pos, \"cython.dataclasses.dataclass takes no positional arguments\")\n+        for k, v in dataclass_args[1].items():\n+            if k not in kwargs:\n+                error(node.pos,\n+                      \"Unrecognised keyword argument '{0}' to cython.dataclasses.dataclass\".format(k))\n+            if not isinstance(v, ExprNodes.BoolNode):\n+                error(node.pos,\n+                      \"Arguments to cython.dataclasses.dataclass must be True or False\")\n+            kwargs[k] = v\n+\n+    fields = process_class_get_fields(node)\n+\n+    dataclass_module = make_dataclasses_module_callnode(node.pos)\n+\n+    # create __dataclass_params__ attribute\n+    dataclass_params_func = AttributeNode(node.pos, obj=dataclass_module,\n+                                            attribute=EncodedString(\"_DataclassParams\"))\n+    dataclass_params_keywords = DictNode.from_pairs(node.pos,\n+            [ (IdentifierStringNode(node.pos, value=EncodedString(k)),\n+                BoolNode(node.pos, value=v))\n+                for k, v in kwargs.items() ])\n+    dataclass_params = GeneralCallNode(node.pos,\n+                                    function = dataclass_params_func,\n+                                    positional_args = TupleNode(node.pos, args=[]),\n+                                    keyword_args = dataclass_params_keywords)\n+    dataclass_params_assignment = \\\n+        Nodes.SingleAssignmentNode(node.pos,\n+                        lhs = NameNode(node.pos,\n+                                        name=EncodedString(\"__dataclass_params__\")),\n+                        rhs = dataclass_params)\n+\n+    dataclass_fields_stats = _set_up_dataclass_fields(node, fields, dataclass_module)\n+\n+    stats = Nodes.StatListNode(node.pos,\n+                               stats=[dataclass_params_assignment]\n+                                    + dataclass_fields_stats)\n+\n+    init_stats = generate_init_code(kwargs['init'], node, fields)\n+    repr_stats = generate_repr_code(kwargs['repr'], node, fields)\n+    eq_stats = generate_eq_code(kwargs['eq'], node, fields)\n+    order_stats = generate_order_code(kwargs['order'], node, fields)\n+    hash_stats = generate_hash_code(kwargs['unsafe_hash'], kwargs['eq'], kwargs['frozen'],\n+                       node, fields)\n+\n+    stats.stats = stats.stats + init_stats + repr_stats + eq_stats + order_stats + hash_stats\n+\n+    # turn off annotation typing, so all arguments to __init__ are accepted as\n+    # generic objects and thus can accept _HAS_DEFAULT_FACTORY\n+    # type conversion comes later\n+    comp_directives = Nodes.CompilerDirectivesNode(node.pos,\n+        directives = node.scope.directives.copy(),\n+        body=stats)",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r579710637",
            "id": 579710637,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTcxMDYzNw==",
            "original_commit_id": "de0ff9e6da6dad8a774c33a88ff9273aad7813e0",
            "original_line": 223,
            "original_position": 223,
            "original_start_line": 222,
            "path": "Cython/Compiler/Dataclass.py",
            "position": null,
            "pull_request_review_id": 594785037,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/579710637",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r579710742"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/579710742"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    has_default_factory = ExprNodes.AttributeNode(node.pos,\r\n        obj=dataclass_module,\r\n        attribute=EncodedString(\"_HAS_DEFAULT_FACTORY\"))\r\n```",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2021-02-20T21:21:48Z",
            "diff_hunk": "@@ -0,0 +1,593 @@\n+# functions to transform a c class into a dataclass\n+\n+from collections import OrderedDict\n+\n+from .Errors import error, warning\n+from . import ExprNodes, Nodes, PyrexTypes\n+from .Code import UtilityCode, TempitaUtilityCode\n+from .Visitor import VisitorTransform\n+from . import UtilNodes, Builtin, Naming\n+from .StringEncoding import BytesLiteral, EncodedString\n+from .TreeFragment import TreeFragment\n+from .ParseTreeTransforms import (NormalizeTree, SkipDeclarations, AnalyseDeclarationsTransform,\n+                                  MarkClosureVisitor)\n+\n+def make_dataclasses_module_callnode(pos):\n+    python_utility_code = UtilityCode.load_cached(\"Dataclasses_fallback\", \"Dataclasses.py\")\n+    python_utility_code = EncodedString(python_utility_code.impl)\n+    loader_utilitycode = TempitaUtilityCode.load_cached(\"SpecificModuleLoader\", \"Dataclasses.c\",\n+            context={'cname': \"dataclasses\", 'py_code': python_utility_code.as_c_string_literal()})\n+    return ExprNodes.PythonCapiCallNode(pos, \"__Pyx_Load_dataclasses_Module\",\n+                                PyrexTypes.CFuncType(PyrexTypes.py_object_type, []),\n+                                utility_code = loader_utilitycode,\n+                                args=[])\n+\n+_INTERNAL_DEFAULTSHOLDER_NAME = EncodedString('__pyx_dataclass_defaults')\n+\n+class RemoveAssignments(VisitorTransform, SkipDeclarations):\n+    def __init__(self, names):\n+        super(RemoveAssignments, self).__init__()\n+        self.names = names\n+        self.removed_assignments = {}\n+\n+    def visit_CClassNode(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+    def visit_PyClassNode(self, node):\n+        return node  # go no further\n+\n+    def visit_FuncDefNode(self, node):\n+        return node  # go no further\n+\n+    def visit_SingleAssignmentNode(self, node):\n+        if node.lhs.is_name and node.lhs.name in self.names:\n+            if node.lhs.name in self.removed_assignments:\n+                warning(node.pos, (\"Multiple assignments for '%s' in dataclass; \"\n+                                   \"using most recent\") % node.lhs.name, 1)\n+            self.removed_assignments[node.lhs.name] = node.rhs\n+            return []\n+        return node\n+\n+    # I believe cascaded assignment is always a syntax error with decorators\n+    # so can be ignored\n+\n+    def visit_Node(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+class _MISSING_TYPE:\n+    pass\n+MISSING = _MISSING_TYPE()\n+\n+def process_class_get_fields(node):\n+    _TrueNode = ExprNodes.BoolNode(node.pos, value=True)\n+    _FalseNode = ExprNodes.BoolNode(node.pos, value=False)\n+    _NoneNode = ExprNodes.NoneNode(node.pos)\n+\n+    class Field(object):\n+        \"\"\"\n+        Field is based on the dataclasses.field class from the standard library module.\n+        It is used internally during the generation of Cython dataclasses to keep track\n+        of the settings for individual attributes.\n+\n+        Attributes of this class are stored as nodes so they can be used in code construction\n+        more readily (i.e. we store BoolNode rather than bool)\n+        The class (+ _TrueNode, _FalseNode and _NoneNode) are defined inside a function\n+        that when _TrueNode (etc) are used as default arguments they can have a useful pos\n+        \"\"\"\n+        default = MISSING\n+        default_factory = MISSING\n+        private = False\n+        def __init__(self, default=MISSING, default_factory=MISSING,\n+                        repr=_TrueNode, hash=_NoneNode, init=_TrueNode,\n+                        compare=_TrueNode, metadata=_NoneNode,\n+                        is_initvar=False):\n+            if default is not MISSING:\n+                self.default = default\n+            if default_factory is not MISSING:\n+                self.default_factory = default_factory\n+            self.repr = repr\n+            self.hash = hash\n+            self.init = init\n+            self.compare = compare\n+            self.metadata = metadata\n+            self.is_initvar = is_initvar\n+\n+            for field_name in (\"repr\", \"hash\", \"init\", \"compare\", \"metadata\"):\n+                field_value = getattr(self, field_name)\n+                if not field_value.is_literal:\n+                    error(field_value.pos, \"cython.dataclasses.field parameter '%s' must be a literal value\"\n+                            % field_name)\n+\n+    var_entries = node.scope.var_entries\n+    # order of definition is used in the dataclass\n+    var_entries = sorted(var_entries, key=lambda entry: entry.pos)\n+    var_names = [ entry.name for entry in var_entries ]\n+\n+    # remove assignments for stat_list\n+    transform = RemoveAssignments(var_names)\n+    transform(node)\n+\n+    if node.base_type and node.base_type.dataclass_fields:\n+        fields = node.base_type.dataclass_fields.copy()\n+    else:\n+        fields = OrderedDict()\n+    for entry in var_entries:\n+        name = entry.name\n+        is_initvar = entry.type.is_dataclasses_initvar\n+        if name in transform.removed_assignments:\n+            assignment = transform.removed_assignments[name]\n+            if (isinstance(assignment, ExprNodes.CallNode)\n+                    and assignment.function.as_cython_attribute() == \"dataclasses.field\"):\n+                # I believe most of this is well-enforced when it's treated as a directive\n+                # but it doesn't hurt to make sure\n+                if (not isinstance(assignment, ExprNodes.GeneralCallNode)\n+                        or not isinstance(assignment.positional_args, ExprNodes.TupleNode)\n+                        or assignment.positional_args.args\n+                        or not isinstance(assignment.keyword_args, ExprNodes.DictNode)):\n+                    error(assignment.pos, \"Call to 'cython.dataclasses.field' must only consist \"\n+                          \"of compile-time keyword arguments\")\n+                    continue\n+                keyword_args = { k.value: v for k, v in assignment.keyword_args.key_value_pairs }\n+                if 'default' in keyword_args and 'default_factory' in keyword_args:\n+                    error(assignment.pos, \"You cannot specify both 'default' and 'default_factory'\"\n+                          \" for a dataclass member\")\n+                    continue\n+                field = Field(**keyword_args)\n+            else:\n+                if isinstance(assignment, ExprNodes.CallNode):\n+                    func = assignment.function\n+                    if ((func.is_name and func.name == \"field\")\n+                            or (isinstance(func, ExprNodes.AttributeNode)\n+                                and func.attribute == \"field\")):\n+                        warning(assignment.pos, \"Do you mean cython.dataclasses.field instead?\", 1)\n+                if assignment.type in [Builtin.list_type,\n+                                    Builtin.dict_type,\n+                                    Builtin.set_type]:\n+                    # The standard library module generates a TypeError at runtime\n+                    # in this situation\n+                    error(assignment.pos, \"Mutable default passed argument for '{0}' - \"\n+                          \"use 'default_factory' instead\".format(name))\n+\n+                field = Field(default=assignment)\n+        else:\n+            field = Field()\n+        field.is_initvar = is_initvar\n+        if entry.visibility == \"private\":\n+            field.private = True\n+        fields[name] = field\n+    node.entry.type.dataclass_fields = fields\n+    return fields\n+\n+def handle_cclass_dataclass(node, dataclass_args, analyse_decs_transform):\n+    from .ExprNodes import (AttributeNode, TupleNode, NameNode,\n+                            GeneralCallNode, DictNode,\n+                            IdentifierStringNode, BoolNode, DictItemNode)\n+    # default argument values from https://docs.python.org/3/library/dataclasses.html\n+    kwargs = dict(init=True, repr=True, eq=True,\n+                  order=False, unsafe_hash=False, frozen=False)\n+    if dataclass_args is not None:\n+        if dataclass_args[0]:\n+            error(node.pos, \"cython.dataclasses.dataclass takes no positional arguments\")\n+        for k, v in dataclass_args[1].items():\n+            if k not in kwargs:\n+                error(node.pos,\n+                      \"Unrecognised keyword argument '{0}' to cython.dataclasses.dataclass\".format(k))\n+            if not isinstance(v, ExprNodes.BoolNode):\n+                error(node.pos,\n+                      \"Arguments to cython.dataclasses.dataclass must be True or False\")\n+            kwargs[k] = v\n+\n+    fields = process_class_get_fields(node)\n+\n+    dataclass_module = make_dataclasses_module_callnode(node.pos)\n+\n+    # create __dataclass_params__ attribute\n+    dataclass_params_func = AttributeNode(node.pos, obj=dataclass_module,\n+                                            attribute=EncodedString(\"_DataclassParams\"))\n+    dataclass_params_keywords = DictNode.from_pairs(node.pos,\n+            [ (IdentifierStringNode(node.pos, value=EncodedString(k)),\n+                BoolNode(node.pos, value=v))\n+                for k, v in kwargs.items() ])\n+    dataclass_params = GeneralCallNode(node.pos,\n+                                    function = dataclass_params_func,\n+                                    positional_args = TupleNode(node.pos, args=[]),\n+                                    keyword_args = dataclass_params_keywords)\n+    dataclass_params_assignment = \\\n+        Nodes.SingleAssignmentNode(node.pos,\n+                        lhs = NameNode(node.pos,\n+                                        name=EncodedString(\"__dataclass_params__\")),\n+                        rhs = dataclass_params)\n+\n+    dataclass_fields_stats = _set_up_dataclass_fields(node, fields, dataclass_module)\n+\n+    stats = Nodes.StatListNode(node.pos,\n+                               stats=[dataclass_params_assignment]\n+                                    + dataclass_fields_stats)\n+\n+    init_stats = generate_init_code(kwargs['init'], node, fields)\n+    repr_stats = generate_repr_code(kwargs['repr'], node, fields)\n+    eq_stats = generate_eq_code(kwargs['eq'], node, fields)\n+    order_stats = generate_order_code(kwargs['order'], node, fields)\n+    hash_stats = generate_hash_code(kwargs['unsafe_hash'], kwargs['eq'], kwargs['frozen'],\n+                       node, fields)\n+\n+    stats.stats = stats.stats + init_stats + repr_stats + eq_stats + order_stats + hash_stats\n+\n+    # turn off annotation typing, so all arguments to __init__ are accepted as\n+    # generic objects and thus can accept _HAS_DEFAULT_FACTORY\n+    # type conversion comes later\n+    comp_directives = Nodes.CompilerDirectivesNode(node.pos,\n+        directives = node.scope.directives.copy(),\n+        body=stats)\n+    comp_directives.directives['annotation_typing'] = False\n+\n+    comp_directives.analyse_declarations(node.scope)\n+    # probably already in this scope, but it doesn't hurt to make sure\n+    analyse_decs_transform.enter_scope(node, node.scope)\n+    analyse_decs_transform.visit(comp_directives)\n+    analyse_decs_transform.exit_scope()\n+\n+    node.body.stats.append(comp_directives)\n+\n+def generate_init_code(init, node, fields):\n+    if not init or node.scope.lookup_here(\"__init__\"):\n+        return []\n+    # selfname behaviour copied from the cpython module\n+    selfname = \"__dataclass_self__\" if \"self\" in fields else \"self\"\n+    args = [selfname]\n+\n+    placeholders = {}\n+    placeholder_count = [0]\n+\n+    # create a temp to get _HAS_DEFAULT_FACTORY\n+    dataclass_module = make_dataclasses_module_callnode(node.pos)\n+    has_default_factory = ExprNodes.AttributeNode(node.pos,\n+                                        obj = dataclass_module,\n+                                        attribute = EncodedString(\"_HAS_DEFAULT_FACTORY\"))",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r579710742",
            "id": 579710742,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTcxMDc0Mg==",
            "original_commit_id": "de0ff9e6da6dad8a774c33a88ff9273aad7813e0",
            "original_line": 248,
            "original_position": 248,
            "original_start_line": 246,
            "path": "Cython/Compiler/Dataclass.py",
            "position": null,
            "pull_request_review_id": 594785037,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/579710742",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r579712144"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/579712144"
                }
            },
            "author_association": "MEMBER",
            "body": "Not sure if it's an issue, but it might be more efficient to generate all Cython code and then call `TreeFragment` once. Extracting the method nodes by their name seems easy enough then.",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2021-02-20T21:36:11Z",
            "diff_hunk": "@@ -0,0 +1,593 @@\n+# functions to transform a c class into a dataclass\n+\n+from collections import OrderedDict\n+\n+from .Errors import error, warning\n+from . import ExprNodes, Nodes, PyrexTypes\n+from .Code import UtilityCode, TempitaUtilityCode\n+from .Visitor import VisitorTransform\n+from . import UtilNodes, Builtin, Naming\n+from .StringEncoding import BytesLiteral, EncodedString\n+from .TreeFragment import TreeFragment\n+from .ParseTreeTransforms import (NormalizeTree, SkipDeclarations, AnalyseDeclarationsTransform,\n+                                  MarkClosureVisitor)\n+\n+def make_dataclasses_module_callnode(pos):\n+    python_utility_code = UtilityCode.load_cached(\"Dataclasses_fallback\", \"Dataclasses.py\")\n+    python_utility_code = EncodedString(python_utility_code.impl)\n+    loader_utilitycode = TempitaUtilityCode.load_cached(\"SpecificModuleLoader\", \"Dataclasses.c\",\n+            context={'cname': \"dataclasses\", 'py_code': python_utility_code.as_c_string_literal()})\n+    return ExprNodes.PythonCapiCallNode(pos, \"__Pyx_Load_dataclasses_Module\",\n+                                PyrexTypes.CFuncType(PyrexTypes.py_object_type, []),\n+                                utility_code = loader_utilitycode,\n+                                args=[])\n+\n+_INTERNAL_DEFAULTSHOLDER_NAME = EncodedString('__pyx_dataclass_defaults')\n+\n+class RemoveAssignments(VisitorTransform, SkipDeclarations):\n+    def __init__(self, names):\n+        super(RemoveAssignments, self).__init__()\n+        self.names = names\n+        self.removed_assignments = {}\n+\n+    def visit_CClassNode(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+    def visit_PyClassNode(self, node):\n+        return node  # go no further\n+\n+    def visit_FuncDefNode(self, node):\n+        return node  # go no further\n+\n+    def visit_SingleAssignmentNode(self, node):\n+        if node.lhs.is_name and node.lhs.name in self.names:\n+            if node.lhs.name in self.removed_assignments:\n+                warning(node.pos, (\"Multiple assignments for '%s' in dataclass; \"\n+                                   \"using most recent\") % node.lhs.name, 1)\n+            self.removed_assignments[node.lhs.name] = node.rhs\n+            return []\n+        return node\n+\n+    # I believe cascaded assignment is always a syntax error with decorators\n+    # so can be ignored\n+\n+    def visit_Node(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+class _MISSING_TYPE:\n+    pass\n+MISSING = _MISSING_TYPE()\n+\n+def process_class_get_fields(node):\n+    _TrueNode = ExprNodes.BoolNode(node.pos, value=True)\n+    _FalseNode = ExprNodes.BoolNode(node.pos, value=False)\n+    _NoneNode = ExprNodes.NoneNode(node.pos)\n+\n+    class Field(object):\n+        \"\"\"\n+        Field is based on the dataclasses.field class from the standard library module.\n+        It is used internally during the generation of Cython dataclasses to keep track\n+        of the settings for individual attributes.\n+\n+        Attributes of this class are stored as nodes so they can be used in code construction\n+        more readily (i.e. we store BoolNode rather than bool)\n+        The class (+ _TrueNode, _FalseNode and _NoneNode) are defined inside a function\n+        that when _TrueNode (etc) are used as default arguments they can have a useful pos\n+        \"\"\"\n+        default = MISSING\n+        default_factory = MISSING\n+        private = False\n+        def __init__(self, default=MISSING, default_factory=MISSING,\n+                        repr=_TrueNode, hash=_NoneNode, init=_TrueNode,\n+                        compare=_TrueNode, metadata=_NoneNode,\n+                        is_initvar=False):\n+            if default is not MISSING:\n+                self.default = default\n+            if default_factory is not MISSING:\n+                self.default_factory = default_factory\n+            self.repr = repr\n+            self.hash = hash\n+            self.init = init\n+            self.compare = compare\n+            self.metadata = metadata\n+            self.is_initvar = is_initvar\n+\n+            for field_name in (\"repr\", \"hash\", \"init\", \"compare\", \"metadata\"):\n+                field_value = getattr(self, field_name)\n+                if not field_value.is_literal:\n+                    error(field_value.pos, \"cython.dataclasses.field parameter '%s' must be a literal value\"\n+                            % field_name)\n+\n+    var_entries = node.scope.var_entries\n+    # order of definition is used in the dataclass\n+    var_entries = sorted(var_entries, key=lambda entry: entry.pos)\n+    var_names = [ entry.name for entry in var_entries ]\n+\n+    # remove assignments for stat_list\n+    transform = RemoveAssignments(var_names)\n+    transform(node)\n+\n+    if node.base_type and node.base_type.dataclass_fields:\n+        fields = node.base_type.dataclass_fields.copy()\n+    else:\n+        fields = OrderedDict()\n+    for entry in var_entries:\n+        name = entry.name\n+        is_initvar = entry.type.is_dataclasses_initvar\n+        if name in transform.removed_assignments:\n+            assignment = transform.removed_assignments[name]\n+            if (isinstance(assignment, ExprNodes.CallNode)\n+                    and assignment.function.as_cython_attribute() == \"dataclasses.field\"):\n+                # I believe most of this is well-enforced when it's treated as a directive\n+                # but it doesn't hurt to make sure\n+                if (not isinstance(assignment, ExprNodes.GeneralCallNode)\n+                        or not isinstance(assignment.positional_args, ExprNodes.TupleNode)\n+                        or assignment.positional_args.args\n+                        or not isinstance(assignment.keyword_args, ExprNodes.DictNode)):\n+                    error(assignment.pos, \"Call to 'cython.dataclasses.field' must only consist \"\n+                          \"of compile-time keyword arguments\")\n+                    continue\n+                keyword_args = { k.value: v for k, v in assignment.keyword_args.key_value_pairs }\n+                if 'default' in keyword_args and 'default_factory' in keyword_args:\n+                    error(assignment.pos, \"You cannot specify both 'default' and 'default_factory'\"\n+                          \" for a dataclass member\")\n+                    continue\n+                field = Field(**keyword_args)\n+            else:\n+                if isinstance(assignment, ExprNodes.CallNode):\n+                    func = assignment.function\n+                    if ((func.is_name and func.name == \"field\")\n+                            or (isinstance(func, ExprNodes.AttributeNode)\n+                                and func.attribute == \"field\")):\n+                        warning(assignment.pos, \"Do you mean cython.dataclasses.field instead?\", 1)\n+                if assignment.type in [Builtin.list_type,\n+                                    Builtin.dict_type,\n+                                    Builtin.set_type]:\n+                    # The standard library module generates a TypeError at runtime\n+                    # in this situation\n+                    error(assignment.pos, \"Mutable default passed argument for '{0}' - \"\n+                          \"use 'default_factory' instead\".format(name))\n+\n+                field = Field(default=assignment)\n+        else:\n+            field = Field()\n+        field.is_initvar = is_initvar\n+        if entry.visibility == \"private\":\n+            field.private = True\n+        fields[name] = field\n+    node.entry.type.dataclass_fields = fields\n+    return fields\n+\n+def handle_cclass_dataclass(node, dataclass_args, analyse_decs_transform):\n+    from .ExprNodes import (AttributeNode, TupleNode, NameNode,\n+                            GeneralCallNode, DictNode,\n+                            IdentifierStringNode, BoolNode, DictItemNode)\n+    # default argument values from https://docs.python.org/3/library/dataclasses.html\n+    kwargs = dict(init=True, repr=True, eq=True,\n+                  order=False, unsafe_hash=False, frozen=False)\n+    if dataclass_args is not None:\n+        if dataclass_args[0]:\n+            error(node.pos, \"cython.dataclasses.dataclass takes no positional arguments\")\n+        for k, v in dataclass_args[1].items():\n+            if k not in kwargs:\n+                error(node.pos,\n+                      \"Unrecognised keyword argument '{0}' to cython.dataclasses.dataclass\".format(k))\n+            if not isinstance(v, ExprNodes.BoolNode):\n+                error(node.pos,\n+                      \"Arguments to cython.dataclasses.dataclass must be True or False\")\n+            kwargs[k] = v\n+\n+    fields = process_class_get_fields(node)\n+\n+    dataclass_module = make_dataclasses_module_callnode(node.pos)\n+\n+    # create __dataclass_params__ attribute\n+    dataclass_params_func = AttributeNode(node.pos, obj=dataclass_module,\n+                                            attribute=EncodedString(\"_DataclassParams\"))\n+    dataclass_params_keywords = DictNode.from_pairs(node.pos,\n+            [ (IdentifierStringNode(node.pos, value=EncodedString(k)),\n+                BoolNode(node.pos, value=v))\n+                for k, v in kwargs.items() ])\n+    dataclass_params = GeneralCallNode(node.pos,\n+                                    function = dataclass_params_func,\n+                                    positional_args = TupleNode(node.pos, args=[]),\n+                                    keyword_args = dataclass_params_keywords)\n+    dataclass_params_assignment = \\\n+        Nodes.SingleAssignmentNode(node.pos,\n+                        lhs = NameNode(node.pos,\n+                                        name=EncodedString(\"__dataclass_params__\")),\n+                        rhs = dataclass_params)\n+\n+    dataclass_fields_stats = _set_up_dataclass_fields(node, fields, dataclass_module)\n+\n+    stats = Nodes.StatListNode(node.pos,\n+                               stats=[dataclass_params_assignment]\n+                                    + dataclass_fields_stats)\n+\n+    init_stats = generate_init_code(kwargs['init'], node, fields)\n+    repr_stats = generate_repr_code(kwargs['repr'], node, fields)\n+    eq_stats = generate_eq_code(kwargs['eq'], node, fields)\n+    order_stats = generate_order_code(kwargs['order'], node, fields)\n+    hash_stats = generate_hash_code(kwargs['unsafe_hash'], kwargs['eq'], kwargs['frozen'],\n+                       node, fields)\n+\n+    stats.stats = stats.stats + init_stats + repr_stats + eq_stats + order_stats + hash_stats\n+\n+    # turn off annotation typing, so all arguments to __init__ are accepted as\n+    # generic objects and thus can accept _HAS_DEFAULT_FACTORY\n+    # type conversion comes later\n+    comp_directives = Nodes.CompilerDirectivesNode(node.pos,\n+        directives = node.scope.directives.copy(),\n+        body=stats)\n+    comp_directives.directives['annotation_typing'] = False\n+\n+    comp_directives.analyse_declarations(node.scope)\n+    # probably already in this scope, but it doesn't hurt to make sure\n+    analyse_decs_transform.enter_scope(node, node.scope)\n+    analyse_decs_transform.visit(comp_directives)\n+    analyse_decs_transform.exit_scope()\n+\n+    node.body.stats.append(comp_directives)\n+\n+def generate_init_code(init, node, fields):\n+    if not init or node.scope.lookup_here(\"__init__\"):\n+        return []\n+    # selfname behaviour copied from the cpython module\n+    selfname = \"__dataclass_self__\" if \"self\" in fields else \"self\"\n+    args = [selfname]\n+\n+    placeholders = {}\n+    placeholder_count = [0]\n+\n+    # create a temp to get _HAS_DEFAULT_FACTORY\n+    dataclass_module = make_dataclasses_module_callnode(node.pos)\n+    has_default_factory = ExprNodes.AttributeNode(node.pos,\n+                                        obj = dataclass_module,\n+                                        attribute = EncodedString(\"_HAS_DEFAULT_FACTORY\"))\n+\n+    def get_placeholder_name():\n+        while True:\n+            name = \"PLACEHOLDER_%s\" % placeholder_count[0]\n+            if (name not in placeholders\n+                    and name not in fields):\n+                # make sure name isn't already used and doesn't\n+                # conflict with a variable name (which is unlikely but possible)\n+                break\n+            placeholder_count[0] += 1\n+        return name\n+\n+    default_factory_placeholder = get_placeholder_name()\n+    placeholders[default_factory_placeholder] = has_default_factory\n+\n+    seen_default = False\n+    for name, field in fields.items():\n+        if not field.init.value:\n+            continue\n+        entry = node.scope.lookup(name)\n+        annotation = entry.annotation.string if entry.annotation else None\n+        if annotation:\n+            annotation = u\": %s\" % annotation.value\n+        else:\n+            annotation = u\"\"\n+        assignment = u''\n+        if field.default is not MISSING or field.default_factory is not MISSING:\n+            seen_default = True\n+            if field.default_factory is not MISSING:\n+                ph_name = default_factory_placeholder\n+            else:\n+                ph_name = get_placeholder_name()\n+                placeholders[ph_name] = field.default  # should be node\n+            assignment = u\" = %s\" % ph_name\n+        elif seen_default:\n+            error(entry.pos, (\"non-default argument %s follows default argument \"\n+                             \"in dataclass __init__\") % name)\n+            return []\n+\n+        args.append(u\"%s%s%s\" % (name, annotation, assignment))\n+    args = u\", \".join(args)\n+    func_call = u\"def __init__(%s):\" % args\n+\n+    code_lines = [func_call,\n+                  \"    pass\",  # just in-case it's an empty body\n+                  ]\n+    for name, field in fields.items():\n+        if field.is_initvar:\n+            continue\n+        if field.default_factory is MISSING:\n+            if field.init.value:\n+                code_lines.append(u\"    %s.%s = %s\" % (selfname, name, name))\n+        else:\n+            ph_name = get_placeholder_name()\n+            placeholders[ph_name] = field.default_factory\n+            if field.init.value:\n+                code_lines.append(u\"    if %s is %s:\"\n+                                % (name, default_factory_placeholder))\n+                code_lines.append(u\"        %s.%s = %s()\"\n+                                % (selfname, name, ph_name))\n+                code_lines.append(u\"    else:\")\n+                code_lines.append(u\"        %s.%s = %s\" % (selfname, name, name))\n+            else:\n+                # still need to use the default factory to initialize\n+                code_lines.append(u\"    %s.%s = %s()\"\n+                                  % (selfname, name, ph_name))\n+    if node.scope.lookup(\"__post_init__\"):\n+        post_init_vars = \", \".join(name for name, field in fields.items()\n+                                    if field.is_initvar)\n+        code_lines.append(\"    %s.__post_init__(%s)\" % (selfname, post_init_vars))\n+    code_lines = u\"\\n\".join(code_lines)\n+\n+    code_tree = TreeFragment(code_lines, level='c_class',\n+                             pipeline=[NormalizeTree(node.scope),\n+                                       ]\n+                              ).substitute(placeholders)\n+\n+    return code_tree.stats\n+\n+\n+def generate_repr_code(repr, node, fields):\n+    if not repr or node.scope.lookup(\"__repr__\"):\n+        return []\n+    code_lines = [\"def __repr__(self):\"]\n+    strs = [ u\"%s={self.%s}\" % (name, name)\n+            for name, field in fields.items() if field.repr.value and not field.is_initvar ]\n+    format_string = u\", \".join(strs)\n+    code_lines.append(u\"    return f'{type(self).__name__}(%s)'\" % format_string)\n+    code_lines = u\"\\n\".join(code_lines)\n+\n+    code_tree = TreeFragment(code_lines,",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r579712144",
            "id": 579712144,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTcxMjE0NA==",
            "original_commit_id": "de0ff9e6da6dad8a774c33a88ff9273aad7813e0",
            "original_line": 339,
            "original_position": 339,
            "original_start_line": null,
            "path": "Cython/Compiler/Dataclass.py",
            "position": null,
            "pull_request_review_id": 594785037,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/579712144",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r579712309"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/579712309"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n            return ExprNodes.RawCNameExprNode(\r\n                self.pos, Builtin.type_type, type.typeptr_cname).analyse_types(env)\r\n```",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2021-02-20T21:37:34Z",
            "diff_hunk": "@@ -0,0 +1,593 @@\n+# functions to transform a c class into a dataclass\n+\n+from collections import OrderedDict\n+\n+from .Errors import error, warning\n+from . import ExprNodes, Nodes, PyrexTypes\n+from .Code import UtilityCode, TempitaUtilityCode\n+from .Visitor import VisitorTransform\n+from . import UtilNodes, Builtin, Naming\n+from .StringEncoding import BytesLiteral, EncodedString\n+from .TreeFragment import TreeFragment\n+from .ParseTreeTransforms import (NormalizeTree, SkipDeclarations, AnalyseDeclarationsTransform,\n+                                  MarkClosureVisitor)\n+\n+def make_dataclasses_module_callnode(pos):\n+    python_utility_code = UtilityCode.load_cached(\"Dataclasses_fallback\", \"Dataclasses.py\")\n+    python_utility_code = EncodedString(python_utility_code.impl)\n+    loader_utilitycode = TempitaUtilityCode.load_cached(\"SpecificModuleLoader\", \"Dataclasses.c\",\n+            context={'cname': \"dataclasses\", 'py_code': python_utility_code.as_c_string_literal()})\n+    return ExprNodes.PythonCapiCallNode(pos, \"__Pyx_Load_dataclasses_Module\",\n+                                PyrexTypes.CFuncType(PyrexTypes.py_object_type, []),\n+                                utility_code = loader_utilitycode,\n+                                args=[])\n+\n+_INTERNAL_DEFAULTSHOLDER_NAME = EncodedString('__pyx_dataclass_defaults')\n+\n+class RemoveAssignments(VisitorTransform, SkipDeclarations):\n+    def __init__(self, names):\n+        super(RemoveAssignments, self).__init__()\n+        self.names = names\n+        self.removed_assignments = {}\n+\n+    def visit_CClassNode(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+    def visit_PyClassNode(self, node):\n+        return node  # go no further\n+\n+    def visit_FuncDefNode(self, node):\n+        return node  # go no further\n+\n+    def visit_SingleAssignmentNode(self, node):\n+        if node.lhs.is_name and node.lhs.name in self.names:\n+            if node.lhs.name in self.removed_assignments:\n+                warning(node.pos, (\"Multiple assignments for '%s' in dataclass; \"\n+                                   \"using most recent\") % node.lhs.name, 1)\n+            self.removed_assignments[node.lhs.name] = node.rhs\n+            return []\n+        return node\n+\n+    # I believe cascaded assignment is always a syntax error with decorators\n+    # so can be ignored\n+\n+    def visit_Node(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+class _MISSING_TYPE:\n+    pass\n+MISSING = _MISSING_TYPE()\n+\n+def process_class_get_fields(node):\n+    _TrueNode = ExprNodes.BoolNode(node.pos, value=True)\n+    _FalseNode = ExprNodes.BoolNode(node.pos, value=False)\n+    _NoneNode = ExprNodes.NoneNode(node.pos)\n+\n+    class Field(object):\n+        \"\"\"\n+        Field is based on the dataclasses.field class from the standard library module.\n+        It is used internally during the generation of Cython dataclasses to keep track\n+        of the settings for individual attributes.\n+\n+        Attributes of this class are stored as nodes so they can be used in code construction\n+        more readily (i.e. we store BoolNode rather than bool)\n+        The class (+ _TrueNode, _FalseNode and _NoneNode) are defined inside a function\n+        that when _TrueNode (etc) are used as default arguments they can have a useful pos\n+        \"\"\"\n+        default = MISSING\n+        default_factory = MISSING\n+        private = False\n+        def __init__(self, default=MISSING, default_factory=MISSING,\n+                        repr=_TrueNode, hash=_NoneNode, init=_TrueNode,\n+                        compare=_TrueNode, metadata=_NoneNode,\n+                        is_initvar=False):\n+            if default is not MISSING:\n+                self.default = default\n+            if default_factory is not MISSING:\n+                self.default_factory = default_factory\n+            self.repr = repr\n+            self.hash = hash\n+            self.init = init\n+            self.compare = compare\n+            self.metadata = metadata\n+            self.is_initvar = is_initvar\n+\n+            for field_name in (\"repr\", \"hash\", \"init\", \"compare\", \"metadata\"):\n+                field_value = getattr(self, field_name)\n+                if not field_value.is_literal:\n+                    error(field_value.pos, \"cython.dataclasses.field parameter '%s' must be a literal value\"\n+                            % field_name)\n+\n+    var_entries = node.scope.var_entries\n+    # order of definition is used in the dataclass\n+    var_entries = sorted(var_entries, key=lambda entry: entry.pos)\n+    var_names = [ entry.name for entry in var_entries ]\n+\n+    # remove assignments for stat_list\n+    transform = RemoveAssignments(var_names)\n+    transform(node)\n+\n+    if node.base_type and node.base_type.dataclass_fields:\n+        fields = node.base_type.dataclass_fields.copy()\n+    else:\n+        fields = OrderedDict()\n+    for entry in var_entries:\n+        name = entry.name\n+        is_initvar = entry.type.is_dataclasses_initvar\n+        if name in transform.removed_assignments:\n+            assignment = transform.removed_assignments[name]\n+            if (isinstance(assignment, ExprNodes.CallNode)\n+                    and assignment.function.as_cython_attribute() == \"dataclasses.field\"):\n+                # I believe most of this is well-enforced when it's treated as a directive\n+                # but it doesn't hurt to make sure\n+                if (not isinstance(assignment, ExprNodes.GeneralCallNode)\n+                        or not isinstance(assignment.positional_args, ExprNodes.TupleNode)\n+                        or assignment.positional_args.args\n+                        or not isinstance(assignment.keyword_args, ExprNodes.DictNode)):\n+                    error(assignment.pos, \"Call to 'cython.dataclasses.field' must only consist \"\n+                          \"of compile-time keyword arguments\")\n+                    continue\n+                keyword_args = { k.value: v for k, v in assignment.keyword_args.key_value_pairs }\n+                if 'default' in keyword_args and 'default_factory' in keyword_args:\n+                    error(assignment.pos, \"You cannot specify both 'default' and 'default_factory'\"\n+                          \" for a dataclass member\")\n+                    continue\n+                field = Field(**keyword_args)\n+            else:\n+                if isinstance(assignment, ExprNodes.CallNode):\n+                    func = assignment.function\n+                    if ((func.is_name and func.name == \"field\")\n+                            or (isinstance(func, ExprNodes.AttributeNode)\n+                                and func.attribute == \"field\")):\n+                        warning(assignment.pos, \"Do you mean cython.dataclasses.field instead?\", 1)\n+                if assignment.type in [Builtin.list_type,\n+                                    Builtin.dict_type,\n+                                    Builtin.set_type]:\n+                    # The standard library module generates a TypeError at runtime\n+                    # in this situation\n+                    error(assignment.pos, \"Mutable default passed argument for '{0}' - \"\n+                          \"use 'default_factory' instead\".format(name))\n+\n+                field = Field(default=assignment)\n+        else:\n+            field = Field()\n+        field.is_initvar = is_initvar\n+        if entry.visibility == \"private\":\n+            field.private = True\n+        fields[name] = field\n+    node.entry.type.dataclass_fields = fields\n+    return fields\n+\n+def handle_cclass_dataclass(node, dataclass_args, analyse_decs_transform):\n+    from .ExprNodes import (AttributeNode, TupleNode, NameNode,\n+                            GeneralCallNode, DictNode,\n+                            IdentifierStringNode, BoolNode, DictItemNode)\n+    # default argument values from https://docs.python.org/3/library/dataclasses.html\n+    kwargs = dict(init=True, repr=True, eq=True,\n+                  order=False, unsafe_hash=False, frozen=False)\n+    if dataclass_args is not None:\n+        if dataclass_args[0]:\n+            error(node.pos, \"cython.dataclasses.dataclass takes no positional arguments\")\n+        for k, v in dataclass_args[1].items():\n+            if k not in kwargs:\n+                error(node.pos,\n+                      \"Unrecognised keyword argument '{0}' to cython.dataclasses.dataclass\".format(k))\n+            if not isinstance(v, ExprNodes.BoolNode):\n+                error(node.pos,\n+                      \"Arguments to cython.dataclasses.dataclass must be True or False\")\n+            kwargs[k] = v\n+\n+    fields = process_class_get_fields(node)\n+\n+    dataclass_module = make_dataclasses_module_callnode(node.pos)\n+\n+    # create __dataclass_params__ attribute\n+    dataclass_params_func = AttributeNode(node.pos, obj=dataclass_module,\n+                                            attribute=EncodedString(\"_DataclassParams\"))\n+    dataclass_params_keywords = DictNode.from_pairs(node.pos,\n+            [ (IdentifierStringNode(node.pos, value=EncodedString(k)),\n+                BoolNode(node.pos, value=v))\n+                for k, v in kwargs.items() ])\n+    dataclass_params = GeneralCallNode(node.pos,\n+                                    function = dataclass_params_func,\n+                                    positional_args = TupleNode(node.pos, args=[]),\n+                                    keyword_args = dataclass_params_keywords)\n+    dataclass_params_assignment = \\\n+        Nodes.SingleAssignmentNode(node.pos,\n+                        lhs = NameNode(node.pos,\n+                                        name=EncodedString(\"__dataclass_params__\")),\n+                        rhs = dataclass_params)\n+\n+    dataclass_fields_stats = _set_up_dataclass_fields(node, fields, dataclass_module)\n+\n+    stats = Nodes.StatListNode(node.pos,\n+                               stats=[dataclass_params_assignment]\n+                                    + dataclass_fields_stats)\n+\n+    init_stats = generate_init_code(kwargs['init'], node, fields)\n+    repr_stats = generate_repr_code(kwargs['repr'], node, fields)\n+    eq_stats = generate_eq_code(kwargs['eq'], node, fields)\n+    order_stats = generate_order_code(kwargs['order'], node, fields)\n+    hash_stats = generate_hash_code(kwargs['unsafe_hash'], kwargs['eq'], kwargs['frozen'],\n+                       node, fields)\n+\n+    stats.stats = stats.stats + init_stats + repr_stats + eq_stats + order_stats + hash_stats\n+\n+    # turn off annotation typing, so all arguments to __init__ are accepted as\n+    # generic objects and thus can accept _HAS_DEFAULT_FACTORY\n+    # type conversion comes later\n+    comp_directives = Nodes.CompilerDirectivesNode(node.pos,\n+        directives = node.scope.directives.copy(),\n+        body=stats)\n+    comp_directives.directives['annotation_typing'] = False\n+\n+    comp_directives.analyse_declarations(node.scope)\n+    # probably already in this scope, but it doesn't hurt to make sure\n+    analyse_decs_transform.enter_scope(node, node.scope)\n+    analyse_decs_transform.visit(comp_directives)\n+    analyse_decs_transform.exit_scope()\n+\n+    node.body.stats.append(comp_directives)\n+\n+def generate_init_code(init, node, fields):\n+    if not init or node.scope.lookup_here(\"__init__\"):\n+        return []\n+    # selfname behaviour copied from the cpython module\n+    selfname = \"__dataclass_self__\" if \"self\" in fields else \"self\"\n+    args = [selfname]\n+\n+    placeholders = {}\n+    placeholder_count = [0]\n+\n+    # create a temp to get _HAS_DEFAULT_FACTORY\n+    dataclass_module = make_dataclasses_module_callnode(node.pos)\n+    has_default_factory = ExprNodes.AttributeNode(node.pos,\n+                                        obj = dataclass_module,\n+                                        attribute = EncodedString(\"_HAS_DEFAULT_FACTORY\"))\n+\n+    def get_placeholder_name():\n+        while True:\n+            name = \"PLACEHOLDER_%s\" % placeholder_count[0]\n+            if (name not in placeholders\n+                    and name not in fields):\n+                # make sure name isn't already used and doesn't\n+                # conflict with a variable name (which is unlikely but possible)\n+                break\n+            placeholder_count[0] += 1\n+        return name\n+\n+    default_factory_placeholder = get_placeholder_name()\n+    placeholders[default_factory_placeholder] = has_default_factory\n+\n+    seen_default = False\n+    for name, field in fields.items():\n+        if not field.init.value:\n+            continue\n+        entry = node.scope.lookup(name)\n+        annotation = entry.annotation.string if entry.annotation else None\n+        if annotation:\n+            annotation = u\": %s\" % annotation.value\n+        else:\n+            annotation = u\"\"\n+        assignment = u''\n+        if field.default is not MISSING or field.default_factory is not MISSING:\n+            seen_default = True\n+            if field.default_factory is not MISSING:\n+                ph_name = default_factory_placeholder\n+            else:\n+                ph_name = get_placeholder_name()\n+                placeholders[ph_name] = field.default  # should be node\n+            assignment = u\" = %s\" % ph_name\n+        elif seen_default:\n+            error(entry.pos, (\"non-default argument %s follows default argument \"\n+                             \"in dataclass __init__\") % name)\n+            return []\n+\n+        args.append(u\"%s%s%s\" % (name, annotation, assignment))\n+    args = u\", \".join(args)\n+    func_call = u\"def __init__(%s):\" % args\n+\n+    code_lines = [func_call,\n+                  \"    pass\",  # just in-case it's an empty body\n+                  ]\n+    for name, field in fields.items():\n+        if field.is_initvar:\n+            continue\n+        if field.default_factory is MISSING:\n+            if field.init.value:\n+                code_lines.append(u\"    %s.%s = %s\" % (selfname, name, name))\n+        else:\n+            ph_name = get_placeholder_name()\n+            placeholders[ph_name] = field.default_factory\n+            if field.init.value:\n+                code_lines.append(u\"    if %s is %s:\"\n+                                % (name, default_factory_placeholder))\n+                code_lines.append(u\"        %s.%s = %s()\"\n+                                % (selfname, name, ph_name))\n+                code_lines.append(u\"    else:\")\n+                code_lines.append(u\"        %s.%s = %s\" % (selfname, name, name))\n+            else:\n+                # still need to use the default factory to initialize\n+                code_lines.append(u\"    %s.%s = %s()\"\n+                                  % (selfname, name, ph_name))\n+    if node.scope.lookup(\"__post_init__\"):\n+        post_init_vars = \", \".join(name for name, field in fields.items()\n+                                    if field.is_initvar)\n+        code_lines.append(\"    %s.__post_init__(%s)\" % (selfname, post_init_vars))\n+    code_lines = u\"\\n\".join(code_lines)\n+\n+    code_tree = TreeFragment(code_lines, level='c_class',\n+                             pipeline=[NormalizeTree(node.scope),\n+                                       ]\n+                              ).substitute(placeholders)\n+\n+    return code_tree.stats\n+\n+\n+def generate_repr_code(repr, node, fields):\n+    if not repr or node.scope.lookup(\"__repr__\"):\n+        return []\n+    code_lines = [\"def __repr__(self):\"]\n+    strs = [ u\"%s={self.%s}\" % (name, name)\n+            for name, field in fields.items() if field.repr.value and not field.is_initvar ]\n+    format_string = u\", \".join(strs)\n+    code_lines.append(u\"    return f'{type(self).__name__}(%s)'\" % format_string)\n+    code_lines = u\"\\n\".join(code_lines)\n+\n+    code_tree = TreeFragment(code_lines,\n+                              level='c_class', pipeline=[NormalizeTree(None)]\n+                              ).substitute({})\n+    return code_tree.stats\n+\n+def generate_cmp_code(op, funcname, node, fields):\n+    if node.scope.lookup_here(funcname):\n+        return []  # already exists\n+\n+    names = [ name for name, field in fields.items()\n+                if (field.compare.value and not field.is_initvar) ]\n+\n+    if not names:\n+        return []  # no comparable types\n+\n+    code_lines = [\"def %s(self, other):\" % funcname,\n+                  \"    cdef %s other_cast\" % node.class_name,\n+                  \"    try:\",\n+                  \"        other_cast = other\",\n+                  \"    except TypeError:\",\n+                  \"        return NotImplemented\"]\n+\n+    for name in names:\n+        shared = \"if not (self.%s == other_cast.%s):\" % (name, name)\n+        if op == \"==\":\n+            code_lines.append(\"    %s return False\" % shared)\n+        else:\n+            code_lines.append(\"    %s return self.%s %s other_cast.%s\" %\n+                              (shared, name, op, name))\n+\n+    if \"=\" in op:\n+        code_lines.append(\"    return True\")\n+    else:\n+        code_lines.append(\"    return False\")\n+\n+    code_lines = u\"\\n\".join(code_lines)\n+\n+    code_tree = TreeFragment(code_lines,\n+                              level='c_class', pipeline=[NormalizeTree(None)]\n+                              ).substitute({})\n+    return code_tree.stats\n+\n+def generate_eq_code(eq, node, fields):\n+    if not eq:\n+        return []\n+    return generate_cmp_code(\"==\", \"__eq__\", node, fields)\n+\n+def generate_order_code(order, node, fields):\n+    if not order:\n+        return []\n+    stats = []\n+    for op, name in [(\"<\", \"__lt__\"),\n+                     (\"<=\", \"__le__\"),\n+                     (\">\", \"__gt__\"),\n+                     (\">=\", \"__ge__\")]:\n+        stats.extend(generate_cmp_code(op, name, node, fields))\n+    return stats\n+\n+def generate_hash_code(unsafe_hash, eq, frozen, node, fields):\n+    hash_entry = node.scope.lookup_here(\"__hash__\")\n+    if hash_entry:\n+        # TODO ideally assignment of __hash__ to None shouldn't trigger this\n+        # but difficult to get the right information here\n+        if unsafe_hash:\n+            error(node.pos, \"Request for dataclass unsafe_hash when a '__hash__' function\"\n+                  \" already exists\")\n+        return []\n+    if not unsafe_hash:\n+        if eq and not frozen:\n+            return [Nodes.SingleAssignmentNode(node.pos,\n+                                        lhs = ExprNodes.NameNode(node.pos, name=EncodedString(\"__hash__\")),\n+                                        rhs = ExprNodes.NoneNode(node.pos))]\n+        if not eq:\n+            return []\n+\n+    names = [ name for name, field in fields.items()\n+                if (not field.is_initvar and\n+                    (field.compare.value if field.hash.value is None else field.hash.value)) ]\n+    if not names:\n+        return []  # nothing to hash\n+\n+    # make a tuple of the hashes\n+    tpl = u\", \".join(u\"hash(self.%s)\" % name for name in names )\n+\n+    # if we're here we want to generate a hash\n+    code_lines = u\"\"\"def __hash__(self):\n+    return hash((%s))\n+\"\"\" % tpl\n+    code_tree = TreeFragment(code_lines,\n+                              level='c_class', pipeline=[NormalizeTree(None)]\n+                              ).substitute({})\n+    return code_tree.stats\n+\n+\n+class GetTypeNode(ExprNodes.ExprNode):\n+    # Tries to return a pytype_type if possible. However contains\n+    # some fallback provision if it turns out not to resolve to a Python object\n+    # Initialize with \"entry\"\n+\n+    subexprs = []\n+\n+    def __init__(self, entry):\n+        super(GetTypeNode, self).__init__(entry.pos, entry=entry)\n+\n+    def analyse_types(self, env):\n+        type = self.entry.type\n+\n+        if type.is_extension_type or type.is_builtin_type:\n+            return ExprNodes.RawCNameExprNode(self.pos, Builtin.type_type,\n+                                                type.typeptr_cname).analyse_types(env)",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r579712309",
            "id": 579712309,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTcxMjMwOQ==",
            "original_commit_id": "de0ff9e6da6dad8a774c33a88ff9273aad7813e0",
            "original_line": 448,
            "original_position": 448,
            "original_start_line": 447,
            "path": "Cython/Compiler/Dataclass.py",
            "position": null,
            "pull_request_review_id": 594785037,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/579712309",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r579712438"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/579712438"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n                names = [ name.strip(\"() \") for name in py_name.split(\",\") ]\r\n```",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2021-02-20T21:38:38Z",
            "diff_hunk": "@@ -0,0 +1,593 @@\n+# functions to transform a c class into a dataclass\n+\n+from collections import OrderedDict\n+\n+from .Errors import error, warning\n+from . import ExprNodes, Nodes, PyrexTypes\n+from .Code import UtilityCode, TempitaUtilityCode\n+from .Visitor import VisitorTransform\n+from . import UtilNodes, Builtin, Naming\n+from .StringEncoding import BytesLiteral, EncodedString\n+from .TreeFragment import TreeFragment\n+from .ParseTreeTransforms import (NormalizeTree, SkipDeclarations, AnalyseDeclarationsTransform,\n+                                  MarkClosureVisitor)\n+\n+def make_dataclasses_module_callnode(pos):\n+    python_utility_code = UtilityCode.load_cached(\"Dataclasses_fallback\", \"Dataclasses.py\")\n+    python_utility_code = EncodedString(python_utility_code.impl)\n+    loader_utilitycode = TempitaUtilityCode.load_cached(\"SpecificModuleLoader\", \"Dataclasses.c\",\n+            context={'cname': \"dataclasses\", 'py_code': python_utility_code.as_c_string_literal()})\n+    return ExprNodes.PythonCapiCallNode(pos, \"__Pyx_Load_dataclasses_Module\",\n+                                PyrexTypes.CFuncType(PyrexTypes.py_object_type, []),\n+                                utility_code = loader_utilitycode,\n+                                args=[])\n+\n+_INTERNAL_DEFAULTSHOLDER_NAME = EncodedString('__pyx_dataclass_defaults')\n+\n+class RemoveAssignments(VisitorTransform, SkipDeclarations):\n+    def __init__(self, names):\n+        super(RemoveAssignments, self).__init__()\n+        self.names = names\n+        self.removed_assignments = {}\n+\n+    def visit_CClassNode(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+    def visit_PyClassNode(self, node):\n+        return node  # go no further\n+\n+    def visit_FuncDefNode(self, node):\n+        return node  # go no further\n+\n+    def visit_SingleAssignmentNode(self, node):\n+        if node.lhs.is_name and node.lhs.name in self.names:\n+            if node.lhs.name in self.removed_assignments:\n+                warning(node.pos, (\"Multiple assignments for '%s' in dataclass; \"\n+                                   \"using most recent\") % node.lhs.name, 1)\n+            self.removed_assignments[node.lhs.name] = node.rhs\n+            return []\n+        return node\n+\n+    # I believe cascaded assignment is always a syntax error with decorators\n+    # so can be ignored\n+\n+    def visit_Node(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+class _MISSING_TYPE:\n+    pass\n+MISSING = _MISSING_TYPE()\n+\n+def process_class_get_fields(node):\n+    _TrueNode = ExprNodes.BoolNode(node.pos, value=True)\n+    _FalseNode = ExprNodes.BoolNode(node.pos, value=False)\n+    _NoneNode = ExprNodes.NoneNode(node.pos)\n+\n+    class Field(object):\n+        \"\"\"\n+        Field is based on the dataclasses.field class from the standard library module.\n+        It is used internally during the generation of Cython dataclasses to keep track\n+        of the settings for individual attributes.\n+\n+        Attributes of this class are stored as nodes so they can be used in code construction\n+        more readily (i.e. we store BoolNode rather than bool)\n+        The class (+ _TrueNode, _FalseNode and _NoneNode) are defined inside a function\n+        that when _TrueNode (etc) are used as default arguments they can have a useful pos\n+        \"\"\"\n+        default = MISSING\n+        default_factory = MISSING\n+        private = False\n+        def __init__(self, default=MISSING, default_factory=MISSING,\n+                        repr=_TrueNode, hash=_NoneNode, init=_TrueNode,\n+                        compare=_TrueNode, metadata=_NoneNode,\n+                        is_initvar=False):\n+            if default is not MISSING:\n+                self.default = default\n+            if default_factory is not MISSING:\n+                self.default_factory = default_factory\n+            self.repr = repr\n+            self.hash = hash\n+            self.init = init\n+            self.compare = compare\n+            self.metadata = metadata\n+            self.is_initvar = is_initvar\n+\n+            for field_name in (\"repr\", \"hash\", \"init\", \"compare\", \"metadata\"):\n+                field_value = getattr(self, field_name)\n+                if not field_value.is_literal:\n+                    error(field_value.pos, \"cython.dataclasses.field parameter '%s' must be a literal value\"\n+                            % field_name)\n+\n+    var_entries = node.scope.var_entries\n+    # order of definition is used in the dataclass\n+    var_entries = sorted(var_entries, key=lambda entry: entry.pos)\n+    var_names = [ entry.name for entry in var_entries ]\n+\n+    # remove assignments for stat_list\n+    transform = RemoveAssignments(var_names)\n+    transform(node)\n+\n+    if node.base_type and node.base_type.dataclass_fields:\n+        fields = node.base_type.dataclass_fields.copy()\n+    else:\n+        fields = OrderedDict()\n+    for entry in var_entries:\n+        name = entry.name\n+        is_initvar = entry.type.is_dataclasses_initvar\n+        if name in transform.removed_assignments:\n+            assignment = transform.removed_assignments[name]\n+            if (isinstance(assignment, ExprNodes.CallNode)\n+                    and assignment.function.as_cython_attribute() == \"dataclasses.field\"):\n+                # I believe most of this is well-enforced when it's treated as a directive\n+                # but it doesn't hurt to make sure\n+                if (not isinstance(assignment, ExprNodes.GeneralCallNode)\n+                        or not isinstance(assignment.positional_args, ExprNodes.TupleNode)\n+                        or assignment.positional_args.args\n+                        or not isinstance(assignment.keyword_args, ExprNodes.DictNode)):\n+                    error(assignment.pos, \"Call to 'cython.dataclasses.field' must only consist \"\n+                          \"of compile-time keyword arguments\")\n+                    continue\n+                keyword_args = { k.value: v for k, v in assignment.keyword_args.key_value_pairs }\n+                if 'default' in keyword_args and 'default_factory' in keyword_args:\n+                    error(assignment.pos, \"You cannot specify both 'default' and 'default_factory'\"\n+                          \" for a dataclass member\")\n+                    continue\n+                field = Field(**keyword_args)\n+            else:\n+                if isinstance(assignment, ExprNodes.CallNode):\n+                    func = assignment.function\n+                    if ((func.is_name and func.name == \"field\")\n+                            or (isinstance(func, ExprNodes.AttributeNode)\n+                                and func.attribute == \"field\")):\n+                        warning(assignment.pos, \"Do you mean cython.dataclasses.field instead?\", 1)\n+                if assignment.type in [Builtin.list_type,\n+                                    Builtin.dict_type,\n+                                    Builtin.set_type]:\n+                    # The standard library module generates a TypeError at runtime\n+                    # in this situation\n+                    error(assignment.pos, \"Mutable default passed argument for '{0}' - \"\n+                          \"use 'default_factory' instead\".format(name))\n+\n+                field = Field(default=assignment)\n+        else:\n+            field = Field()\n+        field.is_initvar = is_initvar\n+        if entry.visibility == \"private\":\n+            field.private = True\n+        fields[name] = field\n+    node.entry.type.dataclass_fields = fields\n+    return fields\n+\n+def handle_cclass_dataclass(node, dataclass_args, analyse_decs_transform):\n+    from .ExprNodes import (AttributeNode, TupleNode, NameNode,\n+                            GeneralCallNode, DictNode,\n+                            IdentifierStringNode, BoolNode, DictItemNode)\n+    # default argument values from https://docs.python.org/3/library/dataclasses.html\n+    kwargs = dict(init=True, repr=True, eq=True,\n+                  order=False, unsafe_hash=False, frozen=False)\n+    if dataclass_args is not None:\n+        if dataclass_args[0]:\n+            error(node.pos, \"cython.dataclasses.dataclass takes no positional arguments\")\n+        for k, v in dataclass_args[1].items():\n+            if k not in kwargs:\n+                error(node.pos,\n+                      \"Unrecognised keyword argument '{0}' to cython.dataclasses.dataclass\".format(k))\n+            if not isinstance(v, ExprNodes.BoolNode):\n+                error(node.pos,\n+                      \"Arguments to cython.dataclasses.dataclass must be True or False\")\n+            kwargs[k] = v\n+\n+    fields = process_class_get_fields(node)\n+\n+    dataclass_module = make_dataclasses_module_callnode(node.pos)\n+\n+    # create __dataclass_params__ attribute\n+    dataclass_params_func = AttributeNode(node.pos, obj=dataclass_module,\n+                                            attribute=EncodedString(\"_DataclassParams\"))\n+    dataclass_params_keywords = DictNode.from_pairs(node.pos,\n+            [ (IdentifierStringNode(node.pos, value=EncodedString(k)),\n+                BoolNode(node.pos, value=v))\n+                for k, v in kwargs.items() ])\n+    dataclass_params = GeneralCallNode(node.pos,\n+                                    function = dataclass_params_func,\n+                                    positional_args = TupleNode(node.pos, args=[]),\n+                                    keyword_args = dataclass_params_keywords)\n+    dataclass_params_assignment = \\\n+        Nodes.SingleAssignmentNode(node.pos,\n+                        lhs = NameNode(node.pos,\n+                                        name=EncodedString(\"__dataclass_params__\")),\n+                        rhs = dataclass_params)\n+\n+    dataclass_fields_stats = _set_up_dataclass_fields(node, fields, dataclass_module)\n+\n+    stats = Nodes.StatListNode(node.pos,\n+                               stats=[dataclass_params_assignment]\n+                                    + dataclass_fields_stats)\n+\n+    init_stats = generate_init_code(kwargs['init'], node, fields)\n+    repr_stats = generate_repr_code(kwargs['repr'], node, fields)\n+    eq_stats = generate_eq_code(kwargs['eq'], node, fields)\n+    order_stats = generate_order_code(kwargs['order'], node, fields)\n+    hash_stats = generate_hash_code(kwargs['unsafe_hash'], kwargs['eq'], kwargs['frozen'],\n+                       node, fields)\n+\n+    stats.stats = stats.stats + init_stats + repr_stats + eq_stats + order_stats + hash_stats\n+\n+    # turn off annotation typing, so all arguments to __init__ are accepted as\n+    # generic objects and thus can accept _HAS_DEFAULT_FACTORY\n+    # type conversion comes later\n+    comp_directives = Nodes.CompilerDirectivesNode(node.pos,\n+        directives = node.scope.directives.copy(),\n+        body=stats)\n+    comp_directives.directives['annotation_typing'] = False\n+\n+    comp_directives.analyse_declarations(node.scope)\n+    # probably already in this scope, but it doesn't hurt to make sure\n+    analyse_decs_transform.enter_scope(node, node.scope)\n+    analyse_decs_transform.visit(comp_directives)\n+    analyse_decs_transform.exit_scope()\n+\n+    node.body.stats.append(comp_directives)\n+\n+def generate_init_code(init, node, fields):\n+    if not init or node.scope.lookup_here(\"__init__\"):\n+        return []\n+    # selfname behaviour copied from the cpython module\n+    selfname = \"__dataclass_self__\" if \"self\" in fields else \"self\"\n+    args = [selfname]\n+\n+    placeholders = {}\n+    placeholder_count = [0]\n+\n+    # create a temp to get _HAS_DEFAULT_FACTORY\n+    dataclass_module = make_dataclasses_module_callnode(node.pos)\n+    has_default_factory = ExprNodes.AttributeNode(node.pos,\n+                                        obj = dataclass_module,\n+                                        attribute = EncodedString(\"_HAS_DEFAULT_FACTORY\"))\n+\n+    def get_placeholder_name():\n+        while True:\n+            name = \"PLACEHOLDER_%s\" % placeholder_count[0]\n+            if (name not in placeholders\n+                    and name not in fields):\n+                # make sure name isn't already used and doesn't\n+                # conflict with a variable name (which is unlikely but possible)\n+                break\n+            placeholder_count[0] += 1\n+        return name\n+\n+    default_factory_placeholder = get_placeholder_name()\n+    placeholders[default_factory_placeholder] = has_default_factory\n+\n+    seen_default = False\n+    for name, field in fields.items():\n+        if not field.init.value:\n+            continue\n+        entry = node.scope.lookup(name)\n+        annotation = entry.annotation.string if entry.annotation else None\n+        if annotation:\n+            annotation = u\": %s\" % annotation.value\n+        else:\n+            annotation = u\"\"\n+        assignment = u''\n+        if field.default is not MISSING or field.default_factory is not MISSING:\n+            seen_default = True\n+            if field.default_factory is not MISSING:\n+                ph_name = default_factory_placeholder\n+            else:\n+                ph_name = get_placeholder_name()\n+                placeholders[ph_name] = field.default  # should be node\n+            assignment = u\" = %s\" % ph_name\n+        elif seen_default:\n+            error(entry.pos, (\"non-default argument %s follows default argument \"\n+                             \"in dataclass __init__\") % name)\n+            return []\n+\n+        args.append(u\"%s%s%s\" % (name, annotation, assignment))\n+    args = u\", \".join(args)\n+    func_call = u\"def __init__(%s):\" % args\n+\n+    code_lines = [func_call,\n+                  \"    pass\",  # just in-case it's an empty body\n+                  ]\n+    for name, field in fields.items():\n+        if field.is_initvar:\n+            continue\n+        if field.default_factory is MISSING:\n+            if field.init.value:\n+                code_lines.append(u\"    %s.%s = %s\" % (selfname, name, name))\n+        else:\n+            ph_name = get_placeholder_name()\n+            placeholders[ph_name] = field.default_factory\n+            if field.init.value:\n+                code_lines.append(u\"    if %s is %s:\"\n+                                % (name, default_factory_placeholder))\n+                code_lines.append(u\"        %s.%s = %s()\"\n+                                % (selfname, name, ph_name))\n+                code_lines.append(u\"    else:\")\n+                code_lines.append(u\"        %s.%s = %s\" % (selfname, name, name))\n+            else:\n+                # still need to use the default factory to initialize\n+                code_lines.append(u\"    %s.%s = %s()\"\n+                                  % (selfname, name, ph_name))\n+    if node.scope.lookup(\"__post_init__\"):\n+        post_init_vars = \", \".join(name for name, field in fields.items()\n+                                    if field.is_initvar)\n+        code_lines.append(\"    %s.__post_init__(%s)\" % (selfname, post_init_vars))\n+    code_lines = u\"\\n\".join(code_lines)\n+\n+    code_tree = TreeFragment(code_lines, level='c_class',\n+                             pipeline=[NormalizeTree(node.scope),\n+                                       ]\n+                              ).substitute(placeholders)\n+\n+    return code_tree.stats\n+\n+\n+def generate_repr_code(repr, node, fields):\n+    if not repr or node.scope.lookup(\"__repr__\"):\n+        return []\n+    code_lines = [\"def __repr__(self):\"]\n+    strs = [ u\"%s={self.%s}\" % (name, name)\n+            for name, field in fields.items() if field.repr.value and not field.is_initvar ]\n+    format_string = u\", \".join(strs)\n+    code_lines.append(u\"    return f'{type(self).__name__}(%s)'\" % format_string)\n+    code_lines = u\"\\n\".join(code_lines)\n+\n+    code_tree = TreeFragment(code_lines,\n+                              level='c_class', pipeline=[NormalizeTree(None)]\n+                              ).substitute({})\n+    return code_tree.stats\n+\n+def generate_cmp_code(op, funcname, node, fields):\n+    if node.scope.lookup_here(funcname):\n+        return []  # already exists\n+\n+    names = [ name for name, field in fields.items()\n+                if (field.compare.value and not field.is_initvar) ]\n+\n+    if not names:\n+        return []  # no comparable types\n+\n+    code_lines = [\"def %s(self, other):\" % funcname,\n+                  \"    cdef %s other_cast\" % node.class_name,\n+                  \"    try:\",\n+                  \"        other_cast = other\",\n+                  \"    except TypeError:\",\n+                  \"        return NotImplemented\"]\n+\n+    for name in names:\n+        shared = \"if not (self.%s == other_cast.%s):\" % (name, name)\n+        if op == \"==\":\n+            code_lines.append(\"    %s return False\" % shared)\n+        else:\n+            code_lines.append(\"    %s return self.%s %s other_cast.%s\" %\n+                              (shared, name, op, name))\n+\n+    if \"=\" in op:\n+        code_lines.append(\"    return True\")\n+    else:\n+        code_lines.append(\"    return False\")\n+\n+    code_lines = u\"\\n\".join(code_lines)\n+\n+    code_tree = TreeFragment(code_lines,\n+                              level='c_class', pipeline=[NormalizeTree(None)]\n+                              ).substitute({})\n+    return code_tree.stats\n+\n+def generate_eq_code(eq, node, fields):\n+    if not eq:\n+        return []\n+    return generate_cmp_code(\"==\", \"__eq__\", node, fields)\n+\n+def generate_order_code(order, node, fields):\n+    if not order:\n+        return []\n+    stats = []\n+    for op, name in [(\"<\", \"__lt__\"),\n+                     (\"<=\", \"__le__\"),\n+                     (\">\", \"__gt__\"),\n+                     (\">=\", \"__ge__\")]:\n+        stats.extend(generate_cmp_code(op, name, node, fields))\n+    return stats\n+\n+def generate_hash_code(unsafe_hash, eq, frozen, node, fields):\n+    hash_entry = node.scope.lookup_here(\"__hash__\")\n+    if hash_entry:\n+        # TODO ideally assignment of __hash__ to None shouldn't trigger this\n+        # but difficult to get the right information here\n+        if unsafe_hash:\n+            error(node.pos, \"Request for dataclass unsafe_hash when a '__hash__' function\"\n+                  \" already exists\")\n+        return []\n+    if not unsafe_hash:\n+        if eq and not frozen:\n+            return [Nodes.SingleAssignmentNode(node.pos,\n+                                        lhs = ExprNodes.NameNode(node.pos, name=EncodedString(\"__hash__\")),\n+                                        rhs = ExprNodes.NoneNode(node.pos))]\n+        if not eq:\n+            return []\n+\n+    names = [ name for name, field in fields.items()\n+                if (not field.is_initvar and\n+                    (field.compare.value if field.hash.value is None else field.hash.value)) ]\n+    if not names:\n+        return []  # nothing to hash\n+\n+    # make a tuple of the hashes\n+    tpl = u\", \".join(u\"hash(self.%s)\" % name for name in names )\n+\n+    # if we're here we want to generate a hash\n+    code_lines = u\"\"\"def __hash__(self):\n+    return hash((%s))\n+\"\"\" % tpl\n+    code_tree = TreeFragment(code_lines,\n+                              level='c_class', pipeline=[NormalizeTree(None)]\n+                              ).substitute({})\n+    return code_tree.stats\n+\n+\n+class GetTypeNode(ExprNodes.ExprNode):\n+    # Tries to return a pytype_type if possible. However contains\n+    # some fallback provision if it turns out not to resolve to a Python object\n+    # Initialize with \"entry\"\n+\n+    subexprs = []\n+\n+    def __init__(self, entry):\n+        super(GetTypeNode, self).__init__(entry.pos, entry=entry)\n+\n+    def analyse_types(self, env):\n+        type = self.entry.type\n+\n+        if type.is_extension_type or type.is_builtin_type:\n+            return ExprNodes.RawCNameExprNode(self.pos, Builtin.type_type,\n+                                                type.typeptr_cname).analyse_types(env)\n+        else:\n+            names = None\n+            py_name = type.py_type_name()\n+            # int types can return \"(int, long)\"\n+            if py_name:\n+                names = py_name.split(\",\")\n+                names = [ n.strip(\"() \") for n in names ]",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r579712438",
            "id": 579712438,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTcxMjQzOA==",
            "original_commit_id": "de0ff9e6da6dad8a774c33a88ff9273aad7813e0",
            "original_line": 455,
            "original_position": 455,
            "original_start_line": 454,
            "path": "Cython/Compiler/Dataclass.py",
            "position": null,
            "pull_request_review_id": 594785037,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/579712438",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r579712743"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/579712743"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n            module_field_name = global_scope.mangle(\r\n                global_scope.mangle(Naming.dataclass_field_default_cname, node.class_name),\r\n                name)\r\n```",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2021-02-20T21:41:24Z",
            "diff_hunk": "@@ -0,0 +1,593 @@\n+# functions to transform a c class into a dataclass\n+\n+from collections import OrderedDict\n+\n+from .Errors import error, warning\n+from . import ExprNodes, Nodes, PyrexTypes\n+from .Code import UtilityCode, TempitaUtilityCode\n+from .Visitor import VisitorTransform\n+from . import UtilNodes, Builtin, Naming\n+from .StringEncoding import BytesLiteral, EncodedString\n+from .TreeFragment import TreeFragment\n+from .ParseTreeTransforms import (NormalizeTree, SkipDeclarations, AnalyseDeclarationsTransform,\n+                                  MarkClosureVisitor)\n+\n+def make_dataclasses_module_callnode(pos):\n+    python_utility_code = UtilityCode.load_cached(\"Dataclasses_fallback\", \"Dataclasses.py\")\n+    python_utility_code = EncodedString(python_utility_code.impl)\n+    loader_utilitycode = TempitaUtilityCode.load_cached(\"SpecificModuleLoader\", \"Dataclasses.c\",\n+            context={'cname': \"dataclasses\", 'py_code': python_utility_code.as_c_string_literal()})\n+    return ExprNodes.PythonCapiCallNode(pos, \"__Pyx_Load_dataclasses_Module\",\n+                                PyrexTypes.CFuncType(PyrexTypes.py_object_type, []),\n+                                utility_code = loader_utilitycode,\n+                                args=[])\n+\n+_INTERNAL_DEFAULTSHOLDER_NAME = EncodedString('__pyx_dataclass_defaults')\n+\n+class RemoveAssignments(VisitorTransform, SkipDeclarations):\n+    def __init__(self, names):\n+        super(RemoveAssignments, self).__init__()\n+        self.names = names\n+        self.removed_assignments = {}\n+\n+    def visit_CClassNode(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+    def visit_PyClassNode(self, node):\n+        return node  # go no further\n+\n+    def visit_FuncDefNode(self, node):\n+        return node  # go no further\n+\n+    def visit_SingleAssignmentNode(self, node):\n+        if node.lhs.is_name and node.lhs.name in self.names:\n+            if node.lhs.name in self.removed_assignments:\n+                warning(node.pos, (\"Multiple assignments for '%s' in dataclass; \"\n+                                   \"using most recent\") % node.lhs.name, 1)\n+            self.removed_assignments[node.lhs.name] = node.rhs\n+            return []\n+        return node\n+\n+    # I believe cascaded assignment is always a syntax error with decorators\n+    # so can be ignored\n+\n+    def visit_Node(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+class _MISSING_TYPE:\n+    pass\n+MISSING = _MISSING_TYPE()\n+\n+def process_class_get_fields(node):\n+    _TrueNode = ExprNodes.BoolNode(node.pos, value=True)\n+    _FalseNode = ExprNodes.BoolNode(node.pos, value=False)\n+    _NoneNode = ExprNodes.NoneNode(node.pos)\n+\n+    class Field(object):\n+        \"\"\"\n+        Field is based on the dataclasses.field class from the standard library module.\n+        It is used internally during the generation of Cython dataclasses to keep track\n+        of the settings for individual attributes.\n+\n+        Attributes of this class are stored as nodes so they can be used in code construction\n+        more readily (i.e. we store BoolNode rather than bool)\n+        The class (+ _TrueNode, _FalseNode and _NoneNode) are defined inside a function\n+        that when _TrueNode (etc) are used as default arguments they can have a useful pos\n+        \"\"\"\n+        default = MISSING\n+        default_factory = MISSING\n+        private = False\n+        def __init__(self, default=MISSING, default_factory=MISSING,\n+                        repr=_TrueNode, hash=_NoneNode, init=_TrueNode,\n+                        compare=_TrueNode, metadata=_NoneNode,\n+                        is_initvar=False):\n+            if default is not MISSING:\n+                self.default = default\n+            if default_factory is not MISSING:\n+                self.default_factory = default_factory\n+            self.repr = repr\n+            self.hash = hash\n+            self.init = init\n+            self.compare = compare\n+            self.metadata = metadata\n+            self.is_initvar = is_initvar\n+\n+            for field_name in (\"repr\", \"hash\", \"init\", \"compare\", \"metadata\"):\n+                field_value = getattr(self, field_name)\n+                if not field_value.is_literal:\n+                    error(field_value.pos, \"cython.dataclasses.field parameter '%s' must be a literal value\"\n+                            % field_name)\n+\n+    var_entries = node.scope.var_entries\n+    # order of definition is used in the dataclass\n+    var_entries = sorted(var_entries, key=lambda entry: entry.pos)\n+    var_names = [ entry.name for entry in var_entries ]\n+\n+    # remove assignments for stat_list\n+    transform = RemoveAssignments(var_names)\n+    transform(node)\n+\n+    if node.base_type and node.base_type.dataclass_fields:\n+        fields = node.base_type.dataclass_fields.copy()\n+    else:\n+        fields = OrderedDict()\n+    for entry in var_entries:\n+        name = entry.name\n+        is_initvar = entry.type.is_dataclasses_initvar\n+        if name in transform.removed_assignments:\n+            assignment = transform.removed_assignments[name]\n+            if (isinstance(assignment, ExprNodes.CallNode)\n+                    and assignment.function.as_cython_attribute() == \"dataclasses.field\"):\n+                # I believe most of this is well-enforced when it's treated as a directive\n+                # but it doesn't hurt to make sure\n+                if (not isinstance(assignment, ExprNodes.GeneralCallNode)\n+                        or not isinstance(assignment.positional_args, ExprNodes.TupleNode)\n+                        or assignment.positional_args.args\n+                        or not isinstance(assignment.keyword_args, ExprNodes.DictNode)):\n+                    error(assignment.pos, \"Call to 'cython.dataclasses.field' must only consist \"\n+                          \"of compile-time keyword arguments\")\n+                    continue\n+                keyword_args = { k.value: v for k, v in assignment.keyword_args.key_value_pairs }\n+                if 'default' in keyword_args and 'default_factory' in keyword_args:\n+                    error(assignment.pos, \"You cannot specify both 'default' and 'default_factory'\"\n+                          \" for a dataclass member\")\n+                    continue\n+                field = Field(**keyword_args)\n+            else:\n+                if isinstance(assignment, ExprNodes.CallNode):\n+                    func = assignment.function\n+                    if ((func.is_name and func.name == \"field\")\n+                            or (isinstance(func, ExprNodes.AttributeNode)\n+                                and func.attribute == \"field\")):\n+                        warning(assignment.pos, \"Do you mean cython.dataclasses.field instead?\", 1)\n+                if assignment.type in [Builtin.list_type,\n+                                    Builtin.dict_type,\n+                                    Builtin.set_type]:\n+                    # The standard library module generates a TypeError at runtime\n+                    # in this situation\n+                    error(assignment.pos, \"Mutable default passed argument for '{0}' - \"\n+                          \"use 'default_factory' instead\".format(name))\n+\n+                field = Field(default=assignment)\n+        else:\n+            field = Field()\n+        field.is_initvar = is_initvar\n+        if entry.visibility == \"private\":\n+            field.private = True\n+        fields[name] = field\n+    node.entry.type.dataclass_fields = fields\n+    return fields\n+\n+def handle_cclass_dataclass(node, dataclass_args, analyse_decs_transform):\n+    from .ExprNodes import (AttributeNode, TupleNode, NameNode,\n+                            GeneralCallNode, DictNode,\n+                            IdentifierStringNode, BoolNode, DictItemNode)\n+    # default argument values from https://docs.python.org/3/library/dataclasses.html\n+    kwargs = dict(init=True, repr=True, eq=True,\n+                  order=False, unsafe_hash=False, frozen=False)\n+    if dataclass_args is not None:\n+        if dataclass_args[0]:\n+            error(node.pos, \"cython.dataclasses.dataclass takes no positional arguments\")\n+        for k, v in dataclass_args[1].items():\n+            if k not in kwargs:\n+                error(node.pos,\n+                      \"Unrecognised keyword argument '{0}' to cython.dataclasses.dataclass\".format(k))\n+            if not isinstance(v, ExprNodes.BoolNode):\n+                error(node.pos,\n+                      \"Arguments to cython.dataclasses.dataclass must be True or False\")\n+            kwargs[k] = v\n+\n+    fields = process_class_get_fields(node)\n+\n+    dataclass_module = make_dataclasses_module_callnode(node.pos)\n+\n+    # create __dataclass_params__ attribute\n+    dataclass_params_func = AttributeNode(node.pos, obj=dataclass_module,\n+                                            attribute=EncodedString(\"_DataclassParams\"))\n+    dataclass_params_keywords = DictNode.from_pairs(node.pos,\n+            [ (IdentifierStringNode(node.pos, value=EncodedString(k)),\n+                BoolNode(node.pos, value=v))\n+                for k, v in kwargs.items() ])\n+    dataclass_params = GeneralCallNode(node.pos,\n+                                    function = dataclass_params_func,\n+                                    positional_args = TupleNode(node.pos, args=[]),\n+                                    keyword_args = dataclass_params_keywords)\n+    dataclass_params_assignment = \\\n+        Nodes.SingleAssignmentNode(node.pos,\n+                        lhs = NameNode(node.pos,\n+                                        name=EncodedString(\"__dataclass_params__\")),\n+                        rhs = dataclass_params)\n+\n+    dataclass_fields_stats = _set_up_dataclass_fields(node, fields, dataclass_module)\n+\n+    stats = Nodes.StatListNode(node.pos,\n+                               stats=[dataclass_params_assignment]\n+                                    + dataclass_fields_stats)\n+\n+    init_stats = generate_init_code(kwargs['init'], node, fields)\n+    repr_stats = generate_repr_code(kwargs['repr'], node, fields)\n+    eq_stats = generate_eq_code(kwargs['eq'], node, fields)\n+    order_stats = generate_order_code(kwargs['order'], node, fields)\n+    hash_stats = generate_hash_code(kwargs['unsafe_hash'], kwargs['eq'], kwargs['frozen'],\n+                       node, fields)\n+\n+    stats.stats = stats.stats + init_stats + repr_stats + eq_stats + order_stats + hash_stats\n+\n+    # turn off annotation typing, so all arguments to __init__ are accepted as\n+    # generic objects and thus can accept _HAS_DEFAULT_FACTORY\n+    # type conversion comes later\n+    comp_directives = Nodes.CompilerDirectivesNode(node.pos,\n+        directives = node.scope.directives.copy(),\n+        body=stats)\n+    comp_directives.directives['annotation_typing'] = False\n+\n+    comp_directives.analyse_declarations(node.scope)\n+    # probably already in this scope, but it doesn't hurt to make sure\n+    analyse_decs_transform.enter_scope(node, node.scope)\n+    analyse_decs_transform.visit(comp_directives)\n+    analyse_decs_transform.exit_scope()\n+\n+    node.body.stats.append(comp_directives)\n+\n+def generate_init_code(init, node, fields):\n+    if not init or node.scope.lookup_here(\"__init__\"):\n+        return []\n+    # selfname behaviour copied from the cpython module\n+    selfname = \"__dataclass_self__\" if \"self\" in fields else \"self\"\n+    args = [selfname]\n+\n+    placeholders = {}\n+    placeholder_count = [0]\n+\n+    # create a temp to get _HAS_DEFAULT_FACTORY\n+    dataclass_module = make_dataclasses_module_callnode(node.pos)\n+    has_default_factory = ExprNodes.AttributeNode(node.pos,\n+                                        obj = dataclass_module,\n+                                        attribute = EncodedString(\"_HAS_DEFAULT_FACTORY\"))\n+\n+    def get_placeholder_name():\n+        while True:\n+            name = \"PLACEHOLDER_%s\" % placeholder_count[0]\n+            if (name not in placeholders\n+                    and name not in fields):\n+                # make sure name isn't already used and doesn't\n+                # conflict with a variable name (which is unlikely but possible)\n+                break\n+            placeholder_count[0] += 1\n+        return name\n+\n+    default_factory_placeholder = get_placeholder_name()\n+    placeholders[default_factory_placeholder] = has_default_factory\n+\n+    seen_default = False\n+    for name, field in fields.items():\n+        if not field.init.value:\n+            continue\n+        entry = node.scope.lookup(name)\n+        annotation = entry.annotation.string if entry.annotation else None\n+        if annotation:\n+            annotation = u\": %s\" % annotation.value\n+        else:\n+            annotation = u\"\"\n+        assignment = u''\n+        if field.default is not MISSING or field.default_factory is not MISSING:\n+            seen_default = True\n+            if field.default_factory is not MISSING:\n+                ph_name = default_factory_placeholder\n+            else:\n+                ph_name = get_placeholder_name()\n+                placeholders[ph_name] = field.default  # should be node\n+            assignment = u\" = %s\" % ph_name\n+        elif seen_default:\n+            error(entry.pos, (\"non-default argument %s follows default argument \"\n+                             \"in dataclass __init__\") % name)\n+            return []\n+\n+        args.append(u\"%s%s%s\" % (name, annotation, assignment))\n+    args = u\", \".join(args)\n+    func_call = u\"def __init__(%s):\" % args\n+\n+    code_lines = [func_call,\n+                  \"    pass\",  # just in-case it's an empty body\n+                  ]\n+    for name, field in fields.items():\n+        if field.is_initvar:\n+            continue\n+        if field.default_factory is MISSING:\n+            if field.init.value:\n+                code_lines.append(u\"    %s.%s = %s\" % (selfname, name, name))\n+        else:\n+            ph_name = get_placeholder_name()\n+            placeholders[ph_name] = field.default_factory\n+            if field.init.value:\n+                code_lines.append(u\"    if %s is %s:\"\n+                                % (name, default_factory_placeholder))\n+                code_lines.append(u\"        %s.%s = %s()\"\n+                                % (selfname, name, ph_name))\n+                code_lines.append(u\"    else:\")\n+                code_lines.append(u\"        %s.%s = %s\" % (selfname, name, name))\n+            else:\n+                # still need to use the default factory to initialize\n+                code_lines.append(u\"    %s.%s = %s()\"\n+                                  % (selfname, name, ph_name))\n+    if node.scope.lookup(\"__post_init__\"):\n+        post_init_vars = \", \".join(name for name, field in fields.items()\n+                                    if field.is_initvar)\n+        code_lines.append(\"    %s.__post_init__(%s)\" % (selfname, post_init_vars))\n+    code_lines = u\"\\n\".join(code_lines)\n+\n+    code_tree = TreeFragment(code_lines, level='c_class',\n+                             pipeline=[NormalizeTree(node.scope),\n+                                       ]\n+                              ).substitute(placeholders)\n+\n+    return code_tree.stats\n+\n+\n+def generate_repr_code(repr, node, fields):\n+    if not repr or node.scope.lookup(\"__repr__\"):\n+        return []\n+    code_lines = [\"def __repr__(self):\"]\n+    strs = [ u\"%s={self.%s}\" % (name, name)\n+            for name, field in fields.items() if field.repr.value and not field.is_initvar ]\n+    format_string = u\", \".join(strs)\n+    code_lines.append(u\"    return f'{type(self).__name__}(%s)'\" % format_string)\n+    code_lines = u\"\\n\".join(code_lines)\n+\n+    code_tree = TreeFragment(code_lines,\n+                              level='c_class', pipeline=[NormalizeTree(None)]\n+                              ).substitute({})\n+    return code_tree.stats\n+\n+def generate_cmp_code(op, funcname, node, fields):\n+    if node.scope.lookup_here(funcname):\n+        return []  # already exists\n+\n+    names = [ name for name, field in fields.items()\n+                if (field.compare.value and not field.is_initvar) ]\n+\n+    if not names:\n+        return []  # no comparable types\n+\n+    code_lines = [\"def %s(self, other):\" % funcname,\n+                  \"    cdef %s other_cast\" % node.class_name,\n+                  \"    try:\",\n+                  \"        other_cast = other\",\n+                  \"    except TypeError:\",\n+                  \"        return NotImplemented\"]\n+\n+    for name in names:\n+        shared = \"if not (self.%s == other_cast.%s):\" % (name, name)\n+        if op == \"==\":\n+            code_lines.append(\"    %s return False\" % shared)\n+        else:\n+            code_lines.append(\"    %s return self.%s %s other_cast.%s\" %\n+                              (shared, name, op, name))\n+\n+    if \"=\" in op:\n+        code_lines.append(\"    return True\")\n+    else:\n+        code_lines.append(\"    return False\")\n+\n+    code_lines = u\"\\n\".join(code_lines)\n+\n+    code_tree = TreeFragment(code_lines,\n+                              level='c_class', pipeline=[NormalizeTree(None)]\n+                              ).substitute({})\n+    return code_tree.stats\n+\n+def generate_eq_code(eq, node, fields):\n+    if not eq:\n+        return []\n+    return generate_cmp_code(\"==\", \"__eq__\", node, fields)\n+\n+def generate_order_code(order, node, fields):\n+    if not order:\n+        return []\n+    stats = []\n+    for op, name in [(\"<\", \"__lt__\"),\n+                     (\"<=\", \"__le__\"),\n+                     (\">\", \"__gt__\"),\n+                     (\">=\", \"__ge__\")]:\n+        stats.extend(generate_cmp_code(op, name, node, fields))\n+    return stats\n+\n+def generate_hash_code(unsafe_hash, eq, frozen, node, fields):\n+    hash_entry = node.scope.lookup_here(\"__hash__\")\n+    if hash_entry:\n+        # TODO ideally assignment of __hash__ to None shouldn't trigger this\n+        # but difficult to get the right information here\n+        if unsafe_hash:\n+            error(node.pos, \"Request for dataclass unsafe_hash when a '__hash__' function\"\n+                  \" already exists\")\n+        return []\n+    if not unsafe_hash:\n+        if eq and not frozen:\n+            return [Nodes.SingleAssignmentNode(node.pos,\n+                                        lhs = ExprNodes.NameNode(node.pos, name=EncodedString(\"__hash__\")),\n+                                        rhs = ExprNodes.NoneNode(node.pos))]\n+        if not eq:\n+            return []\n+\n+    names = [ name for name, field in fields.items()\n+                if (not field.is_initvar and\n+                    (field.compare.value if field.hash.value is None else field.hash.value)) ]\n+    if not names:\n+        return []  # nothing to hash\n+\n+    # make a tuple of the hashes\n+    tpl = u\", \".join(u\"hash(self.%s)\" % name for name in names )\n+\n+    # if we're here we want to generate a hash\n+    code_lines = u\"\"\"def __hash__(self):\n+    return hash((%s))\n+\"\"\" % tpl\n+    code_tree = TreeFragment(code_lines,\n+                              level='c_class', pipeline=[NormalizeTree(None)]\n+                              ).substitute({})\n+    return code_tree.stats\n+\n+\n+class GetTypeNode(ExprNodes.ExprNode):\n+    # Tries to return a pytype_type if possible. However contains\n+    # some fallback provision if it turns out not to resolve to a Python object\n+    # Initialize with \"entry\"\n+\n+    subexprs = []\n+\n+    def __init__(self, entry):\n+        super(GetTypeNode, self).__init__(entry.pos, entry=entry)\n+\n+    def analyse_types(self, env):\n+        type = self.entry.type\n+\n+        if type.is_extension_type or type.is_builtin_type:\n+            return ExprNodes.RawCNameExprNode(self.pos, Builtin.type_type,\n+                                                type.typeptr_cname).analyse_types(env)\n+        else:\n+            names = None\n+            py_name = type.py_type_name()\n+            # int types can return \"(int, long)\"\n+            if py_name:\n+                names = py_name.split(\",\")\n+                names = [ n.strip(\"() \") for n in names ]\n+            if names:\n+                for name in names:\n+                    name = EncodedString(name)\n+                    nn = ExprNodes.NameNode(self.pos, name=name)\n+                    # try to set the entry now to prevent the user accidentally shadowing\n+                    # the name\n+                    nn.entry = env.builtin_scope().lookup(name)\n+                    if not nn.entry:\n+                        try:\n+                            nn.entry = env.declare_builtin(name, self.pos)\n+                        except:\n+                            pass  # not convinced a failure means much\n+                    if nn.entry:\n+                        return nn.analyse_types(env)\n+\n+        # otherwise we're left to return a string\n+        s = self.entry.annotation.string.value if self.entry.annotation else None\n+        if not s:\n+            s = self.entry.type.declaration_code(\"\", for_display=1)\n+        return ExprNodes.StringNode(self.pos, value=s).analyse_types(env)\n+\n+\n+class FieldsValueNode(ExprNodes.ExprNode):\n+    # largely just forwards arg. Allows it to be coerced to a Python object\n+    # if possible, and if not then generates a sensible backup string\n+    subexprs = ['arg']\n+\n+    def __init__(self, pos, arg):\n+        super(FieldsValueNode, self).__init__(pos, arg=arg)\n+\n+    def analyse_types(self, env):\n+        self.arg.analyse_types(env)\n+        self.type = self.arg.type\n+        return self\n+\n+    def coerce_to_pyobject(self, env):\n+        if self.arg.type.can_coerce_to_pyobject(env):\n+            return self.arg.coerce_to_pyobject(env)\n+        else:\n+            # A string representation of the code that gave the field seems like a reasonable\n+            # fallback. This'll mostly happen for \"default\" and \"default_factory\" where the\n+            # type may be a C-type that can't be converted to Python.\n+            return self._make_string()\n+\n+    def _make_string(self):\n+        from .AutoDocTransforms import AnnotationWriter\n+        writer = AnnotationWriter(description=\"Dataclass field\")\n+        string = writer.write(self.arg)\n+        return ExprNodes.StringNode(self.pos, value=EncodedString(string))\n+\n+    def generate_evaluation_code(self, code):\n+        return self.arg.generate_evaluation_code(code)\n+\n+\n+def _set_up_dataclass_fields(node, fields, dataclass_module):\n+    from .ExprNodes import (AttributeNode, TupleNode, NameNode,\n+                            GeneralCallNode, DictNode,\n+                            IdentifierStringNode, BoolNode, DictItemNode,\n+                            CloneNode)\n+\n+    # For defaults and default_factories containing things like lambda,\n+    # they're already declared in the class scope, and it creates a big\n+    # problem if multiple copies are floating around in both the __init__\n+    # function, and in the __dataclass_fields__ structure.\n+    # Therefore, create module-level constants holding these values and\n+    # pass those around instead\n+    variables_assignment_stats = []\n+    for name, field in fields.items():\n+        if field.private:\n+            continue  # doesn't appear in the public interface\n+        for attrname in [ \"default\", \"default_factory\" ]:\n+            f_def = getattr(field, attrname)\n+            if f_def is MISSING or f_def.is_literal or f_def.is_name:\n+                # some simple cases where we don't need to set up\n+                # the variable as a module-level constant\n+                continue\n+            global_scope = node.scope.global_scope()\n+            module_field_name = global_scope.mangle(global_scope.mangle(\n+                                    Naming.dataclass_field_default_cname,\n+                                    node.class_name), name)",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r579712743",
            "id": 579712743,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTcxMjc0Mw==",
            "original_commit_id": "de0ff9e6da6dad8a774c33a88ff9273aad7813e0",
            "original_line": 535,
            "original_position": 535,
            "original_start_line": 533,
            "path": "Cython/Compiler/Dataclass.py",
            "position": null,
            "pull_request_review_id": 594785037,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/579712743",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r579712943"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/579712943"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n        \"\"\"\r\n        Gets the module.path that this node was imported from.\r\n\r\n        Many nodes do not have one, or it is ambiguous, in which case\r\n        this function returns a false value.\r\n        \"\"\"\r\n```",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2021-02-20T21:43:49Z",
            "diff_hunk": "@@ -1156,6 +1156,14 @@ def from_node(cls, node, **kwargs):\n                 kwargs[attr_name] = value\n         return cls(node.pos, **kwargs)\n \n+    def get_unambiguous_import_path(self):\n+        \"\"\"\n+        Gets the module.path that this node was imported from\n+\n+        Many nodes do not have one, or it is not unambiguous, in which case\n+        this function returns a false value\"\"\"",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r579712943",
            "id": 579712943,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTcxMjk0Mw==",
            "original_commit_id": "de0ff9e6da6dad8a774c33a88ff9273aad7813e0",
            "original_line": 1164,
            "original_position": 9,
            "original_start_line": 1160,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_review_id": 594785037,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/579712943",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r579713559"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/579713559"
                }
            },
            "author_association": "MEMBER",
            "body": "This seems a bit magic. The naming is misleading at first, and then it's unclear what `frozen_directive[1]` is doing, exactly. Could this be worth a helper function, e.g. `get_dataclass_option(env, 'frozen')`, returning either `.value` or `None`, or so. Probably worth looking at other usages first, if any.",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2021-02-20T21:49:13Z",
            "diff_hunk": "@@ -2008,13 +2016,24 @@ def declare_from_annotation(self, env, as_target=False):\n                           \"'%s' cannot be specialized since its type is not a fused argument to this function\" %\n                           self.name)\n                     atype = error_type\n+            kwds = {}\n+            if 'dataclasses.dataclass' in env.directives:\n+                # handle \"frozen\" directive - full inspection of the dataclass directives happens\n+                # in Dataclass.py\n+                frozen_directive = env.directives['dataclasses.dataclass']\n+                if frozen_directive:\n+                    frozen_directive = frozen_directive[1].get('frozen', None)\n+                is_frozen = frozen_directive and frozen_directive.is_literal and frozen_directive.value",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r579713559",
            "id": 579713559,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTcxMzU1OQ==",
            "original_commit_id": "de0ff9e6da6dad8a774c33a88ff9273aad7813e0",
            "original_line": 2026,
            "original_position": 26,
            "original_start_line": 2023,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_review_id": 594785037,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/579713559",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r579714009"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/579714009"
                }
            },
            "author_association": "MEMBER",
            "body": "Why not store the `visibility` directly? This seems unnecessarily complex.",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2021-02-20T21:53:41Z",
            "diff_hunk": "@@ -2008,13 +2016,24 @@ def declare_from_annotation(self, env, as_target=False):\n                           \"'%s' cannot be specialized since its type is not a fused argument to this function\" %\n                           self.name)\n                     atype = error_type\n+            kwds = {}",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r579714009",
            "id": 579714009,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTcxNDAwOQ==",
            "original_commit_id": "de0ff9e6da6dad8a774c33a88ff9273aad7813e0",
            "original_line": 2019,
            "original_position": 19,
            "original_start_line": null,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_review_id": 594785037,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/579714009",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r579714146"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/579714146"
                }
            },
            "author_association": "MEMBER",
            "body": "I have no idea what this means. What is an \"unambiguous import path\"? What would make it ambiguous? (I'm not just referring to the missing `is_…`, it feels like there might be more unclear about this name.)",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2021-02-20T21:55:24Z",
            "diff_hunk": "@@ -2058,9 +2087,14 @@ def analyse_as_extension_type(self, env):\n     def analyse_target_declaration(self, env):\n         if not self.entry:\n             self.entry = env.lookup_here(self.name)\n+        if self.entry:\n+            self.entry.unambiguous_import_path = False  # already exists somewhere and so is now ambiguous",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r579714146",
            "id": 579714146,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTcxNDE0Ng==",
            "original_commit_id": "de0ff9e6da6dad8a774c33a88ff9273aad7813e0",
            "original_line": 2091,
            "original_position": 70,
            "original_start_line": null,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_review_id": 594785037,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/579714146",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r579714517"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/579714517"
                }
            },
            "author_association": "MEMBER",
            "body": "This returns True/False or None, right? Not an import path?",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2021-02-20T21:58:11Z",
            "diff_hunk": "@@ -2557,6 +2591,11 @@ def annotate(self, code):\n                 style, text = 'c_call', 'c function (%s)'\n             code.annotate(pos, AnnotationItem(style, text % self.type, size=len(self.name)))\n \n+    def get_unambiguous_import_path(self):\n+        if self.entry:\n+            return self.entry.unambiguous_import_path\n+        return None",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r579714517",
            "id": 579714517,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTcxNDUxNw==",
            "original_commit_id": "de0ff9e6da6dad8a774c33a88ff9273aad7813e0",
            "original_line": 2597,
            "original_position": 88,
            "original_start_line": 2594,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_review_id": 594785037,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/579714517",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r579714630"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/579714630"
                }
            },
            "author_association": "MEMBER",
            "body": "And now I'm fully confused.",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2021-02-20T21:58:59Z",
            "diff_hunk": "@@ -2666,6 +2705,9 @@ def generate_result_code(self, code):\n             code.error_goto_if_null(self.result(), self.pos)))\n         self.generate_gotref(code)\n \n+    def get_unambiguous_import_path(self):\n+        return self.module_name.value",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r579714630",
            "id": 579714630,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTcxNDYzMA==",
            "original_commit_id": "de0ff9e6da6dad8a774c33a88ff9273aad7813e0",
            "original_line": 2709,
            "original_position": 98,
            "original_start_line": 2708,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_review_id": 594785037,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/579714630",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r579714683"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/579714683"
                }
            },
            "author_association": "MEMBER",
            "body": "This spelling makes it necessary to read twice.\r\n```suggestion\r\n            # this if-statement makes it safe to run twice\r\n```",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2021-02-20T21:59:46Z",
            "diff_hunk": "@@ -9787,6 +9835,9 @@ class LambdaNode(InnerFunctionNode):\n     name = StringEncoding.EncodedString('<lambda>')\n \n     def analyse_declarations(self, env):\n+        if hasattr(self, \"lambda_name\"):\n+            # this if statement makes it safe to run twice",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r579714683",
            "id": 579714683,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTcxNDY4Mw==",
            "original_commit_id": "de0ff9e6da6dad8a774c33a88ff9273aad7813e0",
            "original_line": 9839,
            "original_position": 137,
            "original_start_line": null,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_review_id": 594785037,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/579714683",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r579714746"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/579714746"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n            # this if-statement makes it safe to run twice\r\n```",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2021-02-20T22:00:05Z",
            "diff_hunk": "@@ -9816,6 +9867,9 @@ class GeneratorExpressionNode(LambdaNode):\n     binding = False\n \n     def analyse_declarations(self, env):\n+        if hasattr(self, \"genexpr_name\"):\n+            # this if statement makes it safe to run twice",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r579714746",
            "id": 579714746,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTcxNDc0Ng==",
            "original_commit_id": "de0ff9e6da6dad8a774c33a88ff9273aad7813e0",
            "original_line": 9871,
            "original_position": 147,
            "original_start_line": null,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_review_id": 594785037,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/579714746",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r579714882"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/579714882"
                }
            },
            "author_association": "MEMBER",
            "body": "I don't think we should allow setting both here.",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2021-02-20T22:02:02Z",
            "diff_hunk": "@@ -952,6 +955,10 @@ def inject_type_from_annotations(self, env):\n         base_type, arg_type = annotation.analyse_type_annotation(env, assigned_value=self.default)\n         if base_type is not None:\n             self.base_type = base_type\n+        if arg_type and arg_type.is_typing_optional:\n+            self.or_none = True\n+        if arg_type and arg_type.is_pyobject:\n+            self.not_none = True",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r579714882",
            "id": 579714882,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTcxNDg4Mg==",
            "original_commit_id": "de0ff9e6da6dad8a774c33a88ff9273aad7813e0",
            "original_line": 961,
            "original_position": 35,
            "original_start_line": 958,
            "path": "Cython/Compiler/Nodes.py",
            "position": null,
            "pull_request_review_id": 594785037,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/579714882",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r579714933"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/579714933"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n                if scope is None and len(self.module_path) == 1:\r\n```",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2021-02-20T22:02:26Z",
            "diff_hunk": "@@ -1049,7 +1056,13 @@ def analyse(self, env, could_be_name=False):\n                     else:\n                         scope = None\n                         break\n-\n+                if scope is None and len(self.module_path)==1:",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r579714933",
            "id": 579714933,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTcxNDkzMw==",
            "original_commit_id": "de0ff9e6da6dad8a774c33a88ff9273aad7813e0",
            "original_line": 1059,
            "original_position": 44,
            "original_start_line": null,
            "path": "Cython/Compiler/Nodes.py",
            "position": null,
            "pull_request_review_id": 594785037,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/579714933",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r579715023"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/579715023"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n                    # for indexed_pytype we can be a bit more flexible and pass None\r\n```",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2021-02-20T22:03:43Z",
            "diff_hunk": "@@ -1172,20 +1185,23 @@ def analyse(self, env, could_be_name=False, base_type=None):\n             base_type = self.base_type_node.analyse(env)\n         if base_type.is_error: return base_type\n \n-        if base_type.is_cpp_class and base_type.is_template_type():\n+        if ((base_type.is_cpp_class and base_type.is_template_type()) or\n+                base_type.is_indexed_pytype):\n             # Templated class\n             if self.keyword_args and self.keyword_args.key_value_pairs:\n-                error(self.pos, \"c++ templates cannot take keyword arguments\")\n+                tp = \"c++ templates\" if base_type.is_cpp_class else \"indexed type\"\n+                error(self.pos, \"%s cannot take keyword arguments\" % tp)\n                 self.type = PyrexTypes.error_type\n             else:\n                 template_types = []\n                 for template_node in self.positional_args:\n                     type = template_node.analyse_as_type(env)\n-                    if type is None:\n+                    if type is None and base_type.is_cpp_class:\n                         error(template_node.pos, \"unknown type in template argument\")\n                         type = error_type\n+                    # for indexed_ed_pytype we can be a bit more flexible and pass None",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r579715023",
            "id": 579715023,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTcxNTAyMw==",
            "original_commit_id": "de0ff9e6da6dad8a774c33a88ff9273aad7813e0",
            "original_line": 1202,
            "original_position": 75,
            "original_start_line": null,
            "path": "Cython/Compiler/Nodes.py",
            "position": null,
            "pull_request_review_id": 594785037,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/579715023",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r579715292"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/579715292"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n                        or (isinstance(rd, ExprNodes.AttributeNode) and rd.attribute == \"dataclass\")):\r\n```",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2021-02-20T22:06:08Z",
            "diff_hunk": "@@ -1060,6 +1072,12 @@ def _extract_directives(self, node, scope_name):\n                 realdecs.append(dec)\n         if realdecs and (scope_name == 'cclass' or\n                          isinstance(node, (Nodes.CClassDefNode, Nodes.CVarDefNode))):\n+            for rd in realdecs:\n+                rd = rd.decorator\n+                if ((rd.is_name and rd.name == \"dataclass\")\n+                        or (isinstance(rd, ExprNodes.AttributeNode) and rd.attribute==\"dataclass\")):",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r579715292",
            "id": 579715292,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTcxNTI5Mg==",
            "original_commit_id": "de0ff9e6da6dad8a774c33a88ff9273aad7813e0",
            "original_line": 1078,
            "original_position": 67,
            "original_start_line": null,
            "path": "Cython/Compiler/ParseTreeTransforms.py",
            "position": null,
            "pull_request_review_id": 594785037,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/579715292",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r579715331"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/579715331"
                }
            },
            "author_association": "MEMBER",
            "body": "?",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2021-02-20T22:06:37Z",
            "diff_hunk": "@@ -3080,6 +3101,12 @@ def visit_NameNode(self, node):\n \n     def visit_cython_attribute(self, node):\n         attribute = node.as_cython_attribute()\n+        #if (not attribute and node.is_name\n+        #        and node.name in [\"typing.ClassVar\", \"dataclasses.InitVar\"]  # not directives so don't get picked up correctly\n+        #        ):\n+        #    entry = self.current_env().lookup(node.name)\n+        #    if entry and getattr(entry.scope, \"is_cython_builtin\"):\n+        #        attribute = node.name",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r579715331",
            "id": 579715331,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTcxNTMzMQ==",
            "original_commit_id": "de0ff9e6da6dad8a774c33a88ff9273aad7813e0",
            "original_line": 3109,
            "original_position": 92,
            "original_start_line": 3104,
            "path": "Cython/Compiler/ParseTreeTransforms.py",
            "position": null,
            "pull_request_review_id": 594785037,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/579715331",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r579715373"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/579715373"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n                node.function = ExprNodes.AttributeNode(\r\n                    node.pos, obj=dataclass_module, attribute=EncodedString(function))\r\n```",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2021-02-20T22:07:03Z",
            "diff_hunk": "@@ -3253,6 +3280,11 @@ def visit_SimpleCallNode(self, node):\n                 node.function = ExprNodes.NameNode(node.pos, name=EncodedString('set'))\n             elif function == u'staticmethod':\n                 node.function = ExprNodes.NameNode(node.pos, name=EncodedString('staticmethod'))\n+            elif function == u'dataclass':\n+                from .Dataclass import make_dataclass_module_callnode\n+                dataclass_module = make_dataclass_module_callnode(node.pos)\n+                node.function = ExprNodes.AttributeNode(node.pos, obj=dataclass_module,\n+                                               attribute=EncodedString(function))",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r579715373",
            "id": 579715373,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTcxNTM3Mw==",
            "original_commit_id": "de0ff9e6da6dad8a774c33a88ff9273aad7813e0",
            "original_line": 3287,
            "original_position": 104,
            "original_start_line": 3286,
            "path": "Cython/Compiler/ParseTreeTransforms.py",
            "position": null,
            "pull_request_review_id": 594785037,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/579715373",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r579716553"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/579716553"
                }
            },
            "author_association": "MEMBER",
            "body": "I understand where these are coming from, but `is_typing_optional` totally reads like \"is typing optional?\", not like a reference to the `typing` module. Not sure right now what a better name would be, but this scheme also doesn't seem to scale well.",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2021-02-20T22:18:11Z",
            "diff_hunk": "@@ -192,12 +192,16 @@ class PyrexType(BaseType):\n     #  is_string             boolean     Is a C char * type\n     #  is_pyunicode_ptr      boolean     Is a C PyUNICODE * type\n     #  is_cpp_string         boolean     Is a C++ std::string type\n+    #  is_indexed_pytype     boolean     Is a Python type identifier that can be indexed/\"templated\"\n     #  is_unicode_char       boolean     Is either Py_UCS4 or Py_UNICODE\n     #  is_returncode         boolean     Is used only to signal exceptions\n     #  is_error              boolean     Is the dummy error type\n     #  is_buffer             boolean     Is buffer access type\n     #  is_pythran_expr       boolean     Is Pythran expr\n     #  is_numpy_buffer       boolean     Is Numpy array buffer\n+    #  is_dataclasses_initvar        boolean     Is a dataclasses InitVar\n+    #  is_typing_classvar            boolean     Is a typing ClassVar\n+    #  is_typing_optional            boolean     Is a typing Optional",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r579716553",
            "id": 579716553,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTcxNjU1Mw==",
            "original_commit_id": "de0ff9e6da6dad8a774c33a88ff9273aad7813e0",
            "original_line": 204,
            "original_position": 13,
            "original_start_line": 202,
            "path": "Cython/Compiler/PyrexTypes.py",
            "position": null,
            "pull_request_review_id": 594785037,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/579716553",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r579716853"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/579716853"
                }
            },
            "author_association": "MEMBER",
            "body": "Do you mean known standard library imports, maybe?",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2021-02-20T22:20:44Z",
            "diff_hunk": "@@ -158,13 +158,17 @@ class Entry(object):\n     # is_fused_specialized boolean Whether this entry of a cdef or def function\n     #                              is a specialization\n     # is_cgetter       boolean    Is a c-level getter function\n+    # unambiguous_import_path     Either None (default), False (definitely can't be determined)",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r579716853",
            "id": 579716853,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTcxNjg1Mw==",
            "original_commit_id": "de0ff9e6da6dad8a774c33a88ff9273aad7813e0",
            "original_line": 161,
            "original_position": 4,
            "original_start_line": null,
            "path": "Cython/Compiler/Symtab.py",
            "position": null,
            "pull_request_review_id": 594785037,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/579716853",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r579716931"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/579716931"
                }
            },
            "author_association": "MEMBER",
            "body": "I was considering `PyTypeSubscript` as a better name, but then realised that we are not interested in the subscript property here, but in the fact that we are building a type. So – `PythonTypingTypeConstructor`, maybe?",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2021-02-20T22:21:53Z",
            "diff_hunk": "@@ -4369,6 +4379,117 @@ def error_condition(self, result_code):\n         return \"dummy\"\n \n \n+class IndexedPythonType(PyrexType):",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r579716931",
            "id": 579716931,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTcxNjkzMQ==",
            "original_commit_id": "de0ff9e6da6dad8a774c33a88ff9273aad7813e0",
            "original_line": 4382,
            "original_position": 63,
            "original_start_line": null,
            "path": "Cython/Compiler/PyrexTypes.py",
            "position": null,
            "pull_request_review_id": 594785037,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/579716931",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r579717051"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/579717051"
                }
            },
            "author_association": "MEMBER",
            "body": "Why not ban it?",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2021-02-20T22:23:30Z",
            "diff_hunk": "@@ -2219,6 +2229,14 @@ def declare_var(self, name, type, pos,\n                     cname = None, visibility = 'private',\n                     api = 0, in_pxd = 0, is_cdef = 0):\n         name = self.mangle_class_private_name(name)\n+\n+        if type.is_typing_classvar:\n+            is_cdef = 0\n+\n+        if type.is_dataclasses_initvar and 'dataclass' not in self.directives:\n+            # no real reason to ban it, but it doesn't hugely make sense\n+            warning(pos, \"Use of cython.dataclasses.InitVar does not make sense outside a dataclass\")",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r579717051",
            "id": 579717051,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTcxNzA1MQ==",
            "original_commit_id": "de0ff9e6da6dad8a774c33a88ff9273aad7813e0",
            "original_line": 2238,
            "original_position": 65,
            "original_start_line": 2237,
            "path": "Cython/Compiler/Symtab.py",
            "position": null,
            "pull_request_review_id": 594785037,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/579717051",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r579717274"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/579717274"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n        if (!PyErr_ExceptionMatches(PyExc_ImportError)) goto bad;\r\n        PyErr_Clear();  // this is reasonably likely (especially on older versions of Python)\r\n```",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2021-02-20T22:25:45Z",
            "diff_hunk": "@@ -0,0 +1,78 @@\n+///////////////////// ModuleLoader.proto //////////////////////////\n+\n+static PyObject* __Pyx_LoadInternalModule(const char* name, const char* fallback_code); /* proto */\n+\n+//////////////////// ModuleLoader ///////////////////////\n+//@requires: CommonStructures.c::FetchSharedCythonModule\n+\n+static PyObject* __Pyx_LoadInternalModule(const char* name, const char* fallback_code) {\n+    // In supporting dataclasses we want to be able to use directives the contents\n+    // of the standard library dataclasses module where available\n+    // If those objects aren't available (due to Python version) then a simple fallback is substituted\n+    // instead, which largely just fails with a not-implemented error.\n+    //\n+    // The fallbacks are placed in the \"shared abi module\" as a convenient internal place to\n+    // store them\n+\n+    PyObject *shared_abi_module = 0, *module = 0;\n+\n+    shared_abi_module = __Pyx_FetchSharedCythonABIModule();\n+    if (!shared_abi_module) return NULL;\n+\n+    if (PyObject_HasAttrString(shared_abi_module, name)) {\n+        PyObject* result = PyObject_GetAttrString(shared_abi_module, name);\n+        Py_DECREF(shared_abi_module);\n+        return result;\n+    }\n+\n+    // the best and simplest case is simply to defer to the standard library (if available)\n+    module = PyImport_ImportModule(name);\n+    if (!module) {\n+        PyObject *localDict, *runValue, *builtins, *modulename;\n+        if (PyErr_ExceptionMatches(PyExc_ImportError)) {\n+            PyErr_Clear();  // this is reasonably likely (especially on older versions of Python)\n+        } else {\n+            goto bad;\n+        }",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r579717274",
            "id": 579717274,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTcxNzI3NA==",
            "original_commit_id": "de0ff9e6da6dad8a774c33a88ff9273aad7813e0",
            "original_line": 36,
            "original_position": 36,
            "original_start_line": 32,
            "path": "Cython/Utility/Dataclasses.c",
            "position": null,
            "pull_request_review_id": 594785037,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/579717274",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r579717605"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/579717605"
                }
            },
            "author_association": "MEMBER",
            "body": "Isn't this duplicated code? We probably need something like this wherever we use the ABI module, right?",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2021-02-20T22:28:18Z",
            "diff_hunk": "@@ -0,0 +1,78 @@\n+///////////////////// ModuleLoader.proto //////////////////////////\n+\n+static PyObject* __Pyx_LoadInternalModule(const char* name, const char* fallback_code); /* proto */\n+\n+//////////////////// ModuleLoader ///////////////////////\n+//@requires: CommonStructures.c::FetchSharedCythonModule\n+\n+static PyObject* __Pyx_LoadInternalModule(const char* name, const char* fallback_code) {\n+    // In supporting dataclasses we want to be able to use directives the contents\n+    // of the standard library dataclasses module where available\n+    // If those objects aren't available (due to Python version) then a simple fallback is substituted\n+    // instead, which largely just fails with a not-implemented error.\n+    //\n+    // The fallbacks are placed in the \"shared abi module\" as a convenient internal place to\n+    // store them\n+\n+    PyObject *shared_abi_module = 0, *module = 0;\n+\n+    shared_abi_module = __Pyx_FetchSharedCythonABIModule();\n+    if (!shared_abi_module) return NULL;\n+\n+    if (PyObject_HasAttrString(shared_abi_module, name)) {\n+        PyObject* result = PyObject_GetAttrString(shared_abi_module, name);\n+        Py_DECREF(shared_abi_module);\n+        return result;\n+    }\n+\n+    // the best and simplest case is simply to defer to the standard library (if available)\n+    module = PyImport_ImportModule(name);\n+    if (!module) {\n+        PyObject *localDict, *runValue, *builtins, *modulename;\n+        if (PyErr_ExceptionMatches(PyExc_ImportError)) {\n+            PyErr_Clear();  // this is reasonably likely (especially on older versions of Python)\n+        } else {\n+            goto bad;\n+        }\n+        modulename = PyBytes_FromFormat(\"_cython_\" CYTHON_ABI \".%s\", name);\n+        if (!modulename) goto bad;\n+#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_CPYTHON\n+        module = PyImport_AddModuleObject(modulename); // borrowed\n+#else\n+        module = PyImport_AddModule(PyBytes_AsString(modulename)); // borrowed\n+#endif\n+        Py_DECREF(modulename);\n+        if (!module) goto bad;\n+        Py_INCREF(module);",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r579717605",
            "id": 579717605,
            "line": 43,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTcxNzYwNQ==",
            "original_commit_id": "de0ff9e6da6dad8a774c33a88ff9273aad7813e0",
            "original_line": 46,
            "original_position": 46,
            "original_start_line": 37,
            "path": "Cython/Utility/Dataclasses.c",
            "position": 43,
            "pull_request_review_id": 594785037,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": 34,
            "start_side": "RIGHT",
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/579717605",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r579717687"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/579717687"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nclass _MISSING_TYPE(object):\r\n```",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2021-02-20T22:28:53Z",
            "diff_hunk": "@@ -0,0 +1,98 @@\n+################### Dataclasses_fallback ###############################\n+\n+# This is the fallback dataclass code if the stdlib module isn't available.\n+# It defines enough of the support types to be used with cdef classes\n+# and to fail if used on regular types.\n+\n+# (Intended to be included as py code - not compiled)\n+\n+from collections import namedtuple\n+try:\n+    from types import MappingProxyType\n+except ImportError:\n+    # mutable fallback if unavailable\n+    MappingProxyType = lambda x: x\n+\n+class _MISSING_TYPE:",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r579717687",
            "id": 579717687,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTcxNzY4Nw==",
            "original_commit_id": "de0ff9e6da6dad8a774c33a88ff9273aad7813e0",
            "original_line": 16,
            "original_position": 16,
            "original_start_line": null,
            "path": "Cython/Utility/Dataclasses.py",
            "position": null,
            "pull_request_review_id": 594785037,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/579717687",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r579717882"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/579717882"
                }
            },
            "author_association": "MEMBER",
            "body": "`typing` is older than `dataclasses`, and thus more likely to exist.\r\n```suggestion\r\n    import typing\r\n    import dataclasses\r\n```",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2021-02-20T22:31:11Z",
            "diff_hunk": "@@ -0,0 +1,20 @@\n+cimport cython\n+try:\n+    import dataclasses\n+    import typing",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r579717882",
            "id": 579717882,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTcxNzg4Mg==",
            "original_commit_id": "de0ff9e6da6dad8a774c33a88ff9273aad7813e0",
            "original_line": 4,
            "original_position": 4,
            "original_start_line": 3,
            "path": "docs/examples/userguide/extension_types/dataclass.pyx",
            "position": null,
            "pull_request_review_id": 594785037,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/579717882",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r579718132"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/579718132"
                }
            },
            "author_association": "MEMBER",
            "body": "Why not `except ImportError:` ?",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2021-02-20T22:34:43Z",
            "diff_hunk": "@@ -5,10 +5,13 @@\n import cython\n \n from typing import Dict, List, TypeVar, Optional, Generic, Tuple\n+\n try:\n+    import typing\n+    from typing import Set as _SET_\n     from typing import ClassVar\n-except ImportError:\n-    ClassVar = Optional  # fake it in Py3.5\n+except:",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r579718132",
            "id": 579718132,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTcxODEzMg==",
            "original_commit_id": "de0ff9e6da6dad8a774c33a88ff9273aad7813e0",
            "original_line": 13,
            "original_position": 11,
            "original_start_line": null,
            "path": "tests/run/pep526_variable_annotations.py",
            "position": null,
            "pull_request_review_id": 594785037,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/579718132",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r579784333"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/579784333"
                }
            },
            "author_association": "COLLABORATOR",
            "body": "It's not a name I was very happy with, so I'm happy to change it to another one. The idea is\r\n\r\n```\r\nfrom types import List\r\n```\r\n\r\nis unambiguous - `List` only ever comes from the `types` module (... there's a slight issue with monkey patching, but if we consider that then we can't reason about any of these Python imports, ever...)\r\n\r\n```\r\nfrom types import List\r\nif some_value:\r\n   List = []\r\n```\r\n\r\nis ambiguous, because there's multiple different values that `List` can be.\r\n\r\nI was using it as a sort of tri-state value, where it could be `False` (definitely ambiguous), `None` (not currently known) or <string> (e.g. `\"types.List\"`)",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2021-02-21T10:17:11Z",
            "diff_hunk": "@@ -2058,9 +2087,14 @@ def analyse_as_extension_type(self, env):\n     def analyse_target_declaration(self, env):\n         if not self.entry:\n             self.entry = env.lookup_here(self.name)\n+        if self.entry:\n+            self.entry.unambiguous_import_path = False  # already exists somewhere and so is now ambiguous",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r579784333",
            "id": 579784333,
            "in_reply_to_id": 579714146,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTc4NDMzMw==",
            "original_commit_id": "de0ff9e6da6dad8a774c33a88ff9273aad7813e0",
            "original_line": 2091,
            "original_position": 70,
            "original_start_line": null,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_review_id": 594826479,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/579784333",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r579784506"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/579784506"
                }
            },
            "author_association": "COLLABORATOR",
            "body": "No, it's `False`, `None` or a string",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2021-02-21T10:18:00Z",
            "diff_hunk": "@@ -2557,6 +2591,11 @@ def annotate(self, code):\n                 style, text = 'c_call', 'c function (%s)'\n             code.annotate(pos, AnnotationItem(style, text % self.type, size=len(self.name)))\n \n+    def get_unambiguous_import_path(self):\n+        if self.entry:\n+            return self.entry.unambiguous_import_path\n+        return None",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r579784506",
            "id": 579784506,
            "in_reply_to_id": 579714517,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTc4NDUwNg==",
            "original_commit_id": "de0ff9e6da6dad8a774c33a88ff9273aad7813e0",
            "original_line": 2597,
            "original_position": 88,
            "original_start_line": 2594,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_review_id": 594826479,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/579784506",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r579786423"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/579786423"
                }
            },
            "author_association": "COLLABORATOR",
            "body": "It's like that so that the default constructor arguments (`_TrueNode`, `_FalseNode` and `_NoneNode`) can be built using `node.pos`.\r\n\r\nThere's definitely other ways of achieving this though, so i can change it if you feel strongly against it.",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2021-02-21T10:34:59Z",
            "diff_hunk": "@@ -0,0 +1,593 @@\n+# functions to transform a c class into a dataclass\n+\n+from collections import OrderedDict\n+\n+from .Errors import error, warning\n+from . import ExprNodes, Nodes, PyrexTypes\n+from .Code import UtilityCode, TempitaUtilityCode\n+from .Visitor import VisitorTransform\n+from . import UtilNodes, Builtin, Naming\n+from .StringEncoding import BytesLiteral, EncodedString\n+from .TreeFragment import TreeFragment\n+from .ParseTreeTransforms import (NormalizeTree, SkipDeclarations, AnalyseDeclarationsTransform,\n+                                  MarkClosureVisitor)\n+\n+def make_dataclasses_module_callnode(pos):\n+    python_utility_code = UtilityCode.load_cached(\"Dataclasses_fallback\", \"Dataclasses.py\")\n+    python_utility_code = EncodedString(python_utility_code.impl)\n+    loader_utilitycode = TempitaUtilityCode.load_cached(\"SpecificModuleLoader\", \"Dataclasses.c\",\n+            context={'cname': \"dataclasses\", 'py_code': python_utility_code.as_c_string_literal()})\n+    return ExprNodes.PythonCapiCallNode(pos, \"__Pyx_Load_dataclasses_Module\",\n+                                PyrexTypes.CFuncType(PyrexTypes.py_object_type, []),\n+                                utility_code = loader_utilitycode,\n+                                args=[])\n+\n+_INTERNAL_DEFAULTSHOLDER_NAME = EncodedString('__pyx_dataclass_defaults')\n+\n+class RemoveAssignments(VisitorTransform, SkipDeclarations):\n+    def __init__(self, names):\n+        super(RemoveAssignments, self).__init__()\n+        self.names = names\n+        self.removed_assignments = {}\n+\n+    def visit_CClassNode(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+    def visit_PyClassNode(self, node):\n+        return node  # go no further\n+\n+    def visit_FuncDefNode(self, node):\n+        return node  # go no further\n+\n+    def visit_SingleAssignmentNode(self, node):\n+        if node.lhs.is_name and node.lhs.name in self.names:\n+            if node.lhs.name in self.removed_assignments:\n+                warning(node.pos, (\"Multiple assignments for '%s' in dataclass; \"\n+                                   \"using most recent\") % node.lhs.name, 1)\n+            self.removed_assignments[node.lhs.name] = node.rhs\n+            return []\n+        return node\n+\n+    # I believe cascaded assignment is always a syntax error with decorators\n+    # so can be ignored\n+\n+    def visit_Node(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+class _MISSING_TYPE:\n+    pass\n+MISSING = _MISSING_TYPE()\n+\n+def process_class_get_fields(node):\n+    _TrueNode = ExprNodes.BoolNode(node.pos, value=True)\n+    _FalseNode = ExprNodes.BoolNode(node.pos, value=False)\n+    _NoneNode = ExprNodes.NoneNode(node.pos)\n+\n+    class Field(object):",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r579786423",
            "id": 579786423,
            "in_reply_to_id": 579709424,
            "line": 68,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTc4NjQyMw==",
            "original_commit_id": "de0ff9e6da6dad8a774c33a88ff9273aad7813e0",
            "original_line": 68,
            "original_position": 68,
            "original_start_line": null,
            "path": "Cython/Compiler/Dataclass.py",
            "position": 68,
            "pull_request_review_id": 594826479,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/579786423",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r579789764"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/579789764"
                }
            },
            "author_association": "COLLABORATOR",
            "body": "I've made a change to do this. I'm not sure it makes things clearer or not, but it may be more efficient. There's still an extra call to `TreeFragment` in `_set_up_dataclass_fields` that I'd rather not eliminate because the order is important there.",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2021-02-21T11:03:44Z",
            "diff_hunk": "@@ -0,0 +1,593 @@\n+# functions to transform a c class into a dataclass\n+\n+from collections import OrderedDict\n+\n+from .Errors import error, warning\n+from . import ExprNodes, Nodes, PyrexTypes\n+from .Code import UtilityCode, TempitaUtilityCode\n+from .Visitor import VisitorTransform\n+from . import UtilNodes, Builtin, Naming\n+from .StringEncoding import BytesLiteral, EncodedString\n+from .TreeFragment import TreeFragment\n+from .ParseTreeTransforms import (NormalizeTree, SkipDeclarations, AnalyseDeclarationsTransform,\n+                                  MarkClosureVisitor)\n+\n+def make_dataclasses_module_callnode(pos):\n+    python_utility_code = UtilityCode.load_cached(\"Dataclasses_fallback\", \"Dataclasses.py\")\n+    python_utility_code = EncodedString(python_utility_code.impl)\n+    loader_utilitycode = TempitaUtilityCode.load_cached(\"SpecificModuleLoader\", \"Dataclasses.c\",\n+            context={'cname': \"dataclasses\", 'py_code': python_utility_code.as_c_string_literal()})\n+    return ExprNodes.PythonCapiCallNode(pos, \"__Pyx_Load_dataclasses_Module\",\n+                                PyrexTypes.CFuncType(PyrexTypes.py_object_type, []),\n+                                utility_code = loader_utilitycode,\n+                                args=[])\n+\n+_INTERNAL_DEFAULTSHOLDER_NAME = EncodedString('__pyx_dataclass_defaults')\n+\n+class RemoveAssignments(VisitorTransform, SkipDeclarations):\n+    def __init__(self, names):\n+        super(RemoveAssignments, self).__init__()\n+        self.names = names\n+        self.removed_assignments = {}\n+\n+    def visit_CClassNode(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+    def visit_PyClassNode(self, node):\n+        return node  # go no further\n+\n+    def visit_FuncDefNode(self, node):\n+        return node  # go no further\n+\n+    def visit_SingleAssignmentNode(self, node):\n+        if node.lhs.is_name and node.lhs.name in self.names:\n+            if node.lhs.name in self.removed_assignments:\n+                warning(node.pos, (\"Multiple assignments for '%s' in dataclass; \"\n+                                   \"using most recent\") % node.lhs.name, 1)\n+            self.removed_assignments[node.lhs.name] = node.rhs\n+            return []\n+        return node\n+\n+    # I believe cascaded assignment is always a syntax error with decorators\n+    # so can be ignored\n+\n+    def visit_Node(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+class _MISSING_TYPE:\n+    pass\n+MISSING = _MISSING_TYPE()\n+\n+def process_class_get_fields(node):\n+    _TrueNode = ExprNodes.BoolNode(node.pos, value=True)\n+    _FalseNode = ExprNodes.BoolNode(node.pos, value=False)\n+    _NoneNode = ExprNodes.NoneNode(node.pos)\n+\n+    class Field(object):\n+        \"\"\"\n+        Field is based on the dataclasses.field class from the standard library module.\n+        It is used internally during the generation of Cython dataclasses to keep track\n+        of the settings for individual attributes.\n+\n+        Attributes of this class are stored as nodes so they can be used in code construction\n+        more readily (i.e. we store BoolNode rather than bool)\n+        The class (+ _TrueNode, _FalseNode and _NoneNode) are defined inside a function\n+        that when _TrueNode (etc) are used as default arguments they can have a useful pos\n+        \"\"\"\n+        default = MISSING\n+        default_factory = MISSING\n+        private = False\n+        def __init__(self, default=MISSING, default_factory=MISSING,\n+                        repr=_TrueNode, hash=_NoneNode, init=_TrueNode,\n+                        compare=_TrueNode, metadata=_NoneNode,\n+                        is_initvar=False):\n+            if default is not MISSING:\n+                self.default = default\n+            if default_factory is not MISSING:\n+                self.default_factory = default_factory\n+            self.repr = repr\n+            self.hash = hash\n+            self.init = init\n+            self.compare = compare\n+            self.metadata = metadata\n+            self.is_initvar = is_initvar\n+\n+            for field_name in (\"repr\", \"hash\", \"init\", \"compare\", \"metadata\"):\n+                field_value = getattr(self, field_name)\n+                if not field_value.is_literal:\n+                    error(field_value.pos, \"cython.dataclasses.field parameter '%s' must be a literal value\"\n+                            % field_name)\n+\n+    var_entries = node.scope.var_entries\n+    # order of definition is used in the dataclass\n+    var_entries = sorted(var_entries, key=lambda entry: entry.pos)\n+    var_names = [ entry.name for entry in var_entries ]\n+\n+    # remove assignments for stat_list\n+    transform = RemoveAssignments(var_names)\n+    transform(node)\n+\n+    if node.base_type and node.base_type.dataclass_fields:\n+        fields = node.base_type.dataclass_fields.copy()\n+    else:\n+        fields = OrderedDict()\n+    for entry in var_entries:\n+        name = entry.name\n+        is_initvar = entry.type.is_dataclasses_initvar\n+        if name in transform.removed_assignments:\n+            assignment = transform.removed_assignments[name]\n+            if (isinstance(assignment, ExprNodes.CallNode)\n+                    and assignment.function.as_cython_attribute() == \"dataclasses.field\"):\n+                # I believe most of this is well-enforced when it's treated as a directive\n+                # but it doesn't hurt to make sure\n+                if (not isinstance(assignment, ExprNodes.GeneralCallNode)\n+                        or not isinstance(assignment.positional_args, ExprNodes.TupleNode)\n+                        or assignment.positional_args.args\n+                        or not isinstance(assignment.keyword_args, ExprNodes.DictNode)):\n+                    error(assignment.pos, \"Call to 'cython.dataclasses.field' must only consist \"\n+                          \"of compile-time keyword arguments\")\n+                    continue\n+                keyword_args = { k.value: v for k, v in assignment.keyword_args.key_value_pairs }\n+                if 'default' in keyword_args and 'default_factory' in keyword_args:\n+                    error(assignment.pos, \"You cannot specify both 'default' and 'default_factory'\"\n+                          \" for a dataclass member\")\n+                    continue\n+                field = Field(**keyword_args)\n+            else:\n+                if isinstance(assignment, ExprNodes.CallNode):\n+                    func = assignment.function\n+                    if ((func.is_name and func.name == \"field\")\n+                            or (isinstance(func, ExprNodes.AttributeNode)\n+                                and func.attribute == \"field\")):\n+                        warning(assignment.pos, \"Do you mean cython.dataclasses.field instead?\", 1)\n+                if assignment.type in [Builtin.list_type,\n+                                    Builtin.dict_type,\n+                                    Builtin.set_type]:\n+                    # The standard library module generates a TypeError at runtime\n+                    # in this situation\n+                    error(assignment.pos, \"Mutable default passed argument for '{0}' - \"\n+                          \"use 'default_factory' instead\".format(name))\n+\n+                field = Field(default=assignment)\n+        else:\n+            field = Field()\n+        field.is_initvar = is_initvar\n+        if entry.visibility == \"private\":\n+            field.private = True\n+        fields[name] = field\n+    node.entry.type.dataclass_fields = fields\n+    return fields\n+\n+def handle_cclass_dataclass(node, dataclass_args, analyse_decs_transform):\n+    from .ExprNodes import (AttributeNode, TupleNode, NameNode,\n+                            GeneralCallNode, DictNode,\n+                            IdentifierStringNode, BoolNode, DictItemNode)\n+    # default argument values from https://docs.python.org/3/library/dataclasses.html\n+    kwargs = dict(init=True, repr=True, eq=True,\n+                  order=False, unsafe_hash=False, frozen=False)\n+    if dataclass_args is not None:\n+        if dataclass_args[0]:\n+            error(node.pos, \"cython.dataclasses.dataclass takes no positional arguments\")\n+        for k, v in dataclass_args[1].items():\n+            if k not in kwargs:\n+                error(node.pos,\n+                      \"Unrecognised keyword argument '{0}' to cython.dataclasses.dataclass\".format(k))\n+            if not isinstance(v, ExprNodes.BoolNode):\n+                error(node.pos,\n+                      \"Arguments to cython.dataclasses.dataclass must be True or False\")\n+            kwargs[k] = v\n+\n+    fields = process_class_get_fields(node)\n+\n+    dataclass_module = make_dataclasses_module_callnode(node.pos)\n+\n+    # create __dataclass_params__ attribute\n+    dataclass_params_func = AttributeNode(node.pos, obj=dataclass_module,\n+                                            attribute=EncodedString(\"_DataclassParams\"))\n+    dataclass_params_keywords = DictNode.from_pairs(node.pos,\n+            [ (IdentifierStringNode(node.pos, value=EncodedString(k)),\n+                BoolNode(node.pos, value=v))\n+                for k, v in kwargs.items() ])\n+    dataclass_params = GeneralCallNode(node.pos,\n+                                    function = dataclass_params_func,\n+                                    positional_args = TupleNode(node.pos, args=[]),\n+                                    keyword_args = dataclass_params_keywords)\n+    dataclass_params_assignment = \\\n+        Nodes.SingleAssignmentNode(node.pos,\n+                        lhs = NameNode(node.pos,\n+                                        name=EncodedString(\"__dataclass_params__\")),\n+                        rhs = dataclass_params)\n+\n+    dataclass_fields_stats = _set_up_dataclass_fields(node, fields, dataclass_module)\n+\n+    stats = Nodes.StatListNode(node.pos,\n+                               stats=[dataclass_params_assignment]\n+                                    + dataclass_fields_stats)\n+\n+    init_stats = generate_init_code(kwargs['init'], node, fields)\n+    repr_stats = generate_repr_code(kwargs['repr'], node, fields)\n+    eq_stats = generate_eq_code(kwargs['eq'], node, fields)\n+    order_stats = generate_order_code(kwargs['order'], node, fields)\n+    hash_stats = generate_hash_code(kwargs['unsafe_hash'], kwargs['eq'], kwargs['frozen'],\n+                       node, fields)\n+\n+    stats.stats = stats.stats + init_stats + repr_stats + eq_stats + order_stats + hash_stats\n+\n+    # turn off annotation typing, so all arguments to __init__ are accepted as\n+    # generic objects and thus can accept _HAS_DEFAULT_FACTORY\n+    # type conversion comes later\n+    comp_directives = Nodes.CompilerDirectivesNode(node.pos,\n+        directives = node.scope.directives.copy(),\n+        body=stats)\n+    comp_directives.directives['annotation_typing'] = False\n+\n+    comp_directives.analyse_declarations(node.scope)\n+    # probably already in this scope, but it doesn't hurt to make sure\n+    analyse_decs_transform.enter_scope(node, node.scope)\n+    analyse_decs_transform.visit(comp_directives)\n+    analyse_decs_transform.exit_scope()\n+\n+    node.body.stats.append(comp_directives)\n+\n+def generate_init_code(init, node, fields):\n+    if not init or node.scope.lookup_here(\"__init__\"):\n+        return []\n+    # selfname behaviour copied from the cpython module\n+    selfname = \"__dataclass_self__\" if \"self\" in fields else \"self\"\n+    args = [selfname]\n+\n+    placeholders = {}\n+    placeholder_count = [0]\n+\n+    # create a temp to get _HAS_DEFAULT_FACTORY\n+    dataclass_module = make_dataclasses_module_callnode(node.pos)\n+    has_default_factory = ExprNodes.AttributeNode(node.pos,\n+                                        obj = dataclass_module,\n+                                        attribute = EncodedString(\"_HAS_DEFAULT_FACTORY\"))\n+\n+    def get_placeholder_name():\n+        while True:\n+            name = \"PLACEHOLDER_%s\" % placeholder_count[0]\n+            if (name not in placeholders\n+                    and name not in fields):\n+                # make sure name isn't already used and doesn't\n+                # conflict with a variable name (which is unlikely but possible)\n+                break\n+            placeholder_count[0] += 1\n+        return name\n+\n+    default_factory_placeholder = get_placeholder_name()\n+    placeholders[default_factory_placeholder] = has_default_factory\n+\n+    seen_default = False\n+    for name, field in fields.items():\n+        if not field.init.value:\n+            continue\n+        entry = node.scope.lookup(name)\n+        annotation = entry.annotation.string if entry.annotation else None\n+        if annotation:\n+            annotation = u\": %s\" % annotation.value\n+        else:\n+            annotation = u\"\"\n+        assignment = u''\n+        if field.default is not MISSING or field.default_factory is not MISSING:\n+            seen_default = True\n+            if field.default_factory is not MISSING:\n+                ph_name = default_factory_placeholder\n+            else:\n+                ph_name = get_placeholder_name()\n+                placeholders[ph_name] = field.default  # should be node\n+            assignment = u\" = %s\" % ph_name\n+        elif seen_default:\n+            error(entry.pos, (\"non-default argument %s follows default argument \"\n+                             \"in dataclass __init__\") % name)\n+            return []\n+\n+        args.append(u\"%s%s%s\" % (name, annotation, assignment))\n+    args = u\", \".join(args)\n+    func_call = u\"def __init__(%s):\" % args\n+\n+    code_lines = [func_call,\n+                  \"    pass\",  # just in-case it's an empty body\n+                  ]\n+    for name, field in fields.items():\n+        if field.is_initvar:\n+            continue\n+        if field.default_factory is MISSING:\n+            if field.init.value:\n+                code_lines.append(u\"    %s.%s = %s\" % (selfname, name, name))\n+        else:\n+            ph_name = get_placeholder_name()\n+            placeholders[ph_name] = field.default_factory\n+            if field.init.value:\n+                code_lines.append(u\"    if %s is %s:\"\n+                                % (name, default_factory_placeholder))\n+                code_lines.append(u\"        %s.%s = %s()\"\n+                                % (selfname, name, ph_name))\n+                code_lines.append(u\"    else:\")\n+                code_lines.append(u\"        %s.%s = %s\" % (selfname, name, name))\n+            else:\n+                # still need to use the default factory to initialize\n+                code_lines.append(u\"    %s.%s = %s()\"\n+                                  % (selfname, name, ph_name))\n+    if node.scope.lookup(\"__post_init__\"):\n+        post_init_vars = \", \".join(name for name, field in fields.items()\n+                                    if field.is_initvar)\n+        code_lines.append(\"    %s.__post_init__(%s)\" % (selfname, post_init_vars))\n+    code_lines = u\"\\n\".join(code_lines)\n+\n+    code_tree = TreeFragment(code_lines, level='c_class',\n+                             pipeline=[NormalizeTree(node.scope),\n+                                       ]\n+                              ).substitute(placeholders)\n+\n+    return code_tree.stats\n+\n+\n+def generate_repr_code(repr, node, fields):\n+    if not repr or node.scope.lookup(\"__repr__\"):\n+        return []\n+    code_lines = [\"def __repr__(self):\"]\n+    strs = [ u\"%s={self.%s}\" % (name, name)\n+            for name, field in fields.items() if field.repr.value and not field.is_initvar ]\n+    format_string = u\", \".join(strs)\n+    code_lines.append(u\"    return f'{type(self).__name__}(%s)'\" % format_string)\n+    code_lines = u\"\\n\".join(code_lines)\n+\n+    code_tree = TreeFragment(code_lines,",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r579789764",
            "id": 579789764,
            "in_reply_to_id": 579712144,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTc4OTc2NA==",
            "original_commit_id": "de0ff9e6da6dad8a774c33a88ff9273aad7813e0",
            "original_line": 339,
            "original_position": 339,
            "original_start_line": null,
            "path": "Cython/Compiler/Dataclass.py",
            "position": null,
            "pull_request_review_id": 594826479,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/579789764",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r579793750"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/579793750"
                }
            },
            "author_association": "COLLABORATOR",
            "body": "I think I've simplified this to get rid of it.",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2021-02-21T11:37:26Z",
            "diff_hunk": "@@ -0,0 +1,593 @@\n+# functions to transform a c class into a dataclass\n+\n+from collections import OrderedDict\n+\n+from .Errors import error, warning\n+from . import ExprNodes, Nodes, PyrexTypes\n+from .Code import UtilityCode, TempitaUtilityCode\n+from .Visitor import VisitorTransform\n+from . import UtilNodes, Builtin, Naming\n+from .StringEncoding import BytesLiteral, EncodedString\n+from .TreeFragment import TreeFragment\n+from .ParseTreeTransforms import (NormalizeTree, SkipDeclarations, AnalyseDeclarationsTransform,\n+                                  MarkClosureVisitor)\n+\n+def make_dataclasses_module_callnode(pos):\n+    python_utility_code = UtilityCode.load_cached(\"Dataclasses_fallback\", \"Dataclasses.py\")\n+    python_utility_code = EncodedString(python_utility_code.impl)\n+    loader_utilitycode = TempitaUtilityCode.load_cached(\"SpecificModuleLoader\", \"Dataclasses.c\",\n+            context={'cname': \"dataclasses\", 'py_code': python_utility_code.as_c_string_literal()})\n+    return ExprNodes.PythonCapiCallNode(pos, \"__Pyx_Load_dataclasses_Module\",\n+                                PyrexTypes.CFuncType(PyrexTypes.py_object_type, []),\n+                                utility_code = loader_utilitycode,\n+                                args=[])\n+\n+_INTERNAL_DEFAULTSHOLDER_NAME = EncodedString('__pyx_dataclass_defaults')\n+\n+class RemoveAssignments(VisitorTransform, SkipDeclarations):\n+    def __init__(self, names):\n+        super(RemoveAssignments, self).__init__()\n+        self.names = names\n+        self.removed_assignments = {}\n+\n+    def visit_CClassNode(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+    def visit_PyClassNode(self, node):\n+        return node  # go no further\n+\n+    def visit_FuncDefNode(self, node):\n+        return node  # go no further\n+\n+    def visit_SingleAssignmentNode(self, node):\n+        if node.lhs.is_name and node.lhs.name in self.names:\n+            if node.lhs.name in self.removed_assignments:\n+                warning(node.pos, (\"Multiple assignments for '%s' in dataclass; \"\n+                                   \"using most recent\") % node.lhs.name, 1)\n+            self.removed_assignments[node.lhs.name] = node.rhs\n+            return []\n+        return node\n+\n+    # I believe cascaded assignment is always a syntax error with decorators\n+    # so can be ignored\n+\n+    def visit_Node(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+class _MISSING_TYPE:\n+    pass\n+MISSING = _MISSING_TYPE()\n+\n+def process_class_get_fields(node):\n+    _TrueNode = ExprNodes.BoolNode(node.pos, value=True)\n+    _FalseNode = ExprNodes.BoolNode(node.pos, value=False)\n+    _NoneNode = ExprNodes.NoneNode(node.pos)\n+\n+    class Field(object):\n+        \"\"\"\n+        Field is based on the dataclasses.field class from the standard library module.\n+        It is used internally during the generation of Cython dataclasses to keep track\n+        of the settings for individual attributes.\n+\n+        Attributes of this class are stored as nodes so they can be used in code construction\n+        more readily (i.e. we store BoolNode rather than bool)\n+        The class (+ _TrueNode, _FalseNode and _NoneNode) are defined inside a function\n+        that when _TrueNode (etc) are used as default arguments they can have a useful pos\n+        \"\"\"\n+        default = MISSING\n+        default_factory = MISSING\n+        private = False\n+        def __init__(self, default=MISSING, default_factory=MISSING,\n+                        repr=_TrueNode, hash=_NoneNode, init=_TrueNode,\n+                        compare=_TrueNode, metadata=_NoneNode,\n+                        is_initvar=False):\n+            if default is not MISSING:\n+                self.default = default\n+            if default_factory is not MISSING:\n+                self.default_factory = default_factory\n+            self.repr = repr\n+            self.hash = hash\n+            self.init = init\n+            self.compare = compare\n+            self.metadata = metadata\n+            self.is_initvar = is_initvar\n+\n+            for field_name in (\"repr\", \"hash\", \"init\", \"compare\", \"metadata\"):\n+                field_value = getattr(self, field_name)\n+                if not field_value.is_literal:\n+                    error(field_value.pos, \"cython.dataclasses.field parameter '%s' must be a literal value\"\n+                            % field_name)\n+\n+    var_entries = node.scope.var_entries\n+    # order of definition is used in the dataclass\n+    var_entries = sorted(var_entries, key=lambda entry: entry.pos)\n+    var_names = [ entry.name for entry in var_entries ]\n+\n+    # remove assignments for stat_list\n+    transform = RemoveAssignments(var_names)\n+    transform(node)\n+\n+    if node.base_type and node.base_type.dataclass_fields:\n+        fields = node.base_type.dataclass_fields.copy()\n+    else:\n+        fields = OrderedDict()\n+    for entry in var_entries:\n+        name = entry.name\n+        is_initvar = entry.type.is_dataclasses_initvar\n+        if name in transform.removed_assignments:\n+            assignment = transform.removed_assignments[name]\n+            if (isinstance(assignment, ExprNodes.CallNode)\n+                    and assignment.function.as_cython_attribute() == \"dataclasses.field\"):\n+                # I believe most of this is well-enforced when it's treated as a directive\n+                # but it doesn't hurt to make sure\n+                if (not isinstance(assignment, ExprNodes.GeneralCallNode)\n+                        or not isinstance(assignment.positional_args, ExprNodes.TupleNode)\n+                        or assignment.positional_args.args\n+                        or not isinstance(assignment.keyword_args, ExprNodes.DictNode)):\n+                    error(assignment.pos, \"Call to 'cython.dataclasses.field' must only consist \"\n+                          \"of compile-time keyword arguments\")\n+                    continue\n+                keyword_args = { k.value: v for k, v in assignment.keyword_args.key_value_pairs }\n+                if 'default' in keyword_args and 'default_factory' in keyword_args:\n+                    error(assignment.pos, \"You cannot specify both 'default' and 'default_factory'\"\n+                          \" for a dataclass member\")\n+                    continue\n+                field = Field(**keyword_args)\n+            else:\n+                if isinstance(assignment, ExprNodes.CallNode):\n+                    func = assignment.function\n+                    if ((func.is_name and func.name == \"field\")\n+                            or (isinstance(func, ExprNodes.AttributeNode)\n+                                and func.attribute == \"field\")):\n+                        warning(assignment.pos, \"Do you mean cython.dataclasses.field instead?\", 1)\n+                if assignment.type in [Builtin.list_type,\n+                                    Builtin.dict_type,\n+                                    Builtin.set_type]:\n+                    # The standard library module generates a TypeError at runtime\n+                    # in this situation\n+                    error(assignment.pos, \"Mutable default passed argument for '{0}' - \"\n+                          \"use 'default_factory' instead\".format(name))\n+\n+                field = Field(default=assignment)\n+        else:\n+            field = Field()\n+        field.is_initvar = is_initvar\n+        if entry.visibility == \"private\":\n+            field.private = True\n+        fields[name] = field\n+    node.entry.type.dataclass_fields = fields\n+    return fields\n+\n+def handle_cclass_dataclass(node, dataclass_args, analyse_decs_transform):\n+    from .ExprNodes import (AttributeNode, TupleNode, NameNode,\n+                            GeneralCallNode, DictNode,\n+                            IdentifierStringNode, BoolNode, DictItemNode)\n+    # default argument values from https://docs.python.org/3/library/dataclasses.html\n+    kwargs = dict(init=True, repr=True, eq=True,\n+                  order=False, unsafe_hash=False, frozen=False)\n+    if dataclass_args is not None:\n+        if dataclass_args[0]:\n+            error(node.pos, \"cython.dataclasses.dataclass takes no positional arguments\")\n+        for k, v in dataclass_args[1].items():\n+            if k not in kwargs:\n+                error(node.pos,\n+                      \"Unrecognised keyword argument '{0}' to cython.dataclasses.dataclass\".format(k))\n+            if not isinstance(v, ExprNodes.BoolNode):\n+                error(node.pos,\n+                      \"Arguments to cython.dataclasses.dataclass must be True or False\")\n+            kwargs[k] = v\n+\n+    fields = process_class_get_fields(node)\n+\n+    dataclass_module = make_dataclasses_module_callnode(node.pos)\n+\n+    # create __dataclass_params__ attribute\n+    dataclass_params_func = AttributeNode(node.pos, obj=dataclass_module,\n+                                            attribute=EncodedString(\"_DataclassParams\"))\n+    dataclass_params_keywords = DictNode.from_pairs(node.pos,\n+            [ (IdentifierStringNode(node.pos, value=EncodedString(k)),\n+                BoolNode(node.pos, value=v))\n+                for k, v in kwargs.items() ])\n+    dataclass_params = GeneralCallNode(node.pos,\n+                                    function = dataclass_params_func,\n+                                    positional_args = TupleNode(node.pos, args=[]),\n+                                    keyword_args = dataclass_params_keywords)\n+    dataclass_params_assignment = \\\n+        Nodes.SingleAssignmentNode(node.pos,\n+                        lhs = NameNode(node.pos,\n+                                        name=EncodedString(\"__dataclass_params__\")),\n+                        rhs = dataclass_params)\n+\n+    dataclass_fields_stats = _set_up_dataclass_fields(node, fields, dataclass_module)\n+\n+    stats = Nodes.StatListNode(node.pos,\n+                               stats=[dataclass_params_assignment]\n+                                    + dataclass_fields_stats)\n+\n+    init_stats = generate_init_code(kwargs['init'], node, fields)\n+    repr_stats = generate_repr_code(kwargs['repr'], node, fields)\n+    eq_stats = generate_eq_code(kwargs['eq'], node, fields)\n+    order_stats = generate_order_code(kwargs['order'], node, fields)\n+    hash_stats = generate_hash_code(kwargs['unsafe_hash'], kwargs['eq'], kwargs['frozen'],\n+                       node, fields)\n+\n+    stats.stats = stats.stats + init_stats + repr_stats + eq_stats + order_stats + hash_stats\n+\n+    # turn off annotation typing, so all arguments to __init__ are accepted as\n+    # generic objects and thus can accept _HAS_DEFAULT_FACTORY\n+    # type conversion comes later\n+    comp_directives = Nodes.CompilerDirectivesNode(node.pos,\n+        directives = node.scope.directives.copy(),\n+        body=stats)\n+    comp_directives.directives['annotation_typing'] = False\n+\n+    comp_directives.analyse_declarations(node.scope)\n+    # probably already in this scope, but it doesn't hurt to make sure\n+    analyse_decs_transform.enter_scope(node, node.scope)\n+    analyse_decs_transform.visit(comp_directives)\n+    analyse_decs_transform.exit_scope()\n+\n+    node.body.stats.append(comp_directives)\n+\n+def generate_init_code(init, node, fields):\n+    if not init or node.scope.lookup_here(\"__init__\"):\n+        return []\n+    # selfname behaviour copied from the cpython module\n+    selfname = \"__dataclass_self__\" if \"self\" in fields else \"self\"\n+    args = [selfname]\n+\n+    placeholders = {}\n+    placeholder_count = [0]\n+\n+    # create a temp to get _HAS_DEFAULT_FACTORY\n+    dataclass_module = make_dataclasses_module_callnode(node.pos)\n+    has_default_factory = ExprNodes.AttributeNode(node.pos,\n+                                        obj = dataclass_module,\n+                                        attribute = EncodedString(\"_HAS_DEFAULT_FACTORY\"))\n+\n+    def get_placeholder_name():\n+        while True:\n+            name = \"PLACEHOLDER_%s\" % placeholder_count[0]\n+            if (name not in placeholders\n+                    and name not in fields):\n+                # make sure name isn't already used and doesn't\n+                # conflict with a variable name (which is unlikely but possible)\n+                break\n+            placeholder_count[0] += 1\n+        return name\n+\n+    default_factory_placeholder = get_placeholder_name()\n+    placeholders[default_factory_placeholder] = has_default_factory\n+\n+    seen_default = False\n+    for name, field in fields.items():\n+        if not field.init.value:\n+            continue\n+        entry = node.scope.lookup(name)\n+        annotation = entry.annotation.string if entry.annotation else None\n+        if annotation:\n+            annotation = u\": %s\" % annotation.value\n+        else:\n+            annotation = u\"\"\n+        assignment = u''\n+        if field.default is not MISSING or field.default_factory is not MISSING:\n+            seen_default = True\n+            if field.default_factory is not MISSING:\n+                ph_name = default_factory_placeholder\n+            else:\n+                ph_name = get_placeholder_name()\n+                placeholders[ph_name] = field.default  # should be node\n+            assignment = u\" = %s\" % ph_name\n+        elif seen_default:\n+            error(entry.pos, (\"non-default argument %s follows default argument \"\n+                             \"in dataclass __init__\") % name)\n+            return []\n+\n+        args.append(u\"%s%s%s\" % (name, annotation, assignment))\n+    args = u\", \".join(args)\n+    func_call = u\"def __init__(%s):\" % args\n+\n+    code_lines = [func_call,\n+                  \"    pass\",  # just in-case it's an empty body\n+                  ]\n+    for name, field in fields.items():\n+        if field.is_initvar:\n+            continue\n+        if field.default_factory is MISSING:\n+            if field.init.value:\n+                code_lines.append(u\"    %s.%s = %s\" % (selfname, name, name))\n+        else:\n+            ph_name = get_placeholder_name()\n+            placeholders[ph_name] = field.default_factory\n+            if field.init.value:\n+                code_lines.append(u\"    if %s is %s:\"\n+                                % (name, default_factory_placeholder))\n+                code_lines.append(u\"        %s.%s = %s()\"\n+                                % (selfname, name, ph_name))\n+                code_lines.append(u\"    else:\")\n+                code_lines.append(u\"        %s.%s = %s\" % (selfname, name, name))\n+            else:\n+                # still need to use the default factory to initialize\n+                code_lines.append(u\"    %s.%s = %s()\"\n+                                  % (selfname, name, ph_name))\n+    if node.scope.lookup(\"__post_init__\"):\n+        post_init_vars = \", \".join(name for name, field in fields.items()\n+                                    if field.is_initvar)\n+        code_lines.append(\"    %s.__post_init__(%s)\" % (selfname, post_init_vars))\n+    code_lines = u\"\\n\".join(code_lines)\n+\n+    code_tree = TreeFragment(code_lines, level='c_class',\n+                             pipeline=[NormalizeTree(node.scope),\n+                                       ]\n+                              ).substitute(placeholders)\n+\n+    return code_tree.stats\n+\n+\n+def generate_repr_code(repr, node, fields):\n+    if not repr or node.scope.lookup(\"__repr__\"):\n+        return []\n+    code_lines = [\"def __repr__(self):\"]\n+    strs = [ u\"%s={self.%s}\" % (name, name)\n+            for name, field in fields.items() if field.repr.value and not field.is_initvar ]\n+    format_string = u\", \".join(strs)\n+    code_lines.append(u\"    return f'{type(self).__name__}(%s)'\" % format_string)\n+    code_lines = u\"\\n\".join(code_lines)\n+\n+    code_tree = TreeFragment(code_lines,\n+                              level='c_class', pipeline=[NormalizeTree(None)]\n+                              ).substitute({})\n+    return code_tree.stats\n+\n+def generate_cmp_code(op, funcname, node, fields):\n+    if node.scope.lookup_here(funcname):\n+        return []  # already exists\n+\n+    names = [ name for name, field in fields.items()\n+                if (field.compare.value and not field.is_initvar) ]\n+\n+    if not names:\n+        return []  # no comparable types\n+\n+    code_lines = [\"def %s(self, other):\" % funcname,\n+                  \"    cdef %s other_cast\" % node.class_name,\n+                  \"    try:\",\n+                  \"        other_cast = other\",\n+                  \"    except TypeError:\",\n+                  \"        return NotImplemented\"]\n+\n+    for name in names:\n+        shared = \"if not (self.%s == other_cast.%s):\" % (name, name)\n+        if op == \"==\":\n+            code_lines.append(\"    %s return False\" % shared)\n+        else:\n+            code_lines.append(\"    %s return self.%s %s other_cast.%s\" %\n+                              (shared, name, op, name))\n+\n+    if \"=\" in op:\n+        code_lines.append(\"    return True\")\n+    else:\n+        code_lines.append(\"    return False\")\n+\n+    code_lines = u\"\\n\".join(code_lines)\n+\n+    code_tree = TreeFragment(code_lines,\n+                              level='c_class', pipeline=[NormalizeTree(None)]\n+                              ).substitute({})\n+    return code_tree.stats\n+\n+def generate_eq_code(eq, node, fields):\n+    if not eq:\n+        return []\n+    return generate_cmp_code(\"==\", \"__eq__\", node, fields)\n+\n+def generate_order_code(order, node, fields):\n+    if not order:\n+        return []\n+    stats = []\n+    for op, name in [(\"<\", \"__lt__\"),\n+                     (\"<=\", \"__le__\"),\n+                     (\">\", \"__gt__\"),\n+                     (\">=\", \"__ge__\")]:\n+        stats.extend(generate_cmp_code(op, name, node, fields))\n+    return stats\n+\n+def generate_hash_code(unsafe_hash, eq, frozen, node, fields):\n+    hash_entry = node.scope.lookup_here(\"__hash__\")\n+    if hash_entry:\n+        # TODO ideally assignment of __hash__ to None shouldn't trigger this\n+        # but difficult to get the right information here\n+        if unsafe_hash:\n+            error(node.pos, \"Request for dataclass unsafe_hash when a '__hash__' function\"\n+                  \" already exists\")\n+        return []\n+    if not unsafe_hash:\n+        if eq and not frozen:\n+            return [Nodes.SingleAssignmentNode(node.pos,\n+                                        lhs = ExprNodes.NameNode(node.pos, name=EncodedString(\"__hash__\")),\n+                                        rhs = ExprNodes.NoneNode(node.pos))]\n+        if not eq:\n+            return []\n+\n+    names = [ name for name, field in fields.items()\n+                if (not field.is_initvar and\n+                    (field.compare.value if field.hash.value is None else field.hash.value)) ]\n+    if not names:\n+        return []  # nothing to hash\n+\n+    # make a tuple of the hashes\n+    tpl = u\", \".join(u\"hash(self.%s)\" % name for name in names )\n+\n+    # if we're here we want to generate a hash\n+    code_lines = u\"\"\"def __hash__(self):\n+    return hash((%s))\n+\"\"\" % tpl\n+    code_tree = TreeFragment(code_lines,\n+                              level='c_class', pipeline=[NormalizeTree(None)]\n+                              ).substitute({})\n+    return code_tree.stats\n+\n+\n+class GetTypeNode(ExprNodes.ExprNode):\n+    # Tries to return a pytype_type if possible. However contains\n+    # some fallback provision if it turns out not to resolve to a Python object\n+    # Initialize with \"entry\"\n+\n+    subexprs = []\n+\n+    def __init__(self, entry):\n+        super(GetTypeNode, self).__init__(entry.pos, entry=entry)\n+\n+    def analyse_types(self, env):\n+        type = self.entry.type\n+\n+        if type.is_extension_type or type.is_builtin_type:\n+            return ExprNodes.RawCNameExprNode(self.pos, Builtin.type_type,\n+                                                type.typeptr_cname).analyse_types(env)\n+        else:\n+            names = None\n+            py_name = type.py_type_name()\n+            # int types can return \"(int, long)\"\n+            if py_name:\n+                names = py_name.split(\",\")\n+                names = [ n.strip(\"() \") for n in names ]\n+            if names:\n+                for name in names:\n+                    name = EncodedString(name)\n+                    nn = ExprNodes.NameNode(self.pos, name=name)\n+                    # try to set the entry now to prevent the user accidentally shadowing\n+                    # the name\n+                    nn.entry = env.builtin_scope().lookup(name)\n+                    if not nn.entry:\n+                        try:\n+                            nn.entry = env.declare_builtin(name, self.pos)\n+                        except:",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r579793750",
            "id": 579793750,
            "in_reply_to_id": 579709964,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTc5Mzc1MA==",
            "original_commit_id": "de0ff9e6da6dad8a774c33a88ff9273aad7813e0",
            "original_line": 466,
            "original_position": 466,
            "original_start_line": null,
            "path": "Cython/Compiler/Dataclass.py",
            "position": null,
            "pull_request_review_id": 594826479,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/579793750",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r579794887"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/579794887"
                }
            },
            "author_association": "COLLABORATOR",
            "body": "I think this is the only one that needs handling outside Dataclass.py (thus it probably isn't worth a helper function). I've tried to clear it up with better variable names.",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2021-02-21T11:46:55Z",
            "diff_hunk": "@@ -2008,13 +2016,24 @@ def declare_from_annotation(self, env, as_target=False):\n                           \"'%s' cannot be specialized since its type is not a fused argument to this function\" %\n                           self.name)\n                     atype = error_type\n+            kwds = {}\n+            if 'dataclasses.dataclass' in env.directives:\n+                # handle \"frozen\" directive - full inspection of the dataclass directives happens\n+                # in Dataclass.py\n+                frozen_directive = env.directives['dataclasses.dataclass']\n+                if frozen_directive:\n+                    frozen_directive = frozen_directive[1].get('frozen', None)\n+                is_frozen = frozen_directive and frozen_directive.is_literal and frozen_directive.value",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r579794887",
            "id": 579794887,
            "in_reply_to_id": 579713559,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTc5NDg4Nw==",
            "original_commit_id": "de0ff9e6da6dad8a774c33a88ff9273aad7813e0",
            "original_line": 2026,
            "original_position": 26,
            "original_start_line": 2023,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_review_id": 594826479,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/579794887",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r579796722"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/579796722"
                }
            },
            "author_association": "COLLABORATOR",
            "body": "I don't think `PythonTypingTypeConstructor` - in more recent versions of Python you can subscript the types directly and just do `list[int]` (although this PR doesn't handle it). Therefore they not *necessarily* come from the `typing` module. I've changed it to `PythonTypeConstructor` instead.",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2021-02-21T12:02:35Z",
            "diff_hunk": "@@ -4369,6 +4379,117 @@ def error_condition(self, result_code):\n         return \"dummy\"\n \n \n+class IndexedPythonType(PyrexType):",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r579796722",
            "id": 579796722,
            "in_reply_to_id": 579716931,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTc5NjcyMg==",
            "original_commit_id": "de0ff9e6da6dad8a774c33a88ff9273aad7813e0",
            "original_line": 4382,
            "original_position": 63,
            "original_start_line": null,
            "path": "Cython/Compiler/PyrexTypes.py",
            "position": null,
            "pull_request_review_id": 594826479,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/579796722",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r579797165"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/579797165"
                }
            },
            "author_association": "COLLABORATOR",
            "body": "Yeah I'm happy with that as a name. Provided we no-one ever tries to use this mechanism on a non-standard library module like Numpy in future",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2021-02-21T12:06:11Z",
            "diff_hunk": "@@ -158,13 +158,17 @@ class Entry(object):\n     # is_fused_specialized boolean Whether this entry of a cdef or def function\n     #                              is a specialization\n     # is_cgetter       boolean    Is a c-level getter function\n+    # unambiguous_import_path     Either None (default), False (definitely can't be determined)",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r579797165",
            "id": 579797165,
            "in_reply_to_id": 579716853,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTc5NzE2NQ==",
            "original_commit_id": "de0ff9e6da6dad8a774c33a88ff9273aad7813e0",
            "original_line": 161,
            "original_position": 4,
            "original_start_line": null,
            "path": "Cython/Compiler/Symtab.py",
            "position": null,
            "pull_request_review_id": 594826479,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/579797165",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r579798060"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/579798060"
                }
            },
            "author_association": "COLLABORATOR",
            "body": "I don't think so... The main difference here is that I provide a small amount of Python fallback code so that the entries in `__dataclass_fields__` always have a type. I don't think the ABI module provides something to do that.",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2021-02-21T12:13:07Z",
            "diff_hunk": "@@ -0,0 +1,78 @@\n+///////////////////// ModuleLoader.proto //////////////////////////\n+\n+static PyObject* __Pyx_LoadInternalModule(const char* name, const char* fallback_code); /* proto */\n+\n+//////////////////// ModuleLoader ///////////////////////\n+//@requires: CommonStructures.c::FetchSharedCythonModule\n+\n+static PyObject* __Pyx_LoadInternalModule(const char* name, const char* fallback_code) {\n+    // In supporting dataclasses we want to be able to use directives the contents\n+    // of the standard library dataclasses module where available\n+    // If those objects aren't available (due to Python version) then a simple fallback is substituted\n+    // instead, which largely just fails with a not-implemented error.\n+    //\n+    // The fallbacks are placed in the \"shared abi module\" as a convenient internal place to\n+    // store them\n+\n+    PyObject *shared_abi_module = 0, *module = 0;\n+\n+    shared_abi_module = __Pyx_FetchSharedCythonABIModule();\n+    if (!shared_abi_module) return NULL;\n+\n+    if (PyObject_HasAttrString(shared_abi_module, name)) {\n+        PyObject* result = PyObject_GetAttrString(shared_abi_module, name);\n+        Py_DECREF(shared_abi_module);\n+        return result;\n+    }\n+\n+    // the best and simplest case is simply to defer to the standard library (if available)\n+    module = PyImport_ImportModule(name);\n+    if (!module) {\n+        PyObject *localDict, *runValue, *builtins, *modulename;\n+        if (PyErr_ExceptionMatches(PyExc_ImportError)) {\n+            PyErr_Clear();  // this is reasonably likely (especially on older versions of Python)\n+        } else {\n+            goto bad;\n+        }\n+        modulename = PyBytes_FromFormat(\"_cython_\" CYTHON_ABI \".%s\", name);\n+        if (!modulename) goto bad;\n+#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_CPYTHON\n+        module = PyImport_AddModuleObject(modulename); // borrowed\n+#else\n+        module = PyImport_AddModule(PyBytes_AsString(modulename)); // borrowed\n+#endif\n+        Py_DECREF(modulename);\n+        if (!module) goto bad;\n+        Py_INCREF(module);",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r579798060",
            "id": 579798060,
            "in_reply_to_id": 579717605,
            "line": 43,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTc5ODA2MA==",
            "original_commit_id": "de0ff9e6da6dad8a774c33a88ff9273aad7813e0",
            "original_line": 46,
            "original_position": 46,
            "original_start_line": 37,
            "path": "Cython/Utility/Dataclasses.c",
            "position": 43,
            "pull_request_review_id": 594826479,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": 34,
            "start_side": "RIGHT",
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/579798060",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r579800186"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/579800186"
                }
            },
            "author_association": "COLLABORATOR",
            "body": "I've replaced it with `is_special_python_type_constructor` which covers all of them, and then just done `type.name==\"typing.Optional\"`",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2021-02-21T12:29:45Z",
            "diff_hunk": "@@ -192,12 +192,16 @@ class PyrexType(BaseType):\n     #  is_string             boolean     Is a C char * type\n     #  is_pyunicode_ptr      boolean     Is a C PyUNICODE * type\n     #  is_cpp_string         boolean     Is a C++ std::string type\n+    #  is_indexed_pytype     boolean     Is a Python type identifier that can be indexed/\"templated\"\n     #  is_unicode_char       boolean     Is either Py_UCS4 or Py_UNICODE\n     #  is_returncode         boolean     Is used only to signal exceptions\n     #  is_error              boolean     Is the dummy error type\n     #  is_buffer             boolean     Is buffer access type\n     #  is_pythran_expr       boolean     Is Pythran expr\n     #  is_numpy_buffer       boolean     Is Numpy array buffer\n+    #  is_dataclasses_initvar        boolean     Is a dataclasses InitVar\n+    #  is_typing_classvar            boolean     Is a typing ClassVar\n+    #  is_typing_optional            boolean     Is a typing Optional",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r579800186",
            "id": 579800186,
            "in_reply_to_id": 579716553,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTgwMDE4Ng==",
            "original_commit_id": "de0ff9e6da6dad8a774c33a88ff9273aad7813e0",
            "original_line": 204,
            "original_position": 13,
            "original_start_line": 202,
            "path": "Cython/Compiler/PyrexTypes.py",
            "position": null,
            "pull_request_review_id": 594826479,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-02-21T18:11:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/579800186",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r640029823"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/640029823"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Sorry for the mess. What does PyPy print here?",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2021-05-26T18:39:24Z",
            "diff_hunk": "@@ -195,9 +195,9 @@ cdef class TestFrozen:\n     >>> inst = TestFrozen(a=5)\n     >>> inst.a\n     5.0\n-    >>> inst.a = 2.\n+    >>> inst.a = 2.  # doctest: +ELLIPSIS\n     Traceback (most recent call last):\n-    AttributeError: attribute 'a' of 'cdef_class_dataclass.TestFrozen' objects is not writable\n+    AttributeError: attribute 'a' of '...TestFrozen' objects is not writable",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r640029823",
            "id": 640029823,
            "line": 200,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDAyOTgyMw==",
            "original_commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "original_line": 200,
            "original_position": 8,
            "original_start_line": null,
            "path": "tests/run/cdef_class_dataclass.pyx",
            "position": 200,
            "pull_request_review_id": 669420200,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-05-26T18:39:24Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/640029823",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/823911?v=4",
                "events_url": "https://api.github.com/users/mattip/events{/privacy}",
                "followers_url": "https://api.github.com/users/mattip/followers",
                "following_url": "https://api.github.com/users/mattip/following{/other_user}",
                "gists_url": "https://api.github.com/users/mattip/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mattip",
                "id": 823911,
                "login": "mattip",
                "node_id": "MDQ6VXNlcjgyMzkxMQ==",
                "organizations_url": "https://api.github.com/users/mattip/orgs",
                "received_events_url": "https://api.github.com/users/mattip/received_events",
                "repos_url": "https://api.github.com/users/mattip/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mattip/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mattip/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mattip"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r640034656"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/640034656"
                }
            },
            "author_association": "MEMBER",
            "body": "It's probably not just PyPy, is it? That's something that changed in Py3.10. It now puts the FQCN in exception messages.",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2021-05-26T18:46:35Z",
            "diff_hunk": "@@ -195,9 +195,9 @@ cdef class TestFrozen:\n     >>> inst = TestFrozen(a=5)\n     >>> inst.a\n     5.0\n-    >>> inst.a = 2.\n+    >>> inst.a = 2.  # doctest: +ELLIPSIS\n     Traceback (most recent call last):\n-    AttributeError: attribute 'a' of 'cdef_class_dataclass.TestFrozen' objects is not writable\n+    AttributeError: attribute 'a' of '...TestFrozen' objects is not writable",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r640034656",
            "id": 640034656,
            "in_reply_to_id": 640029823,
            "line": 200,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDAzNDY1Ng==",
            "original_commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "original_line": 200,
            "original_position": 8,
            "original_start_line": null,
            "path": "tests/run/cdef_class_dataclass.pyx",
            "position": 200,
            "pull_request_review_id": 669426319,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-05-26T18:46:36Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/640034656",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3400#discussion_r640044041"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3400"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/640044041"
                }
            },
            "author_association": "COLLABORATOR",
            "body": "It looks like PyPy omits the module name in this case and most other versions of Python include it. I'm not convinced this is the sort of thing where PyPy is morally obliged to match exactly (although no doubt you have your own views on this) - it only matters because doctest matches the exact text.",
            "commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "created_at": "2021-05-26T19:00:38Z",
            "diff_hunk": "@@ -195,9 +195,9 @@ cdef class TestFrozen:\n     >>> inst = TestFrozen(a=5)\n     >>> inst.a\n     5.0\n-    >>> inst.a = 2.\n+    >>> inst.a = 2.  # doctest: +ELLIPSIS\n     Traceback (most recent call last):\n-    AttributeError: attribute 'a' of 'cdef_class_dataclass.TestFrozen' objects is not writable\n+    AttributeError: attribute 'a' of '...TestFrozen' objects is not writable",
            "html_url": "https://github.com/cython/cython/pull/3400#discussion_r640044041",
            "id": 640044041,
            "in_reply_to_id": 640029823,
            "line": 200,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDA0NDA0MQ==",
            "original_commit_id": "67287e48cf538845fc90a2deac907917b1594600",
            "original_line": 200,
            "original_position": 8,
            "original_start_line": null,
            "path": "tests/run/cdef_class_dataclass.pyx",
            "position": 200,
            "pull_request_review_id": 669438196,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3400",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-05-26T19:00:39Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/640044041",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/cython/cython/issues/3400/comments",
    "commit_data": [
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/1298172e6348b8719ef10f39faf9fcec611f6c13/comments",
            "commit": {
                "author": {
                    "date": "2020-03-07T22:10:48Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-03-07T22:14:48Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "cdef dataclasses\n\nUsed cython.dataclass and cython.field to mark dataclasses and their fields.\n\nTries to match the interface provided by a regular dataclass as much as possible.\nThis means taking the types from the dataclasses module if available (so they\nmatch exactly) or a fallback Python version that just implements the core\nparts (obtained with PyRun_SimpleString in the C source).\n\nDoesn't try to handle ClassVar or InitVar at this stage. Otherwise\npretty complete.\n\nI don't really have a good idea of how to handle non-Python-compatible types\nhere and haven't hugely tested it. Bits will rpobably work to an extent\n\nUse of placeholders in generated __init__ code means the code in the C file\nisn't hugely readable. Probably not a huge issue, but don't really see a\nway round that\n\nTODO: frozen? - when set it either needs to set attributes to readonly\nand/or at least enforce readonlyness\n\n----------------------------------\n\nWhen finished closes https://github.com/cython/cython/issues/2903 -\nhowever, some design decisions pending before it's finished",
                "tree": {
                    "sha": "7c026401df016abe8fd10a42cf71b92e5cd2414a",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/7c026401df016abe8fd10a42cf71b92e5cd2414a"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/1298172e6348b8719ef10f39faf9fcec611f6c13",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/1298172e6348b8719ef10f39faf9fcec611f6c13",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6MTI5ODE3MmU2MzQ4Yjg3MTllZjEwZjM5ZmFmOWZjZWM2MTFmNmMxMw==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/a8cb127df0cb970b00a8f58797740ef571dc8817",
                    "sha": "a8cb127df0cb970b00a8f58797740ef571dc8817",
                    "url": "https://api.github.com/repos/cython/cython/commits/a8cb127df0cb970b00a8f58797740ef571dc8817"
                }
            ],
            "sha": "1298172e6348b8719ef10f39faf9fcec611f6c13",
            "url": "https://api.github.com/repos/cython/cython/commits/1298172e6348b8719ef10f39faf9fcec611f6c13"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/153f18af041f9e21a094ff80a72b9fff363fd4aa/comments",
            "commit": {
                "author": {
                    "date": "2020-03-08T18:42:49Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-03-08T18:42:49Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Fixed bug, added more tests documentation\n\nAlso removed some dead code",
                "tree": {
                    "sha": "8bd39103bd3f78755ec475916edd78ecd9b668d1",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/8bd39103bd3f78755ec475916edd78ecd9b668d1"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/153f18af041f9e21a094ff80a72b9fff363fd4aa",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/153f18af041f9e21a094ff80a72b9fff363fd4aa",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6MTUzZjE4YWYwNDFmOWUyMWEwOTRmZjgwYTcyYjlmZmYzNjNmZDRhYQ==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/1298172e6348b8719ef10f39faf9fcec611f6c13",
                    "sha": "1298172e6348b8719ef10f39faf9fcec611f6c13",
                    "url": "https://api.github.com/repos/cython/cython/commits/1298172e6348b8719ef10f39faf9fcec611f6c13"
                }
            ],
            "sha": "153f18af041f9e21a094ff80a72b9fff363fd4aa",
            "url": "https://api.github.com/repos/cython/cython/commits/153f18af041f9e21a094ff80a72b9fff363fd4aa"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/2d6de5a2596802dcc769936f29c61f8e81781abe/comments",
            "commit": {
                "author": {
                    "date": "2020-03-08T20:48:05Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-03-08T20:48:05Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "py2 test\n\narray.array didn't define the buffer interface. So used\nthe standard cythonarrayutil for the test",
                "tree": {
                    "sha": "c88307ff3bc857530b04f63ced768fabd31ac16f",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/c88307ff3bc857530b04f63ced768fabd31ac16f"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/2d6de5a2596802dcc769936f29c61f8e81781abe",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/2d6de5a2596802dcc769936f29c61f8e81781abe",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6MmQ2ZGU1YTI1OTY4MDJkY2M3Njk5MzZmMjljNjFmOGU4MTc4MWFiZQ==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/153f18af041f9e21a094ff80a72b9fff363fd4aa",
                    "sha": "153f18af041f9e21a094ff80a72b9fff363fd4aa",
                    "url": "https://api.github.com/repos/cython/cython/commits/153f18af041f9e21a094ff80a72b9fff363fd4aa"
                }
            ],
            "sha": "2d6de5a2596802dcc769936f29c61f8e81781abe",
            "url": "https://api.github.com/repos/cython/cython/commits/2d6de5a2596802dcc769936f29c61f8e81781abe"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/5cd5885fcbeb2429be84890f4782030ba1d6e361/comments",
            "commit": {
                "author": {
                    "date": "2020-03-09T09:26:53Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-03-09T09:28:01Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Added InitVar and ClassVar",
                "tree": {
                    "sha": "27e19c5a1b611cf50a49f0aa49433704e2823724",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/27e19c5a1b611cf50a49f0aa49433704e2823724"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/5cd5885fcbeb2429be84890f4782030ba1d6e361",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/5cd5885fcbeb2429be84890f4782030ba1d6e361",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6NWNkNTg4NWZjYmViMjQyOWJlODQ4OTBmNDc4MjAzMGJhMWQ2ZTM2MQ==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/2d6de5a2596802dcc769936f29c61f8e81781abe",
                    "sha": "2d6de5a2596802dcc769936f29c61f8e81781abe",
                    "url": "https://api.github.com/repos/cython/cython/commits/2d6de5a2596802dcc769936f29c61f8e81781abe"
                }
            ],
            "sha": "5cd5885fcbeb2429be84890f4782030ba1d6e361",
            "url": "https://api.github.com/repos/cython/cython/commits/5cd5885fcbeb2429be84890f4782030ba1d6e361"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/f1aceb752d2c250d9b55d15ace4ea18cefe59f3a/comments",
            "commit": {
                "author": {
                    "date": "2020-03-10T09:34:29Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-03-10T18:06:16Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Version using module-level globals to store default/default_factory\n\nAvoids lambda nodes/etc being duplicated in __init__\nand __dataclass_fields__ - simplest solution to this problem",
                "tree": {
                    "sha": "3af74af8f02f82d84bbe5217a26e85b22b556ce6",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/3af74af8f02f82d84bbe5217a26e85b22b556ce6"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/f1aceb752d2c250d9b55d15ace4ea18cefe59f3a",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/f1aceb752d2c250d9b55d15ace4ea18cefe59f3a",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6ZjFhY2ViNzUyZDJjMjUwZDliNTVkMTVhY2U0ZWExOGNlZmU1OWYzYQ==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/5cd5885fcbeb2429be84890f4782030ba1d6e361",
                    "sha": "5cd5885fcbeb2429be84890f4782030ba1d6e361",
                    "url": "https://api.github.com/repos/cython/cython/commits/5cd5885fcbeb2429be84890f4782030ba1d6e361"
                }
            ],
            "sha": "f1aceb752d2c250d9b55d15ace4ea18cefe59f3a",
            "url": "https://api.github.com/repos/cython/cython/commits/f1aceb752d2c250d9b55d15ace4ea18cefe59f3a"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/491bd771ea752d64b385470f84b36c31d7259b8b/comments",
            "commit": {
                "author": {
                    "date": "2020-03-10T20:16:34Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-03-10T20:16:34Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Fixed py2 module-getting issues (and refcount)",
                "tree": {
                    "sha": "4be9ddc7b01cc8939ca9b857236de3ed9972f91d",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/4be9ddc7b01cc8939ca9b857236de3ed9972f91d"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/491bd771ea752d64b385470f84b36c31d7259b8b",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/491bd771ea752d64b385470f84b36c31d7259b8b",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6NDkxYmQ3NzFlYTc1MmQ2NGIzODU0NzBmODRiMzZjMzFkNzI1OWI4Yg==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/f1aceb752d2c250d9b55d15ace4ea18cefe59f3a",
                    "sha": "f1aceb752d2c250d9b55d15ace4ea18cefe59f3a",
                    "url": "https://api.github.com/repos/cython/cython/commits/f1aceb752d2c250d9b55d15ace4ea18cefe59f3a"
                }
            ],
            "sha": "491bd771ea752d64b385470f84b36c31d7259b8b",
            "url": "https://api.github.com/repos/cython/cython/commits/491bd771ea752d64b385470f84b36c31d7259b8b"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/cc1d0002b315a3f1c8f78abcfe558c393102ce3e/comments",
            "commit": {
                "author": {
                    "date": "2020-08-27T18:51:15Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-08-27T18:51:15Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Merge branch 'master' into dataclass",
                "tree": {
                    "sha": "54f9598a12bdde60a56adc5e495f2df3b81ba768",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/54f9598a12bdde60a56adc5e495f2df3b81ba768"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/cc1d0002b315a3f1c8f78abcfe558c393102ce3e",
                "verification": {
                    "payload": "tree 54f9598a12bdde60a56adc5e495f2df3b81ba768\nparent 491bd771ea752d64b385470f84b36c31d7259b8b\nparent 4d54aeff34753551cf0ac9977d50c292dbf9d5d5\nauthor da-woods <dw-git@d-woods.co.uk> 1598554275 +0100\ncommitter GitHub <noreply@github.com> 1598554275 +0100\n\nMerge branch 'master' into dataclass",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfSACjCRBK7hj4Ov3rIwAAdHIIAH6jjqD6GVCoZ4DIy182KZGa\noK2NKfAzrcxiEKE+HmsCQcicv93GvAuZwRxxhp8zUaCBfwL+9CJQCbdBjpr7Jl3Z\ntHuBt8l8QRHGvv+/gwDqd/wrSKzfIwy4D7t8mVIIN4nz7hv03oqqmUVhNUMD5lDe\nNAwY3pCavEKxoMi49OoZI4Olm/LLW0v1Gqox6Q34ZwIamk0uSoQB25Fx8495tOqR\nMu8l0PFGQ4DGWW6+sPOII0c59GOeKWRRjja7hdkcxG2A9huBqabHlux09ohBvQg+\n2m4RWl43a+GGltrB+xmGPg8AKg78cYzj58a0vCpHLtvmmMhM5fR1g80KHXb62mQ=\n=Bh4f\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/cc1d0002b315a3f1c8f78abcfe558c393102ce3e",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6Y2MxZDAwMDJiMzE1YTNmMWM4Zjc4YWJjZmU1NThjMzkzMTAyY2UzZQ==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/491bd771ea752d64b385470f84b36c31d7259b8b",
                    "sha": "491bd771ea752d64b385470f84b36c31d7259b8b",
                    "url": "https://api.github.com/repos/cython/cython/commits/491bd771ea752d64b385470f84b36c31d7259b8b"
                },
                {
                    "html_url": "https://github.com/cython/cython/commit/4d54aeff34753551cf0ac9977d50c292dbf9d5d5",
                    "sha": "4d54aeff34753551cf0ac9977d50c292dbf9d5d5",
                    "url": "https://api.github.com/repos/cython/cython/commits/4d54aeff34753551cf0ac9977d50c292dbf9d5d5"
                }
            ],
            "sha": "cc1d0002b315a3f1c8f78abcfe558c393102ce3e",
            "url": "https://api.github.com/repos/cython/cython/commits/cc1d0002b315a3f1c8f78abcfe558c393102ce3e"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/603b0399979be20cd93931cdfc9bc6a67f6428ee/comments",
            "commit": {
                "author": {
                    "date": "2020-08-28T07:16:08Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-08-28T07:16:08Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Fixed code-style and pypy tests\n\n(I think - pypy compilation currently seems broken on my pc)",
                "tree": {
                    "sha": "e6cd576e1f338a0b99e124783d5e65978dc9652e",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/e6cd576e1f338a0b99e124783d5e65978dc9652e"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/603b0399979be20cd93931cdfc9bc6a67f6428ee",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/603b0399979be20cd93931cdfc9bc6a67f6428ee",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6NjAzYjAzOTk5NzliZTIwY2Q5MzkzMWNkZmM5YmM2YTY3ZjY0MjhlZQ==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/cc1d0002b315a3f1c8f78abcfe558c393102ce3e",
                    "sha": "cc1d0002b315a3f1c8f78abcfe558c393102ce3e",
                    "url": "https://api.github.com/repos/cython/cython/commits/cc1d0002b315a3f1c8f78abcfe558c393102ce3e"
                }
            ],
            "sha": "603b0399979be20cd93931cdfc9bc6a67f6428ee",
            "url": "https://api.github.com/repos/cython/cython/commits/603b0399979be20cd93931cdfc9bc6a67f6428ee"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/043a102296c9949e1924c783c0b0d061810d85e9/comments",
            "commit": {
                "author": {
                    "date": "2020-08-28T16:46:01Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-08-28T16:46:01Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Fixed PyPy3\n\nIt doesn't have PyImport_AddModuleObject",
                "tree": {
                    "sha": "4d56dcf8d6b5a18b17beff55cf516584ca5f4f76",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/4d56dcf8d6b5a18b17beff55cf516584ca5f4f76"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/043a102296c9949e1924c783c0b0d061810d85e9",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/043a102296c9949e1924c783c0b0d061810d85e9",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6MDQzYTEwMjI5NmM5OTQ5ZTE5MjRjNzgzYzBiMGQwNjE4MTBkODVlOQ==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/603b0399979be20cd93931cdfc9bc6a67f6428ee",
                    "sha": "603b0399979be20cd93931cdfc9bc6a67f6428ee",
                    "url": "https://api.github.com/repos/cython/cython/commits/603b0399979be20cd93931cdfc9bc6a67f6428ee"
                }
            ],
            "sha": "043a102296c9949e1924c783c0b0d061810d85e9",
            "url": "https://api.github.com/repos/cython/cython/commits/043a102296c9949e1924c783c0b0d061810d85e9"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/3449117240c87f7746fbb3bf0dbf79d96d5841f2/comments",
            "commit": {
                "author": {
                    "date": "2020-09-10T07:41:45Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-09-10T07:41:45Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Avoid name loading hack\n\nFix typo in documentation\n\nDon't make utilitycode CYTHON_UNUSED",
                "tree": {
                    "sha": "040c7c35e32d81c5cf4d24421c78e83acb2cdcd6",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/040c7c35e32d81c5cf4d24421c78e83acb2cdcd6"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/3449117240c87f7746fbb3bf0dbf79d96d5841f2",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/3449117240c87f7746fbb3bf0dbf79d96d5841f2",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6MzQ0OTExNzI0MGM4N2Y3NzQ2ZmJiM2JmMGRiZjc5ZDk2ZDU4NDFmMg==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/043a102296c9949e1924c783c0b0d061810d85e9",
                    "sha": "043a102296c9949e1924c783c0b0d061810d85e9",
                    "url": "https://api.github.com/repos/cython/cython/commits/043a102296c9949e1924c783c0b0d061810d85e9"
                }
            ],
            "sha": "3449117240c87f7746fbb3bf0dbf79d96d5841f2",
            "url": "https://api.github.com/repos/cython/cython/commits/3449117240c87f7746fbb3bf0dbf79d96d5841f2"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/4adb73a5ebd7b8986c87d3cdf85e716a24305e86/comments",
            "commit": {
                "author": {
                    "date": "2020-09-10T17:38:53Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-09-10T17:38:53Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Improved comments, handled \"annotation_typing\" directive better",
                "tree": {
                    "sha": "2134618fe6be158261d5ea52b8469534dc4a5e24",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/2134618fe6be158261d5ea52b8469534dc4a5e24"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/4adb73a5ebd7b8986c87d3cdf85e716a24305e86",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/4adb73a5ebd7b8986c87d3cdf85e716a24305e86",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6NGFkYjczYTVlYmQ3Yjg5ODZjODdkM2NkZjg1ZTcxNmEyNDMwNWU4Ng==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/3449117240c87f7746fbb3bf0dbf79d96d5841f2",
                    "sha": "3449117240c87f7746fbb3bf0dbf79d96d5841f2",
                    "url": "https://api.github.com/repos/cython/cython/commits/3449117240c87f7746fbb3bf0dbf79d96d5841f2"
                }
            ],
            "sha": "4adb73a5ebd7b8986c87d3cdf85e716a24305e86",
            "url": "https://api.github.com/repos/cython/cython/commits/4adb73a5ebd7b8986c87d3cdf85e716a24305e86"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/8b8138a302d309e41d0a6b0cdbcc51fc63e86fc3/comments",
            "commit": {
                "author": {
                    "date": "2020-09-14T16:27:11Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-09-26T17:01:10Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Move cython.dataclass -> cython.dataclasses.dataclass\n\nfrozen should also work as an option",
                "tree": {
                    "sha": "286d0cbdc8db85d06d4db73ea94e7b52a8ebfc53",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/286d0cbdc8db85d06d4db73ea94e7b52a8ebfc53"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/8b8138a302d309e41d0a6b0cdbcc51fc63e86fc3",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/8b8138a302d309e41d0a6b0cdbcc51fc63e86fc3",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6OGI4MTM4YTMwMmQzMDllNDFkMGE2YjBjZGJjYzUxZmM2M2U4NmZjMw==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/4adb73a5ebd7b8986c87d3cdf85e716a24305e86",
                    "sha": "4adb73a5ebd7b8986c87d3cdf85e716a24305e86",
                    "url": "https://api.github.com/repos/cython/cython/commits/4adb73a5ebd7b8986c87d3cdf85e716a24305e86"
                }
            ],
            "sha": "8b8138a302d309e41d0a6b0cdbcc51fc63e86fc3",
            "url": "https://api.github.com/repos/cython/cython/commits/8b8138a302d309e41d0a6b0cdbcc51fc63e86fc3"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/9b2ae3ba72ebe693bd4a27a2d54b4ebe03d5da34/comments",
            "commit": {
                "author": {
                    "date": "2020-09-26T17:10:33Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-09-26T17:10:33Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Merge branch 'master' into dataclass",
                "tree": {
                    "sha": "104959ff19d77e8fe4fce3f2b5c2d5c9e4696011",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/104959ff19d77e8fe4fce3f2b5c2d5c9e4696011"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/9b2ae3ba72ebe693bd4a27a2d54b4ebe03d5da34",
                "verification": {
                    "payload": "tree 104959ff19d77e8fe4fce3f2b5c2d5c9e4696011\nparent 8b8138a302d309e41d0a6b0cdbcc51fc63e86fc3\nparent cf89182f8181a58bd9102034566856e7280f443c\nauthor da-woods <dw-git@d-woods.co.uk> 1601140233 +0100\ncommitter GitHub <noreply@github.com> 1601140233 +0100\n\nMerge branch 'master' into dataclass",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfb3YJCRBK7hj4Ov3rIwAAdHIIAA0de/wCD6Fs3qHbZjYY1H60\nvkVTKKm18lJuu8PO3BdYHEPnJzSTMBzD6l+tsTJItCzWioD40FBPL6do18J1ITEm\nKW4TvHBumbYs31ovP6hYG1B4SM3ZhjLQVHdwvmfPVub77Sjf87nAN4e4sxj3TVmK\nYBiK/hyHf2NNG/QM2a0CZ0maWLX1gjGaLCHZnCoaZG19Oizxia2rET9vBpks3PHb\nGCXMGTFGbMSGwixxFT1PHc56DbGDp/thOHnf7cMR+ecbYnIIk0hjqekwYlW98lbv\n+xMXqGq2KU7vJ9G8HjOXkDyO2+yhMbkguFP+2IO/MyTkCYVuF6+Pob+diLM80ns=\n=CCFC\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/9b2ae3ba72ebe693bd4a27a2d54b4ebe03d5da34",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6OWIyYWUzYmE3MmViZTY5M2JkNGEyN2EyZDU0YjRlYmUwM2Q1ZGEzNA==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/8b8138a302d309e41d0a6b0cdbcc51fc63e86fc3",
                    "sha": "8b8138a302d309e41d0a6b0cdbcc51fc63e86fc3",
                    "url": "https://api.github.com/repos/cython/cython/commits/8b8138a302d309e41d0a6b0cdbcc51fc63e86fc3"
                },
                {
                    "html_url": "https://github.com/cython/cython/commit/cf89182f8181a58bd9102034566856e7280f443c",
                    "sha": "cf89182f8181a58bd9102034566856e7280f443c",
                    "url": "https://api.github.com/repos/cython/cython/commits/cf89182f8181a58bd9102034566856e7280f443c"
                }
            ],
            "sha": "9b2ae3ba72ebe693bd4a27a2d54b4ebe03d5da34",
            "url": "https://api.github.com/repos/cython/cython/commits/9b2ae3ba72ebe693bd4a27a2d54b4ebe03d5da34"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/6956615ac956190a819fbf0c493adba20f3cd39a/comments",
            "commit": {
                "author": {
                    "date": "2020-10-04T19:47:21Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-10-04T19:47:21Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Merge branch 'master' into dataclass",
                "tree": {
                    "sha": "320b554e5ea136b85df79ab6b293e93c4951b9ce",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/320b554e5ea136b85df79ab6b293e93c4951b9ce"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/6956615ac956190a819fbf0c493adba20f3cd39a",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/6956615ac956190a819fbf0c493adba20f3cd39a",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6Njk1NjYxNWFjOTU2MTkwYTgxOWZiZjBjNDkzYWRiYTIwZjNjZDM5YQ==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/9b2ae3ba72ebe693bd4a27a2d54b4ebe03d5da34",
                    "sha": "9b2ae3ba72ebe693bd4a27a2d54b4ebe03d5da34",
                    "url": "https://api.github.com/repos/cython/cython/commits/9b2ae3ba72ebe693bd4a27a2d54b4ebe03d5da34"
                },
                {
                    "html_url": "https://github.com/cython/cython/commit/883f8f5bd6e2dc095529ad5a33c766f73a9ff413",
                    "sha": "883f8f5bd6e2dc095529ad5a33c766f73a9ff413",
                    "url": "https://api.github.com/repos/cython/cython/commits/883f8f5bd6e2dc095529ad5a33c766f73a9ff413"
                }
            ],
            "sha": "6956615ac956190a819fbf0c493adba20f3cd39a",
            "url": "https://api.github.com/repos/cython/cython/commits/6956615ac956190a819fbf0c493adba20f3cd39a"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/76ebcf2922b946bcc3dcbbf984d1eac4c281f64d/comments",
            "commit": {
                "author": {
                    "date": "2020-10-11T09:00:12Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-10-11T09:00:12Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Apply suggestions from code review\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                "tree": {
                    "sha": "9efc5dbeb0f9187489ce54a964c2d0d760e1e966",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/9efc5dbeb0f9187489ce54a964c2d0d760e1e966"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/76ebcf2922b946bcc3dcbbf984d1eac4c281f64d",
                "verification": {
                    "payload": "tree 9efc5dbeb0f9187489ce54a964c2d0d760e1e966\nparent 6956615ac956190a819fbf0c493adba20f3cd39a\nauthor da-woods <dw-git@d-woods.co.uk> 1602406812 +0100\ncommitter GitHub <noreply@github.com> 1602406812 +0100\n\nApply suggestions from code review\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfgsmcCRBK7hj4Ov3rIwAAdHIIAEuEqkR0Qqi1qJm8tpWBVQiV\n0H372+XPINJJ8sdASXNh8KaVUu90OAt6tkd4Q4hvIP7vZLKwKXL7O7dgo3QaQT11\n0txWLgHjan00Gv88j91/67JnYIa/aaTsd+Rg/rO6Ye0n2Lx4Z2o43EQHRDtFtGgU\nX7MgEe0whGUXTwNaQmgR7z4aAPlGrgvUBAJPrXgUpvcuz+gE3FpbJtUcRP3MIQm0\nMzhgKfqGEUAJ8ox8Nak9esAwY/7W9ROA0VRdcQfRYsWzItB51pBv9bEZWNh2Ww0o\nxDgf7cC5sO6FCTl0JjNnweVdEpvnTaJ6f8da177HY7n7L2jx7dmpXS2scAdEDjk=\n=FFXe\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/76ebcf2922b946bcc3dcbbf984d1eac4c281f64d",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6NzZlYmNmMjkyMmI5NDZiY2MzZGNiYmY5ODRkMWVhYzRjMjgxZjY0ZA==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/6956615ac956190a819fbf0c493adba20f3cd39a",
                    "sha": "6956615ac956190a819fbf0c493adba20f3cd39a",
                    "url": "https://api.github.com/repos/cython/cython/commits/6956615ac956190a819fbf0c493adba20f3cd39a"
                }
            ],
            "sha": "76ebcf2922b946bcc3dcbbf984d1eac4c281f64d",
            "url": "https://api.github.com/repos/cython/cython/commits/76ebcf2922b946bcc3dcbbf984d1eac4c281f64d"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/70057d6bb00176b5975733e49e86a0758d734bba/comments",
            "commit": {
                "author": {
                    "date": "2020-10-14T17:34:24Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-10-14T17:34:24Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Merge branch 'master' into dataclass",
                "tree": {
                    "sha": "90c1b82b082d6575fc41dda6fc50f207fd59ecec",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/90c1b82b082d6575fc41dda6fc50f207fd59ecec"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/70057d6bb00176b5975733e49e86a0758d734bba",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/70057d6bb00176b5975733e49e86a0758d734bba",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6NzAwNTdkNmJiMDAxNzZiNTk3NTczM2U0OWU4NmEwNzU4ZDczNGJiYQ==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/76ebcf2922b946bcc3dcbbf984d1eac4c281f64d",
                    "sha": "76ebcf2922b946bcc3dcbbf984d1eac4c281f64d",
                    "url": "https://api.github.com/repos/cython/cython/commits/76ebcf2922b946bcc3dcbbf984d1eac4c281f64d"
                },
                {
                    "html_url": "https://github.com/cython/cython/commit/ba6cbed8193775c80402bc5112cbaf16246ee6bd",
                    "sha": "ba6cbed8193775c80402bc5112cbaf16246ee6bd",
                    "url": "https://api.github.com/repos/cython/cython/commits/ba6cbed8193775c80402bc5112cbaf16246ee6bd"
                }
            ],
            "sha": "70057d6bb00176b5975733e49e86a0758d734bba",
            "url": "https://api.github.com/repos/cython/cython/commits/70057d6bb00176b5975733e49e86a0758d734bba"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/f23fb742511e361bbc5cb8c3cc19a6ccbadc91f2/comments",
            "commit": {
                "author": {
                    "date": "2020-10-16T16:56:45Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-11-15T16:02:23Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "WIP mess\n\nWIP\n\nMore WIP",
                "tree": {
                    "sha": "94c5cbe4ce0c1171e6727c0f544659d0a7a48f3a",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/94c5cbe4ce0c1171e6727c0f544659d0a7a48f3a"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/f23fb742511e361bbc5cb8c3cc19a6ccbadc91f2",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/f23fb742511e361bbc5cb8c3cc19a6ccbadc91f2",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6ZjIzZmI3NDI1MTFlMzYxYmJjNWNiOGMzY2MxOWE2Y2NiYWRjOTFmMg==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/70057d6bb00176b5975733e49e86a0758d734bba",
                    "sha": "70057d6bb00176b5975733e49e86a0758d734bba",
                    "url": "https://api.github.com/repos/cython/cython/commits/70057d6bb00176b5975733e49e86a0758d734bba"
                }
            ],
            "sha": "f23fb742511e361bbc5cb8c3cc19a6ccbadc91f2",
            "url": "https://api.github.com/repos/cython/cython/commits/f23fb742511e361bbc5cb8c3cc19a6ccbadc91f2"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/f5951c0cd7252f209a7dc819628b4da0b0bca6e4/comments",
            "commit": {
                "author": {
                    "date": "2020-10-16T16:56:45Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-11-15T18:26:14Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Largely seems to work for finding typing module and using names\n\nAdded a mechanism to track where names are imported from (where\npossible) and used that to identify the typing module",
                "tree": {
                    "sha": "3900fbf5f5b2ac8f57238ca0385c35cdc0d3f5e4",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/3900fbf5f5b2ac8f57238ca0385c35cdc0d3f5e4"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/f5951c0cd7252f209a7dc819628b4da0b0bca6e4",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/f5951c0cd7252f209a7dc819628b4da0b0bca6e4",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6ZjU5NTFjMGNkNzI1MmYyMDlhN2RjODE5NjI4YjRkYTBiMGJjYTZlNA==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/ba6cbed8193775c80402bc5112cbaf16246ee6bd",
                    "sha": "ba6cbed8193775c80402bc5112cbaf16246ee6bd",
                    "url": "https://api.github.com/repos/cython/cython/commits/ba6cbed8193775c80402bc5112cbaf16246ee6bd"
                }
            ],
            "sha": "f5951c0cd7252f209a7dc819628b4da0b0bca6e4",
            "url": "https://api.github.com/repos/cython/cython/commits/f5951c0cd7252f209a7dc819628b4da0b0bca6e4"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/7178732d15958fc0fc1a285406e4090387577b85/comments",
            "commit": {
                "author": {
                    "date": "2020-11-15T18:16:55Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-11-15T18:26:14Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Optional seems to work",
                "tree": {
                    "sha": "f42a8226fd0d7d790d72d5bc7b44bd5ae071dd38",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/f42a8226fd0d7d790d72d5bc7b44bd5ae071dd38"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/7178732d15958fc0fc1a285406e4090387577b85",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/7178732d15958fc0fc1a285406e4090387577b85",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6NzE3ODczMmQxNTk1OGZjMGZjMWEyODU0MDZlNDA5MDM4NzU3N2I4NQ==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/f5951c0cd7252f209a7dc819628b4da0b0bca6e4",
                    "sha": "f5951c0cd7252f209a7dc819628b4da0b0bca6e4",
                    "url": "https://api.github.com/repos/cython/cython/commits/f5951c0cd7252f209a7dc819628b4da0b0bca6e4"
                }
            ],
            "sha": "7178732d15958fc0fc1a285406e4090387577b85",
            "url": "https://api.github.com/repos/cython/cython/commits/7178732d15958fc0fc1a285406e4090387577b85"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/5564953d20aa9089896021c50d2f5c1d64532b48/comments",
            "commit": {
                "author": {
                    "date": "2020-11-15T20:41:58Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-11-15T20:43:38Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Fixed tests hopefully",
                "tree": {
                    "sha": "5081ec373d2a0d96b8075f40518bb3d1060902eb",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/5081ec373d2a0d96b8075f40518bb3d1060902eb"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/5564953d20aa9089896021c50d2f5c1d64532b48",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/5564953d20aa9089896021c50d2f5c1d64532b48",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6NTU2NDk1M2QyMGFhOTA4OTg5NjAyMWM1MGQyZjVjMWQ2NDUzMmI0OA==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/7178732d15958fc0fc1a285406e4090387577b85",
                    "sha": "7178732d15958fc0fc1a285406e4090387577b85",
                    "url": "https://api.github.com/repos/cython/cython/commits/7178732d15958fc0fc1a285406e4090387577b85"
                }
            ],
            "sha": "5564953d20aa9089896021c50d2f5c1d64532b48",
            "url": "https://api.github.com/repos/cython/cython/commits/5564953d20aa9089896021c50d2f5c1d64532b48"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/bf42809d16afae30627dc5a1edb30c2f3d124d8d/comments",
            "commit": {
                "author": {
                    "date": "2020-11-15T20:47:35Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-11-15T20:47:35Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Another fix (cimport check must be last)",
                "tree": {
                    "sha": "1da2c2aeeb2562e5644eafd71a4f1f0160b642a0",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/1da2c2aeeb2562e5644eafd71a4f1f0160b642a0"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/bf42809d16afae30627dc5a1edb30c2f3d124d8d",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/bf42809d16afae30627dc5a1edb30c2f3d124d8d",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6YmY0MjgwOWQxNmFmYWUzMDYyN2RjNWExZWRiMzBjMmYzZDEyNGQ4ZA==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/5564953d20aa9089896021c50d2f5c1d64532b48",
                    "sha": "5564953d20aa9089896021c50d2f5c1d64532b48",
                    "url": "https://api.github.com/repos/cython/cython/commits/5564953d20aa9089896021c50d2f5c1d64532b48"
                }
            ],
            "sha": "bf42809d16afae30627dc5a1edb30c2f3d124d8d",
            "url": "https://api.github.com/repos/cython/cython/commits/bf42809d16afae30627dc5a1edb30c2f3d124d8d"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/b78eb1eac8f908a40cacde9597c53e0f89b1c86e/comments",
            "commit": {
                "author": {
                    "date": "2020-11-16T19:21:16Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-11-16T19:21:16Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Tidying, tuples work, annotations become \"not None\"",
                "tree": {
                    "sha": "f3126fbe970d0dc100b870528b6e136627e10d28",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/f3126fbe970d0dc100b870528b6e136627e10d28"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/b78eb1eac8f908a40cacde9597c53e0f89b1c86e",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/b78eb1eac8f908a40cacde9597c53e0f89b1c86e",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6Yjc4ZWIxZWFjOGY5MDhhNDBjYWNkZTk1OTdjNTNlMGY4OWIxYzg2ZQ==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/bf42809d16afae30627dc5a1edb30c2f3d124d8d",
                    "sha": "bf42809d16afae30627dc5a1edb30c2f3d124d8d",
                    "url": "https://api.github.com/repos/cython/cython/commits/bf42809d16afae30627dc5a1edb30c2f3d124d8d"
                }
            ],
            "sha": "b78eb1eac8f908a40cacde9597c53e0f89b1c86e",
            "url": "https://api.github.com/repos/cython/cython/commits/b78eb1eac8f908a40cacde9597c53e0f89b1c86e"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/bda031eea8f182c297afb12d0fc32b7ae3a178f6/comments",
            "commit": {
                "author": {
                    "date": "2020-11-16T20:53:53Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-11-16T20:53:53Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Added missing none check",
                "tree": {
                    "sha": "570da17704a1cf9022fc3fdd399ade007077f06b",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/570da17704a1cf9022fc3fdd399ade007077f06b"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/bda031eea8f182c297afb12d0fc32b7ae3a178f6",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/bda031eea8f182c297afb12d0fc32b7ae3a178f6",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6YmRhMDMxZWVhOGYxODJjMjk3YWZiMTJkMGZjMzJiN2FlM2ExNzhmNg==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/b78eb1eac8f908a40cacde9597c53e0f89b1c86e",
                    "sha": "b78eb1eac8f908a40cacde9597c53e0f89b1c86e",
                    "url": "https://api.github.com/repos/cython/cython/commits/b78eb1eac8f908a40cacde9597c53e0f89b1c86e"
                }
            ],
            "sha": "bda031eea8f182c297afb12d0fc32b7ae3a178f6",
            "url": "https://api.github.com/repos/cython/cython/commits/bda031eea8f182c297afb12d0fc32b7ae3a178f6"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/529f57c96e3df51d842b1ad436a6152be5ca06d5/comments",
            "commit": {
                "author": {
                    "date": "2020-11-17T18:59:08Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-11-17T18:59:08Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Change function name, fix for Py2",
                "tree": {
                    "sha": "18606f21b3d096aaa01decbcb5ab0f24c1d5ffbb",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/18606f21b3d096aaa01decbcb5ab0f24c1d5ffbb"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/529f57c96e3df51d842b1ad436a6152be5ca06d5",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/529f57c96e3df51d842b1ad436a6152be5ca06d5",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6NTI5ZjU3Yzk2ZTNkZjUxZDg0MmIxYWQ0MzZhNjE1MmJlNWNhMDZkNQ==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/bda031eea8f182c297afb12d0fc32b7ae3a178f6",
                    "sha": "bda031eea8f182c297afb12d0fc32b7ae3a178f6",
                    "url": "https://api.github.com/repos/cython/cython/commits/bda031eea8f182c297afb12d0fc32b7ae3a178f6"
                }
            ],
            "sha": "529f57c96e3df51d842b1ad436a6152be5ca06d5",
            "url": "https://api.github.com/repos/cython/cython/commits/529f57c96e3df51d842b1ad436a6152be5ca06d5"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/04392ce4e2047e6715820104acc699d4518ffe7f/comments",
            "commit": {
                "author": {
                    "date": "2020-11-18T08:02:48Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-11-18T08:02:48Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Code style",
                "tree": {
                    "sha": "1cb77df27a7e4559e4131c9fc1ffa1ac559f7a46",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/1cb77df27a7e4559e4131c9fc1ffa1ac559f7a46"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/04392ce4e2047e6715820104acc699d4518ffe7f",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/04392ce4e2047e6715820104acc699d4518ffe7f",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6MDQzOTJjZTRlMjA0N2U2NzE1ODIwMTA0YWNjNjk5ZDQ1MThmZmU3Zg==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/529f57c96e3df51d842b1ad436a6152be5ca06d5",
                    "sha": "529f57c96e3df51d842b1ad436a6152be5ca06d5",
                    "url": "https://api.github.com/repos/cython/cython/commits/529f57c96e3df51d842b1ad436a6152be5ca06d5"
                }
            ],
            "sha": "04392ce4e2047e6715820104acc699d4518ffe7f",
            "url": "https://api.github.com/repos/cython/cython/commits/04392ce4e2047e6715820104acc699d4518ffe7f"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/f3bd1fa61049f9be7777b0c0b76521239b55d965/comments",
            "commit": {
                "author": {
                    "date": "2020-12-20T11:01:29Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-12-20T11:01:29Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Merge branch 'typing_support' into dataclasses2",
                "tree": {
                    "sha": "441d9b70c2e7316fa906c7ff64c058883ba43927",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/441d9b70c2e7316fa906c7ff64c058883ba43927"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/f3bd1fa61049f9be7777b0c0b76521239b55d965",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/f3bd1fa61049f9be7777b0c0b76521239b55d965",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6ZjNiZDFmYTYxMDQ5ZjliZTc3NzdiMGMwYjc2NTIxMjM5YjU1ZDk2NQ==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/f23fb742511e361bbc5cb8c3cc19a6ccbadc91f2",
                    "sha": "f23fb742511e361bbc5cb8c3cc19a6ccbadc91f2",
                    "url": "https://api.github.com/repos/cython/cython/commits/f23fb742511e361bbc5cb8c3cc19a6ccbadc91f2"
                },
                {
                    "html_url": "https://github.com/cython/cython/commit/04392ce4e2047e6715820104acc699d4518ffe7f",
                    "sha": "04392ce4e2047e6715820104acc699d4518ffe7f",
                    "url": "https://api.github.com/repos/cython/cython/commits/04392ce4e2047e6715820104acc699d4518ffe7f"
                }
            ],
            "sha": "f3bd1fa61049f9be7777b0c0b76521239b55d965",
            "url": "https://api.github.com/repos/cython/cython/commits/f3bd1fa61049f9be7777b0c0b76521239b55d965"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/46e10f250ae157d2abc3fc470a8141a6431e2c32/comments",
            "commit": {
                "author": {
                    "date": "2020-12-20T17:13:59Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-12-20T17:23:52Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Made \"import as\" work with cdef defined variables",
                "tree": {
                    "sha": "af625b5838f5cc1d9842d57854e8aff19218c492",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/af625b5838f5cc1d9842d57854e8aff19218c492"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/46e10f250ae157d2abc3fc470a8141a6431e2c32",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/46e10f250ae157d2abc3fc470a8141a6431e2c32",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6NDZlMTBmMjUwYWUxNTdkMmFiYzNmYzQ3MGE4MTQxYTY0MzFlMmMzMg==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/04392ce4e2047e6715820104acc699d4518ffe7f",
                    "sha": "04392ce4e2047e6715820104acc699d4518ffe7f",
                    "url": "https://api.github.com/repos/cython/cython/commits/04392ce4e2047e6715820104acc699d4518ffe7f"
                }
            ],
            "sha": "46e10f250ae157d2abc3fc470a8141a6431e2c32",
            "url": "https://api.github.com/repos/cython/cython/commits/46e10f250ae157d2abc3fc470a8141a6431e2c32"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/fca51437167ff0cf11e6888848f8c63dab69b979/comments",
            "commit": {
                "author": {
                    "date": "2020-12-20T17:25:36Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-12-20T17:25:36Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Merge branch 'typing_support' into dataclasses3",
                "tree": {
                    "sha": "91a6aa72a1e4bdbcf9001e6a03642119a9899dab",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/91a6aa72a1e4bdbcf9001e6a03642119a9899dab"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/fca51437167ff0cf11e6888848f8c63dab69b979",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/fca51437167ff0cf11e6888848f8c63dab69b979",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6ZmNhNTE0MzcxNjdmZjBjZjExZTY4ODg4NDhmOGM2M2RhYjY5Yjk3OQ==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/f3bd1fa61049f9be7777b0c0b76521239b55d965",
                    "sha": "f3bd1fa61049f9be7777b0c0b76521239b55d965",
                    "url": "https://api.github.com/repos/cython/cython/commits/f3bd1fa61049f9be7777b0c0b76521239b55d965"
                },
                {
                    "html_url": "https://github.com/cython/cython/commit/46e10f250ae157d2abc3fc470a8141a6431e2c32",
                    "sha": "46e10f250ae157d2abc3fc470a8141a6431e2c32",
                    "url": "https://api.github.com/repos/cython/cython/commits/46e10f250ae157d2abc3fc470a8141a6431e2c32"
                }
            ],
            "sha": "fca51437167ff0cf11e6888848f8c63dab69b979",
            "url": "https://api.github.com/repos/cython/cython/commits/fca51437167ff0cf11e6888848f8c63dab69b979"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/4c6354f0540bee982541d975344b0228d8693781/comments",
            "commit": {
                "author": {
                    "date": "2020-12-20T10:52:06Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-12-20T17:29:22Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Made InitVar and ClassVar work from their python modules\n\nRather than declaring them inside the cython cimport module",
                "tree": {
                    "sha": "de4262e01979a908395db2f4199af06bcdedc70e",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/de4262e01979a908395db2f4199af06bcdedc70e"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/4c6354f0540bee982541d975344b0228d8693781",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/4c6354f0540bee982541d975344b0228d8693781",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6NGM2MzU0ZjA1NDBiZWU5ODI1NDFkOTc1MzQ0YjAyMjhkODY5Mzc4MQ==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/fca51437167ff0cf11e6888848f8c63dab69b979",
                    "sha": "fca51437167ff0cf11e6888848f8c63dab69b979",
                    "url": "https://api.github.com/repos/cython/cython/commits/fca51437167ff0cf11e6888848f8c63dab69b979"
                }
            ],
            "sha": "4c6354f0540bee982541d975344b0228d8693781",
            "url": "https://api.github.com/repos/cython/cython/commits/4c6354f0540bee982541d975344b0228d8693781"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/1f424ddc8dc6abcfadc13c685f63e92474201508/comments",
            "commit": {
                "author": {
                    "date": "2020-12-20T17:38:36Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-12-20T17:41:16Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Trivial suggestions from code review",
                "tree": {
                    "sha": "5938a8a73794ab26b17f42d08db09e90deb64239",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/5938a8a73794ab26b17f42d08db09e90deb64239"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/1f424ddc8dc6abcfadc13c685f63e92474201508",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/1f424ddc8dc6abcfadc13c685f63e92474201508",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6MWY0MjRkZGM4ZGM2YWJjZmFkYzEzYzY4NWY2M2U5MjQ3NDIwMTUwOA==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/4c6354f0540bee982541d975344b0228d8693781",
                    "sha": "4c6354f0540bee982541d975344b0228d8693781",
                    "url": "https://api.github.com/repos/cython/cython/commits/4c6354f0540bee982541d975344b0228d8693781"
                }
            ],
            "sha": "1f424ddc8dc6abcfadc13c685f63e92474201508",
            "url": "https://api.github.com/repos/cython/cython/commits/1f424ddc8dc6abcfadc13c685f63e92474201508"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/b9f079ef3843ab267b99f15b948b33063b523c86/comments",
            "commit": {
                "author": {
                    "date": "2020-12-20T18:02:20Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-12-20T18:02:20Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Simplified loading of std-lib and fallback (a bit)",
                "tree": {
                    "sha": "8ebec3e39d2a2505d6992d8301f3eb1b4756895c",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/8ebec3e39d2a2505d6992d8301f3eb1b4756895c"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/b9f079ef3843ab267b99f15b948b33063b523c86",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/b9f079ef3843ab267b99f15b948b33063b523c86",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6YjlmMDc5ZWYzODQzYWIyNjdiOTlmMTViOTQ4YjMzMDYzYjUyM2M4Ng==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/1f424ddc8dc6abcfadc13c685f63e92474201508",
                    "sha": "1f424ddc8dc6abcfadc13c685f63e92474201508",
                    "url": "https://api.github.com/repos/cython/cython/commits/1f424ddc8dc6abcfadc13c685f63e92474201508"
                }
            ],
            "sha": "b9f079ef3843ab267b99f15b948b33063b523c86",
            "url": "https://api.github.com/repos/cython/cython/commits/b9f079ef3843ab267b99f15b948b33063b523c86"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/764e138ae4aae544a9eaa0a5da8127416f7bcc85/comments",
            "commit": {
                "author": {
                    "date": "2020-12-21T19:46:31Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-12-21T19:46:31Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Remove pep563_annotation addition to entry\n\nAnd other changes from review",
                "tree": {
                    "sha": "d7e1be5240334388bdc0cd3f1a47df056e62fb02",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/d7e1be5240334388bdc0cd3f1a47df056e62fb02"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/764e138ae4aae544a9eaa0a5da8127416f7bcc85",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/764e138ae4aae544a9eaa0a5da8127416f7bcc85",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6NzY0ZTEzOGFlNGFhZTU0NGE5ZWFhMGE1ZGE4MTI3NDE2ZjdiY2M4NQ==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/b9f079ef3843ab267b99f15b948b33063b523c86",
                    "sha": "b9f079ef3843ab267b99f15b948b33063b523c86",
                    "url": "https://api.github.com/repos/cython/cython/commits/b9f079ef3843ab267b99f15b948b33063b523c86"
                }
            ],
            "sha": "764e138ae4aae544a9eaa0a5da8127416f7bcc85",
            "url": "https://api.github.com/repos/cython/cython/commits/764e138ae4aae544a9eaa0a5da8127416f7bcc85"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/06c570804d8f7f626d4cc2c62e546a7f6bcfc4cd/comments",
            "commit": {
                "author": {
                    "date": "2020-12-21T19:49:29Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-12-21T19:49:29Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Remove unneeded dummy entries",
                "tree": {
                    "sha": "30a4a08fe35e7e1fb4ccce3be4e59069861780e8",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/30a4a08fe35e7e1fb4ccce3be4e59069861780e8"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/06c570804d8f7f626d4cc2c62e546a7f6bcfc4cd",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/06c570804d8f7f626d4cc2c62e546a7f6bcfc4cd",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6MDZjNTcwODA0ZDhmN2Y2MjZkNGNjMmM2MmU1NDZhN2Y2YmNmYzRjZA==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/46e10f250ae157d2abc3fc470a8141a6431e2c32",
                    "sha": "46e10f250ae157d2abc3fc470a8141a6431e2c32",
                    "url": "https://api.github.com/repos/cython/cython/commits/46e10f250ae157d2abc3fc470a8141a6431e2c32"
                }
            ],
            "sha": "06c570804d8f7f626d4cc2c62e546a7f6bcfc4cd",
            "url": "https://api.github.com/repos/cython/cython/commits/06c570804d8f7f626d4cc2c62e546a7f6bcfc4cd"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/719bf1d50edb3badb9484f02ffc5443183a934ce/comments",
            "commit": {
                "author": {
                    "date": "2020-12-21T19:49:53Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-12-21T19:49:53Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Merge branch 'typing_support' into dataclass",
                "tree": {
                    "sha": "4f625c7be740e11a5e80687aacb2b22a12acc450",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/4f625c7be740e11a5e80687aacb2b22a12acc450"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/719bf1d50edb3badb9484f02ffc5443183a934ce",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/719bf1d50edb3badb9484f02ffc5443183a934ce",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6NzE5YmYxZDUwZWRiM2JhZGI5NDg0ZjAyZmZjNTQ0MzE4M2E5MzRjZQ==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/764e138ae4aae544a9eaa0a5da8127416f7bcc85",
                    "sha": "764e138ae4aae544a9eaa0a5da8127416f7bcc85",
                    "url": "https://api.github.com/repos/cython/cython/commits/764e138ae4aae544a9eaa0a5da8127416f7bcc85"
                },
                {
                    "html_url": "https://github.com/cython/cython/commit/06c570804d8f7f626d4cc2c62e546a7f6bcfc4cd",
                    "sha": "06c570804d8f7f626d4cc2c62e546a7f6bcfc4cd",
                    "url": "https://api.github.com/repos/cython/cython/commits/06c570804d8f7f626d4cc2c62e546a7f6bcfc4cd"
                }
            ],
            "sha": "719bf1d50edb3badb9484f02ffc5443183a934ce",
            "url": "https://api.github.com/repos/cython/cython/commits/719bf1d50edb3badb9484f02ffc5443183a934ce"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/2b0ae30f2288c861d06ba1e0d40b8e2e8040f14d/comments",
            "commit": {
                "author": {
                    "date": "2020-12-27T08:55:01Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-12-27T08:55:01Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Change Ellipsis comment",
                "tree": {
                    "sha": "cea93033369978b962163573150ad8a067f42307",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/cea93033369978b962163573150ad8a067f42307"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/2b0ae30f2288c861d06ba1e0d40b8e2e8040f14d",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/2b0ae30f2288c861d06ba1e0d40b8e2e8040f14d",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6MmIwYWUzMGYyMjg4Yzg2MWQwNmJhMWUwZDQwYjhlMmU4MDQwZjE0ZA==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/719bf1d50edb3badb9484f02ffc5443183a934ce",
                    "sha": "719bf1d50edb3badb9484f02ffc5443183a934ce",
                    "url": "https://api.github.com/repos/cython/cython/commits/719bf1d50edb3badb9484f02ffc5443183a934ce"
                }
            ],
            "sha": "2b0ae30f2288c861d06ba1e0d40b8e2e8040f14d",
            "url": "https://api.github.com/repos/cython/cython/commits/2b0ae30f2288c861d06ba1e0d40b8e2e8040f14d"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/1a9e996779e80b4a70f95cc82115e0133b6cffe4/comments",
            "commit": {
                "author": {
                    "date": "2020-12-27T09:13:11Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-12-27T09:13:11Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Pick visibility in ExprNodes",
                "tree": {
                    "sha": "304ce0f1868d3457b39278ced5dc0618949c48ca",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/304ce0f1868d3457b39278ced5dc0618949c48ca"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/1a9e996779e80b4a70f95cc82115e0133b6cffe4",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/1a9e996779e80b4a70f95cc82115e0133b6cffe4",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6MWE5ZTk5Njc3OWU4MGI0YTcwZjk1Y2M4MjExNWUwMTMzYjZjZmZlNA==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/2b0ae30f2288c861d06ba1e0d40b8e2e8040f14d",
                    "sha": "2b0ae30f2288c861d06ba1e0d40b8e2e8040f14d",
                    "url": "https://api.github.com/repos/cython/cython/commits/2b0ae30f2288c861d06ba1e0d40b8e2e8040f14d"
                }
            ],
            "sha": "1a9e996779e80b4a70f95cc82115e0133b6cffe4",
            "url": "https://api.github.com/repos/cython/cython/commits/1a9e996779e80b4a70f95cc82115e0133b6cffe4"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/de0ff9e6da6dad8a774c33a88ff9273aad7813e0/comments",
            "commit": {
                "author": {
                    "date": "2020-12-27T09:57:15Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-12-27T09:57:15Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Remove \"DontReanalyseDeclarationsNode\"\n\ninstead make it safe to call \"analyse_declarations\" twice on\nLambdaNode",
                "tree": {
                    "sha": "589350ec185c5686d20730fc6b009496797bbb40",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/589350ec185c5686d20730fc6b009496797bbb40"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/de0ff9e6da6dad8a774c33a88ff9273aad7813e0",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/de0ff9e6da6dad8a774c33a88ff9273aad7813e0",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6ZGUwZmY5ZTZkYTZkYWQ4YTc3NGMzM2E4OGZmOTI3M2FhZDc4MTNlMA==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/1a9e996779e80b4a70f95cc82115e0133b6cffe4",
                    "sha": "1a9e996779e80b4a70f95cc82115e0133b6cffe4",
                    "url": "https://api.github.com/repos/cython/cython/commits/1a9e996779e80b4a70f95cc82115e0133b6cffe4"
                }
            ],
            "sha": "de0ff9e6da6dad8a774c33a88ff9273aad7813e0",
            "url": "https://api.github.com/repos/cython/cython/commits/de0ff9e6da6dad8a774c33a88ff9273aad7813e0"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/63fd8405aacfe26120e44ea324828dd03ece39e1/comments",
            "commit": {
                "author": {
                    "date": "2021-02-21T10:24:59Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-02-21T10:24:59Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Apply suggestions from code review\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                "tree": {
                    "sha": "55ec747ce2a1226ab8eb58fb7f206fb367ac1efd",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/55ec747ce2a1226ab8eb58fb7f206fb367ac1efd"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/63fd8405aacfe26120e44ea324828dd03ece39e1",
                "verification": {
                    "payload": "tree 55ec747ce2a1226ab8eb58fb7f206fb367ac1efd\nparent de0ff9e6da6dad8a774c33a88ff9273aad7813e0\nauthor da-woods <dw-git@d-woods.co.uk> 1613903099 +0000\ncommitter GitHub <noreply@github.com> 1613903099 +0000\n\nApply suggestions from code review\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgMjT8CRBK7hj4Ov3rIwAAdHIIACoHm543UAJJ9OKLL+IrcYGZ\nYygyskbU3HnodUe1Jon9TI3n2rSW8QMm+Z6w4jdNouqf/g+wdL1UK8UImP43qLFD\nEdV9fQ9ysfxFM/G+SFpY+rBevXyQBGrRcaRkKOujW5V2AO5Pwl5GPgBgK2ZZtSlS\nrI/giRJPpTmTak2U2x5YILRgRASOJCPL4IOrBMgkB47qfFgFlQlJRdcOqW61p7Wy\nG4fnu7eUbdlrJM3dL0y37AYM39uIoJobqSaX9ciT6uqTTyLVl1zcy+CsnjVzZt9y\n2gdhtRL7bhGQWHytO8yL+pq1hRbLSSQfgsavig5xgMlT2Gxp3SJToLliiuql9TM=\n=Ksnx\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/63fd8405aacfe26120e44ea324828dd03ece39e1",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6NjNmZDg0MDVhYWNmZTI2MTIwZTQ0ZWEzMjQ4MjhkZDAzZWNlMzllMQ==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/de0ff9e6da6dad8a774c33a88ff9273aad7813e0",
                    "sha": "de0ff9e6da6dad8a774c33a88ff9273aad7813e0",
                    "url": "https://api.github.com/repos/cython/cython/commits/de0ff9e6da6dad8a774c33a88ff9273aad7813e0"
                }
            ],
            "sha": "63fd8405aacfe26120e44ea324828dd03ece39e1",
            "url": "https://api.github.com/repos/cython/cython/commits/63fd8405aacfe26120e44ea324828dd03ece39e1"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/72bdef2926846745574e4af0cebaf5c5fbc834ce/comments",
            "commit": {
                "author": {
                    "date": "2021-02-21T12:34:05Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-02-21T12:34:05Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "More (manual) changes from review",
                "tree": {
                    "sha": "e6ea24b18ad7fa7afe462b26787024570ab85d71",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/e6ea24b18ad7fa7afe462b26787024570ab85d71"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/72bdef2926846745574e4af0cebaf5c5fbc834ce",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/72bdef2926846745574e4af0cebaf5c5fbc834ce",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6NzJiZGVmMjkyNjg0Njc0NTU3NGU0YWYwY2ViYWY1YzVmYmM4MzRjZQ==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/63fd8405aacfe26120e44ea324828dd03ece39e1",
                    "sha": "63fd8405aacfe26120e44ea324828dd03ece39e1",
                    "url": "https://api.github.com/repos/cython/cython/commits/63fd8405aacfe26120e44ea324828dd03ece39e1"
                }
            ],
            "sha": "72bdef2926846745574e4af0cebaf5c5fbc834ce",
            "url": "https://api.github.com/repos/cython/cython/commits/72bdef2926846745574e4af0cebaf5c5fbc834ce"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/6d4d0d68cc189759de82ac506186e10de930d048/comments",
            "commit": {
                "author": {
                    "date": "2021-02-21T10:24:59Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-02-21T12:38:58Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Apply suggestions from code review\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                "tree": {
                    "sha": "9769070da42f56252f96c6d30bc81b1ae0d30c53",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/9769070da42f56252f96c6d30bc81b1ae0d30c53"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/6d4d0d68cc189759de82ac506186e10de930d048",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/6d4d0d68cc189759de82ac506186e10de930d048",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6NmQ0ZDBkNjhjYzE4OTc1OWRlODJhYzUwNjE4NmUxMGRlOTMwZDA0OA==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/06c570804d8f7f626d4cc2c62e546a7f6bcfc4cd",
                    "sha": "06c570804d8f7f626d4cc2c62e546a7f6bcfc4cd",
                    "url": "https://api.github.com/repos/cython/cython/commits/06c570804d8f7f626d4cc2c62e546a7f6bcfc4cd"
                }
            ],
            "sha": "6d4d0d68cc189759de82ac506186e10de930d048",
            "url": "https://api.github.com/repos/cython/cython/commits/6d4d0d68cc189759de82ac506186e10de930d048"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/9355b28f9a06d2b32ce96334d1064a404ec89094/comments",
            "commit": {
                "author": {
                    "date": "2021-02-21T12:34:05Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-02-21T12:43:23Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "More (manual) changes from review",
                "tree": {
                    "sha": "e7acda387a45c3b165916a012ce050c926a9ed8a",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/e7acda387a45c3b165916a012ce050c926a9ed8a"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/9355b28f9a06d2b32ce96334d1064a404ec89094",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/9355b28f9a06d2b32ce96334d1064a404ec89094",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6OTM1NWIyOGY5YTA2ZDJiMzJjZTk2MzM0ZDEwNjRhNDA0ZWM4OTA5NA==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/6d4d0d68cc189759de82ac506186e10de930d048",
                    "sha": "6d4d0d68cc189759de82ac506186e10de930d048",
                    "url": "https://api.github.com/repos/cython/cython/commits/6d4d0d68cc189759de82ac506186e10de930d048"
                }
            ],
            "sha": "9355b28f9a06d2b32ce96334d1064a404ec89094",
            "url": "https://api.github.com/repos/cython/cython/commits/9355b28f9a06d2b32ce96334d1064a404ec89094"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/d86a9ec844e1f6ccaeb0df0c55d4a973508c795b/comments",
            "commit": {
                "author": {
                    "date": "2021-02-21T14:53:56Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-02-21T14:59:16Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Tests that should have been part of typing_support",
                "tree": {
                    "sha": "8b6678f7db0ded03cc8566d62cd4a6d65a7c2a80",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/8b6678f7db0ded03cc8566d62cd4a6d65a7c2a80"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/d86a9ec844e1f6ccaeb0df0c55d4a973508c795b",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/d86a9ec844e1f6ccaeb0df0c55d4a973508c795b",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6ZDg2YTllYzg0NGUxZjZjY2FlYjBkZjBjNTVkNGE5NzM1MDhjNzk1Yg==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/9355b28f9a06d2b32ce96334d1064a404ec89094",
                    "sha": "9355b28f9a06d2b32ce96334d1064a404ec89094",
                    "url": "https://api.github.com/repos/cython/cython/commits/9355b28f9a06d2b32ce96334d1064a404ec89094"
                }
            ],
            "sha": "d86a9ec844e1f6ccaeb0df0c55d4a973508c795b",
            "url": "https://api.github.com/repos/cython/cython/commits/d86a9ec844e1f6ccaeb0df0c55d4a973508c795b"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/d1b0c999725b458cb1cf804a8647e808ac44b4f6/comments",
            "commit": {
                "author": {
                    "date": "2021-02-21T15:18:53Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-02-21T15:18:53Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Updated documentation",
                "tree": {
                    "sha": "95e0f0deda4fec4e02b47cfc1b8498e684b6d622",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/95e0f0deda4fec4e02b47cfc1b8498e684b6d622"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/d1b0c999725b458cb1cf804a8647e808ac44b4f6",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/d1b0c999725b458cb1cf804a8647e808ac44b4f6",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6ZDFiMGM5OTk3MjViNDU4Y2IxY2Y4MDRhODY0N2U4MDhhYzQ0YjRmNg==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/d86a9ec844e1f6ccaeb0df0c55d4a973508c795b",
                    "sha": "d86a9ec844e1f6ccaeb0df0c55d4a973508c795b",
                    "url": "https://api.github.com/repos/cython/cython/commits/d86a9ec844e1f6ccaeb0df0c55d4a973508c795b"
                }
            ],
            "sha": "d1b0c999725b458cb1cf804a8647e808ac44b4f6",
            "url": "https://api.github.com/repos/cython/cython/commits/d1b0c999725b458cb1cf804a8647e808ac44b4f6"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/9abf841b84e190159885622069dd1cbfc061d25c/comments",
            "commit": {
                "author": {
                    "date": "2021-02-21T15:24:51Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-02-21T15:24:51Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Merge branch 'typing_support' into dataclass",
                "tree": {
                    "sha": "40505c9c6618f05540d34ad4a5646d4db69370ea",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/40505c9c6618f05540d34ad4a5646d4db69370ea"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/9abf841b84e190159885622069dd1cbfc061d25c",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/9abf841b84e190159885622069dd1cbfc061d25c",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6OWFiZjg0MWI4NGUxOTAxNTk4ODU2MjIwNjlkZDFjYmZjMDYxZDI1Yw==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/72bdef2926846745574e4af0cebaf5c5fbc834ce",
                    "sha": "72bdef2926846745574e4af0cebaf5c5fbc834ce",
                    "url": "https://api.github.com/repos/cython/cython/commits/72bdef2926846745574e4af0cebaf5c5fbc834ce"
                },
                {
                    "html_url": "https://github.com/cython/cython/commit/d1b0c999725b458cb1cf804a8647e808ac44b4f6",
                    "sha": "d1b0c999725b458cb1cf804a8647e808ac44b4f6",
                    "url": "https://api.github.com/repos/cython/cython/commits/d1b0c999725b458cb1cf804a8647e808ac44b4f6"
                }
            ],
            "sha": "9abf841b84e190159885622069dd1cbfc061d25c",
            "url": "https://api.github.com/repos/cython/cython/commits/9abf841b84e190159885622069dd1cbfc061d25c"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/055e87a144043018d266c951983e7d34ee9cfd36/comments",
            "commit": {
                "author": {
                    "date": "2021-02-21T15:25:28Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-02-21T15:25:28Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Description in changelog",
                "tree": {
                    "sha": "ec965b7b3fe3044d0ca4ef1619081fd4b5dd2792",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/ec965b7b3fe3044d0ca4ef1619081fd4b5dd2792"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/055e87a144043018d266c951983e7d34ee9cfd36",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/055e87a144043018d266c951983e7d34ee9cfd36",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6MDU1ZTg3YTE0NDA0MzAxOGQyNjZjOTUxOTgzZTdkMzRlZTljZmQzNg==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/9abf841b84e190159885622069dd1cbfc061d25c",
                    "sha": "9abf841b84e190159885622069dd1cbfc061d25c",
                    "url": "https://api.github.com/repos/cython/cython/commits/9abf841b84e190159885622069dd1cbfc061d25c"
                }
            ],
            "sha": "055e87a144043018d266c951983e7d34ee9cfd36",
            "url": "https://api.github.com/repos/cython/cython/commits/055e87a144043018d266c951983e7d34ee9cfd36"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/d8f3186729a861ad459bf999d74ae6ba051f2dc1/comments",
            "commit": {
                "author": {
                    "date": "2021-02-21T15:31:19Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-02-21T15:31:19Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Fixed typing_module test merge",
                "tree": {
                    "sha": "4552b5a96a38033e18ce63dc1daa38d9076afba1",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/4552b5a96a38033e18ce63dc1daa38d9076afba1"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/d8f3186729a861ad459bf999d74ae6ba051f2dc1",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/d8f3186729a861ad459bf999d74ae6ba051f2dc1",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6ZDhmMzE4NjcyOWE4NjFhZDQ1OWJmOTk5ZDc0YWU2YmEwNTFmMmRjMQ==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/055e87a144043018d266c951983e7d34ee9cfd36",
                    "sha": "055e87a144043018d266c951983e7d34ee9cfd36",
                    "url": "https://api.github.com/repos/cython/cython/commits/055e87a144043018d266c951983e7d34ee9cfd36"
                }
            ],
            "sha": "d8f3186729a861ad459bf999d74ae6ba051f2dc1",
            "url": "https://api.github.com/repos/cython/cython/commits/d8f3186729a861ad459bf999d74ae6ba051f2dc1"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/46d0c66a9e629e3db610da2efbc299f75bd114c1/comments",
            "commit": {
                "author": {
                    "date": "2021-02-21T18:08:24Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-02-21T18:09:22Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Version for pure Python test",
                "tree": {
                    "sha": "2ab8b83bab255c6b582a8eedd6b24e5eaf81af50",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/2ab8b83bab255c6b582a8eedd6b24e5eaf81af50"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/46d0c66a9e629e3db610da2efbc299f75bd114c1",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/46d0c66a9e629e3db610da2efbc299f75bd114c1",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6NDZkMGM2NmE5ZTYyOWUzZGI2MTBkYTJlZmJjMjk5Zjc1YmQxMTRjMQ==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/d1b0c999725b458cb1cf804a8647e808ac44b4f6",
                    "sha": "d1b0c999725b458cb1cf804a8647e808ac44b4f6",
                    "url": "https://api.github.com/repos/cython/cython/commits/d1b0c999725b458cb1cf804a8647e808ac44b4f6"
                }
            ],
            "sha": "46d0c66a9e629e3db610da2efbc299f75bd114c1",
            "url": "https://api.github.com/repos/cython/cython/commits/46d0c66a9e629e3db610da2efbc299f75bd114c1"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/25898ab19058cb1c9610e59922f9fb6e91f7d82b/comments",
            "commit": {
                "author": {
                    "date": "2021-02-21T18:09:39Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-02-21T18:09:39Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Merge branch 'typing_support' into dataclass",
                "tree": {
                    "sha": "12373c38f8385271ecc17678baa6ab5b528f3801",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/12373c38f8385271ecc17678baa6ab5b528f3801"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/25898ab19058cb1c9610e59922f9fb6e91f7d82b",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/25898ab19058cb1c9610e59922f9fb6e91f7d82b",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6MjU4OThhYjE5MDU4Y2IxYzk2MTBlNTk5MjJmOWZiNmU5MWY3ZDgyYg==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/d8f3186729a861ad459bf999d74ae6ba051f2dc1",
                    "sha": "d8f3186729a861ad459bf999d74ae6ba051f2dc1",
                    "url": "https://api.github.com/repos/cython/cython/commits/d8f3186729a861ad459bf999d74ae6ba051f2dc1"
                },
                {
                    "html_url": "https://github.com/cython/cython/commit/46d0c66a9e629e3db610da2efbc299f75bd114c1",
                    "sha": "46d0c66a9e629e3db610da2efbc299f75bd114c1",
                    "url": "https://api.github.com/repos/cython/cython/commits/46d0c66a9e629e3db610da2efbc299f75bd114c1"
                }
            ],
            "sha": "25898ab19058cb1c9610e59922f9fb6e91f7d82b",
            "url": "https://api.github.com/repos/cython/cython/commits/25898ab19058cb1c9610e59922f9fb6e91f7d82b"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/c78720e87e8547c1edfa8537cc4810cff3143ee8/comments",
            "commit": {
                "author": {
                    "date": "2021-05-25T16:32:49Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-05-25T16:32:49Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Merge branch 'master' into dataclass",
                "tree": {
                    "sha": "2dbcd091376d745995c0cfeb7026f1e48b1a6eab",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/2dbcd091376d745995c0cfeb7026f1e48b1a6eab"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/c78720e87e8547c1edfa8537cc4810cff3143ee8",
                "verification": {
                    "payload": "tree 2dbcd091376d745995c0cfeb7026f1e48b1a6eab\nparent 25898ab19058cb1c9610e59922f9fb6e91f7d82b\nparent 28c35f432f73b0b710cc5f6a823e11bca53265b0\nauthor da-woods <dw-git@d-woods.co.uk> 1621960369 +0100\ncommitter GitHub <noreply@github.com> 1621960369 +0100\n\nMerge branch 'master' into dataclass",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgrSaxCRBK7hj4Ov3rIwAAaNwIAF7qCAoKCF7m3QWxVHiGjgn1\nliMXKOFaO8+y3nuM0eKpDhhM/82WZqLsKMpiLlUNIBtMeWZxYYtj3hWjoYgjDV8T\noofXyg0TsR4jVJM9ZUpsa+I/r4uW3fLpTObGTNpEDRh/vIkhEgkgUJyh12atOSuq\nQAWAhkhFZiYW4Yl6MskRgjkWkyeWfxFHCiSVcb3rg42fF6DJxeg8LARrh/B6ml9V\nmP4hiPmsJ+lu3ZDykCSLYVb9/dcqti3uAKv+5CBG+F9jX+PLl6Ces3ayehVqnuz5\nbr4eG+6Se/Zp6BghwISbBXsYZckLEoVndy06i/Dd73YoNRwGyODRARSIoPdclPA=\n=cyVk\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/c78720e87e8547c1edfa8537cc4810cff3143ee8",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6Yzc4NzIwZTg3ZTg1NDdjMWVkZmE4NTM3Y2M0ODEwY2ZmMzE0M2VlOA==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/25898ab19058cb1c9610e59922f9fb6e91f7d82b",
                    "sha": "25898ab19058cb1c9610e59922f9fb6e91f7d82b",
                    "url": "https://api.github.com/repos/cython/cython/commits/25898ab19058cb1c9610e59922f9fb6e91f7d82b"
                },
                {
                    "html_url": "https://github.com/cython/cython/commit/28c35f432f73b0b710cc5f6a823e11bca53265b0",
                    "sha": "28c35f432f73b0b710cc5f6a823e11bca53265b0",
                    "url": "https://api.github.com/repos/cython/cython/commits/28c35f432f73b0b710cc5f6a823e11bca53265b0"
                }
            ],
            "sha": "c78720e87e8547c1edfa8537cc4810cff3143ee8",
            "url": "https://api.github.com/repos/cython/cython/commits/c78720e87e8547c1edfa8537cc4810cff3143ee8"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/a630420caed996b1c4cba40fcf084eaa75e4fc15/comments",
            "commit": {
                "author": {
                    "date": "2021-05-25T16:34:47Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-05-25T16:34:47Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Merge branch 'master' into typing_support",
                "tree": {
                    "sha": "446ceb0e7d54bd9c1a52897de65cea2c470bb965",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/446ceb0e7d54bd9c1a52897de65cea2c470bb965"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/a630420caed996b1c4cba40fcf084eaa75e4fc15",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/a630420caed996b1c4cba40fcf084eaa75e4fc15",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6YTYzMDQyMGNhZWQ5OTZiMWM0Y2JhNDBmY2YwODRlYWE3NWU0ZmMxNQ==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/46d0c66a9e629e3db610da2efbc299f75bd114c1",
                    "sha": "46d0c66a9e629e3db610da2efbc299f75bd114c1",
                    "url": "https://api.github.com/repos/cython/cython/commits/46d0c66a9e629e3db610da2efbc299f75bd114c1"
                },
                {
                    "html_url": "https://github.com/cython/cython/commit/c6571f327e8e4e14e98eaa492967721ccdbe2952",
                    "sha": "c6571f327e8e4e14e98eaa492967721ccdbe2952",
                    "url": "https://api.github.com/repos/cython/cython/commits/c6571f327e8e4e14e98eaa492967721ccdbe2952"
                }
            ],
            "sha": "a630420caed996b1c4cba40fcf084eaa75e4fc15",
            "url": "https://api.github.com/repos/cython/cython/commits/a630420caed996b1c4cba40fcf084eaa75e4fc15"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/a204b770316c25ae64b9d04b8ce8f8bb4fa5d3de/comments",
            "commit": {
                "author": {
                    "date": "2021-05-25T18:09:45Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-05-25T18:09:45Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Simplified lookup, fixed code-style in tests",
                "tree": {
                    "sha": "bd50f05d3e80dadb49b27cf071210453a08348c5",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/bd50f05d3e80dadb49b27cf071210453a08348c5"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/a204b770316c25ae64b9d04b8ce8f8bb4fa5d3de",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/a204b770316c25ae64b9d04b8ce8f8bb4fa5d3de",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6YTIwNGI3NzAzMTZjMjVhZTY0YjlkMDRiOGNlOGY4YmI0ZmE1ZDNkZQ==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/a630420caed996b1c4cba40fcf084eaa75e4fc15",
                    "sha": "a630420caed996b1c4cba40fcf084eaa75e4fc15",
                    "url": "https://api.github.com/repos/cython/cython/commits/a630420caed996b1c4cba40fcf084eaa75e4fc15"
                }
            ],
            "sha": "a204b770316c25ae64b9d04b8ce8f8bb4fa5d3de",
            "url": "https://api.github.com/repos/cython/cython/commits/a204b770316c25ae64b9d04b8ce8f8bb4fa5d3de"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/73016be7bc1b247ff0e5b309793db50779047141/comments",
            "commit": {
                "author": {
                    "date": "2021-05-25T19:16:52Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-05-25T19:16:52Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Hopefully better fix for lookup",
                "tree": {
                    "sha": "db1aa1174e69df578ba676fc68f9ed8497cfb0dd",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/db1aa1174e69df578ba676fc68f9ed8497cfb0dd"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/73016be7bc1b247ff0e5b309793db50779047141",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/73016be7bc1b247ff0e5b309793db50779047141",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6NzMwMTZiZTdiYzFiMjQ3ZmYwZTViMzA5NzkzZGI1MDc3OTA0NzE0MQ==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/a204b770316c25ae64b9d04b8ce8f8bb4fa5d3de",
                    "sha": "a204b770316c25ae64b9d04b8ce8f8bb4fa5d3de",
                    "url": "https://api.github.com/repos/cython/cython/commits/a204b770316c25ae64b9d04b8ce8f8bb4fa5d3de"
                }
            ],
            "sha": "73016be7bc1b247ff0e5b309793db50779047141",
            "url": "https://api.github.com/repos/cython/cython/commits/73016be7bc1b247ff0e5b309793db50779047141"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/fa49c5cd1323a4da4ad2d2c99ad7bc0ff06665d1/comments",
            "commit": {
                "author": {
                    "date": "2021-05-25T19:51:14Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-05-25T19:51:14Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Split lookup function into entry and module version\n\nAlso rename it",
                "tree": {
                    "sha": "b046753a78258e458c0a691f0dde11eb51fa512c",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/b046753a78258e458c0a691f0dde11eb51fa512c"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/fa49c5cd1323a4da4ad2d2c99ad7bc0ff06665d1",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/fa49c5cd1323a4da4ad2d2c99ad7bc0ff06665d1",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6ZmE0OWM1Y2QxMzIzYTRkYTRhZDJkMmM5OWFkN2JjMGZmMDY2NjVkMQ==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/73016be7bc1b247ff0e5b309793db50779047141",
                    "sha": "73016be7bc1b247ff0e5b309793db50779047141",
                    "url": "https://api.github.com/repos/cython/cython/commits/73016be7bc1b247ff0e5b309793db50779047141"
                }
            ],
            "sha": "fa49c5cd1323a4da4ad2d2c99ad7bc0ff06665d1",
            "url": "https://api.github.com/repos/cython/cython/commits/fa49c5cd1323a4da4ad2d2c99ad7bc0ff06665d1"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/38297161e4d160a1074df743888fb61c220aec0f/comments",
            "commit": {
                "author": {
                    "date": "2021-05-25T20:27:55Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-05-25T20:27:55Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Lookup module instead of entry",
                "tree": {
                    "sha": "0b92eb7cc40cf861e2c66152649de1b195b4fb77",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/0b92eb7cc40cf861e2c66152649de1b195b4fb77"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/38297161e4d160a1074df743888fb61c220aec0f",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/38297161e4d160a1074df743888fb61c220aec0f",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6MzgyOTcxNjFlNGQxNjBhMTA3NGRmNzQzODg4ZmI2MWMyMjBhZWMwZg==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/fa49c5cd1323a4da4ad2d2c99ad7bc0ff06665d1",
                    "sha": "fa49c5cd1323a4da4ad2d2c99ad7bc0ff06665d1",
                    "url": "https://api.github.com/repos/cython/cython/commits/fa49c5cd1323a4da4ad2d2c99ad7bc0ff06665d1"
                }
            ],
            "sha": "38297161e4d160a1074df743888fb61c220aec0f",
            "url": "https://api.github.com/repos/cython/cython/commits/38297161e4d160a1074df743888fb61c220aec0f"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/a3d7c6f19ff13ead4e7150f006d8483a8e9daf5e/comments",
            "commit": {
                "author": {
                    "date": "2021-05-26T06:12:48Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-05-26T06:12:48Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Merge branch 'typing_support' into dataclass",
                "tree": {
                    "sha": "02459e2fb94f565c8adecd5cc2e7852b32acbfcc",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/02459e2fb94f565c8adecd5cc2e7852b32acbfcc"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/a3d7c6f19ff13ead4e7150f006d8483a8e9daf5e",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/a3d7c6f19ff13ead4e7150f006d8483a8e9daf5e",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6YTNkN2M2ZjE5ZmYxM2VhZDRlNzE1MGYwMDZkODQ4M2E4ZTlkYWY1ZQ==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/c78720e87e8547c1edfa8537cc4810cff3143ee8",
                    "sha": "c78720e87e8547c1edfa8537cc4810cff3143ee8",
                    "url": "https://api.github.com/repos/cython/cython/commits/c78720e87e8547c1edfa8537cc4810cff3143ee8"
                },
                {
                    "html_url": "https://github.com/cython/cython/commit/38297161e4d160a1074df743888fb61c220aec0f",
                    "sha": "38297161e4d160a1074df743888fb61c220aec0f",
                    "url": "https://api.github.com/repos/cython/cython/commits/38297161e4d160a1074df743888fb61c220aec0f"
                }
            ],
            "sha": "a3d7c6f19ff13ead4e7150f006d8483a8e9daf5e",
            "url": "https://api.github.com/repos/cython/cython/commits/a3d7c6f19ff13ead4e7150f006d8483a8e9daf5e"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/9ada9207f3eeae712fd1150bbb2e877cd11bac55/comments",
            "commit": {
                "author": {
                    "date": "2021-05-26T18:02:50Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-05-26T18:02:50Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Merge branch 'master' into dataclass",
                "tree": {
                    "sha": "b0d849d299f8547f62068697e4264defaae233d3",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/b0d849d299f8547f62068697e4264defaae233d3"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/9ada9207f3eeae712fd1150bbb2e877cd11bac55",
                "verification": {
                    "payload": "tree b0d849d299f8547f62068697e4264defaae233d3\nparent a3d7c6f19ff13ead4e7150f006d8483a8e9daf5e\nparent 565ba94e883e9bff328ade1e1cdefc70355d2b54\nauthor da-woods <dw-git@d-woods.co.uk> 1622052170 +0100\ncommitter GitHub <noreply@github.com> 1622052170 +0100\n\nMerge branch 'master' into dataclass",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgro1KCRBK7hj4Ov3rIwAAymIIAJg/YwGXIApM7A1a9f7kM2g3\nwe1dy8m+jk5wq3VwxLMm3TIvd9dW/tMxiXndvdvP5NOQ8XnLN5+46V+46Hr+7AzO\nkJTX2c5+XWzHNaX4sq8PySaALVeEu/9c0Ys1q8IwxgifNj28pemDpL5HpRQh9OKl\nDczzNVo1ChVHUFYcpEGJj11DiVu0Q5WB5r1dkGpjKVXPxeItb3dly5MP7JSykWfx\nacMh+WDY2mpQJYX62cxmVwRf7dw69RJM58waSOkGP6/OjVBKOtlRzjSmID6cyYT7\n3q7Xw9Abr58uRRZr6p7b8v0RZw6TrlZvpxp1Zx/yn86w8R/FeZT2zTHDRIyWxII=\n=Onjq\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/9ada9207f3eeae712fd1150bbb2e877cd11bac55",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6OWFkYTkyMDdmM2VlYWU3MTJmZDExNTBiYmIyZTg3N2NkMTFiYWM1NQ==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/a3d7c6f19ff13ead4e7150f006d8483a8e9daf5e",
                    "sha": "a3d7c6f19ff13ead4e7150f006d8483a8e9daf5e",
                    "url": "https://api.github.com/repos/cython/cython/commits/a3d7c6f19ff13ead4e7150f006d8483a8e9daf5e"
                },
                {
                    "html_url": "https://github.com/cython/cython/commit/565ba94e883e9bff328ade1e1cdefc70355d2b54",
                    "sha": "565ba94e883e9bff328ade1e1cdefc70355d2b54",
                    "url": "https://api.github.com/repos/cython/cython/commits/565ba94e883e9bff328ade1e1cdefc70355d2b54"
                }
            ],
            "sha": "9ada9207f3eeae712fd1150bbb2e877cd11bac55",
            "url": "https://api.github.com/repos/cython/cython/commits/9ada9207f3eeae712fd1150bbb2e877cd11bac55"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/67287e48cf538845fc90a2deac907917b1594600/comments",
            "commit": {
                "author": {
                    "date": "2021-05-26T18:05:50Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-05-26T18:05:50Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Try to fix differing PyPy error messages",
                "tree": {
                    "sha": "73213f3528cc4273547d328ef064312f17dc3ba2",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/73213f3528cc4273547d328ef064312f17dc3ba2"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/67287e48cf538845fc90a2deac907917b1594600",
                "verification": {
                    "payload": "tree 73213f3528cc4273547d328ef064312f17dc3ba2\nparent 9ada9207f3eeae712fd1150bbb2e877cd11bac55\nauthor da-woods <dw-git@d-woods.co.uk> 1622052350 +0100\ncommitter GitHub <noreply@github.com> 1622052350 +0100\n\nTry to fix differing PyPy error messages",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgro3+CRBK7hj4Ov3rIwAAxIkIABH1xoyxs7LIaqYIRG4CyD4P\nsQSNOhFcMq/3dpySIH5IulM8AlPEuhGeqrsPAY8FndLIMAnC3dknYYZ3oEG2sk8X\n8HyTMHpg/YVscyMio/TrpZozOuHRWoAEXHhWDJ791dNasAsr27R5IyQ8PdW2pgi4\nZzFY25pQ4MkCXa8QlyZ0Xhpz+aQy8sMTUNYtOrjK9HTVFVi2DTdtJyIKKgsOUoFQ\n7bl9MTx0lGlOMKpu0CzdasC2dSQtGLpGZA7k3TFyPz3zHa3VWRHgCxwtGLO71YQf\nJk1FZdmLWNSVJ3/XcQ+FCkXk+Jd2VVwfsCwzXbUKv+GVDvM2GNWrPVKP7hn3nyA=\n=RYg0\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/67287e48cf538845fc90a2deac907917b1594600",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6NjcyODdlNDhjZjUzODg0NWZjOTBhMmRlYWM5MDc5MTdiMTU5NDYwMA==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/9ada9207f3eeae712fd1150bbb2e877cd11bac55",
                    "sha": "9ada9207f3eeae712fd1150bbb2e877cd11bac55",
                    "url": "https://api.github.com/repos/cython/cython/commits/9ada9207f3eeae712fd1150bbb2e877cd11bac55"
                }
            ],
            "sha": "67287e48cf538845fc90a2deac907917b1594600",
            "url": "https://api.github.com/repos/cython/cython/commits/67287e48cf538845fc90a2deac907917b1594600"
        }
    ],
    "commits_url": "https://api.github.com/repos/cython/cython/pulls/3400/commits",
    "created_at": "2020-03-07T22:19:14Z",
    "diff_url": "https://github.com/cython/cython/pull/3400.diff",
    "draft": false,
    "head": {
        "label": "da-woods:dataclass",
        "ref": "dataclass",
        "repo": {
            "archive_url": "https://api.github.com/repos/da-woods/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/da-woods/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/da-woods/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/da-woods/cython/branches{/branch}",
            "clone_url": "https://github.com/da-woods/cython.git",
            "collaborators_url": "https://api.github.com/repos/da-woods/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/da-woods/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/da-woods/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/da-woods/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/da-woods/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/da-woods/cython/contributors",
            "created_at": "2015-05-09T08:55:00Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/da-woods/cython/deployments",
            "description": "A Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/da-woods/cython/downloads",
            "events_url": "https://api.github.com/repos/da-woods/cython/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/da-woods/cython/forks",
            "full_name": "da-woods/cython",
            "git_commits_url": "https://api.github.com/repos/da-woods/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/da-woods/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/da-woods/cython/git/tags{/sha}",
            "git_url": "git://github.com/da-woods/cython.git",
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "http://cython.org",
            "hooks_url": "https://api.github.com/repos/da-woods/cython/hooks",
            "html_url": "https://github.com/da-woods/cython",
            "id": 35321967,
            "issue_comment_url": "https://api.github.com/repos/da-woods/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/da-woods/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/da-woods/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/da-woods/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/da-woods/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/da-woods/cython/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/da-woods/cython/merges",
            "milestones_url": "https://api.github.com/repos/da-woods/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkzNTMyMTk2Nw==",
            "notifications_url": "https://api.github.com/repos/da-woods/cython/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/da-woods/cython/pulls{/number}",
            "pushed_at": "2021-05-26T18:05:50Z",
            "releases_url": "https://api.github.com/repos/da-woods/cython/releases{/id}",
            "size": 65151,
            "ssh_url": "git@github.com:da-woods/cython.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/da-woods/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/da-woods/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/da-woods/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/da-woods/cython/subscription",
            "svn_url": "https://github.com/da-woods/cython",
            "tags_url": "https://api.github.com/repos/da-woods/cython/tags",
            "teams_url": "https://api.github.com/repos/da-woods/cython/teams",
            "trees_url": "https://api.github.com/repos/da-woods/cython/git/trees{/sha}",
            "updated_at": "2021-02-21T09:59:37Z",
            "url": "https://api.github.com/repos/da-woods/cython",
            "watchers": 0,
            "watchers_count": 0
        },
        "sha": "67287e48cf538845fc90a2deac907917b1594600",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
            "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
            "followers_url": "https://api.github.com/users/da-woods/followers",
            "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
            "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/da-woods",
            "id": 10536947,
            "login": "da-woods",
            "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
            "organizations_url": "https://api.github.com/users/da-woods/orgs",
            "received_events_url": "https://api.github.com/users/da-woods/received_events",
            "repos_url": "https://api.github.com/users/da-woods/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/da-woods"
        }
    },
    "html_url": "https://github.com/cython/cython/pull/3400",
    "id": 385199483,
    "issue_url": "https://api.github.com/repos/cython/cython/issues/3400",
    "labels": [],
    "locked": false,
    "merge_commit_sha": "c94235f3e10b3ae9fa9bbd60cdec6511333acaac",
    "merged_at": null,
    "milestone": null,
    "node_id": "MDExOlB1bGxSZXF1ZXN0Mzg1MTk5NDgz",
    "number": 3400,
    "patch_url": "https://github.com/cython/cython/pull/3400.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/cython/cython/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/cython/cython/pulls/3400/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/cython/cython/statuses/67287e48cf538845fc90a2deac907917b1594600",
    "title": "cdef dataclasses",
    "updated_at": "2021-05-26T19:00:39Z",
    "url": "https://api.github.com/repos/cython/cython/pulls/3400",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
        "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
        "followers_url": "https://api.github.com/users/da-woods/followers",
        "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
        "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/da-woods",
        "id": 10536947,
        "login": "da-woods",
        "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
        "organizations_url": "https://api.github.com/users/da-woods/orgs",
        "received_events_url": "https://api.github.com/users/da-woods/received_events",
        "repos_url": "https://api.github.com/users/da-woods/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/da-woods"
    }
}