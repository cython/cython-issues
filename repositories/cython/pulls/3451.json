{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/cython/cython/issues/3451/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/cython/cython/pulls/3451/commits"
        },
        "html": {
            "href": "https://github.com/cython/cython/pull/3451"
        },
        "issue": {
            "href": "https://api.github.com/repos/cython/cython/issues/3451"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/cython/cython/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/cython/cython/pulls/3451/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/cython/cython/pulls/3451"
        },
        "statuses": {
            "href": "https://api.github.com/repos/cython/cython/statuses/04b011da7aa5207fde3dbe5c9ac393ff03cfc87c"
        }
    },
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "base": {
        "label": "cython:master",
        "ref": "master",
        "repo": {
            "archive_url": "https://api.github.com/repos/cython/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/cython/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/cython/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/cython/cython/branches{/branch}",
            "clone_url": "https://github.com/cython/cython.git",
            "collaborators_url": "https://api.github.com/repos/cython/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/cython/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/cython/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/cython/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/cython/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/cython/cython/contributors",
            "created_at": "2010-11-21T07:44:20Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/cython/cython/deployments",
            "description": "The most widely used Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/cython/cython/downloads",
            "events_url": "https://api.github.com/repos/cython/cython/events",
            "fork": false,
            "forks": 996,
            "forks_count": 996,
            "forks_url": "https://api.github.com/repos/cython/cython/forks",
            "full_name": "cython/cython",
            "git_commits_url": "https://api.github.com/repos/cython/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/cython/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/cython/cython/git/tags{/sha}",
            "git_url": "git://github.com/cython/cython.git",
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://cython.org",
            "hooks_url": "https://api.github.com/repos/cython/cython/hooks",
            "html_url": "https://github.com/cython/cython",
            "id": 1099265,
            "issue_comment_url": "https://api.github.com/repos/cython/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/cython/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/cython/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/cython/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/cython/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/cython/cython/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/cython/cython/merges",
            "milestones_url": "https://api.github.com/repos/cython/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkxMDk5MjY1",
            "notifications_url": "https://api.github.com/repos/cython/cython/notifications{?since,all,participating}",
            "open_issues": 823,
            "open_issues_count": 823,
            "owner": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/486082?v=4",
                "events_url": "https://api.github.com/users/cython/events{/privacy}",
                "followers_url": "https://api.github.com/users/cython/followers",
                "following_url": "https://api.github.com/users/cython/following{/other_user}",
                "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/cython",
                "id": 486082,
                "login": "cython",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
                "organizations_url": "https://api.github.com/users/cython/orgs",
                "received_events_url": "https://api.github.com/users/cython/received_events",
                "repos_url": "https://api.github.com/users/cython/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/cython"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/cython/cython/pulls{/number}",
            "pushed_at": "2020-03-27T16:48:22Z",
            "releases_url": "https://api.github.com/repos/cython/cython/releases{/id}",
            "size": 56780,
            "ssh_url": "git@github.com:cython/cython.git",
            "stargazers_count": 5007,
            "stargazers_url": "https://api.github.com/repos/cython/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/cython/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/cython/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/cython/cython/subscription",
            "svn_url": "https://github.com/cython/cython",
            "tags_url": "https://api.github.com/repos/cython/cython/tags",
            "teams_url": "https://api.github.com/repos/cython/cython/teams",
            "trees_url": "https://api.github.com/repos/cython/cython/git/trees{/sha}",
            "updated_at": "2020-03-28T00:21:37Z",
            "url": "https://api.github.com/repos/cython/cython",
            "watchers": 5007,
            "watchers_count": 5007
        },
        "sha": "4dd7c18de76cb5c90a5168fba35990600307e642",
        "user": {
            "avatar_url": "https://avatars3.githubusercontent.com/u/486082?v=4",
            "events_url": "https://api.github.com/users/cython/events{/privacy}",
            "followers_url": "https://api.github.com/users/cython/followers",
            "following_url": "https://api.github.com/users/cython/following{/other_user}",
            "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/cython",
            "id": 486082,
            "login": "cython",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
            "organizations_url": "https://api.github.com/users/cython/orgs",
            "received_events_url": "https://api.github.com/users/cython/received_events",
            "repos_url": "https://api.github.com/users/cython/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/cython"
        }
    },
    "body": "Follows on from https://github.com/cython/cython/pull/3433\r\n\r\nNotes:\r\n* Slightly odd-macro trickery - does modify the input argument too\r\n    (although only in places where it shouldn't matter - but potentially\r\n    should  we worry about XDECREF?)\r\n* Only Unicode, not bytes\r\n* There's no benefit in Python 2. Given that Python 2 is soon to be removed it doesn't seem worth writing specific utility code for it. Performance will just remain as before.\r\n\r\n----------------------\r\n\r\nThis is definitely a worthwhile optimization under some circumstances - see https://stackoverflow.com/questions/35787022/cython-string-concatenation-is-super-slow-what-else-does-it-do-poorly for a slightly artificial example of where the current approach is producing an 100x slowdown vs CPython.",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3451#discussion_r395991529"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3451"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/395991529"
                }
            },
            "author_association": "MEMBER",
            "body": "All-upper-case macro names are difficult to read and also result in a different shade of yellow in `cython -a`, because they are assumed to be simpler than something that looks like a function.\r\n\r\nBesides, I really don't see why these names should be syntactically different from the function names that they call.",
            "commit_id": "04b011da7aa5207fde3dbe5c9ac393ff03cfc87c",
            "created_at": "2020-03-21T13:11:33Z",
            "diff_hunk": "@@ -2553,3 +2553,132 @@ static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, CYTHON_UNUSE\n #else\n     #define __Pyx_PyMethod_New PyMethod_New\n #endif\n+\n+/////////////// UnicodeConcatInPlace.proto ////////////////\n+\n+#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION > 2\n+    #if CYTHON_REFNANNY\n+        #define __PYX_PYUNICODE_CONCATINPLACE(a, b) __Pyx_PyUnicode_ConcatInPlaceImpl(&a, b, __pyx_refnanny)",
            "html_url": "https://github.com/cython/cython/pull/3451#discussion_r395991529",
            "id": 395991529,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk5MTUyOQ==",
            "original_commit_id": "43ac82edf13ac696416e8079c9d627067f235d78",
            "original_position": 9,
            "path": "Cython/Utility/ObjectHandling.c",
            "position": null,
            "pull_request_review_id": 378917510,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3451",
            "updated_at": "2020-03-27T14:22:34Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/395991529",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3451#discussion_r395991695"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3451"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/395991695"
                }
            },
            "author_association": "MEMBER",
            "body": "This looks like it should just be a C macro instead of an inline function. That would avoid the need for passing the refnanny context.",
            "commit_id": "04b011da7aa5207fde3dbe5c9ac393ff03cfc87c",
            "created_at": "2020-03-21T13:13:31Z",
            "diff_hunk": "@@ -2553,3 +2553,132 @@ static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, CYTHON_UNUSE\n #else\n     #define __Pyx_PyMethod_New PyMethod_New\n #endif\n+\n+/////////////// UnicodeConcatInPlace.proto ////////////////\n+\n+#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION > 2\n+    #if CYTHON_REFNANNY\n+        #define __PYX_PYUNICODE_CONCATINPLACE(a, b) __Pyx_PyUnicode_ConcatInPlaceImpl(&a, b, __pyx_refnanny)\n+    #else\n+        #define __PYX_PYUNICODE_CONCATINPLACE(a, b) __Pyx_PyUnicode_ConcatInPlaceImpl(&a, b, NULL)\n+    #endif\n+// __PYX_PYUNICODE_CONCATINPLACE is slightly odd because it has the potential to modify the input\n+// argument (but only in cases where no user should notice). Therefore, it needs to keep Cython's\n+// refnanny informed.\n+static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **a, PyObject *b, void * __pyx_refnanny); /* proto */\n+#else\n+    #define __PYX_PYUNICODE_CONCATINPLACE __Pyx_PyUnicode_Concat\n+#endif\n+#define __PYX_PYUNICODE_CONCATINPLACESafe(a, b) ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \\\n+    PyNumber_Add(a, b) : __PYX_PYUNICODE_CONCATINPLACE(a, b))\n+\n+////////////// UnicodeConcatInPlace ////////////////////\n+\n+#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION > 2\n+    static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **a, PyObject *b, void * __pyx_refnanny) {\n+    __Pyx_GIVEREF(*a);\n+    PyUnicode_Append(a, b);  // this does it's own safety checks so is always safe to use\n+    __Pyx_XINCREF(*a);  // there are two copies of `*a` - the one just returned and the one\n+                // passed in as an argument\n+    return *a;\n+}\n+#endif\n+\n+//////////// BytesConcat.proto ///////////////////////\n+\n+// Follows the interface of \"PyUnicode_Concat\", but with Bytes, rather than the\n+// interface of PyBytes_Concat. However, uses PyBytes_Concat which has the potential\n+// to modify in-place. See UnicodeConcatInPlace for comments\n+#if CYTHON_COMPILING_IN_CPYTHON\n+    #if CYTHON_REFNANNY\n+        #define __PYX_PYBYTES_CONCATINPLACE(a, b) __Pyx_PyBytes_ConcatInPlaceImpl(&a, b, __pyx_refnanny)\n+    #else\n+        #define __PYX_PYBYTES_CONCATINPLACE(a, b) __Pyx_PyBytes_ConcatInPlaceImpl(&a, b, NULL)\n+    #endif\n+    static CYTHON_INLINE PyObject *__Pyx_PyBytes_ConcatInPlaceImpl(PyObject **a, PyObject *b, void * __pyx_refnanny); /* proto */\n+    static CYTHON_INLINE PyObject *__Pyx_PyBytes_Concat(PyObject *a, PyObject *b);\n+#else\n+    #define __Pyx_PyBytes_Concat(a, b) PyNumber_Add(a,b)\n+    #define __PYX_PYBYTES_CONCATINPLACE(a, b) PyNumber_Add(a,b)\n+#endif\n+#define __Pyx_PyBytes_ConcatSafe(a, b) ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \\\n+    PyNumber_Add(a, b) : __Pyx_PyBytes_Concat(a, b))\n+#define __PYX_PYBYTES_CONCATINPLACESafe(a, b) ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \\\n+    PyNumber_Add(a, b) : __PYX_PYBYTES_CONCATINPLACE(a, b))\n+\n+//////////// BytesConcat ///////////////////////\n+\n+#if CYTHON_COMPILING_IN_CPYTHON\n+static CYTHON_INLINE PyObject *__Pyx_PyBytes_ConcatInPlaceImpl(PyObject **a, PyObject *b, void * __pyx_refnanny) {\n+   __Pyx_GIVEREF(*a);\n+    PyBytes_Concat(a, b);  // this does it's own safety checks so is always safe to use\n+    __Pyx_XINCREF(*a);  // there are two copies of `*a` - the one just returned and the one\n+                // passed in as an argument\n+    return *a;\n+}",
            "html_url": "https://github.com/cython/cython/pull/3451#discussion_r395991695",
            "id": 395991695,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk5MTY5NQ==",
            "original_commit_id": "43ac82edf13ac696416e8079c9d627067f235d78",
            "original_position": 66,
            "path": "Cython/Utility/ObjectHandling.c",
            "position": null,
            "pull_request_review_id": 378917510,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3451",
            "updated_at": "2020-03-27T14:22:34Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/395991695",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3451#discussion_r395991729"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3451"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/395991729"
                }
            },
            "author_association": "MEMBER",
            "body": "No error handling?",
            "commit_id": "04b011da7aa5207fde3dbe5c9ac393ff03cfc87c",
            "created_at": "2020-03-21T13:14:30Z",
            "diff_hunk": "@@ -2553,3 +2553,132 @@ static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, CYTHON_UNUSE\n #else\n     #define __Pyx_PyMethod_New PyMethod_New\n #endif\n+\n+/////////////// UnicodeConcatInPlace.proto ////////////////\n+\n+#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION > 2\n+    #if CYTHON_REFNANNY\n+        #define __PYX_PYUNICODE_CONCATINPLACE(a, b) __Pyx_PyUnicode_ConcatInPlaceImpl(&a, b, __pyx_refnanny)\n+    #else\n+        #define __PYX_PYUNICODE_CONCATINPLACE(a, b) __Pyx_PyUnicode_ConcatInPlaceImpl(&a, b, NULL)\n+    #endif\n+// __PYX_PYUNICODE_CONCATINPLACE is slightly odd because it has the potential to modify the input\n+// argument (but only in cases where no user should notice). Therefore, it needs to keep Cython's\n+// refnanny informed.\n+static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **a, PyObject *b, void * __pyx_refnanny); /* proto */\n+#else\n+    #define __PYX_PYUNICODE_CONCATINPLACE __Pyx_PyUnicode_Concat\n+#endif\n+#define __PYX_PYUNICODE_CONCATINPLACESafe(a, b) ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \\\n+    PyNumber_Add(a, b) : __PYX_PYUNICODE_CONCATINPLACE(a, b))\n+\n+////////////// UnicodeConcatInPlace ////////////////////\n+\n+#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION > 2\n+    static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **a, PyObject *b, void * __pyx_refnanny) {\n+    __Pyx_GIVEREF(*a);\n+    PyUnicode_Append(a, b);  // this does it's own safety checks so is always safe to use\n+    __Pyx_XINCREF(*a);  // there are two copies of `*a` - the one just returned and the one\n+                // passed in as an argument\n+    return *a;\n+}\n+#endif\n+\n+//////////// BytesConcat.proto ///////////////////////\n+\n+// Follows the interface of \"PyUnicode_Concat\", but with Bytes, rather than the\n+// interface of PyBytes_Concat. However, uses PyBytes_Concat which has the potential\n+// to modify in-place. See UnicodeConcatInPlace for comments\n+#if CYTHON_COMPILING_IN_CPYTHON\n+    #if CYTHON_REFNANNY\n+        #define __PYX_PYBYTES_CONCATINPLACE(a, b) __Pyx_PyBytes_ConcatInPlaceImpl(&a, b, __pyx_refnanny)\n+    #else\n+        #define __PYX_PYBYTES_CONCATINPLACE(a, b) __Pyx_PyBytes_ConcatInPlaceImpl(&a, b, NULL)\n+    #endif\n+    static CYTHON_INLINE PyObject *__Pyx_PyBytes_ConcatInPlaceImpl(PyObject **a, PyObject *b, void * __pyx_refnanny); /* proto */\n+    static CYTHON_INLINE PyObject *__Pyx_PyBytes_Concat(PyObject *a, PyObject *b);\n+#else\n+    #define __Pyx_PyBytes_Concat(a, b) PyNumber_Add(a,b)\n+    #define __PYX_PYBYTES_CONCATINPLACE(a, b) PyNumber_Add(a,b)\n+#endif\n+#define __Pyx_PyBytes_ConcatSafe(a, b) ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \\\n+    PyNumber_Add(a, b) : __Pyx_PyBytes_Concat(a, b))\n+#define __PYX_PYBYTES_CONCATINPLACESafe(a, b) ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \\\n+    PyNumber_Add(a, b) : __PYX_PYBYTES_CONCATINPLACE(a, b))\n+\n+//////////// BytesConcat ///////////////////////\n+\n+#if CYTHON_COMPILING_IN_CPYTHON\n+static CYTHON_INLINE PyObject *__Pyx_PyBytes_ConcatInPlaceImpl(PyObject **a, PyObject *b, void * __pyx_refnanny) {\n+   __Pyx_GIVEREF(*a);\n+    PyBytes_Concat(a, b);  // this does it's own safety checks so is always safe to use",
            "html_url": "https://github.com/cython/cython/pull/3451#discussion_r395991729",
            "id": 395991729,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk5MTcyOQ==",
            "original_commit_id": "43ac82edf13ac696416e8079c9d627067f235d78",
            "original_position": 62,
            "path": "Cython/Utility/ObjectHandling.c",
            "position": null,
            "pull_request_review_id": 378917510,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3451",
            "updated_at": "2020-03-27T14:22:34Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/395991729",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3451#discussion_r395991876"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3451"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/395991876"
                }
            },
            "author_association": "MEMBER",
            "body": "Then why, exactly, do we do this at all?",
            "commit_id": "04b011da7aa5207fde3dbe5c9ac393ff03cfc87c",
            "created_at": "2020-03-21T13:16:26Z",
            "diff_hunk": "@@ -2553,3 +2553,132 @@ static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, CYTHON_UNUSE\n #else\n     #define __Pyx_PyMethod_New PyMethod_New\n #endif\n+\n+/////////////// UnicodeConcatInPlace.proto ////////////////\n+\n+#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION > 2\n+    #if CYTHON_REFNANNY\n+        #define __PYX_PYUNICODE_CONCATINPLACE(a, b) __Pyx_PyUnicode_ConcatInPlaceImpl(&a, b, __pyx_refnanny)\n+    #else\n+        #define __PYX_PYUNICODE_CONCATINPLACE(a, b) __Pyx_PyUnicode_ConcatInPlaceImpl(&a, b, NULL)\n+    #endif\n+// __PYX_PYUNICODE_CONCATINPLACE is slightly odd because it has the potential to modify the input\n+// argument (but only in cases where no user should notice). Therefore, it needs to keep Cython's\n+// refnanny informed.\n+static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **a, PyObject *b, void * __pyx_refnanny); /* proto */\n+#else\n+    #define __PYX_PYUNICODE_CONCATINPLACE __Pyx_PyUnicode_Concat\n+#endif\n+#define __PYX_PYUNICODE_CONCATINPLACESafe(a, b) ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \\\n+    PyNumber_Add(a, b) : __PYX_PYUNICODE_CONCATINPLACE(a, b))\n+\n+////////////// UnicodeConcatInPlace ////////////////////\n+\n+#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION > 2\n+    static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **a, PyObject *b, void * __pyx_refnanny) {\n+    __Pyx_GIVEREF(*a);\n+    PyUnicode_Append(a, b);  // this does it's own safety checks so is always safe to use\n+    __Pyx_XINCREF(*a);  // there are two copies of `*a` - the one just returned and the one\n+                // passed in as an argument\n+    return *a;\n+}\n+#endif\n+\n+//////////// BytesConcat.proto ///////////////////////\n+\n+// Follows the interface of \"PyUnicode_Concat\", but with Bytes, rather than the\n+// interface of PyBytes_Concat. However, uses PyBytes_Concat which has the potential\n+// to modify in-place. See UnicodeConcatInPlace for comments\n+#if CYTHON_COMPILING_IN_CPYTHON\n+    #if CYTHON_REFNANNY\n+        #define __PYX_PYBYTES_CONCATINPLACE(a, b) __Pyx_PyBytes_ConcatInPlaceImpl(&a, b, __pyx_refnanny)\n+    #else\n+        #define __PYX_PYBYTES_CONCATINPLACE(a, b) __Pyx_PyBytes_ConcatInPlaceImpl(&a, b, NULL)\n+    #endif\n+    static CYTHON_INLINE PyObject *__Pyx_PyBytes_ConcatInPlaceImpl(PyObject **a, PyObject *b, void * __pyx_refnanny); /* proto */\n+    static CYTHON_INLINE PyObject *__Pyx_PyBytes_Concat(PyObject *a, PyObject *b);\n+#else\n+    #define __Pyx_PyBytes_Concat(a, b) PyNumber_Add(a,b)\n+    #define __PYX_PYBYTES_CONCATINPLACE(a, b) PyNumber_Add(a,b)\n+#endif\n+#define __Pyx_PyBytes_ConcatSafe(a, b) ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \\\n+    PyNumber_Add(a, b) : __Pyx_PyBytes_Concat(a, b))\n+#define __PYX_PYBYTES_CONCATINPLACESafe(a, b) ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \\\n+    PyNumber_Add(a, b) : __PYX_PYBYTES_CONCATINPLACE(a, b))\n+\n+//////////// BytesConcat ///////////////////////\n+\n+#if CYTHON_COMPILING_IN_CPYTHON\n+static CYTHON_INLINE PyObject *__Pyx_PyBytes_ConcatInPlaceImpl(PyObject **a, PyObject *b, void * __pyx_refnanny) {\n+   __Pyx_GIVEREF(*a);\n+    PyBytes_Concat(a, b);  // this does it's own safety checks so is always safe to use\n+    __Pyx_XINCREF(*a);  // there are two copies of `*a` - the one just returned and the one\n+                // passed in as an argument\n+    return *a;\n+}\n+\n+static CYTHON_INLINE PyObject *__Pyx_PyBytes_Concat(PyObject *a, PyObject *b) {\n+    // unusual for utilitycode to use refnanny, but the __Pyx_PyBytes_ConcatInPlaceImpl\n+    // needs something forwarded to it\n+    __Pyx_RefNannyDeclarations\n+    __Pyx_RefNannySetupContext(\"__Pyx_PyBytes_Concat (internal)\", 0);\n+    // wrapper function prevents \"outside\" a from getting modified\n+    PyObject* result;\n+    Py_INCREF(a); // an extra reference will prevent PyBytes_Concat from operating in place",
            "html_url": "https://github.com/cython/cython/pull/3451#discussion_r395991876",
            "id": 395991876,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk5MTg3Ng==",
            "original_commit_id": "43ac82edf13ac696416e8079c9d627067f235d78",
            "original_position": 75,
            "path": "Cython/Utility/ObjectHandling.c",
            "position": null,
            "pull_request_review_id": 378917510,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3451",
            "updated_at": "2020-03-27T14:22:34Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/395991876",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3451#discussion_r395991967"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3451"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/395991967"
                }
            },
            "author_association": "MEMBER",
            "body": "This looks like it could be a macro as well.",
            "commit_id": "04b011da7aa5207fde3dbe5c9ac393ff03cfc87c",
            "created_at": "2020-03-21T13:17:41Z",
            "diff_hunk": "@@ -2553,3 +2553,132 @@ static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, CYTHON_UNUSE\n #else\n     #define __Pyx_PyMethod_New PyMethod_New\n #endif\n+\n+/////////////// UnicodeConcatInPlace.proto ////////////////\n+\n+#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION > 2\n+    #if CYTHON_REFNANNY\n+        #define __PYX_PYUNICODE_CONCATINPLACE(a, b) __Pyx_PyUnicode_ConcatInPlaceImpl(&a, b, __pyx_refnanny)\n+    #else\n+        #define __PYX_PYUNICODE_CONCATINPLACE(a, b) __Pyx_PyUnicode_ConcatInPlaceImpl(&a, b, NULL)\n+    #endif\n+// __PYX_PYUNICODE_CONCATINPLACE is slightly odd because it has the potential to modify the input\n+// argument (but only in cases where no user should notice). Therefore, it needs to keep Cython's\n+// refnanny informed.\n+static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **a, PyObject *b, void * __pyx_refnanny); /* proto */\n+#else\n+    #define __PYX_PYUNICODE_CONCATINPLACE __Pyx_PyUnicode_Concat\n+#endif\n+#define __PYX_PYUNICODE_CONCATINPLACESafe(a, b) ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \\\n+    PyNumber_Add(a, b) : __PYX_PYUNICODE_CONCATINPLACE(a, b))\n+\n+////////////// UnicodeConcatInPlace ////////////////////\n+\n+#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION > 2\n+    static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **a, PyObject *b, void * __pyx_refnanny) {\n+    __Pyx_GIVEREF(*a);\n+    PyUnicode_Append(a, b);  // this does it's own safety checks so is always safe to use\n+    __Pyx_XINCREF(*a);  // there are two copies of `*a` - the one just returned and the one\n+                // passed in as an argument\n+    return *a;\n+}\n+#endif\n+\n+//////////// BytesConcat.proto ///////////////////////\n+\n+// Follows the interface of \"PyUnicode_Concat\", but with Bytes, rather than the\n+// interface of PyBytes_Concat. However, uses PyBytes_Concat which has the potential\n+// to modify in-place. See UnicodeConcatInPlace for comments\n+#if CYTHON_COMPILING_IN_CPYTHON\n+    #if CYTHON_REFNANNY\n+        #define __PYX_PYBYTES_CONCATINPLACE(a, b) __Pyx_PyBytes_ConcatInPlaceImpl(&a, b, __pyx_refnanny)\n+    #else\n+        #define __PYX_PYBYTES_CONCATINPLACE(a, b) __Pyx_PyBytes_ConcatInPlaceImpl(&a, b, NULL)\n+    #endif\n+    static CYTHON_INLINE PyObject *__Pyx_PyBytes_ConcatInPlaceImpl(PyObject **a, PyObject *b, void * __pyx_refnanny); /* proto */\n+    static CYTHON_INLINE PyObject *__Pyx_PyBytes_Concat(PyObject *a, PyObject *b);\n+#else\n+    #define __Pyx_PyBytes_Concat(a, b) PyNumber_Add(a,b)\n+    #define __PYX_PYBYTES_CONCATINPLACE(a, b) PyNumber_Add(a,b)\n+#endif\n+#define __Pyx_PyBytes_ConcatSafe(a, b) ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \\\n+    PyNumber_Add(a, b) : __Pyx_PyBytes_Concat(a, b))\n+#define __PYX_PYBYTES_CONCATINPLACESafe(a, b) ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \\\n+    PyNumber_Add(a, b) : __PYX_PYBYTES_CONCATINPLACE(a, b))\n+\n+//////////// BytesConcat ///////////////////////\n+\n+#if CYTHON_COMPILING_IN_CPYTHON\n+static CYTHON_INLINE PyObject *__Pyx_PyBytes_ConcatInPlaceImpl(PyObject **a, PyObject *b, void * __pyx_refnanny) {\n+   __Pyx_GIVEREF(*a);\n+    PyBytes_Concat(a, b);  // this does it's own safety checks so is always safe to use\n+    __Pyx_XINCREF(*a);  // there are two copies of `*a` - the one just returned and the one\n+                // passed in as an argument\n+    return *a;\n+}\n+\n+static CYTHON_INLINE PyObject *__Pyx_PyBytes_Concat(PyObject *a, PyObject *b) {\n+    // unusual for utilitycode to use refnanny, but the __Pyx_PyBytes_ConcatInPlaceImpl\n+    // needs something forwarded to it\n+    __Pyx_RefNannyDeclarations\n+    __Pyx_RefNannySetupContext(\"__Pyx_PyBytes_Concat (internal)\", 0);\n+    // wrapper function prevents \"outside\" a from getting modified\n+    PyObject* result;\n+    Py_INCREF(a); // an extra reference will prevent PyBytes_Concat from operating in place\n+    result = __Pyx_PyBytes_ConcatInPlaceImpl(&a, b,\n+            #if CYTHON_REFNANNY\n+                                             __pyx_refnanny\n+            #else\n+                                             NULL\n+            #endif\n+                                                );\n+\n+    Py_XDECREF(a);\n+    return result;\n+}\n+#endif\n+\n+////////////////////// NumberAdd.proto //////////////////////////\n+\n+#define __Pyx_PyNumber_Add(o1, o2) PyNumber_Add(o1, o2)\n+#if !CYTHON_COMPILING_IN_CPYTHON\n+#define __PYX_PYNUMBER_INPLACEADD(o1, o2) PyNumber_InPlaceAdd(o1, o2)\n+#define __PYX_PYNUMBER_ADDTOTEMP(o1, o2) PyNumber_Add(o1, o2)\n+#else\n+    #if CYTHON_REFNANNY\n+        #define __PYX_PYNUMBER_INPLACEADD(o1, o2) __Pyx_PyNumber_InPlaceAdd_Impl(&o1, o2, 0, __pyx_refnanny)\n+        #define __PYX_PYNUMBER_ADDTOTEMP(o1, o2) __Pyx_PyNumber_InPlaceAdd_Impl(&o1, o2, 1, __pyx_refnanny)\n+    #else\n+        #define __PYX_PYNUMBER_INPLACEADD(o1, o2) __Pyx_PyNumber_InPlaceAdd_Impl(&o1, o2, 0, NULL)\n+        #define __PYX_PYNUMBER_ADDTOTEMP(o1, o2) __Pyx_PyNumber_InPlaceAdd_Impl(&o1, o2, 1, NULL)\n+    #endif\n+    static CYTHON_INLINE PyObject *__Pyx_PyNumber_InPlaceAdd_Impl(PyObject **o1, PyObject *o2, int add_to_temp, void *__pyx_refnanny); /*proto */\n+#endif\n+\n+////////////////////// NumberAdd //////////////////////////\n+//@requires: UnicodeConcatInPlace\n+//@requires: BytesConcat\n+\n+#if CYTHON_COMPILING_IN_CPYTHON\n+static CYTHON_INLINE PyObject *__Pyx_PyNumber_InPlaceAdd_Impl(PyObject **o1, PyObject *o2,\n+                                                              int add_to_temp,\n+                                                              void *__pyx_refnanny) {",
            "html_url": "https://github.com/cython/cython/pull/3451#discussion_r395991967",
            "id": 395991967,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk5MTk2Nw==",
            "original_commit_id": "43ac82edf13ac696416e8079c9d627067f235d78",
            "original_position": 113,
            "path": "Cython/Utility/ObjectHandling.c",
            "position": null,
            "pull_request_review_id": 378917510,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3451",
            "updated_at": "2020-03-27T14:22:34Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/395991967",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3451#discussion_r395992029"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3451"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/395992029"
                }
            },
            "author_association": "MEMBER",
            "body": "No error handling?",
            "commit_id": "04b011da7aa5207fde3dbe5c9ac393ff03cfc87c",
            "created_at": "2020-03-21T13:18:22Z",
            "diff_hunk": "@@ -2553,3 +2553,132 @@ static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, CYTHON_UNUSE\n #else\n     #define __Pyx_PyMethod_New PyMethod_New\n #endif\n+\n+/////////////// UnicodeConcatInPlace.proto ////////////////\n+\n+#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION > 2\n+    #if CYTHON_REFNANNY\n+        #define __PYX_PYUNICODE_CONCATINPLACE(a, b) __Pyx_PyUnicode_ConcatInPlaceImpl(&a, b, __pyx_refnanny)\n+    #else\n+        #define __PYX_PYUNICODE_CONCATINPLACE(a, b) __Pyx_PyUnicode_ConcatInPlaceImpl(&a, b, NULL)\n+    #endif\n+// __PYX_PYUNICODE_CONCATINPLACE is slightly odd because it has the potential to modify the input\n+// argument (but only in cases where no user should notice). Therefore, it needs to keep Cython's\n+// refnanny informed.\n+static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **a, PyObject *b, void * __pyx_refnanny); /* proto */\n+#else\n+    #define __PYX_PYUNICODE_CONCATINPLACE __Pyx_PyUnicode_Concat\n+#endif\n+#define __PYX_PYUNICODE_CONCATINPLACESafe(a, b) ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \\\n+    PyNumber_Add(a, b) : __PYX_PYUNICODE_CONCATINPLACE(a, b))\n+\n+////////////// UnicodeConcatInPlace ////////////////////\n+\n+#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION > 2\n+    static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **a, PyObject *b, void * __pyx_refnanny) {\n+    __Pyx_GIVEREF(*a);\n+    PyUnicode_Append(a, b);  // this does it's own safety checks so is always safe to use",
            "html_url": "https://github.com/cython/cython/pull/3451#discussion_r395992029",
            "id": 395992029,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk5MjAyOQ==",
            "original_commit_id": "43ac82edf13ac696416e8079c9d627067f235d78",
            "original_position": 28,
            "path": "Cython/Utility/ObjectHandling.c",
            "position": null,
            "pull_request_review_id": 378917510,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3451",
            "updated_at": "2020-03-27T14:22:34Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/395992029",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3451#discussion_r395992517"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3451"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/395992517"
                }
            },
            "author_association": "MEMBER",
            "body": "I'd rather not risk degrading the performance of the `+` operator, even by a tiny bit. It is used much more often for numbers than for strings, I'm sure.",
            "commit_id": "04b011da7aa5207fde3dbe5c9ac393ff03cfc87c",
            "created_at": "2020-03-21T13:25:12Z",
            "diff_hunk": "@@ -11364,20 +11364,43 @@ def compute_c_result_type(self, type1, type2):\n                 self, type1, type2)\n \n     def py_operation_function(self, code):\n-        is_unicode_concat = False\n-        if isinstance(self.operand1, FormattedValueNode) or isinstance(self.operand2, FormattedValueNode):\n-            is_unicode_concat = True\n+        type1, type2 = self.operand1.type, self.operand2.type\n+        func = None\n+        if type1 is unicode_type or type2 is unicode_type:\n+            if type1 in (unicode_type, str_type) and type2 in (unicode_type, str_type):\n+                is_unicode_concat = True\n+            elif isinstance(self.operand1, FormattedValueNode) or isinstance(self.operand2, FormattedValueNode):\n+                # Assume that even if we don't know the second type, it's going to be a string.\n+                is_unicode_concat = True\n+            else:\n+                # Operation depends on the second type.\n+                is_unicode_concat = False\n+\n+            if is_unicode_concat:\n+                func = '__Pyx_PyUnicode_Concat'\n+        elif type1 is bytes_type and type2 is bytes_type:\n+            func = '__Pyx_PyBytes_Concat'\n+\n+        if func:\n+            # any necessary utility code will be got by \"NumberAdd\" in generate_evaluation_code\n+            if self.inplace or self.operand1.is_temp:\n+                func = func.upper() + 'INPLACE'  # upper case to indicate unintuitive macro\n+            if self.operand1.may_be_none() or self.operand2.may_be_none():\n+                func += 'Safe'\n+            return func\n+\n+        if self.operand1.is_temp:\n+            # a specific optimization for string concatenation (where the type isn't known in advance)\n+            return \"__PYX_PYNUMBER_ADDTOTEMP\"",
            "html_url": "https://github.com/cython/cython/pull/3451#discussion_r395992517",
            "id": 395992517,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk5MjUxNw==",
            "original_commit_id": "43ac82edf13ac696416e8079c9d627067f235d78",
            "original_position": 43,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_review_id": 378917510,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3451",
            "updated_at": "2020-03-27T14:22:34Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/395992517",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3451#discussion_r395993633"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3451"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/395993633"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "If there's an error then `*a` will be set to NULL, the `__Pyx_XINCREF` will be safe, and `NULL` will be returned, so no error handling is needed.",
            "commit_id": "04b011da7aa5207fde3dbe5c9ac393ff03cfc87c",
            "created_at": "2020-03-21T13:40:53Z",
            "diff_hunk": "@@ -2553,3 +2553,132 @@ static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, CYTHON_UNUSE\n #else\n     #define __Pyx_PyMethod_New PyMethod_New\n #endif\n+\n+/////////////// UnicodeConcatInPlace.proto ////////////////\n+\n+#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION > 2\n+    #if CYTHON_REFNANNY\n+        #define __PYX_PYUNICODE_CONCATINPLACE(a, b) __Pyx_PyUnicode_ConcatInPlaceImpl(&a, b, __pyx_refnanny)\n+    #else\n+        #define __PYX_PYUNICODE_CONCATINPLACE(a, b) __Pyx_PyUnicode_ConcatInPlaceImpl(&a, b, NULL)\n+    #endif\n+// __PYX_PYUNICODE_CONCATINPLACE is slightly odd because it has the potential to modify the input\n+// argument (but only in cases where no user should notice). Therefore, it needs to keep Cython's\n+// refnanny informed.\n+static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **a, PyObject *b, void * __pyx_refnanny); /* proto */\n+#else\n+    #define __PYX_PYUNICODE_CONCATINPLACE __Pyx_PyUnicode_Concat\n+#endif\n+#define __PYX_PYUNICODE_CONCATINPLACESafe(a, b) ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \\\n+    PyNumber_Add(a, b) : __PYX_PYUNICODE_CONCATINPLACE(a, b))\n+\n+////////////// UnicodeConcatInPlace ////////////////////\n+\n+#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION > 2\n+    static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **a, PyObject *b, void * __pyx_refnanny) {\n+    __Pyx_GIVEREF(*a);\n+    PyUnicode_Append(a, b);  // this does it's own safety checks so is always safe to use",
            "html_url": "https://github.com/cython/cython/pull/3451#discussion_r395993633",
            "id": 395993633,
            "in_reply_to_id": 395992029,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk5MzYzMw==",
            "original_commit_id": "43ac82edf13ac696416e8079c9d627067f235d78",
            "original_position": 28,
            "path": "Cython/Utility/ObjectHandling.c",
            "position": null,
            "pull_request_review_id": 378919477,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3451",
            "updated_at": "2020-03-27T14:22:34Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/395993633",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3451#discussion_r395993651"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3451"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/395993651"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "As above, I don't believe this needs specific error handling.",
            "commit_id": "04b011da7aa5207fde3dbe5c9ac393ff03cfc87c",
            "created_at": "2020-03-21T13:41:19Z",
            "diff_hunk": "@@ -2553,3 +2553,132 @@ static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, CYTHON_UNUSE\n #else\n     #define __Pyx_PyMethod_New PyMethod_New\n #endif\n+\n+/////////////// UnicodeConcatInPlace.proto ////////////////\n+\n+#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION > 2\n+    #if CYTHON_REFNANNY\n+        #define __PYX_PYUNICODE_CONCATINPLACE(a, b) __Pyx_PyUnicode_ConcatInPlaceImpl(&a, b, __pyx_refnanny)\n+    #else\n+        #define __PYX_PYUNICODE_CONCATINPLACE(a, b) __Pyx_PyUnicode_ConcatInPlaceImpl(&a, b, NULL)\n+    #endif\n+// __PYX_PYUNICODE_CONCATINPLACE is slightly odd because it has the potential to modify the input\n+// argument (but only in cases where no user should notice). Therefore, it needs to keep Cython's\n+// refnanny informed.\n+static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **a, PyObject *b, void * __pyx_refnanny); /* proto */\n+#else\n+    #define __PYX_PYUNICODE_CONCATINPLACE __Pyx_PyUnicode_Concat\n+#endif\n+#define __PYX_PYUNICODE_CONCATINPLACESafe(a, b) ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \\\n+    PyNumber_Add(a, b) : __PYX_PYUNICODE_CONCATINPLACE(a, b))\n+\n+////////////// UnicodeConcatInPlace ////////////////////\n+\n+#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION > 2\n+    static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **a, PyObject *b, void * __pyx_refnanny) {\n+    __Pyx_GIVEREF(*a);\n+    PyUnicode_Append(a, b);  // this does it's own safety checks so is always safe to use\n+    __Pyx_XINCREF(*a);  // there are two copies of `*a` - the one just returned and the one\n+                // passed in as an argument\n+    return *a;\n+}\n+#endif\n+\n+//////////// BytesConcat.proto ///////////////////////\n+\n+// Follows the interface of \"PyUnicode_Concat\", but with Bytes, rather than the\n+// interface of PyBytes_Concat. However, uses PyBytes_Concat which has the potential\n+// to modify in-place. See UnicodeConcatInPlace for comments\n+#if CYTHON_COMPILING_IN_CPYTHON\n+    #if CYTHON_REFNANNY\n+        #define __PYX_PYBYTES_CONCATINPLACE(a, b) __Pyx_PyBytes_ConcatInPlaceImpl(&a, b, __pyx_refnanny)\n+    #else\n+        #define __PYX_PYBYTES_CONCATINPLACE(a, b) __Pyx_PyBytes_ConcatInPlaceImpl(&a, b, NULL)\n+    #endif\n+    static CYTHON_INLINE PyObject *__Pyx_PyBytes_ConcatInPlaceImpl(PyObject **a, PyObject *b, void * __pyx_refnanny); /* proto */\n+    static CYTHON_INLINE PyObject *__Pyx_PyBytes_Concat(PyObject *a, PyObject *b);\n+#else\n+    #define __Pyx_PyBytes_Concat(a, b) PyNumber_Add(a,b)\n+    #define __PYX_PYBYTES_CONCATINPLACE(a, b) PyNumber_Add(a,b)\n+#endif\n+#define __Pyx_PyBytes_ConcatSafe(a, b) ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \\\n+    PyNumber_Add(a, b) : __Pyx_PyBytes_Concat(a, b))\n+#define __PYX_PYBYTES_CONCATINPLACESafe(a, b) ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \\\n+    PyNumber_Add(a, b) : __PYX_PYBYTES_CONCATINPLACE(a, b))\n+\n+//////////// BytesConcat ///////////////////////\n+\n+#if CYTHON_COMPILING_IN_CPYTHON\n+static CYTHON_INLINE PyObject *__Pyx_PyBytes_ConcatInPlaceImpl(PyObject **a, PyObject *b, void * __pyx_refnanny) {\n+   __Pyx_GIVEREF(*a);\n+    PyBytes_Concat(a, b);  // this does it's own safety checks so is always safe to use",
            "html_url": "https://github.com/cython/cython/pull/3451#discussion_r395993651",
            "id": 395993651,
            "in_reply_to_id": 395991729,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk5MzY1MQ==",
            "original_commit_id": "43ac82edf13ac696416e8079c9d627067f235d78",
            "original_position": 62,
            "path": "Cython/Utility/ObjectHandling.c",
            "position": null,
            "pull_request_review_id": 378919477,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3451",
            "updated_at": "2020-03-27T14:22:34Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/395993651",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3451#discussion_r395993889"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3451"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/395993889"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "It does give a direct call rather than going through the operator lookup in `PyNumber_Add`, but it's probably more trouble than it's worth. I'll take it out.",
            "commit_id": "04b011da7aa5207fde3dbe5c9ac393ff03cfc87c",
            "created_at": "2020-03-21T13:44:17Z",
            "diff_hunk": "@@ -2553,3 +2553,132 @@ static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, CYTHON_UNUSE\n #else\n     #define __Pyx_PyMethod_New PyMethod_New\n #endif\n+\n+/////////////// UnicodeConcatInPlace.proto ////////////////\n+\n+#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION > 2\n+    #if CYTHON_REFNANNY\n+        #define __PYX_PYUNICODE_CONCATINPLACE(a, b) __Pyx_PyUnicode_ConcatInPlaceImpl(&a, b, __pyx_refnanny)\n+    #else\n+        #define __PYX_PYUNICODE_CONCATINPLACE(a, b) __Pyx_PyUnicode_ConcatInPlaceImpl(&a, b, NULL)\n+    #endif\n+// __PYX_PYUNICODE_CONCATINPLACE is slightly odd because it has the potential to modify the input\n+// argument (but only in cases where no user should notice). Therefore, it needs to keep Cython's\n+// refnanny informed.\n+static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **a, PyObject *b, void * __pyx_refnanny); /* proto */\n+#else\n+    #define __PYX_PYUNICODE_CONCATINPLACE __Pyx_PyUnicode_Concat\n+#endif\n+#define __PYX_PYUNICODE_CONCATINPLACESafe(a, b) ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \\\n+    PyNumber_Add(a, b) : __PYX_PYUNICODE_CONCATINPLACE(a, b))\n+\n+////////////// UnicodeConcatInPlace ////////////////////\n+\n+#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION > 2\n+    static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **a, PyObject *b, void * __pyx_refnanny) {\n+    __Pyx_GIVEREF(*a);\n+    PyUnicode_Append(a, b);  // this does it's own safety checks so is always safe to use\n+    __Pyx_XINCREF(*a);  // there are two copies of `*a` - the one just returned and the one\n+                // passed in as an argument\n+    return *a;\n+}\n+#endif\n+\n+//////////// BytesConcat.proto ///////////////////////\n+\n+// Follows the interface of \"PyUnicode_Concat\", but with Bytes, rather than the\n+// interface of PyBytes_Concat. However, uses PyBytes_Concat which has the potential\n+// to modify in-place. See UnicodeConcatInPlace for comments\n+#if CYTHON_COMPILING_IN_CPYTHON\n+    #if CYTHON_REFNANNY\n+        #define __PYX_PYBYTES_CONCATINPLACE(a, b) __Pyx_PyBytes_ConcatInPlaceImpl(&a, b, __pyx_refnanny)\n+    #else\n+        #define __PYX_PYBYTES_CONCATINPLACE(a, b) __Pyx_PyBytes_ConcatInPlaceImpl(&a, b, NULL)\n+    #endif\n+    static CYTHON_INLINE PyObject *__Pyx_PyBytes_ConcatInPlaceImpl(PyObject **a, PyObject *b, void * __pyx_refnanny); /* proto */\n+    static CYTHON_INLINE PyObject *__Pyx_PyBytes_Concat(PyObject *a, PyObject *b);\n+#else\n+    #define __Pyx_PyBytes_Concat(a, b) PyNumber_Add(a,b)\n+    #define __PYX_PYBYTES_CONCATINPLACE(a, b) PyNumber_Add(a,b)\n+#endif\n+#define __Pyx_PyBytes_ConcatSafe(a, b) ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \\\n+    PyNumber_Add(a, b) : __Pyx_PyBytes_Concat(a, b))\n+#define __PYX_PYBYTES_CONCATINPLACESafe(a, b) ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \\\n+    PyNumber_Add(a, b) : __PYX_PYBYTES_CONCATINPLACE(a, b))\n+\n+//////////// BytesConcat ///////////////////////\n+\n+#if CYTHON_COMPILING_IN_CPYTHON\n+static CYTHON_INLINE PyObject *__Pyx_PyBytes_ConcatInPlaceImpl(PyObject **a, PyObject *b, void * __pyx_refnanny) {\n+   __Pyx_GIVEREF(*a);\n+    PyBytes_Concat(a, b);  // this does it's own safety checks so is always safe to use\n+    __Pyx_XINCREF(*a);  // there are two copies of `*a` - the one just returned and the one\n+                // passed in as an argument\n+    return *a;\n+}\n+\n+static CYTHON_INLINE PyObject *__Pyx_PyBytes_Concat(PyObject *a, PyObject *b) {\n+    // unusual for utilitycode to use refnanny, but the __Pyx_PyBytes_ConcatInPlaceImpl\n+    // needs something forwarded to it\n+    __Pyx_RefNannyDeclarations\n+    __Pyx_RefNannySetupContext(\"__Pyx_PyBytes_Concat (internal)\", 0);\n+    // wrapper function prevents \"outside\" a from getting modified\n+    PyObject* result;\n+    Py_INCREF(a); // an extra reference will prevent PyBytes_Concat from operating in place",
            "html_url": "https://github.com/cython/cython/pull/3451#discussion_r395993889",
            "id": 395993889,
            "in_reply_to_id": 395991876,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk5Mzg4OQ==",
            "original_commit_id": "43ac82edf13ac696416e8079c9d627067f235d78",
            "original_position": 75,
            "path": "Cython/Utility/ObjectHandling.c",
            "position": null,
            "pull_request_review_id": 378919477,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3451",
            "updated_at": "2020-03-27T14:22:34Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/395993889",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3451#discussion_r395994073"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3451"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/395994073"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "It was mostly to give anyone reading the code a clue that it might do something unexpected (i.e. modify the arguments). However, I'll switch them back.",
            "commit_id": "04b011da7aa5207fde3dbe5c9ac393ff03cfc87c",
            "created_at": "2020-03-21T13:47:10Z",
            "diff_hunk": "@@ -2553,3 +2553,132 @@ static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, CYTHON_UNUSE\n #else\n     #define __Pyx_PyMethod_New PyMethod_New\n #endif\n+\n+/////////////// UnicodeConcatInPlace.proto ////////////////\n+\n+#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION > 2\n+    #if CYTHON_REFNANNY\n+        #define __PYX_PYUNICODE_CONCATINPLACE(a, b) __Pyx_PyUnicode_ConcatInPlaceImpl(&a, b, __pyx_refnanny)",
            "html_url": "https://github.com/cython/cython/pull/3451#discussion_r395994073",
            "id": 395994073,
            "in_reply_to_id": 395991529,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk5NDA3Mw==",
            "original_commit_id": "43ac82edf13ac696416e8079c9d627067f235d78",
            "original_position": 9,
            "path": "Cython/Utility/ObjectHandling.c",
            "position": null,
            "pull_request_review_id": 378919477,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3451",
            "updated_at": "2020-03-27T14:22:34Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/395994073",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3451#discussion_r396030648"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3451"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/396030648"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I can't make a macro work unfortunately. It needs to return a value and using the comma operator fails because `__Pyx_GIVEREF` and `__Pyx_INCREF` are macros themselves that expand to `do {...} while(0)`",
            "commit_id": "04b011da7aa5207fde3dbe5c9ac393ff03cfc87c",
            "created_at": "2020-03-21T21:26:52Z",
            "diff_hunk": "@@ -2553,3 +2553,132 @@ static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, CYTHON_UNUSE\n #else\n     #define __Pyx_PyMethod_New PyMethod_New\n #endif\n+\n+/////////////// UnicodeConcatInPlace.proto ////////////////\n+\n+#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION > 2\n+    #if CYTHON_REFNANNY\n+        #define __PYX_PYUNICODE_CONCATINPLACE(a, b) __Pyx_PyUnicode_ConcatInPlaceImpl(&a, b, __pyx_refnanny)\n+    #else\n+        #define __PYX_PYUNICODE_CONCATINPLACE(a, b) __Pyx_PyUnicode_ConcatInPlaceImpl(&a, b, NULL)\n+    #endif\n+// __PYX_PYUNICODE_CONCATINPLACE is slightly odd because it has the potential to modify the input\n+// argument (but only in cases where no user should notice). Therefore, it needs to keep Cython's\n+// refnanny informed.\n+static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **a, PyObject *b, void * __pyx_refnanny); /* proto */\n+#else\n+    #define __PYX_PYUNICODE_CONCATINPLACE __Pyx_PyUnicode_Concat\n+#endif\n+#define __PYX_PYUNICODE_CONCATINPLACESafe(a, b) ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \\\n+    PyNumber_Add(a, b) : __PYX_PYUNICODE_CONCATINPLACE(a, b))\n+\n+////////////// UnicodeConcatInPlace ////////////////////\n+\n+#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION > 2\n+    static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **a, PyObject *b, void * __pyx_refnanny) {\n+    __Pyx_GIVEREF(*a);\n+    PyUnicode_Append(a, b);  // this does it's own safety checks so is always safe to use\n+    __Pyx_XINCREF(*a);  // there are two copies of `*a` - the one just returned and the one\n+                // passed in as an argument\n+    return *a;\n+}\n+#endif\n+\n+//////////// BytesConcat.proto ///////////////////////\n+\n+// Follows the interface of \"PyUnicode_Concat\", but with Bytes, rather than the\n+// interface of PyBytes_Concat. However, uses PyBytes_Concat which has the potential\n+// to modify in-place. See UnicodeConcatInPlace for comments\n+#if CYTHON_COMPILING_IN_CPYTHON\n+    #if CYTHON_REFNANNY\n+        #define __PYX_PYBYTES_CONCATINPLACE(a, b) __Pyx_PyBytes_ConcatInPlaceImpl(&a, b, __pyx_refnanny)\n+    #else\n+        #define __PYX_PYBYTES_CONCATINPLACE(a, b) __Pyx_PyBytes_ConcatInPlaceImpl(&a, b, NULL)\n+    #endif\n+    static CYTHON_INLINE PyObject *__Pyx_PyBytes_ConcatInPlaceImpl(PyObject **a, PyObject *b, void * __pyx_refnanny); /* proto */\n+    static CYTHON_INLINE PyObject *__Pyx_PyBytes_Concat(PyObject *a, PyObject *b);\n+#else\n+    #define __Pyx_PyBytes_Concat(a, b) PyNumber_Add(a,b)\n+    #define __PYX_PYBYTES_CONCATINPLACE(a, b) PyNumber_Add(a,b)\n+#endif\n+#define __Pyx_PyBytes_ConcatSafe(a, b) ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \\\n+    PyNumber_Add(a, b) : __Pyx_PyBytes_Concat(a, b))\n+#define __PYX_PYBYTES_CONCATINPLACESafe(a, b) ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \\\n+    PyNumber_Add(a, b) : __PYX_PYBYTES_CONCATINPLACE(a, b))\n+\n+//////////// BytesConcat ///////////////////////\n+\n+#if CYTHON_COMPILING_IN_CPYTHON\n+static CYTHON_INLINE PyObject *__Pyx_PyBytes_ConcatInPlaceImpl(PyObject **a, PyObject *b, void * __pyx_refnanny) {\n+   __Pyx_GIVEREF(*a);\n+    PyBytes_Concat(a, b);  // this does it's own safety checks so is always safe to use\n+    __Pyx_XINCREF(*a);  // there are two copies of `*a` - the one just returned and the one\n+                // passed in as an argument\n+    return *a;\n+}",
            "html_url": "https://github.com/cython/cython/pull/3451#discussion_r396030648",
            "id": 396030648,
            "in_reply_to_id": 395991695,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAzMDY0OA==",
            "original_commit_id": "43ac82edf13ac696416e8079c9d627067f235d78",
            "original_position": 66,
            "path": "Cython/Utility/ObjectHandling.c",
            "position": null,
            "pull_request_review_id": 378953178,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3451",
            "updated_at": "2020-03-27T14:22:34Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/396030648",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3451#discussion_r396071285"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3451"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/396071285"
                }
            },
            "author_association": "MEMBER",
            "body": "Sorry, yes. I should have looked up the (slightly unusual) function signature.",
            "commit_id": "04b011da7aa5207fde3dbe5c9ac393ff03cfc87c",
            "created_at": "2020-03-22T09:20:31Z",
            "diff_hunk": "@@ -2553,3 +2553,132 @@ static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, CYTHON_UNUSE\n #else\n     #define __Pyx_PyMethod_New PyMethod_New\n #endif\n+\n+/////////////// UnicodeConcatInPlace.proto ////////////////\n+\n+#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION > 2\n+    #if CYTHON_REFNANNY\n+        #define __PYX_PYUNICODE_CONCATINPLACE(a, b) __Pyx_PyUnicode_ConcatInPlaceImpl(&a, b, __pyx_refnanny)\n+    #else\n+        #define __PYX_PYUNICODE_CONCATINPLACE(a, b) __Pyx_PyUnicode_ConcatInPlaceImpl(&a, b, NULL)\n+    #endif\n+// __PYX_PYUNICODE_CONCATINPLACE is slightly odd because it has the potential to modify the input\n+// argument (but only in cases where no user should notice). Therefore, it needs to keep Cython's\n+// refnanny informed.\n+static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **a, PyObject *b, void * __pyx_refnanny); /* proto */\n+#else\n+    #define __PYX_PYUNICODE_CONCATINPLACE __Pyx_PyUnicode_Concat\n+#endif\n+#define __PYX_PYUNICODE_CONCATINPLACESafe(a, b) ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \\\n+    PyNumber_Add(a, b) : __PYX_PYUNICODE_CONCATINPLACE(a, b))\n+\n+////////////// UnicodeConcatInPlace ////////////////////\n+\n+#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION > 2\n+    static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **a, PyObject *b, void * __pyx_refnanny) {\n+    __Pyx_GIVEREF(*a);\n+    PyUnicode_Append(a, b);  // this does it's own safety checks so is always safe to use",
            "html_url": "https://github.com/cython/cython/pull/3451#discussion_r396071285",
            "id": 396071285,
            "in_reply_to_id": 395992029,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA3MTI4NQ==",
            "original_commit_id": "43ac82edf13ac696416e8079c9d627067f235d78",
            "original_position": 28,
            "path": "Cython/Utility/ObjectHandling.c",
            "position": null,
            "pull_request_review_id": 378985556,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3451",
            "updated_at": "2020-03-27T14:22:34Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/396071285",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3451#discussion_r396071568"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3451"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/396071568"
                }
            },
            "author_association": "MEMBER",
            "body": "Left-over name",
            "commit_id": "04b011da7aa5207fde3dbe5c9ac393ff03cfc87c",
            "created_at": "2020-03-22T09:23:34Z",
            "diff_hunk": "@@ -2553,3 +2553,67 @@ static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, CYTHON_UNUSE\n #else\n     #define __Pyx_PyMethod_New PyMethod_New\n #endif\n+\n+/////////////// UnicodeConcatInPlace.proto ////////////////\n+\n+#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION > 2\n+    // PyUnicode_Append does it's own safety checks so is always safe to use\n+    // The incref is because there now two copies of `*a` - the one just \"returned\" and the one \\\n+                // passed in as an argument\n+    #if CYTHON_REFNANNY\n+        #define __Pyx_PyUnicode_ConcatInPlace(a, b) __Pyx_PyUnicode_ConcatInPlaceImpl(&a, b, __pyx_refnanny)\n+    #else\n+        #define __Pyx_PyUnicode_ConcatInPlace(a, b) __Pyx_PyUnicode_ConcatInPlaceImpl(&a, b, NULL)\n+    #endif\n+    // __PYX_PYUNICODE_CONCATINPLACE is slightly odd because it has the potential to modify the input",
            "html_url": "https://github.com/cython/cython/pull/3451#discussion_r396071568",
            "id": 396071568,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA3MTU2OA==",
            "original_commit_id": "1de3f8043fa0d5ca88be7435183b63fe54987369",
            "original_position": 16,
            "path": "Cython/Utility/ObjectHandling.c",
            "position": null,
            "pull_request_review_id": 378985787,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3451",
            "updated_at": "2020-03-27T14:22:34Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/396071568",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3451#discussion_r396071823"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3451"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/396071823"
                }
            },
            "author_association": "MEMBER",
            "body": "I don't see a `__Pyx_PyUnicode_ConcatSafe`, but that name can result from this.",
            "commit_id": "04b011da7aa5207fde3dbe5c9ac393ff03cfc87c",
            "created_at": "2020-03-22T09:26:04Z",
            "diff_hunk": "@@ -11377,10 +11377,22 @@ def py_operation_function(self, code):\n                 is_unicode_concat = False\n \n             if is_unicode_concat:\n-                if self.operand1.may_be_none() or self.operand2.may_be_none():\n-                    return '__Pyx_PyUnicode_ConcatSafe'\n-                else:\n-                    return '__Pyx_PyUnicode_Concat'\n+                if self.inplace or self.operand1.is_temp:\n+                    code.globalstate.use_utility_code(\n+                        UtilityCode.load_cached(\"UnicodeConcatInPlace\", \"ObjectHandling.c\"))\n+                func = '__Pyx_PyUnicode_Concat'\n+        elif type1 is bytes_type and type2 is bytes_type:\n+            code.globalstate.use_utility_code(\n+                    UtilityCode.load_cached(\"BytesConcatInPlace\", \"ObjectHandling.c\"))\n+            func = '__Pyx_PyBytes_Concat'\n+\n+        if func:\n+            # any necessary utility code will be got by \"NumberAdd\" in generate_evaluation_code\n+            if self.inplace or self.operand1.is_temp:\n+                func += 'InPlace'  # upper case to indicate unintuitive macro\n+            if self.operand1.may_be_none() or self.operand2.may_be_none():\n+                func += 'Safe'",
            "html_url": "https://github.com/cython/cython/pull/3451#discussion_r396071823",
            "id": 396071823,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA3MTgyMw==",
            "original_commit_id": "1de3f8043fa0d5ca88be7435183b63fe54987369",
            "original_position": 31,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": 31,
            "pull_request_review_id": 378985787,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3451",
            "updated_at": "2020-03-27T14:22:34Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/396071823",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3451#discussion_r396072618"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3451"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/396072618"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n      // PyUnicode_Append() may reassign `a` in place, and sets it to NULL on error.\r\n      PyUnicode_Append(a, b);\r\n      // We need two references to `*a` - the one we return and the one that we keep in the input pointer.\r\n      __Pyx_XINCREF(*a);\r\n```",
            "commit_id": "04b011da7aa5207fde3dbe5c9ac393ff03cfc87c",
            "created_at": "2020-03-22T09:34:22Z",
            "diff_hunk": "@@ -2553,3 +2553,67 @@ static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, CYTHON_UNUSE\n #else\n     #define __Pyx_PyMethod_New PyMethod_New\n #endif\n+\n+/////////////// UnicodeConcatInPlace.proto ////////////////\n+\n+#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION > 2\n+    // PyUnicode_Append does it's own safety checks so is always safe to use\n+    // The incref is because there now two copies of `*a` - the one just \"returned\" and the one \\\n+                // passed in as an argument\n+    #if CYTHON_REFNANNY\n+        #define __Pyx_PyUnicode_ConcatInPlace(a, b) __Pyx_PyUnicode_ConcatInPlaceImpl(&a, b, __pyx_refnanny)\n+    #else\n+        #define __Pyx_PyUnicode_ConcatInPlace(a, b) __Pyx_PyUnicode_ConcatInPlaceImpl(&a, b, NULL)\n+    #endif\n+    // __PYX_PYUNICODE_CONCATINPLACE is slightly odd because it has the potential to modify the input\n+    // argument (but only in cases where no user should notice). Therefore, it needs to keep Cython's\n+    // refnanny informed.\n+    static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **a, PyObject *b, CYTHON_UNUSED void * __pyx_refnanny); /* proto */\n+#else\n+    #define __Pyx_PyUnicode_ConcatInPlace __Pyx_PyUnicode_Concat\n+#endif\n+#define __Pyx_PyUnicode_ConcatInPlaceSafe(a, b) ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \\\n+    PyNumber_Add(a, b) : __Pyx_PyUnicode_ConcatInPlace(a, b))\n+\n+/////////////// UnicodeConcatInPlace ////////////////\n+\n+#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION > 2\n+static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **a, PyObject *b, CYTHON_UNUSED void * __pyx_refnanny) {\n+      __Pyx_GIVEREF(*a);\n+      PyUnicode_Append(a, b);  // this does it's own safety checks so is always safe to use\n+      __Pyx_XINCREF(*a);  // there are two copies of `*a` - the one just returned and the one",
            "html_url": "https://github.com/cython/cython/pull/3451#discussion_r396072618",
            "id": 396072618,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA3MjYxOA==",
            "original_commit_id": "1de3f8043fa0d5ca88be7435183b63fe54987369",
            "original_position": 32,
            "path": "Cython/Utility/ObjectHandling.c",
            "position": null,
            "pull_request_review_id": 378985787,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3451",
            "updated_at": "2020-03-27T14:22:34Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/396072618",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3451#discussion_r396072955"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3451"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/396072955"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n      // PyBytes_Concat() may reassign `a` in place, and sets it to NULL on error.\r\n      PyBytes_Concat(a, b);\r\n      // We need two references to `*a` - the one we return and the one that we keep in the input pointer.\r\n      __Pyx_XINCREF(*a);\r\n```",
            "commit_id": "04b011da7aa5207fde3dbe5c9ac393ff03cfc87c",
            "created_at": "2020-03-22T09:38:03Z",
            "diff_hunk": "@@ -2553,3 +2553,67 @@ static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, CYTHON_UNUSE\n #else\n     #define __Pyx_PyMethod_New PyMethod_New\n #endif\n+\n+/////////////// UnicodeConcatInPlace.proto ////////////////\n+\n+#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION > 2\n+    // PyUnicode_Append does it's own safety checks so is always safe to use\n+    // The incref is because there now two copies of `*a` - the one just \"returned\" and the one \\\n+                // passed in as an argument\n+    #if CYTHON_REFNANNY\n+        #define __Pyx_PyUnicode_ConcatInPlace(a, b) __Pyx_PyUnicode_ConcatInPlaceImpl(&a, b, __pyx_refnanny)\n+    #else\n+        #define __Pyx_PyUnicode_ConcatInPlace(a, b) __Pyx_PyUnicode_ConcatInPlaceImpl(&a, b, NULL)\n+    #endif\n+    // __PYX_PYUNICODE_CONCATINPLACE is slightly odd because it has the potential to modify the input\n+    // argument (but only in cases where no user should notice). Therefore, it needs to keep Cython's\n+    // refnanny informed.\n+    static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **a, PyObject *b, CYTHON_UNUSED void * __pyx_refnanny); /* proto */\n+#else\n+    #define __Pyx_PyUnicode_ConcatInPlace __Pyx_PyUnicode_Concat\n+#endif\n+#define __Pyx_PyUnicode_ConcatInPlaceSafe(a, b) ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \\\n+    PyNumber_Add(a, b) : __Pyx_PyUnicode_ConcatInPlace(a, b))\n+\n+/////////////// UnicodeConcatInPlace ////////////////\n+\n+#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION > 2\n+static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **a, PyObject *b, CYTHON_UNUSED void * __pyx_refnanny) {\n+      __Pyx_GIVEREF(*a);\n+      PyUnicode_Append(a, b);  // this does it's own safety checks so is always safe to use\n+      __Pyx_XINCREF(*a);  // there are two copies of `*a` - the one just returned and the one\n+      return *a;\n+  }\n+#endif\n+\n+//////////// BytesConcatInPlace.proto ///////////////////////\n+\n+// Follows the interface of \"PyUnicode_Concat\", but with Bytes, rather than the\n+// interface of PyBytes_Concat. However, uses PyBytes_Concat which has the potential\n+// to modify in-place. See UnicodeConcatInPlace for comments\n+#if CYTHON_COMPILING_IN_CPYTHON\n+    #if CYTHON_REFNANNY\n+        #define __Pyx_PyBytes_ConcatInPlace(a, b) __Pyx_PyBytes_ConcatInPlaceImpl(&a, b, __pyx_refnanny)\n+    #else\n+        #define __Pyx_PyBytes_ConcatInPlace(a, b) __Pyx_PyBytes_ConcatInPlaceImpl(&a, b, NULL)\n+    #endif\n+#else\n+    static CYTHON_INLINE PyObject *__Pyx_PyBytes_ConcatInPlaceImpl(PyObject **a, PyObject *b, CYTHON_UNUSED void * __pyx_refnanny); /* proto */\n+    #define __Pyx_PyBytes_ConcatInPlace(a, b) PyNumber_Add(a,b)\n+#endif\n+#define __Pyx_PyBytes_Concat(a, b) PyNumber_Add(a,b)\n+#define __Pyx_PyBytes_ConcatSafe(a, b) ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \\\n+    PyNumber_Add(a, b) : __Pyx_PyBytes_Concat(a, b))\n+#define __Pyx_PyBytes_ConcatInPlaceSafe(a, b) ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \\\n+    PyNumber_Add(a, b) : __Pyx_PyBytes_ConcatInPlace(a, b))\n+\n+//////////// BytesConcatInPlace ///////////////////////\n+\n+#if CYTHON_COMPILING_IN_CPYTHON\n+static CYTHON_INLINE PyObject *__Pyx_PyBytes_ConcatInPlaceImpl(PyObject **a, PyObject *b, CYTHON_UNUSED void * __pyx_refnanny) {\n+      __Pyx_GIVEREF(*a);\n+      PyUnicode_Append(a, b);  // this does it's own safety checks so is always safe to use\n+      __Pyx_XINCREF(*a);  // there are two copies of `*a` - the one just returned and the one",
            "html_url": "https://github.com/cython/cython/pull/3451#discussion_r396072955",
            "id": 396072955,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA3Mjk1NQ==",
            "original_commit_id": "1de3f8043fa0d5ca88be7435183b63fe54987369",
            "original_position": 64,
            "path": "Cython/Utility/ObjectHandling.c",
            "position": null,
            "pull_request_review_id": 378985787,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3451",
            "updated_at": "2020-03-27T14:22:34Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/396072955",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3451#discussion_r396074858"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3451"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/396074858"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "https://github.com/cython/cython/blob/4dd7c18de76cb5c90a5168fba35990600307e642/Cython/Utility/ModuleSetupCode.c#L713 Already exists in ModuleSetupCode.py",
            "commit_id": "04b011da7aa5207fde3dbe5c9ac393ff03cfc87c",
            "created_at": "2020-03-22T09:58:28Z",
            "diff_hunk": "@@ -11377,10 +11377,22 @@ def py_operation_function(self, code):\n                 is_unicode_concat = False\n \n             if is_unicode_concat:\n-                if self.operand1.may_be_none() or self.operand2.may_be_none():\n-                    return '__Pyx_PyUnicode_ConcatSafe'\n-                else:\n-                    return '__Pyx_PyUnicode_Concat'\n+                if self.inplace or self.operand1.is_temp:\n+                    code.globalstate.use_utility_code(\n+                        UtilityCode.load_cached(\"UnicodeConcatInPlace\", \"ObjectHandling.c\"))\n+                func = '__Pyx_PyUnicode_Concat'\n+        elif type1 is bytes_type and type2 is bytes_type:\n+            code.globalstate.use_utility_code(\n+                    UtilityCode.load_cached(\"BytesConcatInPlace\", \"ObjectHandling.c\"))\n+            func = '__Pyx_PyBytes_Concat'\n+\n+        if func:\n+            # any necessary utility code will be got by \"NumberAdd\" in generate_evaluation_code\n+            if self.inplace or self.operand1.is_temp:\n+                func += 'InPlace'  # upper case to indicate unintuitive macro\n+            if self.operand1.may_be_none() or self.operand2.may_be_none():\n+                func += 'Safe'",
            "html_url": "https://github.com/cython/cython/pull/3451#discussion_r396074858",
            "id": 396074858,
            "in_reply_to_id": 396071823,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA3NDg1OA==",
            "original_commit_id": "1de3f8043fa0d5ca88be7435183b63fe54987369",
            "original_position": 31,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": 31,
            "pull_request_review_id": 378988632,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3451",
            "updated_at": "2020-03-27T14:22:34Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/396074858",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3451#discussion_r398450138"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3451"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/398450138"
                }
            },
            "author_association": "MEMBER",
            "body": "An `assert` isn't a good enough reason for using CPython internals.\r\n```suggestion\r\n```",
            "commit_id": "04b011da7aa5207fde3dbe5c9ac393ff03cfc87c",
            "created_at": "2020-03-26T10:04:07Z",
            "diff_hunk": "@@ -2553,3 +2553,122 @@ static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, CYTHON_UNUSE\n #else\n     #define __Pyx_PyMethod_New PyMethod_New\n #endif\n+\n+/////////////// UnicodeConcatInPlace.proto ////////////////\n+\n+# if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3\n+// __Pyx_PyUnicode_ConcatInPlace may modify the first argument 'left'\n+// However, unlike `PyUnicode_Append` it will never NULL it.\n+// It behaves like a regular function - returns a new reference and NULL on error\n+    #if CYTHON_REFNANNY\n+        #define __Pyx_PyUnicode_ConcatInPlace(left, right) __Pyx_PyUnicode_ConcatInPlaceImpl(&left, right, __pyx_refnanny)\n+    #else\n+        #define __Pyx_PyUnicode_ConcatInPlace(left, right) __Pyx_PyUnicode_ConcatInPlaceImpl(&left, right, NULL)\n+    #endif\n+    // __Pyx_PyUnicode_ConcatInPlace is slightly odd because it has the potential to modify the input\n+    // argument (but only in cases where no user should notice). Therefore, it needs to keep Cython's\n+    // refnanny informed.\n+    static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **p_left, PyObject *right, void* __pyx_refnanny); /* proto */\n+#else\n+#define __Pyx_PyUnicode_ConcatInPlace __Pyx_PyUnicode_Concat\n+#endif\n+#define __Pyx_PyUnicode_ConcatInPlaceSafe(left, right) ((unlikely((left) == Py_None) || unlikely((right) == Py_None)) ? \\\n+    PyNumber_Add(left, right) : __Pyx_PyUnicode_ConcatInPlace(left, right))\n+\n+/////////////// UnicodeConcatInPlace ////////////////\n+//@substitute: naming\n+\n+# if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3\n+// copied directly from unicode_object.c \"unicode_modifiable\n+// removing _PyUnicode_HASH since it's a macro we don't have\n+//  - this is OK because trying PyUnicode_Resize on a non-modifyable\n+//  object will still work, it just won't happen in place\n+static int\n+__Pyx_unicode_modifiable(PyObject *unicode)\n+{\n+    assert(_PyUnicode_CHECK(unicode));",
            "html_url": "https://github.com/cython/cython/pull/3451#discussion_r398450138",
            "id": 398450138,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ1MDEzOA==",
            "original_commit_id": "47a920185c9e0cda989641952f6ffb531ee8d9b9",
            "original_position": 37,
            "path": "Cython/Utility/ObjectHandling.c",
            "position": null,
            "pull_request_review_id": 381858156,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3451",
            "updated_at": "2020-03-27T14:22:34Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/398450138",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3451#discussion_r398451171"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3451"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/398451171"
                }
            },
            "author_association": "MEMBER",
            "body": "Probably not a bug _inside_ of CPython, but I'd rather avoid depending on `PyUnicode_CHECK_INTERNED()` working on something that's not exactly a `PyUnicode` instance, when we require that anyway.\r\n```suggestion\r\n    if (!PyUnicode_CheckExact(unicode))\r\n        return 0;\r\n    if (PyUnicode_CHECK_INTERNED(unicode))\r\n        return 0;\r\n```",
            "commit_id": "04b011da7aa5207fde3dbe5c9ac393ff03cfc87c",
            "created_at": "2020-03-26T10:05:47Z",
            "diff_hunk": "@@ -2553,3 +2553,122 @@ static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, CYTHON_UNUSE\n #else\n     #define __Pyx_PyMethod_New PyMethod_New\n #endif\n+\n+/////////////// UnicodeConcatInPlace.proto ////////////////\n+\n+# if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3\n+// __Pyx_PyUnicode_ConcatInPlace may modify the first argument 'left'\n+// However, unlike `PyUnicode_Append` it will never NULL it.\n+// It behaves like a regular function - returns a new reference and NULL on error\n+    #if CYTHON_REFNANNY\n+        #define __Pyx_PyUnicode_ConcatInPlace(left, right) __Pyx_PyUnicode_ConcatInPlaceImpl(&left, right, __pyx_refnanny)\n+    #else\n+        #define __Pyx_PyUnicode_ConcatInPlace(left, right) __Pyx_PyUnicode_ConcatInPlaceImpl(&left, right, NULL)\n+    #endif\n+    // __Pyx_PyUnicode_ConcatInPlace is slightly odd because it has the potential to modify the input\n+    // argument (but only in cases where no user should notice). Therefore, it needs to keep Cython's\n+    // refnanny informed.\n+    static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **p_left, PyObject *right, void* __pyx_refnanny); /* proto */\n+#else\n+#define __Pyx_PyUnicode_ConcatInPlace __Pyx_PyUnicode_Concat\n+#endif\n+#define __Pyx_PyUnicode_ConcatInPlaceSafe(left, right) ((unlikely((left) == Py_None) || unlikely((right) == Py_None)) ? \\\n+    PyNumber_Add(left, right) : __Pyx_PyUnicode_ConcatInPlace(left, right))\n+\n+/////////////// UnicodeConcatInPlace ////////////////\n+//@substitute: naming\n+\n+# if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3\n+// copied directly from unicode_object.c \"unicode_modifiable\n+// removing _PyUnicode_HASH since it's a macro we don't have\n+//  - this is OK because trying PyUnicode_Resize on a non-modifyable\n+//  object will still work, it just won't happen in place\n+static int\n+__Pyx_unicode_modifiable(PyObject *unicode)\n+{\n+    assert(_PyUnicode_CHECK(unicode));\n+    if (Py_REFCNT(unicode) != 1)\n+        return 0;\n+    if (PyUnicode_CHECK_INTERNED(unicode))\n+        return 0;\n+    if (!PyUnicode_CheckExact(unicode))\n+        return 0;",
            "html_url": "https://github.com/cython/cython/pull/3451#discussion_r398451171",
            "id": 398451171,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ1MTE3MQ==",
            "original_commit_id": "47a920185c9e0cda989641952f6ffb531ee8d9b9",
            "original_position": 43,
            "path": "Cython/Utility/ObjectHandling.c",
            "position": null,
            "pull_request_review_id": 381858156,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3451",
            "updated_at": "2020-03-27T14:22:34Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/398451171",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3451#discussion_r398451769"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3451"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/398451769"
                }
            },
            "author_association": "MEMBER",
            "body": "Not something we have either.\r\n```suggestion\r\n```",
            "commit_id": "04b011da7aa5207fde3dbe5c9ac393ff03cfc87c",
            "created_at": "2020-03-26T10:06:49Z",
            "diff_hunk": "@@ -2553,3 +2553,122 @@ static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, CYTHON_UNUSE\n #else\n     #define __Pyx_PyMethod_New PyMethod_New\n #endif\n+\n+/////////////// UnicodeConcatInPlace.proto ////////////////\n+\n+# if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3\n+// __Pyx_PyUnicode_ConcatInPlace may modify the first argument 'left'\n+// However, unlike `PyUnicode_Append` it will never NULL it.\n+// It behaves like a regular function - returns a new reference and NULL on error\n+    #if CYTHON_REFNANNY\n+        #define __Pyx_PyUnicode_ConcatInPlace(left, right) __Pyx_PyUnicode_ConcatInPlaceImpl(&left, right, __pyx_refnanny)\n+    #else\n+        #define __Pyx_PyUnicode_ConcatInPlace(left, right) __Pyx_PyUnicode_ConcatInPlaceImpl(&left, right, NULL)\n+    #endif\n+    // __Pyx_PyUnicode_ConcatInPlace is slightly odd because it has the potential to modify the input\n+    // argument (but only in cases where no user should notice). Therefore, it needs to keep Cython's\n+    // refnanny informed.\n+    static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **p_left, PyObject *right, void* __pyx_refnanny); /* proto */\n+#else\n+#define __Pyx_PyUnicode_ConcatInPlace __Pyx_PyUnicode_Concat\n+#endif\n+#define __Pyx_PyUnicode_ConcatInPlaceSafe(left, right) ((unlikely((left) == Py_None) || unlikely((right) == Py_None)) ? \\\n+    PyNumber_Add(left, right) : __Pyx_PyUnicode_ConcatInPlace(left, right))\n+\n+/////////////// UnicodeConcatInPlace ////////////////\n+//@substitute: naming\n+\n+# if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3\n+// copied directly from unicode_object.c \"unicode_modifiable\n+// removing _PyUnicode_HASH since it's a macro we don't have\n+//  - this is OK because trying PyUnicode_Resize on a non-modifyable\n+//  object will still work, it just won't happen in place\n+static int\n+__Pyx_unicode_modifiable(PyObject *unicode)\n+{\n+    assert(_PyUnicode_CHECK(unicode));\n+    if (Py_REFCNT(unicode) != 1)\n+        return 0;\n+    if (PyUnicode_CHECK_INTERNED(unicode))\n+        return 0;\n+    if (!PyUnicode_CheckExact(unicode))\n+        return 0;\n+#ifdef Py_DEBUG\n+    /* singleton refcount is greater than 1 */\n+    assert(!unicode_is_singleton(unicode));\n+#endif",
            "html_url": "https://github.com/cython/cython/pull/3451#discussion_r398451769",
            "id": 398451769,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ1MTc2OQ==",
            "original_commit_id": "47a920185c9e0cda989641952f6ffb531ee8d9b9",
            "original_position": 47,
            "path": "Cython/Utility/ObjectHandling.c",
            "position": null,
            "pull_request_review_id": 381858156,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3451",
            "updated_at": "2020-03-27T14:22:34Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/398451769",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3451#discussion_r398452399"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3451"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/398452399"
                }
            },
            "author_association": "MEMBER",
            "body": "Would be better to exclude these comments from the generated C files (i.e. use `//`).",
            "commit_id": "04b011da7aa5207fde3dbe5c9ac393ff03cfc87c",
            "created_at": "2020-03-26T10:07:48Z",
            "diff_hunk": "@@ -2553,3 +2553,122 @@ static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, CYTHON_UNUSE\n #else\n     #define __Pyx_PyMethod_New PyMethod_New\n #endif\n+\n+/////////////// UnicodeConcatInPlace.proto ////////////////\n+\n+# if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3\n+// __Pyx_PyUnicode_ConcatInPlace may modify the first argument 'left'\n+// However, unlike `PyUnicode_Append` it will never NULL it.\n+// It behaves like a regular function - returns a new reference and NULL on error\n+    #if CYTHON_REFNANNY\n+        #define __Pyx_PyUnicode_ConcatInPlace(left, right) __Pyx_PyUnicode_ConcatInPlaceImpl(&left, right, __pyx_refnanny)\n+    #else\n+        #define __Pyx_PyUnicode_ConcatInPlace(left, right) __Pyx_PyUnicode_ConcatInPlaceImpl(&left, right, NULL)\n+    #endif\n+    // __Pyx_PyUnicode_ConcatInPlace is slightly odd because it has the potential to modify the input\n+    // argument (but only in cases where no user should notice). Therefore, it needs to keep Cython's\n+    // refnanny informed.\n+    static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **p_left, PyObject *right, void* __pyx_refnanny); /* proto */\n+#else\n+#define __Pyx_PyUnicode_ConcatInPlace __Pyx_PyUnicode_Concat\n+#endif\n+#define __Pyx_PyUnicode_ConcatInPlaceSafe(left, right) ((unlikely((left) == Py_None) || unlikely((right) == Py_None)) ? \\\n+    PyNumber_Add(left, right) : __Pyx_PyUnicode_ConcatInPlace(left, right))\n+\n+/////////////// UnicodeConcatInPlace ////////////////\n+//@substitute: naming\n+\n+# if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3\n+// copied directly from unicode_object.c \"unicode_modifiable\n+// removing _PyUnicode_HASH since it's a macro we don't have\n+//  - this is OK because trying PyUnicode_Resize on a non-modifyable\n+//  object will still work, it just won't happen in place\n+static int\n+__Pyx_unicode_modifiable(PyObject *unicode)\n+{\n+    assert(_PyUnicode_CHECK(unicode));\n+    if (Py_REFCNT(unicode) != 1)\n+        return 0;\n+    if (PyUnicode_CHECK_INTERNED(unicode))\n+        return 0;\n+    if (!PyUnicode_CheckExact(unicode))\n+        return 0;\n+#ifdef Py_DEBUG\n+    /* singleton refcount is greater than 1 */\n+    assert(!unicode_is_singleton(unicode));\n+#endif\n+    return 1;\n+}\n+\n+static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **p_left, PyObject *right, void* __pyx_refnanny) {\n+    // heavily based on PyUnicode_Append\n+    PyObject *left = *p_left;\n+    Py_ssize_t left_len, right_len, new_len;\n+\n+    if (PyUnicode_READY(left) == -1)\n+        return NULL;\n+    if (PyUnicode_READY(right) == -1)\n+        return NULL;\n+\n+    /* Shortcuts */",
            "html_url": "https://github.com/cython/cython/pull/3451#discussion_r398452399",
            "id": 398452399,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ1MjM5OQ==",
            "original_commit_id": "47a920185c9e0cda989641952f6ffb531ee8d9b9",
            "original_position": 61,
            "path": "Cython/Utility/ObjectHandling.c",
            "position": null,
            "pull_request_review_id": 381858156,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3451",
            "updated_at": "2020-03-27T14:22:34Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/398452399",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3451#discussion_r398452997"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3451"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/398452997"
                }
            },
            "author_association": "MEMBER",
            "body": "I'd rather see the length be tested here explicitly.",
            "commit_id": "04b011da7aa5207fde3dbe5c9ac393ff03cfc87c",
            "created_at": "2020-03-26T10:08:45Z",
            "diff_hunk": "@@ -2553,3 +2553,122 @@ static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, CYTHON_UNUSE\n #else\n     #define __Pyx_PyMethod_New PyMethod_New\n #endif\n+\n+/////////////// UnicodeConcatInPlace.proto ////////////////\n+\n+# if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3\n+// __Pyx_PyUnicode_ConcatInPlace may modify the first argument 'left'\n+// However, unlike `PyUnicode_Append` it will never NULL it.\n+// It behaves like a regular function - returns a new reference and NULL on error\n+    #if CYTHON_REFNANNY\n+        #define __Pyx_PyUnicode_ConcatInPlace(left, right) __Pyx_PyUnicode_ConcatInPlaceImpl(&left, right, __pyx_refnanny)\n+    #else\n+        #define __Pyx_PyUnicode_ConcatInPlace(left, right) __Pyx_PyUnicode_ConcatInPlaceImpl(&left, right, NULL)\n+    #endif\n+    // __Pyx_PyUnicode_ConcatInPlace is slightly odd because it has the potential to modify the input\n+    // argument (but only in cases where no user should notice). Therefore, it needs to keep Cython's\n+    // refnanny informed.\n+    static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **p_left, PyObject *right, void* __pyx_refnanny); /* proto */\n+#else\n+#define __Pyx_PyUnicode_ConcatInPlace __Pyx_PyUnicode_Concat\n+#endif\n+#define __Pyx_PyUnicode_ConcatInPlaceSafe(left, right) ((unlikely((left) == Py_None) || unlikely((right) == Py_None)) ? \\\n+    PyNumber_Add(left, right) : __Pyx_PyUnicode_ConcatInPlace(left, right))\n+\n+/////////////// UnicodeConcatInPlace ////////////////\n+//@substitute: naming\n+\n+# if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3\n+// copied directly from unicode_object.c \"unicode_modifiable\n+// removing _PyUnicode_HASH since it's a macro we don't have\n+//  - this is OK because trying PyUnicode_Resize on a non-modifyable\n+//  object will still work, it just won't happen in place\n+static int\n+__Pyx_unicode_modifiable(PyObject *unicode)\n+{\n+    assert(_PyUnicode_CHECK(unicode));\n+    if (Py_REFCNT(unicode) != 1)\n+        return 0;\n+    if (PyUnicode_CHECK_INTERNED(unicode))\n+        return 0;\n+    if (!PyUnicode_CheckExact(unicode))\n+        return 0;\n+#ifdef Py_DEBUG\n+    /* singleton refcount is greater than 1 */\n+    assert(!unicode_is_singleton(unicode));\n+#endif\n+    return 1;\n+}\n+\n+static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **p_left, PyObject *right, void* __pyx_refnanny) {\n+    // heavily based on PyUnicode_Append\n+    PyObject *left = *p_left;\n+    Py_ssize_t left_len, right_len, new_len;\n+\n+    if (PyUnicode_READY(left) == -1)\n+        return NULL;\n+    if (PyUnicode_READY(right) == -1)\n+        return NULL;\n+\n+    /* Shortcuts */\n+    if (left == $empty_unicode) {",
            "html_url": "https://github.com/cython/cython/pull/3451#discussion_r398452997",
            "id": 398452997,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ1Mjk5Nw==",
            "original_commit_id": "47a920185c9e0cda989641952f6ffb531ee8d9b9",
            "original_position": 62,
            "path": "Cython/Utility/ObjectHandling.c",
            "position": null,
            "pull_request_review_id": 381858156,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3451",
            "updated_at": "2020-03-27T14:22:34Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/398452997",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3451#discussion_r398454837"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3451"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/398454837"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    #define __Pyx_PyStr_ConcatInPlace PyNumber_AddInPlace\r\n```",
            "commit_id": "04b011da7aa5207fde3dbe5c9ac393ff03cfc87c",
            "created_at": "2020-03-26T10:11:37Z",
            "diff_hunk": "@@ -2553,3 +2553,122 @@ static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, CYTHON_UNUSE\n #else\n     #define __Pyx_PyMethod_New PyMethod_New\n #endif\n+\n+/////////////// UnicodeConcatInPlace.proto ////////////////\n+\n+# if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3\n+// __Pyx_PyUnicode_ConcatInPlace may modify the first argument 'left'\n+// However, unlike `PyUnicode_Append` it will never NULL it.\n+// It behaves like a regular function - returns a new reference and NULL on error\n+    #if CYTHON_REFNANNY\n+        #define __Pyx_PyUnicode_ConcatInPlace(left, right) __Pyx_PyUnicode_ConcatInPlaceImpl(&left, right, __pyx_refnanny)\n+    #else\n+        #define __Pyx_PyUnicode_ConcatInPlace(left, right) __Pyx_PyUnicode_ConcatInPlaceImpl(&left, right, NULL)\n+    #endif\n+    // __Pyx_PyUnicode_ConcatInPlace is slightly odd because it has the potential to modify the input\n+    // argument (but only in cases where no user should notice). Therefore, it needs to keep Cython's\n+    // refnanny informed.\n+    static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **p_left, PyObject *right, void* __pyx_refnanny); /* proto */\n+#else\n+#define __Pyx_PyUnicode_ConcatInPlace __Pyx_PyUnicode_Concat\n+#endif\n+#define __Pyx_PyUnicode_ConcatInPlaceSafe(left, right) ((unlikely((left) == Py_None) || unlikely((right) == Py_None)) ? \\\n+    PyNumber_Add(left, right) : __Pyx_PyUnicode_ConcatInPlace(left, right))\n+\n+/////////////// UnicodeConcatInPlace ////////////////\n+//@substitute: naming\n+\n+# if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3\n+// copied directly from unicode_object.c \"unicode_modifiable\n+// removing _PyUnicode_HASH since it's a macro we don't have\n+//  - this is OK because trying PyUnicode_Resize on a non-modifyable\n+//  object will still work, it just won't happen in place\n+static int\n+__Pyx_unicode_modifiable(PyObject *unicode)\n+{\n+    assert(_PyUnicode_CHECK(unicode));\n+    if (Py_REFCNT(unicode) != 1)\n+        return 0;\n+    if (PyUnicode_CHECK_INTERNED(unicode))\n+        return 0;\n+    if (!PyUnicode_CheckExact(unicode))\n+        return 0;\n+#ifdef Py_DEBUG\n+    /* singleton refcount is greater than 1 */\n+    assert(!unicode_is_singleton(unicode));\n+#endif\n+    return 1;\n+}\n+\n+static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **p_left, PyObject *right, void* __pyx_refnanny) {\n+    // heavily based on PyUnicode_Append\n+    PyObject *left = *p_left;\n+    Py_ssize_t left_len, right_len, new_len;\n+\n+    if (PyUnicode_READY(left) == -1)\n+        return NULL;\n+    if (PyUnicode_READY(right) == -1)\n+        return NULL;\n+\n+    /* Shortcuts */\n+    if (left == $empty_unicode) {\n+        Py_INCREF(right);\n+        return right;\n+    }\n+    if (right == $empty_unicode) {\n+        Py_INCREF(left);\n+        return left;\n+    }\n+\n+    left_len = PyUnicode_GET_LENGTH(left);\n+    right_len = PyUnicode_GET_LENGTH(right);\n+    if (left_len > PY_SSIZE_T_MAX - right_len) {\n+        PyErr_SetString(PyExc_OverflowError,\n+                        \"strings are too large to concat\");\n+        return NULL;\n+    }\n+    new_len = left_len + right_len;\n+\n+    if (__Pyx_unicode_modifiable(left)\n+        && PyUnicode_CheckExact(right)\n+        && PyUnicode_KIND(right) <= PyUnicode_KIND(left)\n+        /* Don't resize for ascii += latin1. Convert ascii to latin1 requires\n+           to change the structure size, but characters are stored just after\n+           the structure, and so it requires to move all characters which is\n+           not so different than duplicating the string. */\n+        && !(PyUnicode_IS_ASCII(left) && !PyUnicode_IS_ASCII(right))) {\n+\n+        __Pyx_GIVEREF(*p_left);\n+        if (PyUnicode_Resize(p_left, new_len) != 0) {\n+            // on failure PyUnicode_Resize does not deallocate the the input\n+            // so left will remain unchanged - simply undo the giveref\n+            __Pyx_GOTREF(*p_left);\n+            return NULL;\n+        }\n+        __Pyx_INCREF(*p_left);\n+\n+        /* copy 'right' into the newly allocated area of 'left' */\n+        _PyUnicode_FastCopyCharacters(*p_left, left_len, right, 0, right_len);\n+        return *p_left;\n+    } else {\n+        return __Pyx_PyUnicode_Concat(left, right);\n+    }\n+  }\n+#endif\n+\n+////////////// StrConcatInPlace.proto ///////////////////////\n+//@requires: UnicodeConcatInPlace\n+\n+#if PY_MAJOR_VERSION >= 3\n+    // allow access to the more efficient versions where we know str_type is unicode\n+    #define __Pyx_PyStr_Concat __Pyx_PyUnicode_Concat\n+    #define __Pyx_PyStr_ConcatInPlace __Pyx_PyUnicode_ConcatInPlace\n+#else\n+    #define __Pyx_PyStr_Concat PyNumber_Add\n+    #define __Pyx_PyStr_ConcatInPlace PyNumber_Add",
            "html_url": "https://github.com/cython/cython/pull/3451#discussion_r398454837",
            "id": 398454837,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ1NDgzNw==",
            "original_commit_id": "47a920185c9e0cda989641952f6ffb531ee8d9b9",
            "original_position": 116,
            "path": "Cython/Utility/ObjectHandling.c",
            "position": null,
            "pull_request_review_id": 381858156,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3451",
            "updated_at": "2020-03-27T14:22:34Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/398454837",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3451#discussion_r398455093"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3451"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/398455093"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    PyNumber_AddInPlace(a, b) : __Pyx_PyStr_ConcatInPlace(a, b))\r\n```",
            "commit_id": "04b011da7aa5207fde3dbe5c9ac393ff03cfc87c",
            "created_at": "2020-03-26T10:12:05Z",
            "diff_hunk": "@@ -2553,3 +2553,122 @@ static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, CYTHON_UNUSE\n #else\n     #define __Pyx_PyMethod_New PyMethod_New\n #endif\n+\n+/////////////// UnicodeConcatInPlace.proto ////////////////\n+\n+# if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3\n+// __Pyx_PyUnicode_ConcatInPlace may modify the first argument 'left'\n+// However, unlike `PyUnicode_Append` it will never NULL it.\n+// It behaves like a regular function - returns a new reference and NULL on error\n+    #if CYTHON_REFNANNY\n+        #define __Pyx_PyUnicode_ConcatInPlace(left, right) __Pyx_PyUnicode_ConcatInPlaceImpl(&left, right, __pyx_refnanny)\n+    #else\n+        #define __Pyx_PyUnicode_ConcatInPlace(left, right) __Pyx_PyUnicode_ConcatInPlaceImpl(&left, right, NULL)\n+    #endif\n+    // __Pyx_PyUnicode_ConcatInPlace is slightly odd because it has the potential to modify the input\n+    // argument (but only in cases where no user should notice). Therefore, it needs to keep Cython's\n+    // refnanny informed.\n+    static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **p_left, PyObject *right, void* __pyx_refnanny); /* proto */\n+#else\n+#define __Pyx_PyUnicode_ConcatInPlace __Pyx_PyUnicode_Concat\n+#endif\n+#define __Pyx_PyUnicode_ConcatInPlaceSafe(left, right) ((unlikely((left) == Py_None) || unlikely((right) == Py_None)) ? \\\n+    PyNumber_Add(left, right) : __Pyx_PyUnicode_ConcatInPlace(left, right))\n+\n+/////////////// UnicodeConcatInPlace ////////////////\n+//@substitute: naming\n+\n+# if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3\n+// copied directly from unicode_object.c \"unicode_modifiable\n+// removing _PyUnicode_HASH since it's a macro we don't have\n+//  - this is OK because trying PyUnicode_Resize on a non-modifyable\n+//  object will still work, it just won't happen in place\n+static int\n+__Pyx_unicode_modifiable(PyObject *unicode)\n+{\n+    assert(_PyUnicode_CHECK(unicode));\n+    if (Py_REFCNT(unicode) != 1)\n+        return 0;\n+    if (PyUnicode_CHECK_INTERNED(unicode))\n+        return 0;\n+    if (!PyUnicode_CheckExact(unicode))\n+        return 0;\n+#ifdef Py_DEBUG\n+    /* singleton refcount is greater than 1 */\n+    assert(!unicode_is_singleton(unicode));\n+#endif\n+    return 1;\n+}\n+\n+static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **p_left, PyObject *right, void* __pyx_refnanny) {\n+    // heavily based on PyUnicode_Append\n+    PyObject *left = *p_left;\n+    Py_ssize_t left_len, right_len, new_len;\n+\n+    if (PyUnicode_READY(left) == -1)\n+        return NULL;\n+    if (PyUnicode_READY(right) == -1)\n+        return NULL;\n+\n+    /* Shortcuts */\n+    if (left == $empty_unicode) {\n+        Py_INCREF(right);\n+        return right;\n+    }\n+    if (right == $empty_unicode) {\n+        Py_INCREF(left);\n+        return left;\n+    }\n+\n+    left_len = PyUnicode_GET_LENGTH(left);\n+    right_len = PyUnicode_GET_LENGTH(right);\n+    if (left_len > PY_SSIZE_T_MAX - right_len) {\n+        PyErr_SetString(PyExc_OverflowError,\n+                        \"strings are too large to concat\");\n+        return NULL;\n+    }\n+    new_len = left_len + right_len;\n+\n+    if (__Pyx_unicode_modifiable(left)\n+        && PyUnicode_CheckExact(right)\n+        && PyUnicode_KIND(right) <= PyUnicode_KIND(left)\n+        /* Don't resize for ascii += latin1. Convert ascii to latin1 requires\n+           to change the structure size, but characters are stored just after\n+           the structure, and so it requires to move all characters which is\n+           not so different than duplicating the string. */\n+        && !(PyUnicode_IS_ASCII(left) && !PyUnicode_IS_ASCII(right))) {\n+\n+        __Pyx_GIVEREF(*p_left);\n+        if (PyUnicode_Resize(p_left, new_len) != 0) {\n+            // on failure PyUnicode_Resize does not deallocate the the input\n+            // so left will remain unchanged - simply undo the giveref\n+            __Pyx_GOTREF(*p_left);\n+            return NULL;\n+        }\n+        __Pyx_INCREF(*p_left);\n+\n+        /* copy 'right' into the newly allocated area of 'left' */\n+        _PyUnicode_FastCopyCharacters(*p_left, left_len, right, 0, right_len);\n+        return *p_left;\n+    } else {\n+        return __Pyx_PyUnicode_Concat(left, right);\n+    }\n+  }\n+#endif\n+\n+////////////// StrConcatInPlace.proto ///////////////////////\n+//@requires: UnicodeConcatInPlace\n+\n+#if PY_MAJOR_VERSION >= 3\n+    // allow access to the more efficient versions where we know str_type is unicode\n+    #define __Pyx_PyStr_Concat __Pyx_PyUnicode_Concat\n+    #define __Pyx_PyStr_ConcatInPlace __Pyx_PyUnicode_ConcatInPlace\n+#else\n+    #define __Pyx_PyStr_Concat PyNumber_Add\n+    #define __Pyx_PyStr_ConcatInPlace PyNumber_Add\n+#endif\n+#define __Pyx_PyStr_ConcatSafe(a, b) ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \\\n+    PyNumber_Add(a, b) : __Pyx_PyStr_Concat(a, b))\n+#define __Pyx_PyStr_ConcatInPlaceSafe(a, b) ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \\\n+    PyNumber_Add(a, b) : __Pyx_PyStr_ConcatInPlace(a, b))",
            "html_url": "https://github.com/cython/cython/pull/3451#discussion_r398455093",
            "id": 398455093,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ1NTA5Mw==",
            "original_commit_id": "47a920185c9e0cda989641952f6ffb531ee8d9b9",
            "original_position": 121,
            "path": "Cython/Utility/ObjectHandling.c",
            "position": null,
            "pull_request_review_id": 381858156,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3451",
            "updated_at": "2020-03-27T14:22:34Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/398455093",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3451#discussion_r398457155"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3451"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/398457155"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    PyNumber_AddInPlace(left, right) : __Pyx_PyUnicode_ConcatInPlace(left, right))\r\n```",
            "commit_id": "04b011da7aa5207fde3dbe5c9ac393ff03cfc87c",
            "created_at": "2020-03-26T10:15:25Z",
            "diff_hunk": "@@ -2553,3 +2553,122 @@ static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, CYTHON_UNUSE\n #else\n     #define __Pyx_PyMethod_New PyMethod_New\n #endif\n+\n+/////////////// UnicodeConcatInPlace.proto ////////////////\n+\n+# if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3\n+// __Pyx_PyUnicode_ConcatInPlace may modify the first argument 'left'\n+// However, unlike `PyUnicode_Append` it will never NULL it.\n+// It behaves like a regular function - returns a new reference and NULL on error\n+    #if CYTHON_REFNANNY\n+        #define __Pyx_PyUnicode_ConcatInPlace(left, right) __Pyx_PyUnicode_ConcatInPlaceImpl(&left, right, __pyx_refnanny)\n+    #else\n+        #define __Pyx_PyUnicode_ConcatInPlace(left, right) __Pyx_PyUnicode_ConcatInPlaceImpl(&left, right, NULL)\n+    #endif\n+    // __Pyx_PyUnicode_ConcatInPlace is slightly odd because it has the potential to modify the input\n+    // argument (but only in cases where no user should notice). Therefore, it needs to keep Cython's\n+    // refnanny informed.\n+    static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **p_left, PyObject *right, void* __pyx_refnanny); /* proto */\n+#else\n+#define __Pyx_PyUnicode_ConcatInPlace __Pyx_PyUnicode_Concat\n+#endif\n+#define __Pyx_PyUnicode_ConcatInPlaceSafe(left, right) ((unlikely((left) == Py_None) || unlikely((right) == Py_None)) ? \\\n+    PyNumber_Add(left, right) : __Pyx_PyUnicode_ConcatInPlace(left, right))",
            "html_url": "https://github.com/cython/cython/pull/3451#discussion_r398457155",
            "id": 398457155,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ1NzE1NQ==",
            "original_commit_id": "47a920185c9e0cda989641952f6ffb531ee8d9b9",
            "original_position": 24,
            "path": "Cython/Utility/ObjectHandling.c",
            "position": null,
            "pull_request_review_id": 381858156,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3451",
            "updated_at": "2020-03-27T14:22:34Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/398457155",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3451#discussion_r398470402"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3451"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/398470402"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I've updated these and other suggestions. I think it's `PyNumber_InplaceAdd` though.",
            "commit_id": "04b011da7aa5207fde3dbe5c9ac393ff03cfc87c",
            "created_at": "2020-03-26T10:37:05Z",
            "diff_hunk": "@@ -2553,3 +2553,122 @@ static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, CYTHON_UNUSE\n #else\n     #define __Pyx_PyMethod_New PyMethod_New\n #endif\n+\n+/////////////// UnicodeConcatInPlace.proto ////////////////\n+\n+# if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3\n+// __Pyx_PyUnicode_ConcatInPlace may modify the first argument 'left'\n+// However, unlike `PyUnicode_Append` it will never NULL it.\n+// It behaves like a regular function - returns a new reference and NULL on error\n+    #if CYTHON_REFNANNY\n+        #define __Pyx_PyUnicode_ConcatInPlace(left, right) __Pyx_PyUnicode_ConcatInPlaceImpl(&left, right, __pyx_refnanny)\n+    #else\n+        #define __Pyx_PyUnicode_ConcatInPlace(left, right) __Pyx_PyUnicode_ConcatInPlaceImpl(&left, right, NULL)\n+    #endif\n+    // __Pyx_PyUnicode_ConcatInPlace is slightly odd because it has the potential to modify the input\n+    // argument (but only in cases where no user should notice). Therefore, it needs to keep Cython's\n+    // refnanny informed.\n+    static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **p_left, PyObject *right, void* __pyx_refnanny); /* proto */\n+#else\n+#define __Pyx_PyUnicode_ConcatInPlace __Pyx_PyUnicode_Concat\n+#endif\n+#define __Pyx_PyUnicode_ConcatInPlaceSafe(left, right) ((unlikely((left) == Py_None) || unlikely((right) == Py_None)) ? \\\n+    PyNumber_Add(left, right) : __Pyx_PyUnicode_ConcatInPlace(left, right))",
            "html_url": "https://github.com/cython/cython/pull/3451#discussion_r398470402",
            "id": 398470402,
            "in_reply_to_id": 398457155,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ3MDQwMg==",
            "original_commit_id": "47a920185c9e0cda989641952f6ffb531ee8d9b9",
            "original_position": 24,
            "path": "Cython/Utility/ObjectHandling.c",
            "position": null,
            "pull_request_review_id": 381882873,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3451",
            "updated_at": "2020-03-27T14:22:34Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/398470402",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3451#discussion_r399297145"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3451"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/399297145"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    left_len = PyUnicode_GET_LENGTH(left);\r\n    if (left_len == 0) {\r\n        Py_INCREF(right);\r\n        return right;\r\n    }\r\n    right_len = PyUnicode_GET_LENGTH(right);\r\n    if (right_len == 0) {\r\n        Py_INCREF(left);\r\n        return left;\r\n    }\r\n```",
            "commit_id": "04b011da7aa5207fde3dbe5c9ac393ff03cfc87c",
            "created_at": "2020-03-27T14:18:26Z",
            "diff_hunk": "@@ -2553,3 +2553,116 @@ static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, CYTHON_UNUSE\n #else\n     #define __Pyx_PyMethod_New PyMethod_New\n #endif\n+\n+/////////////// UnicodeConcatInPlace.proto ////////////////\n+\n+# if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3\n+// __Pyx_PyUnicode_ConcatInPlace may modify the first argument 'left'\n+// However, unlike `PyUnicode_Append` it will never NULL it.\n+// It behaves like a regular function - returns a new reference and NULL on error\n+    #if CYTHON_REFNANNY\n+        #define __Pyx_PyUnicode_ConcatInPlace(left, right) __Pyx_PyUnicode_ConcatInPlaceImpl(&left, right, __pyx_refnanny)\n+    #else\n+        #define __Pyx_PyUnicode_ConcatInPlace(left, right) __Pyx_PyUnicode_ConcatInPlaceImpl(&left, right, NULL)\n+    #endif\n+    // __Pyx_PyUnicode_ConcatInPlace is slightly odd because it has the potential to modify the input\n+    // argument (but only in cases where no user should notice). Therefore, it needs to keep Cython's\n+    // refnanny informed.\n+    static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **p_left, PyObject *right, void* __pyx_refnanny); /* proto */\n+#else\n+#define __Pyx_PyUnicode_ConcatInPlace __Pyx_PyUnicode_Concat\n+#endif\n+#define __Pyx_PyUnicode_ConcatInPlaceSafe(left, right) ((unlikely((left) == Py_None) || unlikely((right) == Py_None)) ? \\\n+    PyNumber_InPlaceAdd(left, right) : __Pyx_PyUnicode_ConcatInPlace(left, right))\n+\n+/////////////// UnicodeConcatInPlace ////////////////\n+//@substitute: naming\n+\n+# if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3\n+// copied directly from unicode_object.c \"unicode_modifiable\n+// removing _PyUnicode_HASH since it's a macro we don't have\n+//  - this is OK because trying PyUnicode_Resize on a non-modifyable\n+//  object will still work, it just won't happen in place\n+static int\n+__Pyx_unicode_modifiable(PyObject *unicode)\n+{\n+    if (Py_REFCNT(unicode) != 1)\n+        return 0;\n+    if (!PyUnicode_CheckExact(unicode))\n+        return 0;\n+    if (PyUnicode_CHECK_INTERNED(unicode))\n+        return 0;\n+    return 1;\n+}\n+\n+static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **p_left, PyObject *right, void* __pyx_refnanny) {\n+    // heavily based on PyUnicode_Append\n+    PyObject *left = *p_left;\n+    Py_ssize_t left_len, right_len, new_len;\n+\n+    if (PyUnicode_READY(left) == -1)\n+        return NULL;\n+    if (PyUnicode_READY(right) == -1)\n+        return NULL;\n+\n+    // Shortcuts\n+    if (PyUnicode_GET_LENGTH(left) == 0) {\n+        Py_INCREF(right);\n+        return right;\n+    }\n+    if (PyUnicode_GET_LENGTH(right) == 0) {\n+        Py_INCREF(left);\n+        return left;\n+    }\n+\n+    left_len = PyUnicode_GET_LENGTH(left);\n+    right_len = PyUnicode_GET_LENGTH(right);",
            "html_url": "https://github.com/cython/cython/pull/3451#discussion_r399297145",
            "id": 399297145,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI5NzE0NQ==",
            "original_commit_id": "dfdff6933956573dc186cf384b7d568944c2842f",
            "original_position": 67,
            "path": "Cython/Utility/ObjectHandling.c",
            "position": null,
            "pull_request_review_id": 382898642,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3451",
            "updated_at": "2020-03-27T14:22:34Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/399297145",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3451#discussion_r399297673"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3451"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/399297673"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    if (__Pyx_unicode_modifiable(left)\r\n            && PyUnicode_CheckExact(right)\r\n            && PyUnicode_KIND(right) <= PyUnicode_KIND(left)\r\n            // Don't resize for ascii += latin1. Convert ascii to latin1 requires\r\n            //   to change the structure size, but characters are stored just after\r\n            //   the structure, and so it requires to move all characters which is\r\n            //   not so different than duplicating the string.\r\n            && !(PyUnicode_IS_ASCII(left) && !PyUnicode_IS_ASCII(right))) {\r\n```",
            "commit_id": "04b011da7aa5207fde3dbe5c9ac393ff03cfc87c",
            "created_at": "2020-03-27T14:19:08Z",
            "diff_hunk": "@@ -2553,3 +2553,116 @@ static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, CYTHON_UNUSE\n #else\n     #define __Pyx_PyMethod_New PyMethod_New\n #endif\n+\n+/////////////// UnicodeConcatInPlace.proto ////////////////\n+\n+# if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3\n+// __Pyx_PyUnicode_ConcatInPlace may modify the first argument 'left'\n+// However, unlike `PyUnicode_Append` it will never NULL it.\n+// It behaves like a regular function - returns a new reference and NULL on error\n+    #if CYTHON_REFNANNY\n+        #define __Pyx_PyUnicode_ConcatInPlace(left, right) __Pyx_PyUnicode_ConcatInPlaceImpl(&left, right, __pyx_refnanny)\n+    #else\n+        #define __Pyx_PyUnicode_ConcatInPlace(left, right) __Pyx_PyUnicode_ConcatInPlaceImpl(&left, right, NULL)\n+    #endif\n+    // __Pyx_PyUnicode_ConcatInPlace is slightly odd because it has the potential to modify the input\n+    // argument (but only in cases where no user should notice). Therefore, it needs to keep Cython's\n+    // refnanny informed.\n+    static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **p_left, PyObject *right, void* __pyx_refnanny); /* proto */\n+#else\n+#define __Pyx_PyUnicode_ConcatInPlace __Pyx_PyUnicode_Concat\n+#endif\n+#define __Pyx_PyUnicode_ConcatInPlaceSafe(left, right) ((unlikely((left) == Py_None) || unlikely((right) == Py_None)) ? \\\n+    PyNumber_InPlaceAdd(left, right) : __Pyx_PyUnicode_ConcatInPlace(left, right))\n+\n+/////////////// UnicodeConcatInPlace ////////////////\n+//@substitute: naming\n+\n+# if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3\n+// copied directly from unicode_object.c \"unicode_modifiable\n+// removing _PyUnicode_HASH since it's a macro we don't have\n+//  - this is OK because trying PyUnicode_Resize on a non-modifyable\n+//  object will still work, it just won't happen in place\n+static int\n+__Pyx_unicode_modifiable(PyObject *unicode)\n+{\n+    if (Py_REFCNT(unicode) != 1)\n+        return 0;\n+    if (!PyUnicode_CheckExact(unicode))\n+        return 0;\n+    if (PyUnicode_CHECK_INTERNED(unicode))\n+        return 0;\n+    return 1;\n+}\n+\n+static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **p_left, PyObject *right, void* __pyx_refnanny) {\n+    // heavily based on PyUnicode_Append\n+    PyObject *left = *p_left;\n+    Py_ssize_t left_len, right_len, new_len;\n+\n+    if (PyUnicode_READY(left) == -1)\n+        return NULL;\n+    if (PyUnicode_READY(right) == -1)\n+        return NULL;\n+\n+    // Shortcuts\n+    if (PyUnicode_GET_LENGTH(left) == 0) {\n+        Py_INCREF(right);\n+        return right;\n+    }\n+    if (PyUnicode_GET_LENGTH(right) == 0) {\n+        Py_INCREF(left);\n+        return left;\n+    }\n+\n+    left_len = PyUnicode_GET_LENGTH(left);\n+    right_len = PyUnicode_GET_LENGTH(right);\n+    if (left_len > PY_SSIZE_T_MAX - right_len) {\n+        PyErr_SetString(PyExc_OverflowError,\n+                        \"strings are too large to concat\");\n+        return NULL;\n+    }\n+    new_len = left_len + right_len;\n+\n+    if (__Pyx_unicode_modifiable(left)\n+        && PyUnicode_CheckExact(right)\n+        && PyUnicode_KIND(right) <= PyUnicode_KIND(left)\n+        // Don't resize for ascii += latin1. Convert ascii to latin1 requires\n+        //   to change the structure size, but characters are stored just after\n+        //   the structure, and so it requires to move all characters which is\n+        //   not so different than duplicating the string.\n+        && !(PyUnicode_IS_ASCII(left) && !PyUnicode_IS_ASCII(right))) {",
            "html_url": "https://github.com/cython/cython/pull/3451#discussion_r399297673",
            "id": 399297673,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI5NzY3Mw==",
            "original_commit_id": "dfdff6933956573dc186cf384b7d568944c2842f",
            "original_position": 82,
            "path": "Cython/Utility/ObjectHandling.c",
            "position": null,
            "pull_request_review_id": 382898642,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3451",
            "updated_at": "2020-03-27T14:22:34Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/399297673",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/cython/cython/issues/3451/comments",
    "commit_data": [
        {
            "author": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/f8e396843b52f5758bdffcbfe2088a6c4643c42d/comments",
            "commit": {
                "author": {
                    "date": "2020-03-15T17:45:39Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-03-15T17:45:39Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Only used PyUnicode_Concat on unicode objects\n\nhttps://github.com/cython/cython/issues/3426",
                "tree": {
                    "sha": "850d6871066e21e7df12908d80ea5632c0d7fe8d",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/850d6871066e21e7df12908d80ea5632c0d7fe8d"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/f8e396843b52f5758bdffcbfe2088a6c4643c42d",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/f8e396843b52f5758bdffcbfe2088a6c4643c42d",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6ZjhlMzk2ODQzYjUyZjU3NThiZGZmY2JmZTIwODhhNmM0NjQzYzQyZA==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/bd990e4a3a3f821b395b58e6d68b0bbd8f406241",
                    "sha": "bd990e4a3a3f821b395b58e6d68b0bbd8f406241",
                    "url": "https://api.github.com/repos/cython/cython/commits/bd990e4a3a3f821b395b58e6d68b0bbd8f406241"
                }
            ],
            "sha": "f8e396843b52f5758bdffcbfe2088a6c4643c42d",
            "url": "https://api.github.com/repos/cython/cython/commits/f8e396843b52f5758bdffcbfe2088a6c4643c42d"
        },
        {
            "author": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/6c4a0d9a09642e576a52c129f40a44d56cad6d35/comments",
            "commit": {
                "author": {
                    "date": "2020-03-16T15:52:32Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-03-16T15:52:32Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Update tests/run/test_unicode_string_tests.pxi\n\nCo-Authored-By: Stefan Behnel <stefan_ml@behnel.de>",
                "tree": {
                    "sha": "088e376fbd660cd7b13fc5f5b4c92109b9b0f3af",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/088e376fbd660cd7b13fc5f5b4c92109b9b0f3af"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/6c4a0d9a09642e576a52c129f40a44d56cad6d35",
                "verification": {
                    "payload": "tree 088e376fbd660cd7b13fc5f5b4c92109b9b0f3af\nparent f8e396843b52f5758bdffcbfe2088a6c4643c42d\nauthor da-woods <dw-git@d-woods.co.uk> 1584373952 +0000\ncommitter GitHub <noreply@github.com> 1584373952 +0000\n\nUpdate tests/run/test_unicode_string_tests.pxi\n\nCo-Authored-By: Stefan Behnel <stefan_ml@behnel.de>",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeb6DACRBK7hj4Ov3rIwAAdHIIAFrTZwK8Ou6UJfRcl8O28sQE\nIJ3G/qY3FifK37yk5rBJhdBhyL6OMK4RzJTjB3uF3arPkyARZtaGvP7uuML3O3RA\noEtLoqzvFjWjCzkYBTUoQA1Prfo4Y/qkGIU7STkG+wdqldwQOMDOmFVJXoS9StT+\nsEU66UafQxvjS8ZqDqBzhOEM99LK1ZNOzl+pOrs635y/lDcT/wovVrPlR4835Czc\nYJEj5FmHOATHPXp2T50QEdtaMDiwkIZWN2TXC4tCYRvzFasPzT/xr0/H5idw8gfj\nnYR7nwiVijrJZU0RkfUGo1r+bkME1qWr6PKFNviCEPhEw3GP8VPq2cpXoUEwwwg=\n=djM+\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/6c4a0d9a09642e576a52c129f40a44d56cad6d35",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6NmM0YTBkOWEwOTY0MmU1NzZhNTJjMTI5ZjQwYTQ0ZDU2Y2FkNmQzNQ==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/f8e396843b52f5758bdffcbfe2088a6c4643c42d",
                    "sha": "f8e396843b52f5758bdffcbfe2088a6c4643c42d",
                    "url": "https://api.github.com/repos/cython/cython/commits/f8e396843b52f5758bdffcbfe2088a6c4643c42d"
                }
            ],
            "sha": "6c4a0d9a09642e576a52c129f40a44d56cad6d35",
            "url": "https://api.github.com/repos/cython/cython/commits/6c4a0d9a09642e576a52c129f40a44d56cad6d35"
        },
        {
            "author": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/7ef92d367a52c8d837081ba613f428dce5eb666d/comments",
            "commit": {
                "author": {
                    "date": "2020-03-16T19:39:59Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-03-16T19:39:59Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Optimized for string_type as well as unicode_type",
                "tree": {
                    "sha": "01500c8df69961e707e4e14ebcf6e6d020e0c26f",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/01500c8df69961e707e4e14ebcf6e6d020e0c26f"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/7ef92d367a52c8d837081ba613f428dce5eb666d",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/7ef92d367a52c8d837081ba613f428dce5eb666d",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6N2VmOTJkMzY3YTUyYzhkODM3MDgxYmE2MTNmNDI4ZGNlNWViNjY2ZA==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/6c4a0d9a09642e576a52c129f40a44d56cad6d35",
                    "sha": "6c4a0d9a09642e576a52c129f40a44d56cad6d35",
                    "url": "https://api.github.com/repos/cython/cython/commits/6c4a0d9a09642e576a52c129f40a44d56cad6d35"
                }
            ],
            "sha": "7ef92d367a52c8d837081ba613f428dce5eb666d",
            "url": "https://api.github.com/repos/cython/cython/commits/7ef92d367a52c8d837081ba613f428dce5eb666d"
        },
        {
            "author": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/7d2608ecb96c6e4194490c6804368b41a2591ba7/comments",
            "commit": {
                "author": {
                    "date": "2020-03-16T21:47:59Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-03-16T21:47:59Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Optimized (some) inplace operations\n\nOptimized inplace operations for bytes and unicode so that they're\ngenuinely done in place if no-one else needs the object. This\nis what CPython tries to do (and was a string concatenation was\na point where it significantly beat Cython at times)\n\nThis only works if the types are known at compile time, so with\nunknown types CPython will still be faster in some cases",
                "tree": {
                    "sha": "05a5abefb65cc356df429369378ff2ba4711c715",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/05a5abefb65cc356df429369378ff2ba4711c715"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/7d2608ecb96c6e4194490c6804368b41a2591ba7",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/7d2608ecb96c6e4194490c6804368b41a2591ba7",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6N2QyNjA4ZWNiOTZjNmU0MTk0NDkwYzY4MDQzNjhiNDFhMjU5MWJhNw==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/7ef92d367a52c8d837081ba613f428dce5eb666d",
                    "sha": "7ef92d367a52c8d837081ba613f428dce5eb666d",
                    "url": "https://api.github.com/repos/cython/cython/commits/7ef92d367a52c8d837081ba613f428dce5eb666d"
                }
            ],
            "sha": "7d2608ecb96c6e4194490c6804368b41a2591ba7",
            "url": "https://api.github.com/repos/cython/cython/commits/7d2608ecb96c6e4194490c6804368b41a2591ba7"
        },
        {
            "author": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/1e55b85ae0c6cee30307e40055f269cff2a1282d/comments",
            "commit": {
                "author": {
                    "date": "2020-03-16T22:30:41Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-03-16T22:30:41Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Revert \"Optimized (some) inplace operations\"\n\nThis reverts commit 7d2608ecb96c6e4194490c6804368b41a2591ba7.",
                "tree": {
                    "sha": "01500c8df69961e707e4e14ebcf6e6d020e0c26f",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/01500c8df69961e707e4e14ebcf6e6d020e0c26f"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/1e55b85ae0c6cee30307e40055f269cff2a1282d",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/1e55b85ae0c6cee30307e40055f269cff2a1282d",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6MWU1NWI4NWFlMGM2Y2VlMzAzMDdlNDAwNTVmMjY5Y2ZmMmExMjgyZA==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/7d2608ecb96c6e4194490c6804368b41a2591ba7",
                    "sha": "7d2608ecb96c6e4194490c6804368b41a2591ba7",
                    "url": "https://api.github.com/repos/cython/cython/commits/7d2608ecb96c6e4194490c6804368b41a2591ba7"
                }
            ],
            "sha": "1e55b85ae0c6cee30307e40055f269cff2a1282d",
            "url": "https://api.github.com/repos/cython/cython/commits/1e55b85ae0c6cee30307e40055f269cff2a1282d"
        },
        {
            "author": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/e8ea61dba2387a519c53884fa16bc405e53d70da/comments",
            "commit": {
                "author": {
                    "date": "2020-03-17T07:44:15Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-03-17T07:44:15Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Corrected choice with str_type\n\nBetter if unicode concat is done with more settings of str_type",
                "tree": {
                    "sha": "8be9096158bf965f56e733afebb9a09e80ca9d7c",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/8be9096158bf965f56e733afebb9a09e80ca9d7c"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/e8ea61dba2387a519c53884fa16bc405e53d70da",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/e8ea61dba2387a519c53884fa16bc405e53d70da",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6ZThlYTYxZGJhMjM4N2E1MTljNTM4ODRmYTE2YmM0MDVlNTNkNzBkYQ==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/1e55b85ae0c6cee30307e40055f269cff2a1282d",
                    "sha": "1e55b85ae0c6cee30307e40055f269cff2a1282d",
                    "url": "https://api.github.com/repos/cython/cython/commits/1e55b85ae0c6cee30307e40055f269cff2a1282d"
                }
            ],
            "sha": "e8ea61dba2387a519c53884fa16bc405e53d70da",
            "url": "https://api.github.com/repos/cython/cython/commits/e8ea61dba2387a519c53884fa16bc405e53d70da"
        },
        {
            "author": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/f51e54e71a0d43bf6cc0cd96ce423d406075e7f8/comments",
            "commit": {
                "author": {
                    "date": "2020-03-17T10:54:41Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-03-17T10:54:41Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Do unicode/bytes concatenation inplace if possible\n\nNotes:\n* Slightly odd-macro trickery - does modify the input argument too\n(although only in places where it shouldn't matter - but potentially\nshould  we worry about XDECREF?)\n* Doesn't (yet) happen on str_type+str_type on language_level=2/3str\nbecause the type of str_type isn't known at the Cythonizing stage\n* Doesn't (and probably can't) happen in cases where Cython hasn't\nidentified the types correctly and is just using PyNumber_Add.\n* For:\n\n    try:\n       a += \"a\"\n    except:\n       # stuff\n\n  `a` will be NULL in stuff. The only exception we should be able\nto get is `MemoryError` and the CPython interpretter shows the same\nbehaviour in principle (it's noted as an issue in `ceval` for Python2",
                "tree": {
                    "sha": "d2a70f77c8e6f200b6cb504c7fcae2f26b49cbbf",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/d2a70f77c8e6f200b6cb504c7fcae2f26b49cbbf"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/f51e54e71a0d43bf6cc0cd96ce423d406075e7f8",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/f51e54e71a0d43bf6cc0cd96ce423d406075e7f8",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6ZjUxZTU0ZTcxYTBkNDNiZjZjYzBjZDk2Y2U0MjNkNDA2MDc1ZTdmOA==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/e8ea61dba2387a519c53884fa16bc405e53d70da",
                    "sha": "e8ea61dba2387a519c53884fa16bc405e53d70da",
                    "url": "https://api.github.com/repos/cython/cython/commits/e8ea61dba2387a519c53884fa16bc405e53d70da"
                }
            ],
            "sha": "f51e54e71a0d43bf6cc0cd96ce423d406075e7f8",
            "url": "https://api.github.com/repos/cython/cython/commits/f51e54e71a0d43bf6cc0cd96ce423d406075e7f8"
        },
        {
            "author": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/0c571a851012ccf65d48d86c1791bd0009472f90/comments",
            "commit": {
                "author": {
                    "date": "2020-03-20T17:50:36Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-03-20T17:50:36Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Removed unnecessary language_level test",
                "tree": {
                    "sha": "f3b5bd56d0aaf3156bae87531ddf46f39d11afc6",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/f3b5bd56d0aaf3156bae87531ddf46f39d11afc6"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/0c571a851012ccf65d48d86c1791bd0009472f90",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/0c571a851012ccf65d48d86c1791bd0009472f90",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6MGM1NzFhODUxMDEyY2NmNjVkNDhkODZjMTc5MWJkMDAwOTQ3MmY5MA==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/e8ea61dba2387a519c53884fa16bc405e53d70da",
                    "sha": "e8ea61dba2387a519c53884fa16bc405e53d70da",
                    "url": "https://api.github.com/repos/cython/cython/commits/e8ea61dba2387a519c53884fa16bc405e53d70da"
                }
            ],
            "sha": "0c571a851012ccf65d48d86c1791bd0009472f90",
            "url": "https://api.github.com/repos/cython/cython/commits/0c571a851012ccf65d48d86c1791bd0009472f90"
        },
        {
            "author": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/5dcb4b6bf98f70096b64e108d4dfbbc8aa3f9036/comments",
            "commit": {
                "author": {
                    "date": "2020-03-21T09:53:07Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-03-21T09:53:07Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Re-added FormattedValueNode check",
                "tree": {
                    "sha": "a3fe2b8b7ecac6a4aad42c8c05601e112347a075",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/a3fe2b8b7ecac6a4aad42c8c05601e112347a075"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/5dcb4b6bf98f70096b64e108d4dfbbc8aa3f9036",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/5dcb4b6bf98f70096b64e108d4dfbbc8aa3f9036",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6NWRjYjRiNmJmOThmNzAwOTZiNjRlMTA4ZDRkZmJiYzhhYTNmOTAzNg==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/0c571a851012ccf65d48d86c1791bd0009472f90",
                    "sha": "0c571a851012ccf65d48d86c1791bd0009472f90",
                    "url": "https://api.github.com/repos/cython/cython/commits/0c571a851012ccf65d48d86c1791bd0009472f90"
                }
            ],
            "sha": "5dcb4b6bf98f70096b64e108d4dfbbc8aa3f9036",
            "url": "https://api.github.com/repos/cython/cython/commits/5dcb4b6bf98f70096b64e108d4dfbbc8aa3f9036"
        },
        {
            "author": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/3996f05394b32d9e65a63ce87066e963c47dca8d/comments",
            "commit": {
                "author": {
                    "date": "2020-03-21T10:05:44Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-03-21T10:05:44Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Changed format of PYPY if statements",
                "tree": {
                    "sha": "96e1d34153d8ac441bf2e118b67b4de97488dcb4",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/96e1d34153d8ac441bf2e118b67b4de97488dcb4"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/3996f05394b32d9e65a63ce87066e963c47dca8d",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/3996f05394b32d9e65a63ce87066e963c47dca8d",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6Mzk5NmYwNTM5NGIzMmQ5ZTY1YTYzY2U4NzA2NmU5NjNjNDdkY2E4ZA==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/f51e54e71a0d43bf6cc0cd96ce423d406075e7f8",
                    "sha": "f51e54e71a0d43bf6cc0cd96ce423d406075e7f8",
                    "url": "https://api.github.com/repos/cython/cython/commits/f51e54e71a0d43bf6cc0cd96ce423d406075e7f8"
                }
            ],
            "sha": "3996f05394b32d9e65a63ce87066e963c47dca8d",
            "url": "https://api.github.com/repos/cython/cython/commits/3996f05394b32d9e65a63ce87066e963c47dca8d"
        },
        {
            "author": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/19738c223050e4077f6b32829002d8b893c11cea/comments",
            "commit": {
                "author": {
                    "date": "2020-03-21T10:17:29Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-03-21T10:17:29Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Refactor conditions to make them more extensible and (hopefully) also clearer.",
                "tree": {
                    "sha": "9e5244e60df7844919f33551904f0c0ac7c23475",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/9e5244e60df7844919f33551904f0c0ac7c23475"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/19738c223050e4077f6b32829002d8b893c11cea",
                "verification": {
                    "payload": "tree 9e5244e60df7844919f33551904f0c0ac7c23475\nparent 5dcb4b6bf98f70096b64e108d4dfbbc8aa3f9036\nauthor Stefan Behnel <stefan_ml@behnel.de> 1584785849 +0100\ncommitter GitHub <noreply@github.com> 1584785849 +0100\n\nRefactor conditions to make them more extensible and (hopefully) also clearer.",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJedem5CRBK7hj4Ov3rIwAAdHIIAIzy240NJL6HpjNUFK99G/aj\nZTks4MlIUk+Gr/XsFjSF+JWgTkcQkCaGdCVUYKS2VGbTSWrI54bgMAI9Rn5GCfnG\n5DccXpd4u543iSX1A7ifGktNrbk0ufdYvOjMzl7mYHkJdSPdbAGSxmKeNLu89Nsf\nwulNhUmhxiTHdfQ5L0q6VfX1ZHRUOtx5kYw6fCkX3YtOn3psj5fJN/y7ebSq6v+2\nNzCmwwjbG3Bd/35de9k5rogDFZ5GufaUz9yNYhMMyqRvqB3t8RT5Aniuy4UsRCaW\n4lmTgI6RtT1+rSPXvEX6DI62SCdT/D4yxASQrhCSigee+3ZNeL0WH85L9Tetdnk=\n=7kiz\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/19738c223050e4077f6b32829002d8b893c11cea",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6MTk3MzhjMjIzMDUwZTQwNzdmNmIzMjgyOTAwMmQ4Yjg5M2MxMWNlYQ==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/5dcb4b6bf98f70096b64e108d4dfbbc8aa3f9036",
                    "sha": "5dcb4b6bf98f70096b64e108d4dfbbc8aa3f9036",
                    "url": "https://api.github.com/repos/cython/cython/commits/5dcb4b6bf98f70096b64e108d4dfbbc8aa3f9036"
                }
            ],
            "sha": "19738c223050e4077f6b32829002d8b893c11cea",
            "url": "https://api.github.com/repos/cython/cython/commits/19738c223050e4077f6b32829002d8b893c11cea"
        },
        {
            "author": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/f1dcd0ca13695464b8180f4d2e495058f6970933/comments",
            "commit": {
                "author": {
                    "date": "2020-03-21T11:17:31Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-03-21T11:17:31Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Added general support for string concatentation in PyNumber_Add\n\n(Also tried to make odd macros clearer where possible)",
                "tree": {
                    "sha": "81c4e0abaf678733d3037e39269d9210848e34f4",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/81c4e0abaf678733d3037e39269d9210848e34f4"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/f1dcd0ca13695464b8180f4d2e495058f6970933",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/f1dcd0ca13695464b8180f4d2e495058f6970933",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6ZjFkY2QwY2ExMzY5NTQ2NGI4MTgwZjRkMmU0OTUwNThmNjk3MDkzMw==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/3996f05394b32d9e65a63ce87066e963c47dca8d",
                    "sha": "3996f05394b32d9e65a63ce87066e963c47dca8d",
                    "url": "https://api.github.com/repos/cython/cython/commits/3996f05394b32d9e65a63ce87066e963c47dca8d"
                }
            ],
            "sha": "f1dcd0ca13695464b8180f4d2e495058f6970933",
            "url": "https://api.github.com/repos/cython/cython/commits/f1dcd0ca13695464b8180f4d2e495058f6970933"
        },
        {
            "author": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/a9431d8c5bf48475591b6468f04df09eb3a3211b/comments",
            "commit": {
                "author": {
                    "date": "2020-03-17T10:54:41Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-03-21T11:24:11Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Do unicode/bytes concatenation inplace if possible\n\nNotes:\n* Slightly odd-macro trickery - does modify the input argument too\n(although only in places where it shouldn't matter - but potentially\nshould  we worry about XDECREF?)\n* Doesn't (yet) happen on str_type+str_type on language_level=2/3str\nbecause the type of str_type isn't known at the Cythonizing stage\n* Doesn't (and probably can't) happen in cases where Cython hasn't\nidentified the types correctly and is just using PyNumber_Add.\n* For:\n\n    try:\n       a += \"a\"\n    except:\n       # stuff\n\n  `a` will be NULL in stuff. The only exception we should be able\nto get is `MemoryError` and the CPython interpretter shows the same\nbehaviour in principle (it's noted as an issue in `ceval` for Python2",
                "tree": {
                    "sha": "103b4ba4eff5da9c6f2abb3a5704e4af66d3e43d",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/103b4ba4eff5da9c6f2abb3a5704e4af66d3e43d"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/a9431d8c5bf48475591b6468f04df09eb3a3211b",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/a9431d8c5bf48475591b6468f04df09eb3a3211b",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6YTk0MzFkOGM1YmY0ODQ3NTU5MWI2NDY4ZjA0ZGYwOWViM2EzMjExYg==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/19738c223050e4077f6b32829002d8b893c11cea",
                    "sha": "19738c223050e4077f6b32829002d8b893c11cea",
                    "url": "https://api.github.com/repos/cython/cython/commits/19738c223050e4077f6b32829002d8b893c11cea"
                }
            ],
            "sha": "a9431d8c5bf48475591b6468f04df09eb3a3211b",
            "url": "https://api.github.com/repos/cython/cython/commits/a9431d8c5bf48475591b6468f04df09eb3a3211b"
        },
        {
            "author": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/88d824712ed6fc9f226d4babbad725d375fe0f6e/comments",
            "commit": {
                "author": {
                    "date": "2020-03-21T10:05:44Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-03-21T11:24:11Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Changed format of PYPY if statements",
                "tree": {
                    "sha": "7b7a8cbc369b2c72b023b0603564714488833b2f",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/7b7a8cbc369b2c72b023b0603564714488833b2f"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/88d824712ed6fc9f226d4babbad725d375fe0f6e",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/88d824712ed6fc9f226d4babbad725d375fe0f6e",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6ODhkODI0NzEyZWQ2ZmM5ZjIyNmQ0YmFiYmFkNzI1ZDM3NWZlMGY2ZQ==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/a9431d8c5bf48475591b6468f04df09eb3a3211b",
                    "sha": "a9431d8c5bf48475591b6468f04df09eb3a3211b",
                    "url": "https://api.github.com/repos/cython/cython/commits/a9431d8c5bf48475591b6468f04df09eb3a3211b"
                }
            ],
            "sha": "88d824712ed6fc9f226d4babbad725d375fe0f6e",
            "url": "https://api.github.com/repos/cython/cython/commits/88d824712ed6fc9f226d4babbad725d375fe0f6e"
        },
        {
            "author": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/43ac82edf13ac696416e8079c9d627067f235d78/comments",
            "commit": {
                "author": {
                    "date": "2020-03-21T12:48:35Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-03-21T12:48:35Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Merge commit 'f1dcd0ca1' into inplace\n\nPlus a few other changes to pass tests",
                "tree": {
                    "sha": "3cd60fc18866fb045094f9596915463ab486e58c",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/3cd60fc18866fb045094f9596915463ab486e58c"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/43ac82edf13ac696416e8079c9d627067f235d78",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/43ac82edf13ac696416e8079c9d627067f235d78",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6NDNhYzgyZWRmMTNhYzY5NjQxNmU4MDc5YzlkNjI3MDY3ZjIzNWQ3OA==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/88d824712ed6fc9f226d4babbad725d375fe0f6e",
                    "sha": "88d824712ed6fc9f226d4babbad725d375fe0f6e",
                    "url": "https://api.github.com/repos/cython/cython/commits/88d824712ed6fc9f226d4babbad725d375fe0f6e"
                },
                {
                    "html_url": "https://github.com/cython/cython/commit/f1dcd0ca13695464b8180f4d2e495058f6970933",
                    "sha": "f1dcd0ca13695464b8180f4d2e495058f6970933",
                    "url": "https://api.github.com/repos/cython/cython/commits/f1dcd0ca13695464b8180f4d2e495058f6970933"
                }
            ],
            "sha": "43ac82edf13ac696416e8079c9d627067f235d78",
            "url": "https://api.github.com/repos/cython/cython/commits/43ac82edf13ac696416e8079c9d627067f235d78"
        },
        {
            "author": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/b39cbf93d2b67ff3d51969e2109e0896918fe776/comments",
            "commit": {
                "author": {
                    "date": "2020-03-21T21:23:03Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-03-21T21:23:03Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Cut-down version not modifying PyNumber_Add",
                "tree": {
                    "sha": "55c960560b7cc4232a6d420366a8d78087946140",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/55c960560b7cc4232a6d420366a8d78087946140"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/b39cbf93d2b67ff3d51969e2109e0896918fe776",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/b39cbf93d2b67ff3d51969e2109e0896918fe776",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6YjM5Y2JmOTNkMmI2N2ZmM2Q1MTk2OWUyMTA5ZTA4OTY5MThmZTc3Ng==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/43ac82edf13ac696416e8079c9d627067f235d78",
                    "sha": "43ac82edf13ac696416e8079c9d627067f235d78",
                    "url": "https://api.github.com/repos/cython/cython/commits/43ac82edf13ac696416e8079c9d627067f235d78"
                }
            ],
            "sha": "b39cbf93d2b67ff3d51969e2109e0896918fe776",
            "url": "https://api.github.com/repos/cython/cython/commits/b39cbf93d2b67ff3d51969e2109e0896918fe776"
        },
        {
            "author": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/1de3f8043fa0d5ca88be7435183b63fe54987369/comments",
            "commit": {
                "author": {
                    "date": "2020-03-21T21:28:45Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-03-21T21:28:45Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Merge branch 'master' into inplace",
                "tree": {
                    "sha": "a2856e396428aed2c0506ab75c9070f31b7e4916",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/a2856e396428aed2c0506ab75c9070f31b7e4916"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/1de3f8043fa0d5ca88be7435183b63fe54987369",
                "verification": {
                    "payload": "tree a2856e396428aed2c0506ab75c9070f31b7e4916\nparent b39cbf93d2b67ff3d51969e2109e0896918fe776\nparent 4dd7c18de76cb5c90a5168fba35990600307e642\nauthor da-woods <dw-git@d-woods.co.uk> 1584826125 +0000\ncommitter GitHub <noreply@github.com> 1584826125 +0000\n\nMerge branch 'master' into inplace",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJedocNCRBK7hj4Ov3rIwAAdHIIAHqeqf2f77TfL23DROuduVKD\nE3ddREash/rBronrIkjUGSnax+AxLCGY28gmHhGz2ZVddhGCffrc88wRUIcY9nZp\nubDEdcAf1Z1TWb2i783tXmCJ5FzGBfWEUE3rRarDJPB6IDnmo8XPIr+3WVd+ckRd\nrxMDXzrE2OY/n5CrY+V9jowsUKoKxVY2Bcisi/wRL1h6o85dpIuw/eauZIIxdG2f\nyFtSKrYE/82O6PYP1CKXT8AjTMzxBjDpkrEm1Hg1QoE1A1ZPNQ8Qt2sKNWxz61YF\nlGAVw/4tZi5Fi52MtGOciQDPYuSXrRoH4CFurJQvploZkB6RrbAjokqeyHbObOg=\n=a/Uq\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/1de3f8043fa0d5ca88be7435183b63fe54987369",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6MWRlM2Y4MDQzZmEwZDVjYTg4YmU3NDM1MTgzYjYzZmU1NDk4NzM2OQ==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/b39cbf93d2b67ff3d51969e2109e0896918fe776",
                    "sha": "b39cbf93d2b67ff3d51969e2109e0896918fe776",
                    "url": "https://api.github.com/repos/cython/cython/commits/b39cbf93d2b67ff3d51969e2109e0896918fe776"
                },
                {
                    "html_url": "https://github.com/cython/cython/commit/4dd7c18de76cb5c90a5168fba35990600307e642",
                    "sha": "4dd7c18de76cb5c90a5168fba35990600307e642",
                    "url": "https://api.github.com/repos/cython/cython/commits/4dd7c18de76cb5c90a5168fba35990600307e642"
                }
            ],
            "sha": "1de3f8043fa0d5ca88be7435183b63fe54987369",
            "url": "https://api.github.com/repos/cython/cython/commits/1de3f8043fa0d5ca88be7435183b63fe54987369"
        },
        {
            "author": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/814382ccb454841518f1a09545280343e1c132a9/comments",
            "commit": {
                "author": {
                    "date": "2020-03-22T09:59:44Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-03-22T09:59:44Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Name case",
                "tree": {
                    "sha": "81afd314ff05d384e279fedd5f6392ead1d3aa58",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/81afd314ff05d384e279fedd5f6392ead1d3aa58"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/814382ccb454841518f1a09545280343e1c132a9",
                "verification": {
                    "payload": "tree 81afd314ff05d384e279fedd5f6392ead1d3aa58\nparent 1de3f8043fa0d5ca88be7435183b63fe54987369\nauthor da-woods <dw-git@d-woods.co.uk> 1584871184 +0000\ncommitter GitHub <noreply@github.com> 1584871184 +0000\n\nName case",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJedzcQCRBK7hj4Ov3rIwAAdHIIAGRoJxDTADMxPRn1UWYLLJFI\nCSTjL6XcCv9ll8OrO50L/DXUYPv4g88yLZUMjCxmyrAOcLyA4QarnF2wJ9DtIwIJ\nsLB5t9HKgHJGEZdNKuC1/AtUxlE6ZUpKCnneWmlFI5fxpwF0NeV0foispm/YCZxi\nho++5un6ZA0H3BMHXoPOEXeiCZ0aoSl4rL3EUlfkoy1qlgP96Y9yg2m+QSey6JRu\nBNHZB2TADk3hRfEg2WVkxNkI7dat5b7lJ71OJv5XeHjcA+nQyQcGbrHRCMQ0Wz76\n24t//tzYPtLo5E1CFqz+HhAFPzXzemdPsZehx1g6ALQLJgR2yaKZX83dLufJi0Y=\n=t9RO\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/814382ccb454841518f1a09545280343e1c132a9",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6ODE0MzgyY2NiNDU0ODQxNTE4ZjFhMDk1NDUyODAzNDNlMWMxMzJhOQ==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/1de3f8043fa0d5ca88be7435183b63fe54987369",
                    "sha": "1de3f8043fa0d5ca88be7435183b63fe54987369",
                    "url": "https://api.github.com/repos/cython/cython/commits/1de3f8043fa0d5ca88be7435183b63fe54987369"
                }
            ],
            "sha": "814382ccb454841518f1a09545280343e1c132a9",
            "url": "https://api.github.com/repos/cython/cython/commits/814382ccb454841518f1a09545280343e1c132a9"
        },
        {
            "author": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/b77244ee82fdf49d77e069c284f02f7e6f07c35b/comments",
            "commit": {
                "author": {
                    "date": "2020-03-22T10:00:12Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-03-22T10:00:12Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Apply suggestions from code review\n\nCo-Authored-By: Stefan Behnel <stefan_ml@behnel.de>",
                "tree": {
                    "sha": "43354d374691e974d1de7ef51f126fb7fa91b629",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/43354d374691e974d1de7ef51f126fb7fa91b629"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/b77244ee82fdf49d77e069c284f02f7e6f07c35b",
                "verification": {
                    "payload": "tree 43354d374691e974d1de7ef51f126fb7fa91b629\nparent 814382ccb454841518f1a09545280343e1c132a9\nauthor da-woods <dw-git@d-woods.co.uk> 1584871212 +0000\ncommitter GitHub <noreply@github.com> 1584871212 +0000\n\nApply suggestions from code review\n\nCo-Authored-By: Stefan Behnel <stefan_ml@behnel.de>",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJedzcsCRBK7hj4Ov3rIwAAdHIIAIYRGROd19VCtTEA9ZdDl0h6\nLqNmYKzbI7AS2HaYLwJ6/vX33jRM1jmM7cHC/IKCsyhvFgah7tCIz3nS87GNWEi9\nF90IZUCUDIuMA7uX+OxOmIknu9cTQQp+5Yxd2w002d0Ymo6X+gV+xs1fumX7hPuu\nMzi48l6604zFjZ5s0LSw9YOHMIvI4Et9839CvsKuRgjwy8Ttzm71X2WcOykgJOcm\nbXaQ6ZJ2fmhGpqolmjoJjq5zsqp2DbbgUVVdiwyUD7dVgANnicWDmZVTtmyD6F4d\nL8zxEpeEYrHfg3xPSDkUjdJTAYrewt0R5Hr6utCjpBRimB/qJDOCbLXIqGyeWAs=\n=eUVS\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/b77244ee82fdf49d77e069c284f02f7e6f07c35b",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6Yjc3MjQ0ZWU4MmZkZjQ5ZDc3ZTA2OWMyODRmMDJmN2U2ZjA3YzM1Yg==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/814382ccb454841518f1a09545280343e1c132a9",
                    "sha": "814382ccb454841518f1a09545280343e1c132a9",
                    "url": "https://api.github.com/repos/cython/cython/commits/814382ccb454841518f1a09545280343e1c132a9"
                }
            ],
            "sha": "b77244ee82fdf49d77e069c284f02f7e6f07c35b",
            "url": "https://api.github.com/repos/cython/cython/commits/b77244ee82fdf49d77e069c284f02f7e6f07c35b"
        },
        {
            "author": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/b9de0eb7ef5fd448c0f4e8c3d36b5e9fb02ffcde/comments",
            "commit": {
                "author": {
                    "date": "2020-03-25T13:36:43Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-03-25T13:44:52Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Unicode concatenation re-implemented",
                "tree": {
                    "sha": "9b86c8b25c920a4011d442c71253e0608e29bff8",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/9b86c8b25c920a4011d442c71253e0608e29bff8"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/b9de0eb7ef5fd448c0f4e8c3d36b5e9fb02ffcde",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/b9de0eb7ef5fd448c0f4e8c3d36b5e9fb02ffcde",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6YjlkZTBlYjdlZjVmZDQ0OGMwZjRlOGMzZDM2YjVlOWZiMDJmZmNkZQ==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/b77244ee82fdf49d77e069c284f02f7e6f07c35b",
                    "sha": "b77244ee82fdf49d77e069c284f02f7e6f07c35b",
                    "url": "https://api.github.com/repos/cython/cython/commits/b77244ee82fdf49d77e069c284f02f7e6f07c35b"
                }
            ],
            "sha": "b9de0eb7ef5fd448c0f4e8c3d36b5e9fb02ffcde",
            "url": "https://api.github.com/repos/cython/cython/commits/b9de0eb7ef5fd448c0f4e8c3d36b5e9fb02ffcde"
        },
        {
            "author": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/47a920185c9e0cda989641952f6ffb531ee8d9b9/comments",
            "commit": {
                "author": {
                    "date": "2020-03-25T19:42:59Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-03-25T19:44:00Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Removed all traces of __Pyx_PyBytes_Concat\n\nSince it wasn't doing anything and was causing problems occassionally",
                "tree": {
                    "sha": "114372d65f4e81cddccdcb749b5d6592fd6d73e4",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/114372d65f4e81cddccdcb749b5d6592fd6d73e4"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/47a920185c9e0cda989641952f6ffb531ee8d9b9",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/47a920185c9e0cda989641952f6ffb531ee8d9b9",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6NDdhOTIwMTg1YzllMGNkYTk4OTY0MTk1MmY2ZmZiNTMxZWU4ZDliOQ==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/b9de0eb7ef5fd448c0f4e8c3d36b5e9fb02ffcde",
                    "sha": "b9de0eb7ef5fd448c0f4e8c3d36b5e9fb02ffcde",
                    "url": "https://api.github.com/repos/cython/cython/commits/b9de0eb7ef5fd448c0f4e8c3d36b5e9fb02ffcde"
                }
            ],
            "sha": "47a920185c9e0cda989641952f6ffb531ee8d9b9",
            "url": "https://api.github.com/repos/cython/cython/commits/47a920185c9e0cda989641952f6ffb531ee8d9b9"
        },
        {
            "author": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/f91b92695b0355df81bcee6ca38ce36ba9e56965/comments",
            "commit": {
                "author": {
                    "date": "2020-03-26T10:22:31Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-03-26T10:22:31Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Apply suggestions from code review\n\nCo-Authored-By: Stefan Behnel <stefan_ml@behnel.de>",
                "tree": {
                    "sha": "2a8bf563cc1a3fb4b0dc431663a7cbc5634d78f7",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/2a8bf563cc1a3fb4b0dc431663a7cbc5634d78f7"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/f91b92695b0355df81bcee6ca38ce36ba9e56965",
                "verification": {
                    "payload": "tree 2a8bf563cc1a3fb4b0dc431663a7cbc5634d78f7\nparent 47a920185c9e0cda989641952f6ffb531ee8d9b9\nauthor da-woods <dw-git@d-woods.co.uk> 1585218151 +0000\ncommitter GitHub <noreply@github.com> 1585218151 +0000\n\nApply suggestions from code review\n\nCo-Authored-By: Stefan Behnel <stefan_ml@behnel.de>",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJefIJnCRBK7hj4Ov3rIwAAdHIIAJ/KY59H2Ux9mA3/hdmgax5M\ndo0SbdYpCzOv3sxV5EfYoeljdOBsJRaCNOeLPHQssVm9BM5hkQOxHh5Vmr+C+2Hq\njDiAAhj2/5njy2467KAkavRGhz5d+7dxPdlFghy5iuhnLNWe6Nxah4ZxzHuUyiWT\njm7aKJJJIMLfDO63Q76689TuSa3sikrTDEhTrxK7EYhwMkgl4csbhmxyLvOQxZ/w\nkSaqFyyvFOOVlw9aRVNlxkziz50bbc8obHIFIWOymRXKhInz28yymZ7yj0leJUT9\nusCZSnt9pqbfFqG5t3Iio6SEQJf79xnQ8LTjVYP/cD/067fAtzRxw7JjQlFH/fE=\n=8Gyo\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/f91b92695b0355df81bcee6ca38ce36ba9e56965",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6ZjkxYjkyNjk1YjAzNTVkZjgxYmNlZTZjYTM4Y2UzNmJhOWU1Njk2NQ==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/47a920185c9e0cda989641952f6ffb531ee8d9b9",
                    "sha": "47a920185c9e0cda989641952f6ffb531ee8d9b9",
                    "url": "https://api.github.com/repos/cython/cython/commits/47a920185c9e0cda989641952f6ffb531ee8d9b9"
                }
            ],
            "sha": "f91b92695b0355df81bcee6ca38ce36ba9e56965",
            "url": "https://api.github.com/repos/cython/cython/commits/f91b92695b0355df81bcee6ca38ce36ba9e56965"
        },
        {
            "author": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/dfdff6933956573dc186cf384b7d568944c2842f/comments",
            "commit": {
                "author": {
                    "date": "2020-03-26T10:27:37Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-03-26T10:27:37Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Suggestions from review",
                "tree": {
                    "sha": "29aaab395a37a8737fe192489e24cd82375cb392",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/29aaab395a37a8737fe192489e24cd82375cb392"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/dfdff6933956573dc186cf384b7d568944c2842f",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/dfdff6933956573dc186cf384b7d568944c2842f",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6ZGZkZmY2OTMzOTU2NTczZGMxODZjZjM4NGI3ZDU2ODk0NGMyODQyZg==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/f91b92695b0355df81bcee6ca38ce36ba9e56965",
                    "sha": "f91b92695b0355df81bcee6ca38ce36ba9e56965",
                    "url": "https://api.github.com/repos/cython/cython/commits/f91b92695b0355df81bcee6ca38ce36ba9e56965"
                }
            ],
            "sha": "dfdff6933956573dc186cf384b7d568944c2842f",
            "url": "https://api.github.com/repos/cython/cython/commits/dfdff6933956573dc186cf384b7d568944c2842f"
        },
        {
            "author": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/04b011da7aa5207fde3dbe5c9ac393ff03cfc87c/comments",
            "commit": {
                "author": {
                    "date": "2020-03-27T14:22:33Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-03-27T14:22:33Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Apply suggestions from code review",
                "tree": {
                    "sha": "34cb238d9679f27f645834331d94b5bbd4ba4406",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/34cb238d9679f27f645834331d94b5bbd4ba4406"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/04b011da7aa5207fde3dbe5c9ac393ff03cfc87c",
                "verification": {
                    "payload": "tree 34cb238d9679f27f645834331d94b5bbd4ba4406\nparent dfdff6933956573dc186cf384b7d568944c2842f\nauthor Stefan Behnel <stefan_ml@behnel.de> 1585318953 +0100\ncommitter GitHub <noreply@github.com> 1585318953 +0100\n\nApply suggestions from code review",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJefgwpCRBK7hj4Ov3rIwAAdHIIAIuwoEzdhRdCnMmAmn3cXwxw\naq7fXxLtbFTNNI7UZlcb1kSszFC7dK/+Qcqvvd6RTXLV5UDz6pMfDqK6t7GEKeXP\nWcH4Uj8LVdpD5YNQuy6vN+AjPnPfRBVJ4NzG9L36dRxx1hYJS4ZBvUCcBwidbpJQ\nvDJwYVJw8qYCJdxSdgTJqlyoMZvqn0pIA+sQ5jbgw5FQratto9UduyyIx8UiMqsp\nLm+E/8uDtkVo6CjXX7+uyXqjMmgyD+6Go+ow9XTy1RVD2FOrwEtUhss8Mni2dNt8\nfuolKbcLD1x/GGItrXBK3IwrI7RettGcYTyh5F09/27yfYNxANyOTHqp8rb7UyA=\n=Hwhm\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/04b011da7aa5207fde3dbe5c9ac393ff03cfc87c",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6MDRiMDExZGE3YWE1MjA3ZmRlM2RiZTVjOWFjMzkzZmYwM2NmYzg3Yw==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/dfdff6933956573dc186cf384b7d568944c2842f",
                    "sha": "dfdff6933956573dc186cf384b7d568944c2842f",
                    "url": "https://api.github.com/repos/cython/cython/commits/dfdff6933956573dc186cf384b7d568944c2842f"
                }
            ],
            "sha": "04b011da7aa5207fde3dbe5c9ac393ff03cfc87c",
            "url": "https://api.github.com/repos/cython/cython/commits/04b011da7aa5207fde3dbe5c9ac393ff03cfc87c"
        }
    ],
    "commits_url": "https://api.github.com/repos/cython/cython/pulls/3451/commits",
    "created_at": "2020-03-21T12:58:17Z",
    "diff_url": "https://github.com/cython/cython/pull/3451.diff",
    "draft": false,
    "head": {
        "label": "da-woods:inplace",
        "ref": "inplace",
        "repo": {
            "archive_url": "https://api.github.com/repos/da-woods/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/da-woods/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/da-woods/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/da-woods/cython/branches{/branch}",
            "clone_url": "https://github.com/da-woods/cython.git",
            "collaborators_url": "https://api.github.com/repos/da-woods/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/da-woods/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/da-woods/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/da-woods/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/da-woods/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/da-woods/cython/contributors",
            "created_at": "2015-05-09T08:55:00Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/da-woods/cython/deployments",
            "description": "A Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/da-woods/cython/downloads",
            "events_url": "https://api.github.com/repos/da-woods/cython/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/da-woods/cython/forks",
            "full_name": "da-woods/cython",
            "git_commits_url": "https://api.github.com/repos/da-woods/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/da-woods/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/da-woods/cython/git/tags{/sha}",
            "git_url": "git://github.com/da-woods/cython.git",
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "http://cython.org",
            "hooks_url": "https://api.github.com/repos/da-woods/cython/hooks",
            "html_url": "https://github.com/da-woods/cython",
            "id": 35321967,
            "issue_comment_url": "https://api.github.com/repos/da-woods/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/da-woods/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/da-woods/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/da-woods/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/da-woods/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/da-woods/cython/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/da-woods/cython/merges",
            "milestones_url": "https://api.github.com/repos/da-woods/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkzNTMyMTk2Nw==",
            "notifications_url": "https://api.github.com/repos/da-woods/cython/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/da-woods/cython/pulls{/number}",
            "pushed_at": "2020-03-27T16:48:20Z",
            "releases_url": "https://api.github.com/repos/da-woods/cython/releases{/id}",
            "size": 58652,
            "ssh_url": "git@github.com:da-woods/cython.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/da-woods/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/da-woods/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/da-woods/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/da-woods/cython/subscription",
            "svn_url": "https://github.com/da-woods/cython",
            "tags_url": "https://api.github.com/repos/da-woods/cython/tags",
            "teams_url": "https://api.github.com/repos/da-woods/cython/teams",
            "trees_url": "https://api.github.com/repos/da-woods/cython/git/trees{/sha}",
            "updated_at": "2019-10-24T09:38:07Z",
            "url": "https://api.github.com/repos/da-woods/cython",
            "watchers": 0,
            "watchers_count": 0
        },
        "sha": "04b011da7aa5207fde3dbe5c9ac393ff03cfc87c",
        "user": {
            "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
            "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
            "followers_url": "https://api.github.com/users/da-woods/followers",
            "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
            "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/da-woods",
            "id": 10536947,
            "login": "da-woods",
            "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
            "organizations_url": "https://api.github.com/users/da-woods/orgs",
            "received_events_url": "https://api.github.com/users/da-woods/received_events",
            "repos_url": "https://api.github.com/users/da-woods/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/da-woods"
        }
    },
    "html_url": "https://github.com/cython/cython/pull/3451",
    "id": 391855838,
    "issue_url": "https://api.github.com/repos/cython/cython/issues/3451",
    "labels": [],
    "locked": false,
    "merge_commit_sha": "a38b165495d09a99c01c13a27124d4e4b5a40716",
    "merged_at": null,
    "milestone": null,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzkxODU1ODM4",
    "number": 3451,
    "patch_url": "https://github.com/cython/cython/pull/3451.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/cython/cython/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/cython/cython/pulls/3451/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/cython/cython/statuses/04b011da7aa5207fde3dbe5c9ac393ff03cfc87c",
    "title": "Try to handle string concatenation in place if possible",
    "updated_at": "2020-03-27T14:22:34Z",
    "url": "https://api.github.com/repos/cython/cython/pulls/3451",
    "user": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
        "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
        "followers_url": "https://api.github.com/users/da-woods/followers",
        "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
        "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/da-woods",
        "id": 10536947,
        "login": "da-woods",
        "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
        "organizations_url": "https://api.github.com/users/da-woods/orgs",
        "received_events_url": "https://api.github.com/users/da-woods/received_events",
        "repos_url": "https://api.github.com/users/da-woods/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/da-woods"
    }
}