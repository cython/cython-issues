{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/cython/cython/issues/4242/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/cython/cython/pulls/4242/commits"
        },
        "html": {
            "href": "https://github.com/cython/cython/pull/4242"
        },
        "issue": {
            "href": "https://api.github.com/repos/cython/cython/issues/4242"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/cython/cython/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/cython/cython/pulls/4242/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/cython/cython/pulls/4242"
        },
        "statuses": {
            "href": "https://api.github.com/repos/cython/cython/statuses/f1dcc69a612871f700684d9598955ebeecb9274c"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "cython:master",
        "ref": "master",
        "repo": {
            "archive_url": "https://api.github.com/repos/cython/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/cython/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/cython/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/cython/cython/branches{/branch}",
            "clone_url": "https://github.com/cython/cython.git",
            "collaborators_url": "https://api.github.com/repos/cython/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/cython/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/cython/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/cython/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/cython/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/cython/cython/contributors",
            "created_at": "2010-11-21T07:44:20Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/cython/cython/deployments",
            "description": "The most widely used Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/cython/cython/downloads",
            "events_url": "https://api.github.com/repos/cython/cython/events",
            "fork": false,
            "forks": 1176,
            "forks_count": 1176,
            "forks_url": "https://api.github.com/repos/cython/cython/forks",
            "full_name": "cython/cython",
            "git_commits_url": "https://api.github.com/repos/cython/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/cython/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/cython/cython/git/tags{/sha}",
            "git_url": "git://github.com/cython/cython.git",
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://cython.org",
            "hooks_url": "https://api.github.com/repos/cython/cython/hooks",
            "html_url": "https://github.com/cython/cython",
            "id": 1099265,
            "issue_comment_url": "https://api.github.com/repos/cython/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/cython/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/cython/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/cython/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/cython/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/cython/cython/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/cython/cython/merges",
            "milestones_url": "https://api.github.com/repos/cython/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkxMDk5MjY1",
            "notifications_url": "https://api.github.com/repos/cython/cython/notifications{?since,all,participating}",
            "open_issues": 958,
            "open_issues_count": 958,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/486082?v=4",
                "events_url": "https://api.github.com/users/cython/events{/privacy}",
                "followers_url": "https://api.github.com/users/cython/followers",
                "following_url": "https://api.github.com/users/cython/following{/other_user}",
                "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/cython",
                "id": 486082,
                "login": "cython",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
                "organizations_url": "https://api.github.com/users/cython/orgs",
                "received_events_url": "https://api.github.com/users/cython/received_events",
                "repos_url": "https://api.github.com/users/cython/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/cython"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/cython/cython/pulls{/number}",
            "pushed_at": "2021-07-22T21:01:23Z",
            "releases_url": "https://api.github.com/repos/cython/cython/releases{/id}",
            "size": 62653,
            "ssh_url": "git@github.com:cython/cython.git",
            "stargazers_count": 6241,
            "stargazers_url": "https://api.github.com/repos/cython/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/cython/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/cython/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/cython/cython/subscription",
            "svn_url": "https://github.com/cython/cython",
            "tags_url": "https://api.github.com/repos/cython/cython/tags",
            "teams_url": "https://api.github.com/repos/cython/cython/teams",
            "trees_url": "https://api.github.com/repos/cython/cython/git/trees{/sha}",
            "updated_at": "2021-07-23T12:14:58Z",
            "url": "https://api.github.com/repos/cython/cython",
            "watchers": 6241,
            "watchers_count": 6241
        },
        "sha": "f355001d407e0fb5598e3aea88a66d68c02e7891",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/486082?v=4",
            "events_url": "https://api.github.com/users/cython/events{/privacy}",
            "followers_url": "https://api.github.com/users/cython/followers",
            "following_url": "https://api.github.com/users/cython/following{/other_user}",
            "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/cython",
            "id": 486082,
            "login": "cython",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
            "organizations_url": "https://api.github.com/users/cython/orgs",
            "received_events_url": "https://api.github.com/users/cython/received_events",
            "repos_url": "https://api.github.com/users/cython/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/cython"
        }
    },
    "body": "This PR is introducing pure python mode in language basics documentation. It is partial fix of https://github.com/cython/cython/issues/4187",
    "closed_at": "2021-07-20T20:51:57Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r660017136"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/660017136"
                }
            },
            "author_association": "MEMBER",
            "body": "I think we can avoid cluttering the example with type declarations when the type is \"obviously\" safe to infer.\r\n```suggestion\r\n    # Note that the variables below are automatically inferred\r\n    # as the correct pointer type that is assigned to them.\r\n    # They do not need to be typed explicitly.\r\n    \r\n    ptr = cython.cast(cython.p_void, python_string)\r\n    adress_in_c = cython.cast(Py_intptr_t, ptr)\r\n    address_from_void = adress_in_c        # address_from_void is a python int\r\n\r\n    ptr2 = cython.cast(cython.pointer(PyObject), python_string)\r\n    address_in_c2 = cython.cast(Py_intptr_t, ptr2)\r\n    address_from_PyObject = address_in_c2  # address_from_PyObject is a python int\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-06-28T18:20:33Z",
            "diff_hunk": "@@ -0,0 +1,18 @@\n+from cython.cimports.cpython.ref import PyObject\n+\n+def main():\n+\n+    python_string = \"foo\"\n+\n+    ptr: p_void = cython.cast(cython.p_void, python_string)\n+    adress_in_c: Py_intptr_t= cython.cast(Py_intptr_t, ptr)\n+    address_from_void = adress_in_c        # address_from_void is a python int\n+\n+    ptr2: cython.pointer(PyObject) = cython.cast(cython.pointer(PyObject), python_string)\n+    address_in_c2: Py_intptr_t= cython.cast(Py_intptr_t, ptr2)\n+    address_from_PyObject = address_in_c2  # address_from_PyObject is a python int",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r660017136",
            "id": 660017136,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDAxNzEzNg==",
            "original_commit_id": "a9be21d07cccb0ba6e50915b30c044ca23c06177",
            "original_line": 17,
            "original_position": 13,
            "original_start_line": 7,
            "path": "docs/examples/userguide/language_basics/casting_python.py",
            "position": null,
            "pull_request_review_id": 694259168,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-06-28T18:49:48Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/660017136",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r660017320"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/660017320"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    p = fopen(\"spam.txt\", \"r\")   # The type of \"p\" is \"FILE*\", as returned by fopen().\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-06-28T18:20:51Z",
            "diff_hunk": "@@ -0,0 +1,18 @@\n+from cython.cimports.libc.stdio import FILE, fopen\n+from cython.cimports.libc.stdlib import malloc, free\n+from cython.cimports.cpython.exc import PyErr_SetFromErrnoWithFilenameObject\n+\n+def open_file():\n+    p: cython.pointer(FILE) = fopen(\"spam.txt\", \"r\")",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r660017320",
            "id": 660017320,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDAxNzMyMA==",
            "original_commit_id": "a9be21d07cccb0ba6e50915b30c044ca23c06177",
            "original_line": 6,
            "original_position": 6,
            "original_start_line": null,
            "path": "docs/examples/userguide/language_basics/open_file.py",
            "position": null,
            "pull_request_review_id": 694259168,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-06-28T18:49:48Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/660017320",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r660018486"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/660018486"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    # Note that the type of the variable \"my_array\" is automatically inferred from the assignment.\r\n    my_array = cython.cast(p_double, malloc(number * cython.sizeof(double)))\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-06-28T18:22:42Z",
            "diff_hunk": "@@ -0,0 +1,18 @@\n+from cython.cimports.libc.stdio import FILE, fopen\n+from cython.cimports.libc.stdlib import malloc, free\n+from cython.cimports.cpython.exc import PyErr_SetFromErrnoWithFilenameObject\n+\n+def open_file():\n+    p: cython.pointer(FILE) = fopen(\"spam.txt\", \"r\")\n+\n+    if p is cython.NULL:\n+        PyErr_SetFromErrnoWithFilenameObject(OSError, \"spam.txt\")\n+    ...\n+\n+\n+def allocating_memory(number=10):\n+    my_array: cython.p_double = cython.cast(p_double, malloc(number * cython.sizeof(double)))",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r660018486",
            "id": 660018486,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDAxODQ4Ng==",
            "original_commit_id": "a9be21d07cccb0ba6e50915b30c044ca23c06177",
            "original_line": 14,
            "original_position": 14,
            "original_start_line": null,
            "path": "docs/examples/userguide/language_basics/open_file.py",
            "position": null,
            "pull_request_review_id": 694259168,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-06-28T18:49:48Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/660018486",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r660019830"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/660019830"
                }
            },
            "author_association": "MEMBER",
            "body": "This statement is incorrect for the Python version. Also, since type hints are ignored for global variables, this needs to use the explicit `cython.declare()` command.",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-06-28T18:24:58Z",
            "diff_hunk": "@@ -45,61 +48,104 @@ C variable and type definitions\n ===============================\n \n The :keyword:`cdef` statement is used to declare C variables, either local or\n-module-level::\n+module-level",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r660019830",
            "id": 660019830,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDAxOTgzMA==",
            "original_commit_id": "a9be21d07cccb0ba6e50915b30c044ca23c06177",
            "original_line": 51,
            "original_position": 15,
            "original_start_line": 50,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 694259168,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-06-28T18:49:49Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/660019830",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r660024966"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/660024966"
                }
            },
            "author_association": "MEMBER",
            "body": "Interesting. I wasn't even aware of that. I created https://github.com/cython/cython/issues/4252 to track it.",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-06-28T18:33:33Z",
            "diff_hunk": "@@ -45,61 +48,104 @@ C variable and type definitions\n ===============================\n \n The :keyword:`cdef` statement is used to declare C variables, either local or\n-module-level::\n+module-level\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            import cython\n+\n+            i: cython.int\n+            j: cython.int\n+            k: cython.int\n+            f: cython.float\n+            g: cython.int[42]\n+            h: cython.p_float\n+\n+\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n \n-    cdef int i, j, k\n-    cdef float f, g[42], *h\n+            cdef int i, j, k\n+            cdef float f, g[42], *h\n \n and C :keyword:`struct`, :keyword:`union` or :keyword:`enum` types:\n \n-.. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.pyx\n+.. tabs::\n \n-See also :ref:`struct-union-enum-styles`\n+    .. group-tab:: Pure Python\n \n-.. note::\n+        .. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.py\n \n-    Structs can be declared as ``cdef packed struct``, which has\n-    the same effect as the C directive ``#pragma pack(1)``.\n+        .. NOTE:: Currently, Pure Python mode does not support enums.",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r660024966",
            "id": 660024966,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDAyNDk2Ng==",
            "original_commit_id": "a9be21d07cccb0ba6e50915b30c044ca23c06177",
            "original_line": 83,
            "original_position": 56,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 694259168,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-06-28T18:49:49Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/660024966",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r660025805"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/660025805"
                }
            },
            "author_association": "MEMBER",
            "body": "I don't think we need that much space here.\r\n```suggestion\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-06-28T18:35:04Z",
            "diff_hunk": "@@ -45,61 +48,104 @@ C variable and type definitions\n ===============================\n \n The :keyword:`cdef` statement is used to declare C variables, either local or\n-module-level::\n+module-level\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            import cython\n+\n+            i: cython.int\n+            j: cython.int\n+            k: cython.int\n+            f: cython.float\n+            g: cython.int[42]\n+            h: cython.p_float\n+\n+\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n \n-    cdef int i, j, k\n-    cdef float f, g[42], *h\n+            cdef int i, j, k\n+            cdef float f, g[42], *h\n \n and C :keyword:`struct`, :keyword:`union` or :keyword:`enum` types:\n \n-.. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.pyx\n+.. tabs::\n \n-See also :ref:`struct-union-enum-styles`\n+    .. group-tab:: Pure Python\n \n-.. note::\n+        .. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.py\n \n-    Structs can be declared as ``cdef packed struct``, which has\n-    the same effect as the C directive ``#pragma pack(1)``.\n+        .. NOTE:: Currently, Pure Python mode does not support enums.\n \n-Declaring an enum as ``cpdef`` will create a :pep:`435`-style Python wrapper::\n+    .. group-tab:: Cython\n \n-    cpdef enum CheeseState:\n-        hard = 1\n-        soft = 2\n-        runny = 3\n+        .. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.pyx\n \n+        See also :ref:`struct-union-enum-styles`\n \n+        .. note::\n \n-There is currently no special syntax for defining a constant, but you can use\n-an anonymous :keyword:`enum` declaration for this purpose, for example,::\n+            Structs can be declared as ``cdef packed struct``, which has\n+            the same effect as the C directive ``#pragma pack(1)``.\n \n-    cdef enum:\n-        tons_of_spam = 3\n+        Declaring an enum as ``cpdef`` will create a :pep:`435`-style Python wrapper::\n \n-.. note::\n-    the words ``struct``, ``union`` and ``enum`` are used only when\n-    defining a type, not when referring to it. For example, to declare a variable\n-    pointing to a ``Grail`` you would write::\n+            cpdef enum CheeseState:\n+                hard = 1\n+                soft = 2\n+                runny = 3\n+\n+\n+",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r660025805",
            "id": 660025805,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDAyNTgwNQ==",
            "original_commit_id": "a9be21d07cccb0ba6e50915b30c044ca23c06177",
            "original_line": 106,
            "original_position": 90,
            "original_start_line": 105,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 694259168,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-06-28T18:49:49Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/660025805",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r660027167"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/660027167"
                }
            },
            "author_association": "MEMBER",
            "body": "This seems missing from the Python version, although it is supported.",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-06-28T18:37:11Z",
            "diff_hunk": "@@ -45,61 +48,104 @@ C variable and type definitions\n ===============================\n \n The :keyword:`cdef` statement is used to declare C variables, either local or\n-module-level::\n+module-level\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            import cython\n+\n+            i: cython.int\n+            j: cython.int\n+            k: cython.int\n+            f: cython.float\n+            g: cython.int[42]\n+            h: cython.p_float\n+\n+\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n \n-    cdef int i, j, k\n-    cdef float f, g[42], *h\n+            cdef int i, j, k\n+            cdef float f, g[42], *h\n \n and C :keyword:`struct`, :keyword:`union` or :keyword:`enum` types:\n \n-.. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.pyx\n+.. tabs::\n \n-See also :ref:`struct-union-enum-styles`\n+    .. group-tab:: Pure Python\n \n-.. note::\n+        .. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.py\n \n-    Structs can be declared as ``cdef packed struct``, which has\n-    the same effect as the C directive ``#pragma pack(1)``.\n+        .. NOTE:: Currently, Pure Python mode does not support enums.\n \n-Declaring an enum as ``cpdef`` will create a :pep:`435`-style Python wrapper::\n+    .. group-tab:: Cython\n \n-    cpdef enum CheeseState:\n-        hard = 1\n-        soft = 2\n-        runny = 3\n+        .. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.pyx\n \n+        See also :ref:`struct-union-enum-styles`\n \n+        .. note::\n \n-There is currently no special syntax for defining a constant, but you can use\n-an anonymous :keyword:`enum` declaration for this purpose, for example,::\n+            Structs can be declared as ``cdef packed struct``, which has\n+            the same effect as the C directive ``#pragma pack(1)``.\n \n-    cdef enum:\n-        tons_of_spam = 3\n+        Declaring an enum as ``cpdef`` will create a :pep:`435`-style Python wrapper::\n \n-.. note::\n-    the words ``struct``, ``union`` and ``enum`` are used only when\n-    defining a type, not when referring to it. For example, to declare a variable\n-    pointing to a ``Grail`` you would write::\n+            cpdef enum CheeseState:\n+                hard = 1\n+                soft = 2\n+                runny = 3\n+\n+\n+\n+        There is currently no special syntax for defining a constant, but you can use\n+        an anonymous :keyword:`enum` declaration for this purpose, for example,::\n \n-        cdef Grail *gp\n+            cdef enum:\n+                tons_of_spam = 3\n \n-    and not::\n+        .. note::\n+            the words ``struct``, ``union`` and ``enum`` are used only when\n+            defining a type, not when referring to it. For example, to declare a variable\n+            pointing to a ``Grail`` you would write::\n \n-        cdef struct Grail *gp # WRONG\n+                cdef Grail *gp\n \n-    There is also a ``ctypedef`` statement for giving names to types, e.g.::\n+            and not::\n \n-        ctypedef unsigned long ULong\n+                cdef struct Grail *gp # WRONG\n \n-        ctypedef int* IntPtr\n+            There is also a ``ctypedef`` statement for giving names to types, e.g.::",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r660027167",
            "id": 660027167,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDAyNzE2Nw==",
            "original_commit_id": "a9be21d07cccb0ba6e50915b30c044ca23c06177",
            "original_line": 124,
            "original_position": 114,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 694259168,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-06-28T18:49:49Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/660027167",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r660030894"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/660030894"
                }
            },
            "author_association": "MEMBER",
            "body": "Looks like there's no way to do this in Python syntax. I created #4253 to track it.",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-06-28T18:43:13Z",
            "diff_hunk": "@@ -45,61 +48,104 @@ C variable and type definitions\n ===============================\n \n The :keyword:`cdef` statement is used to declare C variables, either local or\n-module-level::\n+module-level\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            import cython\n+\n+            i: cython.int\n+            j: cython.int\n+            k: cython.int\n+            f: cython.float\n+            g: cython.int[42]\n+            h: cython.p_float\n+\n+\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n \n-    cdef int i, j, k\n-    cdef float f, g[42], *h\n+            cdef int i, j, k\n+            cdef float f, g[42], *h\n \n and C :keyword:`struct`, :keyword:`union` or :keyword:`enum` types:\n \n-.. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.pyx\n+.. tabs::\n \n-See also :ref:`struct-union-enum-styles`\n+    .. group-tab:: Pure Python\n \n-.. note::\n+        .. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.py\n \n-    Structs can be declared as ``cdef packed struct``, which has\n-    the same effect as the C directive ``#pragma pack(1)``.\n+        .. NOTE:: Currently, Pure Python mode does not support enums.\n \n-Declaring an enum as ``cpdef`` will create a :pep:`435`-style Python wrapper::\n+    .. group-tab:: Cython\n \n-    cpdef enum CheeseState:\n-        hard = 1\n-        soft = 2\n-        runny = 3\n+        .. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.pyx\n \n+        See also :ref:`struct-union-enum-styles`\n \n+        .. note::\n \n-There is currently no special syntax for defining a constant, but you can use\n-an anonymous :keyword:`enum` declaration for this purpose, for example,::\n+            Structs can be declared as ``cdef packed struct``, which has\n+            the same effect as the C directive ``#pragma pack(1)``.",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r660030894",
            "id": 660030894,
            "line": 109,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDAzMDg5NA==",
            "original_commit_id": "a9be21d07cccb0ba6e50915b30c044ca23c06177",
            "original_line": 94,
            "original_position": 74,
            "original_start_line": 95,
            "path": "docs/src/userguide/language_basics.rst",
            "position": 92,
            "pull_request_review_id": 694259168,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": 108,
            "start_side": "RIGHT",
            "updated_at": "2021-06-28T18:49:49Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/660030894",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r660031775"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/660031775"
                }
            },
            "author_association": "MEMBER",
            "body": "This is confusing when showing the Python syntax version. Probably also applies to other places.",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-06-28T18:44:45Z",
            "diff_hunk": "@@ -45,61 +48,104 @@ C variable and type definitions\n ===============================\n \n The :keyword:`cdef` statement is used to declare C variables, either local or\n-module-level::\n+module-level\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            import cython\n+\n+            i: cython.int\n+            j: cython.int\n+            k: cython.int\n+            f: cython.float\n+            g: cython.int[42]\n+            h: cython.p_float\n+\n+\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n \n-    cdef int i, j, k\n-    cdef float f, g[42], *h\n+            cdef int i, j, k\n+            cdef float f, g[42], *h\n \n and C :keyword:`struct`, :keyword:`union` or :keyword:`enum` types:\n \n-.. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.pyx\n+.. tabs::\n \n-See also :ref:`struct-union-enum-styles`\n+    .. group-tab:: Pure Python\n \n-.. note::\n+        .. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.py\n \n-    Structs can be declared as ``cdef packed struct``, which has\n-    the same effect as the C directive ``#pragma pack(1)``.\n+        .. NOTE:: Currently, Pure Python mode does not support enums.\n \n-Declaring an enum as ``cpdef`` will create a :pep:`435`-style Python wrapper::\n+    .. group-tab:: Cython\n \n-    cpdef enum CheeseState:\n-        hard = 1\n-        soft = 2\n-        runny = 3\n+        .. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.pyx\n \n+        See also :ref:`struct-union-enum-styles`\n \n+        .. note::\n \n-There is currently no special syntax for defining a constant, but you can use\n-an anonymous :keyword:`enum` declaration for this purpose, for example,::\n+            Structs can be declared as ``cdef packed struct``, which has\n+            the same effect as the C directive ``#pragma pack(1)``.\n \n-    cdef enum:\n-        tons_of_spam = 3\n+        Declaring an enum as ``cpdef`` will create a :pep:`435`-style Python wrapper::\n \n-.. note::\n-    the words ``struct``, ``union`` and ``enum`` are used only when\n-    defining a type, not when referring to it. For example, to declare a variable\n-    pointing to a ``Grail`` you would write::\n+            cpdef enum CheeseState:\n+                hard = 1\n+                soft = 2\n+                runny = 3\n+\n+\n+\n+        There is currently no special syntax for defining a constant, but you can use\n+        an anonymous :keyword:`enum` declaration for this purpose, for example,::\n \n-        cdef Grail *gp\n+            cdef enum:\n+                tons_of_spam = 3\n \n-    and not::\n+        .. note::\n+            the words ``struct``, ``union`` and ``enum`` are used only when\n+            defining a type, not when referring to it. For example, to declare a variable\n+            pointing to a ``Grail`` you would write::\n \n-        cdef struct Grail *gp # WRONG\n+                cdef Grail *gp\n \n-    There is also a ``ctypedef`` statement for giving names to types, e.g.::\n+            and not::\n \n-        ctypedef unsigned long ULong\n+                cdef struct Grail *gp # WRONG\n \n-        ctypedef int* IntPtr\n+            There is also a ``ctypedef`` statement for giving names to types, e.g.::\n+\n+                ctypedef unsigned long ULong\n+\n+                ctypedef int* IntPtr\n \n \n It is also possible to declare functions with :keyword:`cdef`, making them c functions.",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r660031775",
            "id": 660031775,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDAzMTc3NQ==",
            "original_commit_id": "a9be21d07cccb0ba6e50915b30c044ca23c06177",
            "original_line": 144,
            "original_position": 121,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 694259168,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-06-28T18:49:49Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/660031775",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r660032463"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/660032463"
                }
            },
            "author_association": "MEMBER",
            "body": "This should better be wrapped in a function to make it actually do something. (Same below.)",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-06-28T18:45:42Z",
            "diff_hunk": "@@ -135,9 +189,21 @@ whereas ``x[0]`` is.\n \n Also, the Python types ``list``, ``dict``, ``tuple``, etc. may be used for\n static typing, as well as any user defined :ref:`extension-types`.\n-For example::\n+For example\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n \n-    cdef list foo = []\n+        .. code-block:: python\n+\n+            foo: list = []",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r660032463",
            "id": 660032463,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDAzMjQ2Mw==",
            "original_commit_id": "a9be21d07cccb0ba6e50915b30c044ca23c06177",
            "original_line": 213,
            "original_position": 176,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 694259168,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-06-28T18:49:49Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/660032463",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r660033760"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/660033760"
                }
            },
            "author_association": "MEMBER",
            "body": "This needs a function.",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-06-28T18:47:47Z",
            "diff_hunk": "@@ -562,11 +806,25 @@ leaving ``s`` dangling. Since this code could not possibly work, Cython refuses\n compile it.\n \n The solution is to assign the result of the concatenation to a Python\n-variable, and then obtain the ``char*`` from that, i.e.::\n+variable, and then obtain the ``char*`` from that, i.e.\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            s: cython.p_char\n+            p = pystring1 + pystring2\n+            s = p",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r660033760",
            "id": 660033760,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDAzMzc2MA==",
            "original_commit_id": "a9be21d07cccb0ba6e50915b30c044ca23c06177",
            "original_line": 832,
            "original_position": 556,
            "original_start_line": 817,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 694259168,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-06-28T18:49:49Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/660033760",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r660081553"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/660081553"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "At least, I haven't found any reference to it :-).",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-06-28T20:06:01Z",
            "diff_hunk": "@@ -45,61 +48,104 @@ C variable and type definitions\n ===============================\n \n The :keyword:`cdef` statement is used to declare C variables, either local or\n-module-level::\n+module-level\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            import cython\n+\n+            i: cython.int\n+            j: cython.int\n+            k: cython.int\n+            f: cython.float\n+            g: cython.int[42]\n+            h: cython.p_float\n+\n+\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n \n-    cdef int i, j, k\n-    cdef float f, g[42], *h\n+            cdef int i, j, k\n+            cdef float f, g[42], *h\n \n and C :keyword:`struct`, :keyword:`union` or :keyword:`enum` types:\n \n-.. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.pyx\n+.. tabs::\n \n-See also :ref:`struct-union-enum-styles`\n+    .. group-tab:: Pure Python\n \n-.. note::\n+        .. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.py\n \n-    Structs can be declared as ``cdef packed struct``, which has\n-    the same effect as the C directive ``#pragma pack(1)``.\n+        .. NOTE:: Currently, Pure Python mode does not support enums.",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r660081553",
            "id": 660081553,
            "in_reply_to_id": 660024966,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDA4MTU1Mw==",
            "original_commit_id": "a9be21d07cccb0ba6e50915b30c044ca23c06177",
            "original_line": 83,
            "original_position": 56,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 694348298,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-06-28T20:06:01Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/660081553",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r660097092"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/660097092"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "> this needs to use the explicit `cython.declare()` command.\r\n\r\nIt would be very good to indicate this, for example in a comment or explanation, since this behavior has not yet been documented, although in a good way it belongs [here](https://cython.readthedocs.io/en/latest/src/tutorial/pure.html).",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-06-28T20:32:20Z",
            "diff_hunk": "@@ -45,61 +48,104 @@ C variable and type definitions\n ===============================\n \n The :keyword:`cdef` statement is used to declare C variables, either local or\n-module-level::\n+module-level",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r660097092",
            "id": 660097092,
            "in_reply_to_id": 660019830,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDA5NzA5Mg==",
            "original_commit_id": "a9be21d07cccb0ba6e50915b30c044ca23c06177",
            "original_line": 51,
            "original_position": 15,
            "original_start_line": 50,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 694368486,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-06-28T20:32:35Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/660097092",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r660100251"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/660100251"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "> At least, I haven't found any reference to it :-).\r\n\r\nIt was worth trying to write enum, and what if it's .. `cython.enum` .., but by chance it's just not documented, lol 🙃",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-06-28T20:37:31Z",
            "diff_hunk": "@@ -45,61 +48,104 @@ C variable and type definitions\n ===============================\n \n The :keyword:`cdef` statement is used to declare C variables, either local or\n-module-level::\n+module-level\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            import cython\n+\n+            i: cython.int\n+            j: cython.int\n+            k: cython.int\n+            f: cython.float\n+            g: cython.int[42]\n+            h: cython.p_float\n+\n+\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n \n-    cdef int i, j, k\n-    cdef float f, g[42], *h\n+            cdef int i, j, k\n+            cdef float f, g[42], *h\n \n and C :keyword:`struct`, :keyword:`union` or :keyword:`enum` types:\n \n-.. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.pyx\n+.. tabs::\n \n-See also :ref:`struct-union-enum-styles`\n+    .. group-tab:: Pure Python\n \n-.. note::\n+        .. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.py\n \n-    Structs can be declared as ``cdef packed struct``, which has\n-    the same effect as the C directive ``#pragma pack(1)``.\n+        .. NOTE:: Currently, Pure Python mode does not support enums.",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r660100251",
            "id": 660100251,
            "in_reply_to_id": 660024966,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDEwMDI1MQ==",
            "original_commit_id": "a9be21d07cccb0ba6e50915b30c044ca23c06177",
            "original_line": 83,
            "original_position": 56,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 694372522,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-06-28T20:37:31Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/660100251",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r660103656"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/660103656"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "`cython.typedef`",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-06-28T20:43:35Z",
            "diff_hunk": "@@ -45,61 +48,104 @@ C variable and type definitions\n ===============================\n \n The :keyword:`cdef` statement is used to declare C variables, either local or\n-module-level::\n+module-level\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            import cython\n+\n+            i: cython.int\n+            j: cython.int\n+            k: cython.int\n+            f: cython.float\n+            g: cython.int[42]\n+            h: cython.p_float\n+\n+\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n \n-    cdef int i, j, k\n-    cdef float f, g[42], *h\n+            cdef int i, j, k\n+            cdef float f, g[42], *h\n \n and C :keyword:`struct`, :keyword:`union` or :keyword:`enum` types:\n \n-.. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.pyx\n+.. tabs::\n \n-See also :ref:`struct-union-enum-styles`\n+    .. group-tab:: Pure Python\n \n-.. note::\n+        .. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.py\n \n-    Structs can be declared as ``cdef packed struct``, which has\n-    the same effect as the C directive ``#pragma pack(1)``.\n+        .. NOTE:: Currently, Pure Python mode does not support enums.\n \n-Declaring an enum as ``cpdef`` will create a :pep:`435`-style Python wrapper::\n+    .. group-tab:: Cython\n \n-    cpdef enum CheeseState:\n-        hard = 1\n-        soft = 2\n-        runny = 3\n+        .. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.pyx\n \n+        See also :ref:`struct-union-enum-styles`\n \n+        .. note::\n \n-There is currently no special syntax for defining a constant, but you can use\n-an anonymous :keyword:`enum` declaration for this purpose, for example,::\n+            Structs can be declared as ``cdef packed struct``, which has\n+            the same effect as the C directive ``#pragma pack(1)``.\n \n-    cdef enum:\n-        tons_of_spam = 3\n+        Declaring an enum as ``cpdef`` will create a :pep:`435`-style Python wrapper::\n \n-.. note::\n-    the words ``struct``, ``union`` and ``enum`` are used only when\n-    defining a type, not when referring to it. For example, to declare a variable\n-    pointing to a ``Grail`` you would write::\n+            cpdef enum CheeseState:\n+                hard = 1\n+                soft = 2\n+                runny = 3\n+\n+\n+\n+        There is currently no special syntax for defining a constant, but you can use\n+        an anonymous :keyword:`enum` declaration for this purpose, for example,::\n \n-        cdef Grail *gp\n+            cdef enum:\n+                tons_of_spam = 3\n \n-    and not::\n+        .. note::\n+            the words ``struct``, ``union`` and ``enum`` are used only when\n+            defining a type, not when referring to it. For example, to declare a variable\n+            pointing to a ``Grail`` you would write::\n \n-        cdef struct Grail *gp # WRONG\n+                cdef Grail *gp\n \n-    There is also a ``ctypedef`` statement for giving names to types, e.g.::\n+            and not::\n \n-        ctypedef unsigned long ULong\n+                cdef struct Grail *gp # WRONG\n \n-        ctypedef int* IntPtr\n+            There is also a ``ctypedef`` statement for giving names to types, e.g.::",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r660103656",
            "id": 660103656,
            "in_reply_to_id": 660027167,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDEwMzY1Ng==",
            "original_commit_id": "a9be21d07cccb0ba6e50915b30c044ca23c06177",
            "original_line": 124,
            "original_position": 114,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 694377087,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-06-28T20:43:36Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/660103656",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r660136709"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/660136709"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "In addition, you can make the pure python version match the version with `cdef` just with `cython.declare()`.\r\ni.e. `cython.declare(i=cython.int, j=cython.int, k=cython.int)`\r\n\r\nand for alignment reasons, `import cython` is not needed here, especially since it has already been written about in `two-syntax-variants-used`",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-06-28T21:43:37Z",
            "diff_hunk": "@@ -45,61 +48,104 @@ C variable and type definitions\n ===============================\n \n The :keyword:`cdef` statement is used to declare C variables, either local or\n-module-level::\n+module-level",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r660136709",
            "id": 660136709,
            "in_reply_to_id": 660019830,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDEzNjcwOQ==",
            "original_commit_id": "a9be21d07cccb0ba6e50915b30c044ca23c06177",
            "original_line": 51,
            "original_position": 15,
            "original_start_line": 50,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 694419079,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-06-28T21:43:37Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/660136709",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r660140212"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/660140212"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "The versions will not align here, it is easier to achieve by moving the code out to the file and adding a space to the line before the `cdef` line.",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-06-28T21:51:12Z",
            "diff_hunk": "@@ -45,61 +48,102 @@ C variable and type definitions\n ===============================\n \n The :keyword:`cdef` statement is used to declare C variables, either local or\n-module-level::\n+module-level\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            import cython\n+\n+            i: cython.int\n+            j: cython.int\n+            k: cython.int\n+            f: cython.float\n+            g: cython.int[42]\n+            h: cython.p_float\n+\n+\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n \n-    cdef int i, j, k\n-    cdef float f, g[42], *h\n+            cdef int i, j, k\n+            cdef float f, g[42], *h\n \n and C :keyword:`struct`, :keyword:`union` or :keyword:`enum` types:\n \n-.. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.pyx\n+.. tabs::\n \n-See also :ref:`struct-union-enum-styles`\n+    .. group-tab:: Pure Python\n \n-.. note::\n+        .. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.py\n \n-    Structs can be declared as ``cdef packed struct``, which has\n-    the same effect as the C directive ``#pragma pack(1)``.\n+        .. NOTE:: Currently, Pure Python mode does not support enums.\n \n-Declaring an enum as ``cpdef`` will create a :pep:`435`-style Python wrapper::\n+    .. group-tab:: Cython\n \n-    cpdef enum CheeseState:\n-        hard = 1\n-        soft = 2\n-        runny = 3\n+        .. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.pyx\n \n+        See also :ref:`struct-union-enum-styles`\n \n+        .. note::\n \n-There is currently no special syntax for defining a constant, but you can use\n-an anonymous :keyword:`enum` declaration for this purpose, for example,::\n+            Structs can be declared as ``cdef packed struct``, which has\n+            the same effect as the C directive ``#pragma pack(1)``.\n \n-    cdef enum:\n-        tons_of_spam = 3\n+        Declaring an enum as ``cpdef`` will create a :pep:`435`-style Python wrapper::\n \n-.. note::\n-    the words ``struct``, ``union`` and ``enum`` are used only when\n-    defining a type, not when referring to it. For example, to declare a variable\n-    pointing to a ``Grail`` you would write::\n+            cpdef enum CheeseState:\n+                hard = 1\n+                soft = 2\n+                runny = 3\n+\n+        There is currently no special syntax for defining a constant, but you can use\n+        an anonymous :keyword:`enum` declaration for this purpose, for example,::\n+\n+            cdef enum:\n+                tons_of_spam = 3\n+\n+        .. note::\n+            the words ``struct``, ``union`` and ``enum`` are used only when\n+            defining a type, not when referring to it. For example, to declare a variable\n+            pointing to a ``Grail`` you would write::\n \n-        cdef Grail *gp\n+                cdef Grail *gp\n \n-    and not::\n+            and not::\n \n-        cdef struct Grail *gp # WRONG\n+                cdef struct Grail *gp # WRONG\n \n-    There is also a ``ctypedef`` statement for giving names to types, e.g.::\n+            There is also a ``ctypedef`` statement for giving names to types, e.g.::\n \n-        ctypedef unsigned long ULong\n+                ctypedef unsigned long ULong\n \n-        ctypedef int* IntPtr\n+                ctypedef int* IntPtr\n \n \n It is also possible to declare functions with :keyword:`cdef`, making them c functions.\n \n-::\n+.. tabs::\n \n-    cdef int eggs(unsigned long l, float f):\n-        ...\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            @cython.cfunc\n+            def eggs(l: cython.ulong, f: cython.float) -> cython.int:\n+                ...\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            cdef int eggs(unsigned long l, float f):\n+                ...",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r660140212",
            "id": 660140212,
            "line": 176,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDE0MDIxMg==",
            "original_commit_id": "b1067464260957c69d6756e77a726c71183d2569",
            "original_line": 160,
            "original_position": 139,
            "original_start_line": 137,
            "path": "docs/src/userguide/language_basics.rst",
            "position": 172,
            "pull_request_review_id": 694423422,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": 167,
            "start_side": "RIGHT",
            "updated_at": "2021-06-28T21:51:12Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/660140212",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r660153749"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/660153749"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "indentation is missing in pure python",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-06-28T22:22:11Z",
            "diff_hunk": "@@ -209,28 +285,78 @@ there is a tiny overhead in calling a :keyword:`cpdef` method from Cython compar\n calling a :keyword:`cdef` method.\n \n Parameters of either type of function can be declared to have C data types,\n-using normal C declaration syntax. For example,::\n+using normal C declaration syntax. For example,\n \n-    def spam(int i, char *s):\n-        ...\n+.. tabs::\n \n-    cdef int eggs(unsigned long l, float f):\n-        ...\n+    .. group-tab:: Pure Python\n \n-``ctuples`` may also be used::\n+        .. code-block:: python\n \n-    cdef (int, float) chips((long, long, double) t):\n-        ...\n+            def spam(i: cython.int, s: cython.p_char):\n+                ...\n+\n+            @cython.cfunc\n+            def eggs(l: cython.ulong, f: cython.float) -> cython.int:\n+                ...\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            def spam(int i, char *s):\n+                ...\n+\n+\n+            cdef int eggs(unsigned long l, float f):\n+                ...\n+\n+\n+\n+``ctuples`` may also be used\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+         def chips(t: (cython.long, cython.long, cython.double)) -> (cython.int, cython.float)\n+            ...\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            cdef (int, float) chips((long, long, double) t):\n+                ...",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r660153749",
            "id": 660153749,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDE1Mzc0OQ==",
            "original_commit_id": "b1067464260957c69d6756e77a726c71183d2569",
            "original_line": 374,
            "original_position": 264,
            "original_start_line": 320,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 694440454,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-06-28T22:22:12Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/660153749",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r660155346"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/660155346"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "You should check that they are identical after cythonization, because as far as I can remember, you need to use `cython.locals` for this.",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-06-28T22:26:16Z",
            "diff_hunk": "@@ -209,28 +285,78 @@ there is a tiny overhead in calling a :keyword:`cpdef` method from Cython compar\n calling a :keyword:`cdef` method.\n \n Parameters of either type of function can be declared to have C data types,\n-using normal C declaration syntax. For example,::\n+using normal C declaration syntax. For example,\n \n-    def spam(int i, char *s):\n-        ...\n+.. tabs::\n \n-    cdef int eggs(unsigned long l, float f):\n-        ...\n+    .. group-tab:: Pure Python\n \n-``ctuples`` may also be used::\n+        .. code-block:: python\n \n-    cdef (int, float) chips((long, long, double) t):\n-        ...\n+            def spam(i: cython.int, s: cython.p_char):\n+                ...\n+\n+            @cython.cfunc\n+            def eggs(l: cython.ulong, f: cython.float) -> cython.int:\n+                ...\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            def spam(int i, char *s):\n+                ...\n+\n+\n+            cdef int eggs(unsigned long l, float f):\n+                ...\n+\n+\n+\n+``ctuples`` may also be used\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+         def chips(t: (cython.long, cython.long, cython.double)) -> (cython.int, cython.float)\n+            ...\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            cdef (int, float) chips((long, long, double) t):\n+                ...\n \n When a parameter of a Python function is declared to have a C data type, it is\n passed in as a Python object and automatically converted to a C value, if\n possible. In other words, the definition of ``spam`` above is equivalent to\n-writing::\n+writing\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            def spam(python_i, python_s):\n+                i: cython.int = python_i\n+                s: cython.p_char = python_s\n+                ...\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            def spam(python_i, python_s):\n+                cdef int i = python_i\n+                cdef char* s = python_s\n+                ...",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r660155346",
            "id": 660155346,
            "line": 400,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDE1NTM0Ng==",
            "original_commit_id": "b1067464260957c69d6756e77a726c71183d2569",
            "original_line": 399,
            "original_position": 290,
            "original_start_line": 345,
            "path": "docs/src/userguide/language_basics.rst",
            "position": 417,
            "pull_request_review_id": 694442482,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": 388,
            "start_side": "RIGHT",
            "updated_at": "2021-06-28T22:26:17Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/660155346",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r660161942"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/660161942"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "there are no tabs below",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-06-28T22:42:33Z",
            "diff_hunk": "@@ -274,10 +414,24 @@ parameters and a new reference is returned).\n \n The name object can also be used to explicitly declare something as a Python\n object. This can be useful if the name being declared would otherwise be taken\n-as the name of a type, for example,::\n+as the name of a type, for example,\n \n-    cdef ftang(object int):\n-        ...\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            @cython.cfunc\n+            def ftang(int: object):\n+                ...\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            cdef ftang(object int):\n+                ...\n \n declares a parameter called int which is a Python object. You can also use\n object as the explicit return type of a function, e.g.::",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r660161942",
            "id": 660161942,
            "line": 480,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDE2MTk0Mg==",
            "original_commit_id": "b1067464260957c69d6756e77a726c71183d2569",
            "original_line": 478,
            "original_position": 355,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": 492,
            "pull_request_review_id": 694450473,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-06-28T22:42:33Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/660161942",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r660165675"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/660165675"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "py and pyx must also have captions, as they are in pxd",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-06-28T22:52:37Z",
            "diff_hunk": "@@ -315,13 +469,22 @@ the implementation (in ``.pyx`` files).\n \n When in a ``.pyx`` file, the signature is the same as it is in Python itself:\n \n-.. literalinclude:: ../../examples/userguide/language_basics/optional_subclassing.pyx\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. literalinclude:: ../../examples/userguide/language_basics/optional_subclassing.py\n+\n+    .. group-tab:: Cython\n+\n+        .. literalinclude:: ../../examples/userguide/language_basics/optional_subclassing.pyx\n \n When in a ``.pxd`` file, the signature is different like this example: ``cdef foo(x=*)``.\n This is because the program calling the function just needs to know what signatures are\n possible in C, but doesn't need to know the value of the default arguments.:\n \n .. literalinclude:: ../../examples/userguide/language_basics/optional_subclassing.pxd\n+    :caption: optional_subclassing.pxd",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r660165675",
            "id": 660165675,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDE2NTY3NQ==",
            "original_commit_id": "b1067464260957c69d6756e77a726c71183d2569",
            "original_line": 536,
            "original_position": 376,
            "original_start_line": 472,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 694455158,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-06-28T22:52:37Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/660165675",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r660166358"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/660166358"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "same as [this](https://github.com/cython/cython/pull/4242/files#r660140212)",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-06-28T22:54:41Z",
            "diff_hunk": "@@ -383,10 +546,24 @@ propagating the exception to its caller.\n \n If you want such a C function to be able to propagate exceptions, you need\n to declare an exception return value for it as a contract with the caller.\n-Here is an example::\n+Here is an example\n \n-    cdef int spam() except -1:\n-        ...\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            @cython.exceptval(-1)\n+            def spam() -> cython.int:\n+                ...\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            cdef int spam() except -1:\n+                ...",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r660166358",
            "id": 660166358,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDE2NjM1OA==",
            "original_commit_id": "b1067464260957c69d6756e77a726c71183d2569",
            "original_line": 615,
            "original_position": 404,
            "original_start_line": 553,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 694456038,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-06-28T22:54:41Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/660166358",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r660166896"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/660166896"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "same as [this](https://github.com/cython/cython/pull/4242/files#r660140212)",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-06-28T22:56:15Z",
            "diff_hunk": "@@ -404,20 +581,48 @@ returns small results.\n \n If all possible return values are legal and you\n can't reserve one entirely for signalling errors, you can use an alternative\n-form of exception value declaration::\n+form of exception value declaration\n \n-    cdef int spam() except? -1:\n-        ...\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            @cython.exceptval(-1, check=True)\n+            def spam() -> cython.int:\n+                ...\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            cdef int spam() except? -1:\n+                ...",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r660166896",
            "id": 660166896,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDE2Njg5Ng==",
            "original_commit_id": "b1067464260957c69d6756e77a726c71183d2569",
            "original_line": 656,
            "original_position": 432,
            "original_start_line": 590,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 694456697,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-06-28T22:56:15Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/660166896",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r660167458"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/660167458"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "there should be text about the `check` attribute",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-06-28T22:57:44Z",
            "diff_hunk": "@@ -404,20 +581,48 @@ returns small results.\n \n If all possible return values are legal and you\n can't reserve one entirely for signalling errors, you can use an alternative\n-form of exception value declaration::\n+form of exception value declaration\n \n-    cdef int spam() except? -1:\n-        ...\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            @cython.exceptval(-1, check=True)\n+            def spam() -> cython.int:\n+                ...\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            cdef int spam() except? -1:\n+                ...\n \n The \"?\" indicates that the value ``-1`` only signals a possible error. In this",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r660167458",
            "id": 660167458,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDE2NzQ1OA==",
            "original_commit_id": "b1067464260957c69d6756e77a726c71183d2569",
            "original_line": 618,
            "original_position": 434,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 694457397,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-06-28T22:57:44Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/660167458",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r660167585"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/660167585"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "same as [this](https://github.com/cython/cython/pull/4242/files#r660140212)",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-06-28T22:58:08Z",
            "diff_hunk": "@@ -404,20 +581,48 @@ returns small results.\n \n If all possible return values are legal and you\n can't reserve one entirely for signalling errors, you can use an alternative\n-form of exception value declaration::\n+form of exception value declaration\n \n-    cdef int spam() except? -1:\n-        ...\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            @cython.exceptval(-1, check=True)\n+            def spam() -> cython.int:\n+                ...\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            cdef int spam() except? -1:\n+                ...\n \n The \"?\" indicates that the value ``-1`` only signals a possible error. In this\n case, Cython generates a call to :c:func:`PyErr_Occurred` if the exception value\n is returned, to make sure it really received an exception and not just a normal\n result.\n \n-There is also a third form of exception value declaration::\n+There is also a third form of exception value declaration\n \n-    cdef int spam() except *:\n-        ...\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            @cython.exceptval(check=True)\n+            def spam() -> cython.int:\n+                ...\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            cdef int spam() except *:\n+                ...",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r660167585",
            "id": 660167585,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDE2NzU4NQ==",
            "original_commit_id": "b1067464260957c69d6756e77a726c71183d2569",
            "original_line": 682,
            "original_position": 459,
            "original_start_line": 614,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 694457601,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-06-28T22:58:08Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/660167585",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r660170813"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/660170813"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Pure python text should talk about `cython.cast`",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-06-28T23:07:37Z",
            "diff_hunk": "@@ -581,11 +837,25 @@ be careful what you do.\n Type Casting\n ------------\n \n-Where C uses ``\"(\"`` and ``\")\"``, Cython uses ``\"<\"`` and ``\">\"``. For example::\n+Where C uses ``\"(\"`` and ``\")\"``, Cython uses ``\"<\"`` and ``\">\"``. For example",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r660170813",
            "id": 660170813,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDE3MDgxMw==",
            "original_commit_id": "b1067464260957c69d6756e77a726c71183d2569",
            "original_line": 855,
            "original_position": 574,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 694461761,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-06-28T23:07:37Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/660170813",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r660170958"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/660170958"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "[same](https://github.com/cython/cython/pull/4242/files#r660170813)",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-06-28T23:08:04Z",
            "diff_hunk": "@@ -581,11 +837,25 @@ be careful what you do.\n Type Casting\n ------------\n \n-Where C uses ``\"(\"`` and ``\")\"``, Cython uses ``\"<\"`` and ``\">\"``. For example::\n+Where C uses ``\"(\"`` and ``\")\"``, Cython uses ``\"<\"`` and ``\">\"``. For example\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n \n-    cdef char *p\n-    cdef float *q\n-    p = <char*>q\n+        .. code-block:: python\n+\n+            p: cython.p_char\n+            q: cython.p_float\n+            p = cython.cast(cython.p_char, q)\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            cdef char *p\n+            cdef float *q\n+            p = <char*>q\n \n When casting a C value to a Python object type or vice versa,\n Cython will attempt a coercion. Simple examples are casts like ``<int>pyobj``,",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r660170958",
            "id": 660170958,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDE3MDk1OA==",
            "original_commit_id": "b1067464260957c69d6756e77a726c71183d2569",
            "original_line": 876,
            "original_position": 598,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 694461918,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-06-28T23:08:04Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/660170958",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r660180889"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/660180889"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "The ugly way to make this work in pure python is to use [numpy initialization](https://github.com/cython/cython/blob/efdf996dced075682d86b7e53a12b56b5ebfea38/Cython/Includes/numpy/__init__.pxd#L28).\r\ni.e. `from numpy cimport Py_intptr_t`\r\n\r\nBut, since this tutorial does not focus on the `extern` syntax, it is not clear what it is and how it works, so we can move this type definition somewhere in `Cython/Includes/cpython`\r\n\r\nWhat do you think @scoder?\r\n",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-06-28T23:35:04Z",
            "diff_hunk": "@@ -0,0 +1,2 @@\n+cdef extern from *:\n+    ctypedef Py_ssize_t Py_intptr_t",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r660180889",
            "id": 660180889,
            "line": 2,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDE4MDg4OQ==",
            "original_commit_id": "b1067464260957c69d6756e77a726c71183d2569",
            "original_line": 2,
            "original_position": 2,
            "original_start_line": 1,
            "path": "docs/examples/userguide/language_basics/casting_python.pxd",
            "position": 2,
            "pull_request_review_id": 694474787,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": 1,
            "start_side": "RIGHT",
            "updated_at": "2021-06-28T23:35:04Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/660180889",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r660181392"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/660181392"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Files are not aligned due to comments",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-06-28T23:36:34Z",
            "diff_hunk": "@@ -0,0 +1,22 @@\n+from cython.cimports.cpython.ref import PyObject\n+\n+def main():\n+\n+    python_string = \"foo\"\n+\n+    # Note that the variables below are automatically inferred\n+    # as the correct pointer type that is assigned to them.\n+    # They do not need to be typed explicitly.",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r660181392",
            "id": 660181392,
            "line": 9,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDE4MTM5Mg==",
            "original_commit_id": "b1067464260957c69d6756e77a726c71183d2569",
            "original_line": 9,
            "original_position": 9,
            "original_start_line": 7,
            "path": "docs/examples/userguide/language_basics/casting_python.py",
            "position": 9,
            "pull_request_review_id": 694475386,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": 7,
            "start_side": "RIGHT",
            "updated_at": "2021-06-28T23:36:34Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/660181392",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r660181784"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/660181784"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I would suggest that you move these comments outside the code. (and add them to the text)",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-06-28T23:37:48Z",
            "diff_hunk": "@@ -0,0 +1,22 @@\n+from cython.cimports.cpython.ref import PyObject\n+\n+def main():\n+\n+    python_string = \"foo\"\n+\n+    # Note that the variables below are automatically inferred\n+    # as the correct pointer type that is assigned to them.\n+    # They do not need to be typed explicitly.",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r660181784",
            "id": 660181784,
            "in_reply_to_id": 660181392,
            "line": 9,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDE4MTc4NA==",
            "original_commit_id": "b1067464260957c69d6756e77a726c71183d2569",
            "original_line": 9,
            "original_position": 9,
            "original_start_line": 7,
            "path": "docs/examples/userguide/language_basics/casting_python.py",
            "position": 9,
            "pull_request_review_id": 694475877,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": 7,
            "start_side": "RIGHT",
            "updated_at": "2021-06-28T23:38:38Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/660181784",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r660182503"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/660182503"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "[same](https://github.com/cython/cython/pull/4242/files#r660170813)",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-06-28T23:40:06Z",
            "diff_hunk": "@@ -657,10 +939,25 @@ direct equivalent in Python.\n * There is no unary ``*`` operator in Cython. Instead of ``*p``, use ``p[0]``\n * There is an ``&`` operator, with the same semantics as in C.\n * The null C pointer is called ``NULL``, not ``0`` (and ``NULL`` is a reserved word).\n-* Type casts are written ``<type>value`` , for example,::\n+* Type casts are written ``<type>value`` , for example,",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r660182503",
            "id": 660182503,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDE4MjUwMw==",
            "original_commit_id": "b1067464260957c69d6756e77a726c71183d2569",
            "original_line": 957,
            "original_position": 625,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 694476766,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-06-28T23:40:06Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/660182503",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r660183378"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/660183378"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "take a look [here](https://github.com/cython/cython/pull/4242/files#r660136709)",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-06-28T23:42:36Z",
            "diff_hunk": "@@ -657,10 +939,25 @@ direct equivalent in Python.\n * There is no unary ``*`` operator in Cython. Instead of ``*p``, use ``p[0]``\n * There is an ``&`` operator, with the same semantics as in C.\n * The null C pointer is called ``NULL``, not ``0`` (and ``NULL`` is a reserved word).\n-* Type casts are written ``<type>value`` , for example,::\n+* Type casts are written ``<type>value`` , for example,\n+\n+  .. tabs::\n \n-        cdef char* p, float* q\n-        p = <char*>q\n+      .. group-tab:: Pure Python\n+\n+          .. code-block:: python\n+\n+              p: cython.p_char\n+              q: cython.p_float\n+              p = cython.cast(cython.p_char, q)\n+\n+      .. group-tab:: Cython\n+\n+          .. code-block:: cython\n+\n+              cdef char* p, float* q\n+\n+              p = <char*>q",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r660183378",
            "id": 660183378,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDE4MzM3OA==",
            "original_commit_id": "b1067464260957c69d6756e77a726c71183d2569",
            "original_line": 1045,
            "original_position": 645,
            "original_start_line": 950,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 694477712,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-06-28T23:42:36Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/660183378",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r660186419"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/660186419"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "?",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-06-28T23:51:56Z",
            "diff_hunk": "@@ -2,6 +2,8 @@ def f(double x):\n     return x ** 2 - x\n \n \n+\n+",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r660186419",
            "id": 660186419,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDE4NjQxOQ==",
            "original_commit_id": "b1067464260957c69d6756e77a726c71183d2569",
            "original_line": 6,
            "original_position": 5,
            "original_start_line": 5,
            "path": "docs/examples/quickstart/cythonize/integrate_cy.pyx",
            "position": null,
            "pull_request_review_id": 694481040,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-06-28T23:51:57Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/660186419",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r660189035"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/660189035"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Alternatively, you can split `cdef` across two lines.",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-06-28T23:59:59Z",
            "diff_hunk": "@@ -657,10 +939,25 @@ direct equivalent in Python.\n * There is no unary ``*`` operator in Cython. Instead of ``*p``, use ``p[0]``\n * There is an ``&`` operator, with the same semantics as in C.\n * The null C pointer is called ``NULL``, not ``0`` (and ``NULL`` is a reserved word).\n-* Type casts are written ``<type>value`` , for example,::\n+* Type casts are written ``<type>value`` , for example,\n+\n+  .. tabs::\n \n-        cdef char* p, float* q\n-        p = <char*>q\n+      .. group-tab:: Pure Python\n+\n+          .. code-block:: python\n+\n+              p: cython.p_char\n+              q: cython.p_float\n+              p = cython.cast(cython.p_char, q)\n+\n+      .. group-tab:: Cython\n+\n+          .. code-block:: cython\n+\n+              cdef char* p, float* q\n+\n+              p = <char*>q",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r660189035",
            "id": 660189035,
            "in_reply_to_id": 660183378,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDE4OTAzNQ==",
            "original_commit_id": "b1067464260957c69d6756e77a726c71183d2569",
            "original_line": 1045,
            "original_position": 645,
            "original_start_line": 950,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 694483975,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-06-28T23:59:59Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/660189035",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r660305749"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/660305749"
                }
            },
            "author_association": "MEMBER",
            "body": "Why shouldn't annotations work here? They seem to explain the idea well.",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-06-29T06:05:37Z",
            "diff_hunk": "@@ -209,28 +285,78 @@ there is a tiny overhead in calling a :keyword:`cpdef` method from Cython compar\n calling a :keyword:`cdef` method.\n \n Parameters of either type of function can be declared to have C data types,\n-using normal C declaration syntax. For example,::\n+using normal C declaration syntax. For example,\n \n-    def spam(int i, char *s):\n-        ...\n+.. tabs::\n \n-    cdef int eggs(unsigned long l, float f):\n-        ...\n+    .. group-tab:: Pure Python\n \n-``ctuples`` may also be used::\n+        .. code-block:: python\n \n-    cdef (int, float) chips((long, long, double) t):\n-        ...\n+            def spam(i: cython.int, s: cython.p_char):\n+                ...\n+\n+            @cython.cfunc\n+            def eggs(l: cython.ulong, f: cython.float) -> cython.int:\n+                ...\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            def spam(int i, char *s):\n+                ...\n+\n+\n+            cdef int eggs(unsigned long l, float f):\n+                ...\n+\n+\n+\n+``ctuples`` may also be used\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+         def chips(t: (cython.long, cython.long, cython.double)) -> (cython.int, cython.float)\n+            ...\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            cdef (int, float) chips((long, long, double) t):\n+                ...\n \n When a parameter of a Python function is declared to have a C data type, it is\n passed in as a Python object and automatically converted to a C value, if\n possible. In other words, the definition of ``spam`` above is equivalent to\n-writing::\n+writing\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            def spam(python_i, python_s):\n+                i: cython.int = python_i\n+                s: cython.p_char = python_s\n+                ...\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            def spam(python_i, python_s):\n+                cdef int i = python_i\n+                cdef char* s = python_s\n+                ...",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r660305749",
            "id": 660305749,
            "in_reply_to_id": 660155346,
            "line": 400,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDMwNTc0OQ==",
            "original_commit_id": "b1067464260957c69d6756e77a726c71183d2569",
            "original_line": 399,
            "original_position": 290,
            "original_start_line": 345,
            "path": "docs/src/userguide/language_basics.rst",
            "position": 417,
            "pull_request_review_id": 694620875,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": 388,
            "start_side": "RIGHT",
            "updated_at": "2021-06-29T06:05:37Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/660305749",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r660306576"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/660306576"
                }
            },
            "author_association": "MEMBER",
            "body": " … and the text would best be placed in the tab to make it change with the syntax display.",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-06-29T06:07:36Z",
            "diff_hunk": "@@ -404,20 +581,48 @@ returns small results.\n \n If all possible return values are legal and you\n can't reserve one entirely for signalling errors, you can use an alternative\n-form of exception value declaration::\n+form of exception value declaration\n \n-    cdef int spam() except? -1:\n-        ...\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            @cython.exceptval(-1, check=True)\n+            def spam() -> cython.int:\n+                ...\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            cdef int spam() except? -1:\n+                ...\n \n The \"?\" indicates that the value ``-1`` only signals a possible error. In this",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r660306576",
            "id": 660306576,
            "in_reply_to_id": 660167458,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDMwNjU3Ng==",
            "original_commit_id": "b1067464260957c69d6756e77a726c71183d2569",
            "original_line": 618,
            "original_position": 434,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 694621956,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-06-29T06:07:36Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/660306576",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r660307104"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/660307104"
                }
            },
            "author_association": "MEMBER",
            "body": "Probably makes space for decorators in the Python version?",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-06-29T06:08:48Z",
            "diff_hunk": "@@ -2,6 +2,8 @@ def f(double x):\n     return x ** 2 - x\n \n \n+\n+",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r660307104",
            "id": 660307104,
            "in_reply_to_id": 660186419,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDMwNzEwNA==",
            "original_commit_id": "b1067464260957c69d6756e77a726c71183d2569",
            "original_line": 6,
            "original_position": 5,
            "original_start_line": 5,
            "path": "docs/examples/quickstart/cythonize/integrate_cy.pyx",
            "position": null,
            "pull_request_review_id": 694622643,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-06-29T06:08:49Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/660307104",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r660308016"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/660308016"
                }
            },
            "author_association": "MEMBER",
            "body": "Add it to the includes, definitely.\r\nWe could also add it to the known C types.",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-06-29T06:10:53Z",
            "diff_hunk": "@@ -0,0 +1,2 @@\n+cdef extern from *:\n+    ctypedef Py_ssize_t Py_intptr_t",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r660308016",
            "id": 660308016,
            "in_reply_to_id": 660180889,
            "line": 2,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDMwODAxNg==",
            "original_commit_id": "b1067464260957c69d6756e77a726c71183d2569",
            "original_line": 2,
            "original_position": 2,
            "original_start_line": 1,
            "path": "docs/examples/userguide/language_basics/casting_python.pxd",
            "position": 2,
            "pull_request_review_id": 694623792,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": 1,
            "start_side": "RIGHT",
            "updated_at": "2021-06-29T06:10:53Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/660308016",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r660308866"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/660308866"
                }
            },
            "author_association": "MEMBER",
            "body": "I also wonder if we should just rely on type inference in both versions. And then really move the comment into the preceding text section.",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-06-29T06:12:45Z",
            "diff_hunk": "@@ -0,0 +1,22 @@\n+from cython.cimports.cpython.ref import PyObject\n+\n+def main():\n+\n+    python_string = \"foo\"\n+\n+    # Note that the variables below are automatically inferred\n+    # as the correct pointer type that is assigned to them.\n+    # They do not need to be typed explicitly.",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r660308866",
            "id": 660308866,
            "in_reply_to_id": 660181392,
            "line": 9,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDMwODg2Ng==",
            "original_commit_id": "b1067464260957c69d6756e77a726c71183d2569",
            "original_line": 9,
            "original_position": 9,
            "original_start_line": 7,
            "path": "docs/examples/userguide/language_basics/casting_python.py",
            "position": 9,
            "pull_request_review_id": 694624872,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": 7,
            "start_side": "RIGHT",
            "updated_at": "2021-06-29T06:12:45Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/660308866",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r660337449"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/660337449"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Yes I have tried to align the two source code as requested in issue.",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-06-29T07:06:46Z",
            "diff_hunk": "@@ -2,6 +2,8 @@ def f(double x):\n     return x ** 2 - x\n \n \n+\n+",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r660337449",
            "id": 660337449,
            "in_reply_to_id": 660186419,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDMzNzQ0OQ==",
            "original_commit_id": "b1067464260957c69d6756e77a726c71183d2569",
            "original_line": 6,
            "original_position": 5,
            "original_start_line": 5,
            "path": "docs/examples/quickstart/cythonize/integrate_cy.pyx",
            "position": null,
            "pull_request_review_id": 694661737,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-06-29T07:06:46Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/660337449",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r660344978"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/660344978"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Here are no tabs because there is an issue in cython not allowing moving this code to pure python: #2529. I suppose we need a note there about it.",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-06-29T07:18:30Z",
            "diff_hunk": "@@ -274,10 +414,24 @@ parameters and a new reference is returned).\n \n The name object can also be used to explicitly declare something as a Python\n object. This can be useful if the name being declared would otherwise be taken\n-as the name of a type, for example,::\n+as the name of a type, for example,\n \n-    cdef ftang(object int):\n-        ...\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            @cython.cfunc\n+            def ftang(int: object):\n+                ...\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            cdef ftang(object int):\n+                ...\n \n declares a parameter called int which is a Python object. You can also use\n object as the explicit return type of a function, e.g.::",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r660344978",
            "id": 660344978,
            "in_reply_to_id": 660161942,
            "line": 480,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDM0NDk3OA==",
            "original_commit_id": "b1067464260957c69d6756e77a726c71183d2569",
            "original_line": 478,
            "original_position": 355,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": 492,
            "pull_request_review_id": 694671891,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-06-29T07:26:25Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/660344978",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r660346579"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/660346579"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "done, I missed that. Thanks!",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-06-29T07:20:59Z",
            "diff_hunk": "@@ -45,61 +48,104 @@ C variable and type definitions\n ===============================\n \n The :keyword:`cdef` statement is used to declare C variables, either local or\n-module-level::\n+module-level\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            import cython\n+\n+            i: cython.int\n+            j: cython.int\n+            k: cython.int\n+            f: cython.float\n+            g: cython.int[42]\n+            h: cython.p_float\n+\n+\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n \n-    cdef int i, j, k\n-    cdef float f, g[42], *h\n+            cdef int i, j, k\n+            cdef float f, g[42], *h\n \n and C :keyword:`struct`, :keyword:`union` or :keyword:`enum` types:\n \n-.. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.pyx\n+.. tabs::\n \n-See also :ref:`struct-union-enum-styles`\n+    .. group-tab:: Pure Python\n \n-.. note::\n+        .. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.py\n \n-    Structs can be declared as ``cdef packed struct``, which has\n-    the same effect as the C directive ``#pragma pack(1)``.\n+        .. NOTE:: Currently, Pure Python mode does not support enums.\n \n-Declaring an enum as ``cpdef`` will create a :pep:`435`-style Python wrapper::\n+    .. group-tab:: Cython\n \n-    cpdef enum CheeseState:\n-        hard = 1\n-        soft = 2\n-        runny = 3\n+        .. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.pyx\n \n+        See also :ref:`struct-union-enum-styles`\n \n+        .. note::\n \n-There is currently no special syntax for defining a constant, but you can use\n-an anonymous :keyword:`enum` declaration for this purpose, for example,::\n+            Structs can be declared as ``cdef packed struct``, which has\n+            the same effect as the C directive ``#pragma pack(1)``.\n \n-    cdef enum:\n-        tons_of_spam = 3\n+        Declaring an enum as ``cpdef`` will create a :pep:`435`-style Python wrapper::\n \n-.. note::\n-    the words ``struct``, ``union`` and ``enum`` are used only when\n-    defining a type, not when referring to it. For example, to declare a variable\n-    pointing to a ``Grail`` you would write::\n+            cpdef enum CheeseState:\n+                hard = 1\n+                soft = 2\n+                runny = 3\n+\n+\n+\n+        There is currently no special syntax for defining a constant, but you can use\n+        an anonymous :keyword:`enum` declaration for this purpose, for example,::\n \n-        cdef Grail *gp\n+            cdef enum:\n+                tons_of_spam = 3\n \n-    and not::\n+        .. note::\n+            the words ``struct``, ``union`` and ``enum`` are used only when\n+            defining a type, not when referring to it. For example, to declare a variable\n+            pointing to a ``Grail`` you would write::\n \n-        cdef struct Grail *gp # WRONG\n+                cdef Grail *gp\n \n-    There is also a ``ctypedef`` statement for giving names to types, e.g.::\n+            and not::\n \n-        ctypedef unsigned long ULong\n+                cdef struct Grail *gp # WRONG\n \n-        ctypedef int* IntPtr\n+            There is also a ``ctypedef`` statement for giving names to types, e.g.::",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r660346579",
            "id": 660346579,
            "in_reply_to_id": 660027167,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDM0NjU3OQ==",
            "original_commit_id": "a9be21d07cccb0ba6e50915b30c044ca23c06177",
            "original_line": 124,
            "original_position": 114,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 694674031,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-06-29T07:20:59Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/660346579",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r660346880"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/660346880"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "done.",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-06-29T07:21:22Z",
            "diff_hunk": "@@ -209,28 +285,78 @@ there is a tiny overhead in calling a :keyword:`cpdef` method from Cython compar\n calling a :keyword:`cdef` method.\n \n Parameters of either type of function can be declared to have C data types,\n-using normal C declaration syntax. For example,::\n+using normal C declaration syntax. For example,\n \n-    def spam(int i, char *s):\n-        ...\n+.. tabs::\n \n-    cdef int eggs(unsigned long l, float f):\n-        ...\n+    .. group-tab:: Pure Python\n \n-``ctuples`` may also be used::\n+        .. code-block:: python\n \n-    cdef (int, float) chips((long, long, double) t):\n-        ...\n+            def spam(i: cython.int, s: cython.p_char):\n+                ...\n+\n+            @cython.cfunc\n+            def eggs(l: cython.ulong, f: cython.float) -> cython.int:\n+                ...\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            def spam(int i, char *s):\n+                ...\n+\n+\n+            cdef int eggs(unsigned long l, float f):\n+                ...\n+\n+\n+\n+``ctuples`` may also be used\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+         def chips(t: (cython.long, cython.long, cython.double)) -> (cython.int, cython.float)\n+            ...\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            cdef (int, float) chips((long, long, double) t):\n+                ...",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r660346880",
            "id": 660346880,
            "in_reply_to_id": 660153749,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDM0Njg4MA==",
            "original_commit_id": "b1067464260957c69d6756e77a726c71183d2569",
            "original_line": 374,
            "original_position": 264,
            "original_start_line": 320,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 694674385,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-06-29T07:21:22Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/660346880",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r660441450"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/660441450"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "> Why shouldn't annotations work here? They seem to explain the idea well.\r\n\r\nI'm not talking about the idea, I said that in this case the annotations may not work as we want, and therefore I said to check if the cythonizaed versions correspond, if so, then there is nothing to worry about.",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-06-29T09:26:41Z",
            "diff_hunk": "@@ -209,28 +285,78 @@ there is a tiny overhead in calling a :keyword:`cpdef` method from Cython compar\n calling a :keyword:`cdef` method.\n \n Parameters of either type of function can be declared to have C data types,\n-using normal C declaration syntax. For example,::\n+using normal C declaration syntax. For example,\n \n-    def spam(int i, char *s):\n-        ...\n+.. tabs::\n \n-    cdef int eggs(unsigned long l, float f):\n-        ...\n+    .. group-tab:: Pure Python\n \n-``ctuples`` may also be used::\n+        .. code-block:: python\n \n-    cdef (int, float) chips((long, long, double) t):\n-        ...\n+            def spam(i: cython.int, s: cython.p_char):\n+                ...\n+\n+            @cython.cfunc\n+            def eggs(l: cython.ulong, f: cython.float) -> cython.int:\n+                ...\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            def spam(int i, char *s):\n+                ...\n+\n+\n+            cdef int eggs(unsigned long l, float f):\n+                ...\n+\n+\n+\n+``ctuples`` may also be used\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+         def chips(t: (cython.long, cython.long, cython.double)) -> (cython.int, cython.float)\n+            ...\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            cdef (int, float) chips((long, long, double) t):\n+                ...\n \n When a parameter of a Python function is declared to have a C data type, it is\n passed in as a Python object and automatically converted to a C value, if\n possible. In other words, the definition of ``spam`` above is equivalent to\n-writing::\n+writing\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            def spam(python_i, python_s):\n+                i: cython.int = python_i\n+                s: cython.p_char = python_s\n+                ...\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            def spam(python_i, python_s):\n+                cdef int i = python_i\n+                cdef char* s = python_s\n+                ...",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r660441450",
            "id": 660441450,
            "in_reply_to_id": 660155346,
            "line": 400,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDQ0MTQ1MA==",
            "original_commit_id": "b1067464260957c69d6756e77a726c71183d2569",
            "original_line": 399,
            "original_position": 290,
            "original_start_line": 345,
            "path": "docs/src/userguide/language_basics.rst",
            "position": 417,
            "pull_request_review_id": 694800249,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": 388,
            "start_side": "RIGHT",
            "updated_at": "2021-06-29T09:26:41Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/660441450",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r660444774"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/660444774"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "In this case, the pyx version will also need to use the new `cimport`",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-06-29T09:30:53Z",
            "diff_hunk": "@@ -0,0 +1,2 @@\n+cdef extern from *:\n+    ctypedef Py_ssize_t Py_intptr_t",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r660444774",
            "id": 660444774,
            "in_reply_to_id": 660180889,
            "line": 2,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDQ0NDc3NA==",
            "original_commit_id": "b1067464260957c69d6756e77a726c71183d2569",
            "original_line": 2,
            "original_position": 2,
            "original_start_line": 1,
            "path": "docs/examples/userguide/language_basics/casting_python.pxd",
            "position": 2,
            "pull_request_review_id": 694804624,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": 1,
            "start_side": "RIGHT",
            "updated_at": "2021-06-29T09:30:53Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/660444774",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r660450321"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/660450321"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "hmm it's 1) out of the scope of this tutorial, 2) second file already was aligned, look [here](https://github.com/matusvalo/cython/blob/b1067464260957c69d6756e77a726c71183d2569/docs/examples/quickstart/cythonize/integrate.py) and [here](https://github.com/matusvalo/cython/blob/b1067464260957c69d6756e77a726c71183d2569/docs/examples/quickstart/cythonize/integrate_cy.pyx)",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-06-29T09:38:12Z",
            "diff_hunk": "@@ -2,6 +2,8 @@ def f(double x):\n     return x ** 2 - x\n \n \n+\n+",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r660450321",
            "id": 660450321,
            "in_reply_to_id": 660186419,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDQ1MDMyMQ==",
            "original_commit_id": "b1067464260957c69d6756e77a726c71183d2569",
            "original_line": 6,
            "original_position": 5,
            "original_start_line": 5,
            "path": "docs/examples/quickstart/cythonize/integrate_cy.pyx",
            "position": null,
            "pull_request_review_id": 694811932,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-06-29T09:38:12Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/660450321",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r660450721"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/660450721"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "so i still don't understand",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-06-29T09:38:45Z",
            "diff_hunk": "@@ -2,6 +2,8 @@ def f(double x):\n     return x ** 2 - x\n \n \n+\n+",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r660450721",
            "id": 660450721,
            "in_reply_to_id": 660186419,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDQ1MDcyMQ==",
            "original_commit_id": "b1067464260957c69d6756e77a726c71183d2569",
            "original_line": 6,
            "original_position": 5,
            "original_start_line": 5,
            "path": "docs/examples/quickstart/cythonize/integrate_cy.pyx",
            "position": null,
            "pull_request_review_id": 694812449,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-06-29T09:38:45Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/660450721",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r660533912"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/660533912"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "@scoder I would generally suggest covering C API path of `Python.h` with type declarations. Not necessarily in this PR, but it will be more pleasant if there are already `ctypedef `s for the cpython.",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-06-29T11:41:39Z",
            "diff_hunk": "@@ -0,0 +1,2 @@\n+cdef extern from *:\n+    ctypedef Py_ssize_t Py_intptr_t",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r660533912",
            "id": 660533912,
            "in_reply_to_id": 660180889,
            "line": 2,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDUzMzkxMg==",
            "original_commit_id": "b1067464260957c69d6756e77a726c71183d2569",
            "original_line": 2,
            "original_position": 2,
            "original_start_line": 1,
            "path": "docs/examples/userguide/language_basics/casting_python.pxd",
            "position": 2,
            "pull_request_review_id": 694922765,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": 1,
            "start_side": "RIGHT",
            "updated_at": "2021-06-29T11:42:24Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/660533912",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r667531914"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/667531914"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "the original script does not have this function, it must be module level code",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-11T20:31:46Z",
            "diff_hunk": "@@ -0,0 +1,23 @@\n+from __future__ import print_function\n+\n+from cython.cimports.cpython.ref import PyObject\n+\n+import sys\n+\n+python_dict = {\"abc\": 123}\n+python_dict_refcount = sys.getrefcount(python_dict)\n+\n+@cython.cfunc\n+def owned_reference(obj: object):\n+    refcount = sys.getrefcount(python_dict)\n+    print('Inside owned_reference: {refcount}'.format(refcount=refcount))\n+\n+@cython.cfunc\n+def borrowed_reference(obj: cython.pointer(PyObject)):\n+    refcount = obj.ob_refcnt\n+    print('Inside borrowed_reference: {refcount}'.format(refcount=refcount))\n+\n+def main():\n+    print('Initial refcount: {refcount}'.format(refcount=python_dict_refcount))\n+    owned_reference(python_dict)\n+    borrowed_reference(cython.cast(cython.pointer(PyObject), python_dict))",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r667531914",
            "id": 667531914,
            "line": 23,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NzUzMTkxNA==",
            "original_commit_id": "99e669f7a90cc845afb494dbd8e8f8692744e37f",
            "original_line": 23,
            "original_position": 23,
            "original_start_line": 20,
            "path": "docs/examples/userguide/language_basics/parameter_refcount.py",
            "position": 23,
            "pull_request_review_id": 703621018,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": 20,
            "start_side": "RIGHT",
            "updated_at": "2021-07-11T20:31:46Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/667531914",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669048016"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669048016"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "done.",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-13T19:25:41Z",
            "diff_hunk": "@@ -404,20 +581,48 @@ returns small results.\n \n If all possible return values are legal and you\n can't reserve one entirely for signalling errors, you can use an alternative\n-form of exception value declaration::\n+form of exception value declaration\n \n-    cdef int spam() except? -1:\n-        ...\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            @cython.exceptval(-1, check=True)\n+            def spam() -> cython.int:\n+                ...\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            cdef int spam() except? -1:\n+                ...\n \n The \"?\" indicates that the value ``-1`` only signals a possible error. In this",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669048016",
            "id": 669048016,
            "in_reply_to_id": 660167458,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTA0ODAxNg==",
            "original_commit_id": "b1067464260957c69d6756e77a726c71183d2569",
            "original_line": 618,
            "original_position": 434,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 705564909,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-13T19:25:41Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669048016",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669050474"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669050474"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "done",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-13T19:29:44Z",
            "diff_hunk": "@@ -581,11 +837,25 @@ be careful what you do.\n Type Casting\n ------------\n \n-Where C uses ``\"(\"`` and ``\")\"``, Cython uses ``\"<\"`` and ``\">\"``. For example::\n+Where C uses ``\"(\"`` and ``\")\"``, Cython uses ``\"<\"`` and ``\">\"``. For example",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669050474",
            "id": 669050474,
            "in_reply_to_id": 660170813,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTA1MDQ3NA==",
            "original_commit_id": "b1067464260957c69d6756e77a726c71183d2569",
            "original_line": 855,
            "original_position": 574,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 705568222,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-13T19:29:44Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669050474",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669051812"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669051812"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "done",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-13T19:31:57Z",
            "diff_hunk": "@@ -657,10 +939,25 @@ direct equivalent in Python.\n * There is no unary ``*`` operator in Cython. Instead of ``*p``, use ``p[0]``\n * There is an ``&`` operator, with the same semantics as in C.\n * The null C pointer is called ``NULL``, not ``0`` (and ``NULL`` is a reserved word).\n-* Type casts are written ``<type>value`` , for example,::\n+* Type casts are written ``<type>value`` , for example,",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669051812",
            "id": 669051812,
            "in_reply_to_id": 660182503,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTA1MTgxMg==",
            "original_commit_id": "b1067464260957c69d6756e77a726c71183d2569",
            "original_line": 957,
            "original_position": 625,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 705569988,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-13T19:31:58Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669051812",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669054764"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669054764"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "done.",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-13T19:36:37Z",
            "diff_hunk": "@@ -315,13 +469,22 @@ the implementation (in ``.pyx`` files).\n \n When in a ``.pyx`` file, the signature is the same as it is in Python itself:\n \n-.. literalinclude:: ../../examples/userguide/language_basics/optional_subclassing.pyx\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. literalinclude:: ../../examples/userguide/language_basics/optional_subclassing.py\n+\n+    .. group-tab:: Cython\n+\n+        .. literalinclude:: ../../examples/userguide/language_basics/optional_subclassing.pyx\n \n When in a ``.pxd`` file, the signature is different like this example: ``cdef foo(x=*)``.\n This is because the program calling the function just needs to know what signatures are\n possible in C, but doesn't need to know the value of the default arguments.:\n \n .. literalinclude:: ../../examples/userguide/language_basics/optional_subclassing.pxd\n+    :caption: optional_subclassing.pxd",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669054764",
            "id": 669054764,
            "in_reply_to_id": 660165675,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTA1NDc2NA==",
            "original_commit_id": "b1067464260957c69d6756e77a726c71183d2569",
            "original_line": 536,
            "original_position": 376,
            "original_start_line": 472,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 705573710,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-07-13T19:36:38Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669054764",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669055075"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669055075"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "done.",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-13T19:37:11Z",
            "diff_hunk": "@@ -135,9 +189,21 @@ whereas ``x[0]`` is.\n \n Also, the Python types ``list``, ``dict``, ``tuple``, etc. may be used for\n static typing, as well as any user defined :ref:`extension-types`.\n-For example::\n+For example\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n \n-    cdef list foo = []\n+        .. code-block:: python\n+\n+            foo: list = []",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669055075",
            "id": 669055075,
            "in_reply_to_id": 660032463,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTA1NTA3NQ==",
            "original_commit_id": "a9be21d07cccb0ba6e50915b30c044ca23c06177",
            "original_line": 213,
            "original_position": 176,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 705574131,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-13T19:37:11Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669055075",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669055404"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669055404"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "done.",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-13T19:37:43Z",
            "diff_hunk": "@@ -562,11 +806,25 @@ leaving ``s`` dangling. Since this code could not possibly work, Cython refuses\n compile it.\n \n The solution is to assign the result of the concatenation to a Python\n-variable, and then obtain the ``char*`` from that, i.e.::\n+variable, and then obtain the ``char*`` from that, i.e.\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            s: cython.p_char\n+            p = pystring1 + pystring2\n+            s = p",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669055404",
            "id": 669055404,
            "in_reply_to_id": 660033760,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTA1NTQwNA==",
            "original_commit_id": "a9be21d07cccb0ba6e50915b30c044ca23c06177",
            "original_line": 832,
            "original_position": 556,
            "original_start_line": 817,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 705574566,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-07-13T19:37:44Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669055404",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669059162"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669059162"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "done.",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-13T19:43:57Z",
            "diff_hunk": "@@ -45,61 +48,104 @@ C variable and type definitions\n ===============================\n \n The :keyword:`cdef` statement is used to declare C variables, either local or\n-module-level::\n+module-level",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669059162",
            "id": 669059162,
            "in_reply_to_id": 660019830,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTA1OTE2Mg==",
            "original_commit_id": "a9be21d07cccb0ba6e50915b30c044ca23c06177",
            "original_line": 51,
            "original_position": 15,
            "original_start_line": 50,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 705579407,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-07-13T19:43:57Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669059162",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669062719"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669062719"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "cdef splitted across two lines.",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-13T19:49:44Z",
            "diff_hunk": "@@ -657,10 +939,25 @@ direct equivalent in Python.\n * There is no unary ``*`` operator in Cython. Instead of ``*p``, use ``p[0]``\n * There is an ``&`` operator, with the same semantics as in C.\n * The null C pointer is called ``NULL``, not ``0`` (and ``NULL`` is a reserved word).\n-* Type casts are written ``<type>value`` , for example,::\n+* Type casts are written ``<type>value`` , for example,\n+\n+  .. tabs::\n \n-        cdef char* p, float* q\n-        p = <char*>q\n+      .. group-tab:: Pure Python\n+\n+          .. code-block:: python\n+\n+              p: cython.p_char\n+              q: cython.p_float\n+              p = cython.cast(cython.p_char, q)\n+\n+      .. group-tab:: Cython\n+\n+          .. code-block:: cython\n+\n+              cdef char* p, float* q\n+\n+              p = <char*>q",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669062719",
            "id": 669062719,
            "in_reply_to_id": 660183378,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTA2MjcxOQ==",
            "original_commit_id": "b1067464260957c69d6756e77a726c71183d2569",
            "original_line": 1045,
            "original_position": 645,
            "original_start_line": 950,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 705584001,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-07-13T19:49:44Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669062719",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669074858"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669074858"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I doublechecked that and it was introduced by mistake. Fixed.",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-13T20:09:23Z",
            "diff_hunk": "@@ -2,6 +2,8 @@ def f(double x):\n     return x ** 2 - x\n \n \n+\n+",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669074858",
            "id": 669074858,
            "in_reply_to_id": 660186419,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTA3NDg1OA==",
            "original_commit_id": "b1067464260957c69d6756e77a726c71183d2569",
            "original_line": 6,
            "original_position": 5,
            "original_start_line": 5,
            "path": "docs/examples/quickstart/cythonize/integrate_cy.pyx",
            "position": null,
            "pull_request_review_id": 705600391,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-07-13T20:09:24Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669074858",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669081066"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669081066"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Added note about bug.",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-13T20:19:55Z",
            "diff_hunk": "@@ -274,10 +414,24 @@ parameters and a new reference is returned).\n \n The name object can also be used to explicitly declare something as a Python\n object. This can be useful if the name being declared would otherwise be taken\n-as the name of a type, for example,::\n+as the name of a type, for example,\n \n-    cdef ftang(object int):\n-        ...\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            @cython.cfunc\n+            def ftang(int: object):\n+                ...\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            cdef ftang(object int):\n+                ...\n \n declares a parameter called int which is a Python object. You can also use\n object as the explicit return type of a function, e.g.::",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669081066",
            "id": 669081066,
            "in_reply_to_id": 660161942,
            "line": 480,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTA4MTA2Ng==",
            "original_commit_id": "b1067464260957c69d6756e77a726c71183d2569",
            "original_line": 478,
            "original_position": 355,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": 492,
            "pull_request_review_id": 705608758,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-13T20:19:55Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669081066",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669087250"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669087250"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "> I also wonder if we should just rely on type inference in both versions.\r\n\r\nIs it possible to use type inference in .pyx version? I am getting error when removing `cdef + TYPE` part:\r\n```cython\r\nfrom cpython.ref cimport PyObject\r\n\r\ncdef extern from *:\r\n    ctypedef Py_ssize_t Py_intptr_t\r\n\r\npython_string = \"foo\"\r\n\r\nptr = <void*>python_string\r\nadress_in_c = <Py_intptr_t>ptr\r\naddress_from_void = adress_in_c        # address_from_void is a python int\r\n\r\nptr2 = <PyObject*>python_string\r\naddress_in_c2 = <Py_intptr_t>ptr2\r\naddress_from_PyObject = address_in_c2  # address_from_PyObject is a python int\r\n\r\nassert address_from_void == address_from_PyObject == id(python_string)\r\n\r\nprint(<object>ptr)                     # Prints \"foo\"\r\nprint(<object>ptr2)                    # prints \"foo\"\r\n```\r\nThis code is failing to compile with following error:\r\n\r\n```\r\nptr2 = <PyObject*>python_string\r\n      ^\r\n------------------------------------------------------------\r\n\r\ntest.pyx:12:7: Cannot convert 'PyObject *' to Python object\r\n```\r\n\r\nMaybe I understood it incorrectly.",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-13T20:29:23Z",
            "diff_hunk": "@@ -0,0 +1,22 @@\n+from cython.cimports.cpython.ref import PyObject\n+\n+def main():\n+\n+    python_string = \"foo\"\n+\n+    # Note that the variables below are automatically inferred\n+    # as the correct pointer type that is assigned to them.\n+    # They do not need to be typed explicitly.",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669087250",
            "id": 669087250,
            "in_reply_to_id": 660181392,
            "line": 9,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTA4NzI1MA==",
            "original_commit_id": "b1067464260957c69d6756e77a726c71183d2569",
            "original_line": 9,
            "original_position": 9,
            "original_start_line": 7,
            "path": "docs/examples/userguide/language_basics/casting_python.py",
            "position": 9,
            "pull_request_review_id": 705616979,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": 7,
            "start_side": "RIGHT",
            "updated_at": "2021-07-13T20:29:23Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669087250",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669121245"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669121245"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "In pure python version the values ​​are on different lines, it is better to align them by compressing there or splitting here",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-13T21:24:49Z",
            "diff_hunk": "@@ -1,8 +1,10 @@\n from __future__ import print_function\n \n+\n cdef class Shrubbery:\n     cdef int width, height",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669121245",
            "id": 669121245,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTEyMTI0NQ==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 5,
            "original_position": 5,
            "original_start_line": null,
            "path": "docs/examples/userguide/extension_types/shrubbery.pyx",
            "position": null,
            "pull_request_review_id": 705661108,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-13T21:24:49Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669121245",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669127492"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669127492"
                }
            },
            "author_association": "MEMBER",
            "body": "Type inference only applies to functions, not the module global code (which only has Python objects in a dict, except for explicitly declared C variables).",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-13T21:36:27Z",
            "diff_hunk": "@@ -0,0 +1,22 @@\n+from cython.cimports.cpython.ref import PyObject\n+\n+def main():\n+\n+    python_string = \"foo\"\n+\n+    # Note that the variables below are automatically inferred\n+    # as the correct pointer type that is assigned to them.\n+    # They do not need to be typed explicitly.",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669127492",
            "id": 669127492,
            "in_reply_to_id": 660181392,
            "line": 9,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTEyNzQ5Mg==",
            "original_commit_id": "b1067464260957c69d6756e77a726c71183d2569",
            "original_line": 9,
            "original_position": 9,
            "original_start_line": 7,
            "path": "docs/examples/userguide/language_basics/casting_python.py",
            "position": 9,
            "pull_request_review_id": 705668882,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": 7,
            "start_side": "RIGHT",
            "updated_at": "2021-07-13T21:36:28Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669127492",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669129054"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669129054"
                }
            },
            "author_association": "MEMBER",
            "body": "Annotations are fine.",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-13T21:39:30Z",
            "diff_hunk": "@@ -209,28 +285,78 @@ there is a tiny overhead in calling a :keyword:`cpdef` method from Cython compar\n calling a :keyword:`cdef` method.\n \n Parameters of either type of function can be declared to have C data types,\n-using normal C declaration syntax. For example,::\n+using normal C declaration syntax. For example,\n \n-    def spam(int i, char *s):\n-        ...\n+.. tabs::\n \n-    cdef int eggs(unsigned long l, float f):\n-        ...\n+    .. group-tab:: Pure Python\n \n-``ctuples`` may also be used::\n+        .. code-block:: python\n \n-    cdef (int, float) chips((long, long, double) t):\n-        ...\n+            def spam(i: cython.int, s: cython.p_char):\n+                ...\n+\n+            @cython.cfunc\n+            def eggs(l: cython.ulong, f: cython.float) -> cython.int:\n+                ...\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            def spam(int i, char *s):\n+                ...\n+\n+\n+            cdef int eggs(unsigned long l, float f):\n+                ...\n+\n+\n+\n+``ctuples`` may also be used\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+         def chips(t: (cython.long, cython.long, cython.double)) -> (cython.int, cython.float)\n+            ...\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            cdef (int, float) chips((long, long, double) t):\n+                ...\n \n When a parameter of a Python function is declared to have a C data type, it is\n passed in as a Python object and automatically converted to a C value, if\n possible. In other words, the definition of ``spam`` above is equivalent to\n-writing::\n+writing\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            def spam(python_i, python_s):\n+                i: cython.int = python_i\n+                s: cython.p_char = python_s\n+                ...\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            def spam(python_i, python_s):\n+                cdef int i = python_i\n+                cdef char* s = python_s\n+                ...",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669129054",
            "id": 669129054,
            "in_reply_to_id": 660155346,
            "line": 400,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTEyOTA1NA==",
            "original_commit_id": "b1067464260957c69d6756e77a726c71183d2569",
            "original_line": 399,
            "original_position": 290,
            "original_start_line": 345,
            "path": "docs/src/userguide/language_basics.rst",
            "position": 417,
            "pull_request_review_id": 705670893,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": 388,
            "start_side": "RIGHT",
            "updated_at": "2021-07-13T21:39:30Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669129054",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669129355"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669129355"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I don't think we should show anything except the note (better to be warning), moreover structs, thought there are close but not substitutes for each other",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-13T21:40:05Z",
            "diff_hunk": "@@ -44,72 +47,137 @@ the use of ‘early binding’ programming techniques.\n C variable and type definitions\n ===============================\n \n-The :keyword:`cdef` statement is used to declare C variables, either local or\n-module-level::\n+C variables can be declared by using the :keyword:`cdef` statement, by annotating\n+variable by special cython type or using function ``declare()``. Statement :keyword:`cdef`\n+and function ``declare()`` can declare either local or\n+module-level variables, but annotated version currently supports only local variables:\n \n-    cdef int i, j, k\n-    cdef float f, g[42], *h\n+.. tabs::\n \n-and C :keyword:`struct`, :keyword:`union` or :keyword:`enum` types:\n+    .. group-tab:: Pure Python\n \n-.. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.pyx\n+        .. code-block:: python\n \n-See also :ref:`struct-union-enum-styles`\n+            global_x = declare(cython.int)\n+            def main():\n+                i: cython.int\n+                j: cython.int\n+                k: cython.int\n+                f: cython.float\n+                g: cython.int[42]\n+                h: cython.p_float\n \n-.. note::\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            cdef int i, j, k\n+            cdef float f, g[42], *h\n+\n+Moreover, C :keyword:`struct`, :keyword:`union` or :keyword:`enum` are supported:\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.py",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669129355",
            "id": 669129355,
            "line": 96,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTEyOTM1NQ==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 83,
            "original_position": 55,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": 70,
            "pull_request_review_id": 705671249,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-13T21:40:05Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669129355",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669137319"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669137319"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Still misaligned with pure python version",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-13T21:56:41Z",
            "diff_hunk": "@@ -44,72 +47,137 @@ the use of ‘early binding’ programming techniques.\n C variable and type definitions\n ===============================\n \n-The :keyword:`cdef` statement is used to declare C variables, either local or\n-module-level::\n+C variables can be declared by using the :keyword:`cdef` statement, by annotating\n+variable by special cython type or using function ``declare()``. Statement :keyword:`cdef`\n+and function ``declare()`` can declare either local or\n+module-level variables, but annotated version currently supports only local variables:\n \n-    cdef int i, j, k\n-    cdef float f, g[42], *h\n+.. tabs::\n \n-and C :keyword:`struct`, :keyword:`union` or :keyword:`enum` types:\n+    .. group-tab:: Pure Python\n \n-.. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.pyx\n+        .. code-block:: python\n \n-See also :ref:`struct-union-enum-styles`\n+            global_x = declare(cython.int)\n+            def main():\n+                i: cython.int\n+                j: cython.int\n+                k: cython.int\n+                f: cython.float\n+                g: cython.int[42]\n+                h: cython.p_float\n \n-.. note::\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            cdef int i, j, k",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669137319",
            "id": 669137319,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTEzNzMxOQ==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 74,
            "original_position": 46,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 705681291,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-13T21:56:41Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669137319",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669138802"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669138802"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Why global_x only added to pure version and content of main function must be module-level",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-13T21:59:50Z",
            "diff_hunk": "@@ -44,72 +47,137 @@ the use of ‘early binding’ programming techniques.\n C variable and type definitions\n ===============================\n \n-The :keyword:`cdef` statement is used to declare C variables, either local or\n-module-level::\n+C variables can be declared by using the :keyword:`cdef` statement, by annotating\n+variable by special cython type or using function ``declare()``. Statement :keyword:`cdef`\n+and function ``declare()`` can declare either local or\n+module-level variables, but annotated version currently supports only local variables:\n \n-    cdef int i, j, k\n-    cdef float f, g[42], *h\n+.. tabs::\n \n-and C :keyword:`struct`, :keyword:`union` or :keyword:`enum` types:\n+    .. group-tab:: Pure Python\n \n-.. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.pyx\n+        .. code-block:: python\n \n-See also :ref:`struct-union-enum-styles`\n+            global_x = declare(cython.int)\n+            def main():",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669138802",
            "id": 669138802,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTEzODgwMg==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 62,
            "original_position": 33,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 705683130,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-13T21:59:50Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669138802",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669146002"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669146002"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Would be good if all notes will be formatted equally.",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-13T22:15:21Z",
            "diff_hunk": "@@ -44,72 +47,137 @@ the use of ‘early binding’ programming techniques.\n C variable and type definitions\n ===============================\n \n-The :keyword:`cdef` statement is used to declare C variables, either local or\n-module-level::\n+C variables can be declared by using the :keyword:`cdef` statement, by annotating\n+variable by special cython type or using function ``declare()``. Statement :keyword:`cdef`\n+and function ``declare()`` can declare either local or\n+module-level variables, but annotated version currently supports only local variables:\n \n-    cdef int i, j, k\n-    cdef float f, g[42], *h\n+.. tabs::\n \n-and C :keyword:`struct`, :keyword:`union` or :keyword:`enum` types:\n+    .. group-tab:: Pure Python\n \n-.. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.pyx\n+        .. code-block:: python\n \n-See also :ref:`struct-union-enum-styles`\n+            global_x = declare(cython.int)\n+            def main():\n+                i: cython.int\n+                j: cython.int\n+                k: cython.int\n+                f: cython.float\n+                g: cython.int[42]\n+                h: cython.p_float\n \n-.. note::\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            cdef int i, j, k\n+            cdef float f, g[42], *h\n+\n+Moreover, C :keyword:`struct`, :keyword:`union` or :keyword:`enum` are supported:\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.py\n+\n+        .. NOTE:: Currently, Pure Python mode does not support enums.",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669146002",
            "id": 669146002,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTE0NjAwMg==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 85,
            "original_position": 57,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 705691839,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-13T22:15:21Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669146002",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669157842"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669157842"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Large portion of this tab is copy pasting, so i suggest to move same text out and use tabs only for different sections",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-13T22:43:07Z",
            "diff_hunk": "@@ -119,40 +187,88 @@ You can read more about them in :ref:`extension-types`.\n Types\n -----\n \n-Cython uses the normal C syntax for C types, including pointers.  It provides\n-all the standard C types, namely ``char``, ``short``, ``int``, ``long``,\n-``long long`` as well as their ``unsigned`` versions, e.g. ``unsigned int``.\n-The special ``bint`` type is used for C boolean values (``int`` with 0/non-0\n-values for False/True) and ``Py_ssize_t`` for (signed) sizes of Python\n-containers.\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        Cython supports annotaions for C types, including pointers.  It provides\n+        all the standard C types, namely ``char``, ``short``, ``int``, ``long``,\n+        ``long long`` as well as their ``unsigned`` versions, e.g. ``uint``.\n+        The special ``bint`` type is used for C boolean values (``int`` with 0/non-0\n+        values for False/True) and ``Py_ssize_t`` for (signed) sizes of Python\n+        containers.\n+\n+        Pointer types are constructed by appending a ``p_`` to the base type\n+        they point to, e.g. ``pp_int`` for a pointer to a pointer to a C int.\n+        Further pointer types can be constructed with ``pointer()`` function.\n+        Arrays use the normal C array syntax, e.g. ``int[10]``, and the size must be known\n+        at compile time for stack allocated arrays. Cython doesn't support variable length arrays from C99.\n+        Note that Cython uses array access for pointer dereferencing.\n+\n+    .. group-tab:: Cython",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669157842",
            "id": 669157842,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTE1Nzg0Mg==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 208,
            "original_position": 211,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 705705652,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-13T22:43:08Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669157842",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669158941"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669158941"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "> , as ``*x`` is not valid Python syntax,\r\n        whereas ``x[0]`` is.\r\n\r\nI don't get this addiction, can you explain what do you mean by this, please?",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-13T22:45:51Z",
            "diff_hunk": "@@ -119,40 +187,88 @@ You can read more about them in :ref:`extension-types`.\n Types\n -----\n \n-Cython uses the normal C syntax for C types, including pointers.  It provides\n-all the standard C types, namely ``char``, ``short``, ``int``, ``long``,\n-``long long`` as well as their ``unsigned`` versions, e.g. ``unsigned int``.\n-The special ``bint`` type is used for C boolean values (``int`` with 0/non-0\n-values for False/True) and ``Py_ssize_t`` for (signed) sizes of Python\n-containers.\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        Cython supports annotaions for C types, including pointers.  It provides\n+        all the standard C types, namely ``char``, ``short``, ``int``, ``long``,\n+        ``long long`` as well as their ``unsigned`` versions, e.g. ``uint``.\n+        The special ``bint`` type is used for C boolean values (``int`` with 0/non-0\n+        values for False/True) and ``Py_ssize_t`` for (signed) sizes of Python\n+        containers.\n+\n+        Pointer types are constructed by appending a ``p_`` to the base type\n+        they point to, e.g. ``pp_int`` for a pointer to a pointer to a C int.\n+        Further pointer types can be constructed with ``pointer()`` function.\n+        Arrays use the normal C array syntax, e.g. ``int[10]``, and the size must be known\n+        at compile time for stack allocated arrays. Cython doesn't support variable length arrays from C99.\n+        Note that Cython uses array access for pointer dereferencing.\n+\n+    .. group-tab:: Cython\n \n-Pointer types are constructed as in C, by appending a ``*`` to the base type\n-they point to, e.g. ``int**`` for a pointer to a pointer to a C int.\n-Arrays use the normal C array syntax, e.g. ``int[10]``, and the size must be known\n-at compile time for stack allocated arrays. Cython doesn't support variable length arrays from C99.\n-Note that Cython uses array access for pointer dereferencing, as ``*x`` is not valid Python syntax,\n-whereas ``x[0]`` is.\n+        Cython language uses the normal C syntax for C types, including pointers.  It provides\n+        all the standard C types, namely ``char``, ``short``, ``int``, ``long``,\n+        ``long long`` as well as their ``unsigned`` versions, e.g. ``unsigned int``.\n+        The special ``bint`` type is used for C boolean values (``int`` with 0/non-0\n+        values for False/True) and ``Py_ssize_t`` for (signed) sizes of Python\n+        containers.\n+\n+        Pointer types are constructed as in C, by appending a ``*`` to the base type\n+        they point to, e.g. ``int**`` for a pointer to a pointer to a C int.\n+        Arrays use the normal C array syntax, e.g. ``int[10]``, and the size must be known\n+        at compile time for stack allocated arrays. Cython doesn't support variable length arrays from C99.\n+        Note that Cython uses array access for pointer dereferencing, as ``*x`` is not valid Python syntax,\n+        whereas ``x[0]`` is.",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669158941",
            "id": 669158941,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTE1ODk0MQ==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 222,
            "original_position": 231,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 705707005,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-13T22:46:48Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669158941",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669161725"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669161725"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "`by needed number of \"p\"s and then \"_\"` Would be great if you shaped this sentence like that, feel free to change it for better fit.",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-13T22:51:52Z",
            "diff_hunk": "@@ -119,40 +187,88 @@ You can read more about them in :ref:`extension-types`.\n Types\n -----\n \n-Cython uses the normal C syntax for C types, including pointers.  It provides\n-all the standard C types, namely ``char``, ``short``, ``int``, ``long``,\n-``long long`` as well as their ``unsigned`` versions, e.g. ``unsigned int``.\n-The special ``bint`` type is used for C boolean values (``int`` with 0/non-0\n-values for False/True) and ``Py_ssize_t`` for (signed) sizes of Python\n-containers.\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        Cython supports annotaions for C types, including pointers.  It provides\n+        all the standard C types, namely ``char``, ``short``, ``int``, ``long``,\n+        ``long long`` as well as their ``unsigned`` versions, e.g. ``uint``.\n+        The special ``bint`` type is used for C boolean values (``int`` with 0/non-0\n+        values for False/True) and ``Py_ssize_t`` for (signed) sizes of Python\n+        containers.\n+\n+        Pointer types are constructed by appending a ``p_`` to the base type\n+        they point to, e.g. ``pp_int`` for a pointer to a pointer to a C int.",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669161725",
            "id": 669161725,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTE2MTcyNQ==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 202,
            "original_position": 205,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 705710072,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-13T22:51:52Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669161725",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669164474"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669164474"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "It's false statement, there are \"ppp_\"  in shadow.py + very important mention is that it's only for interpretation mode, in the compilation mode there are no limit",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-13T22:58:59Z",
            "diff_hunk": "@@ -119,40 +187,88 @@ You can read more about them in :ref:`extension-types`.\n Types\n -----\n \n-Cython uses the normal C syntax for C types, including pointers.  It provides\n-all the standard C types, namely ``char``, ``short``, ``int``, ``long``,\n-``long long`` as well as their ``unsigned`` versions, e.g. ``unsigned int``.\n-The special ``bint`` type is used for C boolean values (``int`` with 0/non-0\n-values for False/True) and ``Py_ssize_t`` for (signed) sizes of Python\n-containers.\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        Cython supports annotaions for C types, including pointers.  It provides\n+        all the standard C types, namely ``char``, ``short``, ``int``, ``long``,\n+        ``long long`` as well as their ``unsigned`` versions, e.g. ``uint``.\n+        The special ``bint`` type is used for C boolean values (``int`` with 0/non-0\n+        values for False/True) and ``Py_ssize_t`` for (signed) sizes of Python\n+        containers.\n+\n+        Pointer types are constructed by appending a ``p_`` to the base type\n+        they point to, e.g. ``pp_int`` for a pointer to a pointer to a C int.\n+        Further pointer types can be constructed with ``pointer()`` function.",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669164474",
            "id": 669164474,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTE2NDQ3NA==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 203,
            "original_position": 206,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 705713362,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-13T22:58:59Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669164474",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669164612"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669164612"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "`cython.pp_int` and not just `pp_int`",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-13T22:59:25Z",
            "diff_hunk": "@@ -119,40 +187,88 @@ You can read more about them in :ref:`extension-types`.\n Types\n -----\n \n-Cython uses the normal C syntax for C types, including pointers.  It provides\n-all the standard C types, namely ``char``, ``short``, ``int``, ``long``,\n-``long long`` as well as their ``unsigned`` versions, e.g. ``unsigned int``.\n-The special ``bint`` type is used for C boolean values (``int`` with 0/non-0\n-values for False/True) and ``Py_ssize_t`` for (signed) sizes of Python\n-containers.\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        Cython supports annotaions for C types, including pointers.  It provides\n+        all the standard C types, namely ``char``, ``short``, ``int``, ``long``,\n+        ``long long`` as well as their ``unsigned`` versions, e.g. ``uint``.\n+        The special ``bint`` type is used for C boolean values (``int`` with 0/non-0\n+        values for False/True) and ``Py_ssize_t`` for (signed) sizes of Python\n+        containers.\n+\n+        Pointer types are constructed by appending a ``p_`` to the base type\n+        they point to, e.g. ``pp_int`` for a pointer to a pointer to a C int.",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669164612",
            "id": 669164612,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTE2NDYxMg==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 202,
            "original_position": 205,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 705713558,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-13T22:59:49Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669164612",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669165678"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669165678"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "`cython.typedef`",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-13T23:02:10Z",
            "diff_hunk": "@@ -44,72 +47,137 @@ the use of ‘early binding’ programming techniques.\n C variable and type definitions\n ===============================\n \n-The :keyword:`cdef` statement is used to declare C variables, either local or\n-module-level::\n+C variables can be declared by using the :keyword:`cdef` statement, by annotating\n+variable by special cython type or using function ``declare()``. Statement :keyword:`cdef`\n+and function ``declare()`` can declare either local or\n+module-level variables, but annotated version currently supports only local variables:\n \n-    cdef int i, j, k\n-    cdef float f, g[42], *h\n+.. tabs::\n \n-and C :keyword:`struct`, :keyword:`union` or :keyword:`enum` types:\n+    .. group-tab:: Pure Python\n \n-.. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.pyx\n+        .. code-block:: python\n \n-See also :ref:`struct-union-enum-styles`\n+            global_x = declare(cython.int)\n+            def main():\n+                i: cython.int\n+                j: cython.int\n+                k: cython.int\n+                f: cython.float\n+                g: cython.int[42]\n+                h: cython.p_float\n \n-.. note::\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            cdef int i, j, k\n+            cdef float f, g[42], *h\n+\n+Moreover, C :keyword:`struct`, :keyword:`union` or :keyword:`enum` are supported:\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.py\n+\n+        .. NOTE:: Currently, Pure Python mode does not support enums.\n+\n+    .. group-tab:: Cython\n+\n+        .. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.pyx\n \n-    Structs can be declared as ``cdef packed struct``, which has\n-    the same effect as the C directive ``#pragma pack(1)``.\n+        See also :ref:`struct-union-enum-styles`\n \n-Declaring an enum as ``cpdef`` will create a :pep:`435`-style Python wrapper::\n+        .. note::\n \n-    cpdef enum CheeseState:\n-        hard = 1\n-        soft = 2\n-        runny = 3\n+            Structs can be declared as ``cdef packed struct``, which has\n+            the same effect as the C directive ``#pragma pack(1)``.\n \n+        Declaring an enum as ``cpdef`` will create a :pep:`435`-style Python wrapper::\n \n+            cpdef enum CheeseState:\n+                hard = 1\n+                soft = 2\n+                runny = 3\n \n-There is currently no special syntax for defining a constant, but you can use\n-an anonymous :keyword:`enum` declaration for this purpose, for example,::\n+        There is currently no special syntax for defining a constant, but you can use\n+        an anonymous :keyword:`enum` declaration for this purpose, for example,::\n \n-    cdef enum:\n-        tons_of_spam = 3\n+            cdef enum:\n+                tons_of_spam = 3\n+\n+        .. note::\n+            the words ``struct``, ``union`` and ``enum`` are used only when\n+            defining a type, not when referring to it. For example, to declare a variable\n+            pointing to a ``Grail`` you would write::\n+\n+                cdef Grail *gp\n+\n+            and not::\n+\n+                cdef struct Grail *gp # WRONG\n \n .. note::\n-    the words ``struct``, ``union`` and ``enum`` are used only when\n-    defining a type, not when referring to it. For example, to declare a variable\n-    pointing to a ``Grail`` you would write::\n \n-        cdef Grail *gp\n+    There is also support for giving names to types by ``ctypedef`` statement or ``typedef()`` function, e.g.\n \n-    and not::\n+    .. tabs::\n \n-        cdef struct Grail *gp # WRONG\n+        .. group-tab:: Pure Python\n \n-    There is also a ``ctypedef`` statement for giving names to types, e.g.::\n+            .. code-block:: python\n \n-        ctypedef unsigned long ULong\n+                 ULong = typedef(cython.ulong)\n \n-        ctypedef int* IntPtr\n+                 IntPtr = typedef(cython.p_int)",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669165678",
            "id": 669165678,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTE2NTY3OA==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 134,
            "original_position": 126,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 705714822,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-13T23:02:11Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669165678",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669166082"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669166082"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "We could move this line to the tabs, but idk is this that necessary",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-13T23:03:18Z",
            "diff_hunk": "@@ -44,72 +47,137 @@ the use of ‘early binding’ programming techniques.\n C variable and type definitions\n ===============================\n \n-The :keyword:`cdef` statement is used to declare C variables, either local or\n-module-level::\n+C variables can be declared by using the :keyword:`cdef` statement, by annotating\n+variable by special cython type or using function ``declare()``. Statement :keyword:`cdef`\n+and function ``declare()`` can declare either local or\n+module-level variables, but annotated version currently supports only local variables:\n \n-    cdef int i, j, k\n-    cdef float f, g[42], *h\n+.. tabs::\n \n-and C :keyword:`struct`, :keyword:`union` or :keyword:`enum` types:\n+    .. group-tab:: Pure Python\n \n-.. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.pyx\n+        .. code-block:: python\n \n-See also :ref:`struct-union-enum-styles`\n+            global_x = declare(cython.int)\n+            def main():\n+                i: cython.int\n+                j: cython.int\n+                k: cython.int\n+                f: cython.float\n+                g: cython.int[42]\n+                h: cython.p_float\n \n-.. note::\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            cdef int i, j, k\n+            cdef float f, g[42], *h\n+\n+Moreover, C :keyword:`struct`, :keyword:`union` or :keyword:`enum` are supported:\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.py\n+\n+        .. NOTE:: Currently, Pure Python mode does not support enums.\n+\n+    .. group-tab:: Cython\n+\n+        .. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.pyx\n \n-    Structs can be declared as ``cdef packed struct``, which has\n-    the same effect as the C directive ``#pragma pack(1)``.\n+        See also :ref:`struct-union-enum-styles`\n \n-Declaring an enum as ``cpdef`` will create a :pep:`435`-style Python wrapper::\n+        .. note::\n \n-    cpdef enum CheeseState:\n-        hard = 1\n-        soft = 2\n-        runny = 3\n+            Structs can be declared as ``cdef packed struct``, which has\n+            the same effect as the C directive ``#pragma pack(1)``.\n \n+        Declaring an enum as ``cpdef`` will create a :pep:`435`-style Python wrapper::\n \n+            cpdef enum CheeseState:\n+                hard = 1\n+                soft = 2\n+                runny = 3\n \n-There is currently no special syntax for defining a constant, but you can use\n-an anonymous :keyword:`enum` declaration for this purpose, for example,::\n+        There is currently no special syntax for defining a constant, but you can use\n+        an anonymous :keyword:`enum` declaration for this purpose, for example,::\n \n-    cdef enum:\n-        tons_of_spam = 3\n+            cdef enum:\n+                tons_of_spam = 3\n+\n+        .. note::\n+            the words ``struct``, ``union`` and ``enum`` are used only when\n+            defining a type, not when referring to it. For example, to declare a variable\n+            pointing to a ``Grail`` you would write::\n+\n+                cdef Grail *gp\n+\n+            and not::\n+\n+                cdef struct Grail *gp # WRONG\n \n .. note::\n-    the words ``struct``, ``union`` and ``enum`` are used only when\n-    defining a type, not when referring to it. For example, to declare a variable\n-    pointing to a ``Grail`` you would write::\n \n-        cdef Grail *gp\n+    There is also support for giving names to types by ``ctypedef`` statement or ``typedef()`` function, e.g.",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669166082",
            "id": 669166082,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTE2NjA4Mg==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 124,
            "original_position": 111,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 705715350,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-13T23:03:18Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669166082",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669168566"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669168566"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "It will be better to put them into list like\r\n- one\r\n- two\r\n- three\r\n\r\nIt's not easy to understand this first time reading",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-13T23:10:09Z",
            "diff_hunk": "@@ -44,72 +47,137 @@ the use of ‘early binding’ programming techniques.\n C variable and type definitions\n ===============================\n \n-The :keyword:`cdef` statement is used to declare C variables, either local or\n-module-level::\n+C variables can be declared by using the :keyword:`cdef` statement, by annotating\n+variable by special cython type or using function ``declare()``. Statement :keyword:`cdef`",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669168566",
            "id": 669168566,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTE2ODU2Ng==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 51,
            "original_position": 17,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 705718320,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-13T23:10:09Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669168566",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669181107"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669181107"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "  Must be module-level, please remove main",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-13T23:42:58Z",
            "diff_hunk": "@@ -119,40 +187,88 @@ You can read more about them in :ref:`extension-types`.\n Types\n -----\n \n-Cython uses the normal C syntax for C types, including pointers.  It provides\n-all the standard C types, namely ``char``, ``short``, ``int``, ``long``,\n-``long long`` as well as their ``unsigned`` versions, e.g. ``unsigned int``.\n-The special ``bint`` type is used for C boolean values (``int`` with 0/non-0\n-values for False/True) and ``Py_ssize_t`` for (signed) sizes of Python\n-containers.\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        Cython supports annotaions for C types, including pointers.  It provides\n+        all the standard C types, namely ``char``, ``short``, ``int``, ``long``,\n+        ``long long`` as well as their ``unsigned`` versions, e.g. ``uint``.\n+        The special ``bint`` type is used for C boolean values (``int`` with 0/non-0\n+        values for False/True) and ``Py_ssize_t`` for (signed) sizes of Python\n+        containers.\n+\n+        Pointer types are constructed by appending a ``p_`` to the base type\n+        they point to, e.g. ``pp_int`` for a pointer to a pointer to a C int.\n+        Further pointer types can be constructed with ``pointer()`` function.\n+        Arrays use the normal C array syntax, e.g. ``int[10]``, and the size must be known\n+        at compile time for stack allocated arrays. Cython doesn't support variable length arrays from C99.\n+        Note that Cython uses array access for pointer dereferencing.\n+\n+    .. group-tab:: Cython\n \n-Pointer types are constructed as in C, by appending a ``*`` to the base type\n-they point to, e.g. ``int**`` for a pointer to a pointer to a C int.\n-Arrays use the normal C array syntax, e.g. ``int[10]``, and the size must be known\n-at compile time for stack allocated arrays. Cython doesn't support variable length arrays from C99.\n-Note that Cython uses array access for pointer dereferencing, as ``*x`` is not valid Python syntax,\n-whereas ``x[0]`` is.\n+        Cython language uses the normal C syntax for C types, including pointers.  It provides\n+        all the standard C types, namely ``char``, ``short``, ``int``, ``long``,\n+        ``long long`` as well as their ``unsigned`` versions, e.g. ``unsigned int``.\n+        The special ``bint`` type is used for C boolean values (``int`` with 0/non-0\n+        values for False/True) and ``Py_ssize_t`` for (signed) sizes of Python\n+        containers.\n+\n+        Pointer types are constructed as in C, by appending a ``*`` to the base type\n+        they point to, e.g. ``int**`` for a pointer to a pointer to a C int.\n+        Arrays use the normal C array syntax, e.g. ``int[10]``, and the size must be known\n+        at compile time for stack allocated arrays. Cython doesn't support variable length arrays from C99.\n+        Note that Cython uses array access for pointer dereferencing, as ``*x`` is not valid Python syntax,\n+        whereas ``x[0]`` is.\n \n Also, the Python types ``list``, ``dict``, ``tuple``, etc. may be used for\n static typing, as well as any user defined :ref:`extension-types`.\n-For example::\n+For example\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            def main():\n+                foo: list = []",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669181107",
            "id": 669181107,
            "line": 236,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTE4MTEwNw==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 235,
            "original_position": 245,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": 237,
            "pull_request_review_id": 705732463,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-13T23:55:22Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669181107",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669184157"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669184157"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Why you chose to add note here?",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-13T23:51:50Z",
            "diff_hunk": "@@ -119,40 +187,88 @@ You can read more about them in :ref:`extension-types`.\n Types\n -----\n \n-Cython uses the normal C syntax for C types, including pointers.  It provides\n-all the standard C types, namely ``char``, ``short``, ``int``, ``long``,\n-``long long`` as well as their ``unsigned`` versions, e.g. ``unsigned int``.\n-The special ``bint`` type is used for C boolean values (``int`` with 0/non-0\n-values for False/True) and ``Py_ssize_t`` for (signed) sizes of Python\n-containers.\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        Cython supports annotaions for C types, including pointers.  It provides\n+        all the standard C types, namely ``char``, ``short``, ``int``, ``long``,\n+        ``long long`` as well as their ``unsigned`` versions, e.g. ``uint``.\n+        The special ``bint`` type is used for C boolean values (``int`` with 0/non-0\n+        values for False/True) and ``Py_ssize_t`` for (signed) sizes of Python\n+        containers.\n+\n+        Pointer types are constructed by appending a ``p_`` to the base type\n+        they point to, e.g. ``pp_int`` for a pointer to a pointer to a C int.\n+        Further pointer types can be constructed with ``pointer()`` function.\n+        Arrays use the normal C array syntax, e.g. ``int[10]``, and the size must be known\n+        at compile time for stack allocated arrays. Cython doesn't support variable length arrays from C99.\n+        Note that Cython uses array access for pointer dereferencing.\n+\n+    .. group-tab:: Cython\n \n-Pointer types are constructed as in C, by appending a ``*`` to the base type\n-they point to, e.g. ``int**`` for a pointer to a pointer to a C int.\n-Arrays use the normal C array syntax, e.g. ``int[10]``, and the size must be known\n-at compile time for stack allocated arrays. Cython doesn't support variable length arrays from C99.\n-Note that Cython uses array access for pointer dereferencing, as ``*x`` is not valid Python syntax,\n-whereas ``x[0]`` is.\n+        Cython language uses the normal C syntax for C types, including pointers.  It provides\n+        all the standard C types, namely ``char``, ``short``, ``int``, ``long``,\n+        ``long long`` as well as their ``unsigned`` versions, e.g. ``unsigned int``.\n+        The special ``bint`` type is used for C boolean values (``int`` with 0/non-0\n+        values for False/True) and ``Py_ssize_t`` for (signed) sizes of Python\n+        containers.\n+\n+        Pointer types are constructed as in C, by appending a ``*`` to the base type\n+        they point to, e.g. ``int**`` for a pointer to a pointer to a C int.\n+        Arrays use the normal C array syntax, e.g. ``int[10]``, and the size must be known\n+        at compile time for stack allocated arrays. Cython doesn't support variable length arrays from C99.\n+        Note that Cython uses array access for pointer dereferencing, as ``*x`` is not valid Python syntax,\n+        whereas ``x[0]`` is.\n \n Also, the Python types ``list``, ``dict``, ``tuple``, etc. may be used for\n static typing, as well as any user defined :ref:`extension-types`.\n-For example::\n+For example\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            def main():\n+                foo: list = []\n+\n+    .. group-tab:: Cython\n \n-    cdef list foo = []\n+        .. code-block:: cython\n+\n+            cdef list foo = []\n \n This requires an *exact* match of the class, it does not allow subclasses.\n This allows Cython to optimize code by accessing internals of the builtin class,\n which is the main reason for declaring builtin types in the first place.\n \n For declared builtin types, Cython uses internally a C variable of type ``PyObject*``.\n-The Python types int, long, and float are not available for static\n-typing and instead interpreted as C ``int``, ``long``, and ``float``\n-respectively, as statically typing variables with these Python\n-types has zero advantages.\n+\n+.. Note:: The Python types ``int``, ``long``, and ``float`` are not available for static",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669184157",
            "id": 669184157,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTE4NDE1Nw==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 249,
            "original_position": 264,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 705735849,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-13T23:51:50Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669184157",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669187673"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669187673"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Must be module-level, please remove main",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T00:02:13Z",
            "diff_hunk": "@@ -119,40 +187,88 @@ You can read more about them in :ref:`extension-types`.\n Types\n -----\n \n-Cython uses the normal C syntax for C types, including pointers.  It provides\n-all the standard C types, namely ``char``, ``short``, ``int``, ``long``,\n-``long long`` as well as their ``unsigned`` versions, e.g. ``unsigned int``.\n-The special ``bint`` type is used for C boolean values (``int`` with 0/non-0\n-values for False/True) and ``Py_ssize_t`` for (signed) sizes of Python\n-containers.\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        Cython supports annotaions for C types, including pointers.  It provides\n+        all the standard C types, namely ``char``, ``short``, ``int``, ``long``,\n+        ``long long`` as well as their ``unsigned`` versions, e.g. ``uint``.\n+        The special ``bint`` type is used for C boolean values (``int`` with 0/non-0\n+        values for False/True) and ``Py_ssize_t`` for (signed) sizes of Python\n+        containers.\n+\n+        Pointer types are constructed by appending a ``p_`` to the base type\n+        they point to, e.g. ``pp_int`` for a pointer to a pointer to a C int.\n+        Further pointer types can be constructed with ``pointer()`` function.\n+        Arrays use the normal C array syntax, e.g. ``int[10]``, and the size must be known\n+        at compile time for stack allocated arrays. Cython doesn't support variable length arrays from C99.\n+        Note that Cython uses array access for pointer dereferencing.\n+\n+    .. group-tab:: Cython\n \n-Pointer types are constructed as in C, by appending a ``*`` to the base type\n-they point to, e.g. ``int**`` for a pointer to a pointer to a C int.\n-Arrays use the normal C array syntax, e.g. ``int[10]``, and the size must be known\n-at compile time for stack allocated arrays. Cython doesn't support variable length arrays from C99.\n-Note that Cython uses array access for pointer dereferencing, as ``*x`` is not valid Python syntax,\n-whereas ``x[0]`` is.\n+        Cython language uses the normal C syntax for C types, including pointers.  It provides\n+        all the standard C types, namely ``char``, ``short``, ``int``, ``long``,\n+        ``long long`` as well as their ``unsigned`` versions, e.g. ``unsigned int``.\n+        The special ``bint`` type is used for C boolean values (``int`` with 0/non-0\n+        values for False/True) and ``Py_ssize_t`` for (signed) sizes of Python\n+        containers.\n+\n+        Pointer types are constructed as in C, by appending a ``*`` to the base type\n+        they point to, e.g. ``int**`` for a pointer to a pointer to a C int.\n+        Arrays use the normal C array syntax, e.g. ``int[10]``, and the size must be known\n+        at compile time for stack allocated arrays. Cython doesn't support variable length arrays from C99.\n+        Note that Cython uses array access for pointer dereferencing, as ``*x`` is not valid Python syntax,\n+        whereas ``x[0]`` is.\n \n Also, the Python types ``list``, ``dict``, ``tuple``, etc. may be used for\n static typing, as well as any user defined :ref:`extension-types`.\n-For example::\n+For example\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            def main():\n+                foo: list = []\n+\n+    .. group-tab:: Cython\n \n-    cdef list foo = []\n+        .. code-block:: cython\n+\n+            cdef list foo = []\n \n This requires an *exact* match of the class, it does not allow subclasses.\n This allows Cython to optimize code by accessing internals of the builtin class,\n which is the main reason for declaring builtin types in the first place.\n \n For declared builtin types, Cython uses internally a C variable of type ``PyObject*``.\n-The Python types int, long, and float are not available for static\n-typing and instead interpreted as C ``int``, ``long``, and ``float``\n-respectively, as statically typing variables with these Python\n-types has zero advantages.\n+\n+.. Note:: The Python types ``int``, ``long``, and ``float`` are not available for static\n+    typing in Cython language and instead interpreted as C ``int``, ``long``, and ``float``\n+    respectively, as statically typing variables with these Python\n+    types has zero advantages. On the other hand, annotating in Pure Python with\n+    ``int``, ``long``, and ``float`` python types will be interpreted as ``PyObject*`` type.\n \n Cython provides an accelerated and typed equivalent of a Python tuple, the ``ctuple``.\n-A ``ctuple`` is assembled from any valid C types. For example::\n+A ``ctuple`` is assembled from any valid C types. For example\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n \n-    cdef (double, int) bar\n+            def main():\n+                bar: (cython.double, cython.int)",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669187673",
            "id": 669187673,
            "line": 267,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTE4NzY3Mw==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 265,
            "original_position": 282,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": 275,
            "pull_request_review_id": 705739848,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T00:02:13Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669187673",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669191309"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669191309"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Other option is to use multiple `declare` call it's the option and looks pretty similar",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T00:13:18Z",
            "diff_hunk": "@@ -178,8 +294,11 @@ Grouping multiple C declarations\n If you have a series of declarations that all begin with :keyword:`cdef`, you\n can group them into a :keyword:`cdef` block like this:\n \n+.. note:: This is supported only by Cython language.",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669191309",
            "id": 669191309,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTE5MTMwOQ==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 297,
            "original_position": 308,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 705744184,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T00:13:18Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669191309",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669191991"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669191991"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Better use tabs for this purpose instead",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T00:15:27Z",
            "diff_hunk": "@@ -189,48 +308,98 @@ Python functions vs. C functions\n \n There are two kinds of function definition in Cython:\n \n-Python functions are defined using the def statement, as in Python. They take\n+Python functions are defined using the ``def`` statement, as in Python. They take\n :term:`Python objects<Python object>` as parameters and return Python objects.\n \n-C functions are defined using the new :keyword:`cdef` statement. They take\n+C functions are defined using the new :keyword:`cdef` statement in Cython language or by ``@cfunc`` decorator. They take",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669191991",
            "id": 669191991,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTE5MTk5MQ==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 314,
            "original_position": 325,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 705744973,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T00:15:27Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669191991",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669192258"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669192258"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Apples to other similar cases",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T00:16:21Z",
            "diff_hunk": "@@ -189,48 +308,98 @@ Python functions vs. C functions\n \n There are two kinds of function definition in Cython:\n \n-Python functions are defined using the def statement, as in Python. They take\n+Python functions are defined using the ``def`` statement, as in Python. They take\n :term:`Python objects<Python object>` as parameters and return Python objects.\n \n-C functions are defined using the new :keyword:`cdef` statement. They take\n+C functions are defined using the new :keyword:`cdef` statement in Cython language or by ``@cfunc`` decorator. They take",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669192258",
            "id": 669192258,
            "in_reply_to_id": 669191991,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTE5MjI1OA==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 314,
            "original_position": 325,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 705745318,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T00:16:21Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669192258",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669198535"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669198535"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Probably again will not align",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T00:35:49Z",
            "diff_hunk": "@@ -189,48 +308,98 @@ Python functions vs. C functions\n \n There are two kinds of function definition in Cython:\n \n-Python functions are defined using the def statement, as in Python. They take\n+Python functions are defined using the ``def`` statement, as in Python. They take\n :term:`Python objects<Python object>` as parameters and return Python objects.\n \n-C functions are defined using the new :keyword:`cdef` statement. They take\n+C functions are defined using the new :keyword:`cdef` statement in Cython language or by ``@cfunc`` decorator. They take\n either Python objects or C values as parameters, and can return either Python\n objects or C values.\n \n Within a Cython module, Python functions and C functions can call each other\n freely, but only Python functions can be called from outside the module by\n interpreted Python code. So, any functions that you want to \"export\" from your\n-Cython module must be declared as Python functions using def.\n-There is also a hybrid function, called :keyword:`cpdef`. A :keyword:`cpdef`\n+Cython module must be declared as Python functions using ``def``.\n+There is also a hybrid function, declared by :keyword:`cpdef` in Cython language or by ``@ccall`` decorator. A hybrid function\n can be called from anywhere, but uses the faster C calling conventions\n-when being called from other Cython code. A :keyword:`cpdef` can also be overridden\n+when being called from other Cython code. A hybrid function can also be overridden\n by a Python method on a subclass or an instance attribute, even when called from Cython.\n If this happens, most performance gains are of course lost and even if it does not,\n-there is a tiny overhead in calling a :keyword:`cpdef` method from Cython compared to\n-calling a :keyword:`cdef` method.\n+there is a tiny overhead in calling a hybfid method from Cython compared to\n+calling a C method.\n \n Parameters of either type of function can be declared to have C data types,\n-using normal C declaration syntax. For example,::\n+using normal C declaration syntax. For example,\n \n-    def spam(int i, char *s):\n-        ...\n+.. tabs::\n \n-    cdef int eggs(unsigned long l, float f):\n-        ...\n+    .. group-tab:: Pure Python\n \n-``ctuples`` may also be used::\n+        .. code-block:: python\n \n-    cdef (int, float) chips((long, long, double) t):\n-        ...\n+            def spam(i: cython.int, s: cython.p_char):\n+                ...\n+\n+            @cfunc\n+            def eggs(l: cython.ulong, f: cython.float) -> cython.int:\n+                ...\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            def spam(int i, char *s):\n+                ...\n+\n+\n+            cdef int eggs(unsigned long l, float f):\n+                ...\n+\n+\n+\n+``ctuples`` may also be used\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            @cfunc\n+            def chips(t: (cython.long, cython.long, cython.double)) -> (cython.int, cython.float):",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669198535",
            "id": 669198535,
            "line": 367,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTE5ODUzNQ==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 368,
            "original_position": 392,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": 383,
            "pull_request_review_id": 705752298,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T00:35:49Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669198535",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669204086"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669204086"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "@scoder Checked manually, Cython version additionally generates\r\n```c\r\n  __pyx_codeobj__2 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple_, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_test_pyx, __pyx_n_s_spam, 5, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__2)) __PYX_ERR(0, 5, __pyx_L1_error)\r\n```\r\nHere easier to see:\r\n\r\n```c\r\n  __pyx_codeobj__2 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS,\r\n__pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple_, __pyx_empty_tuple,\r\n__pyx_empty_tuple, __pyx_kp_s_test_pyx, __pyx_n_s_spam, 5, __pyx_empty_bytes);\r\nif (unlikely(!__pyx_codeobj__2)) __PYX_ERR(0, 5, __pyx_L1_error)\r\n```\r\n",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T00:53:44Z",
            "diff_hunk": "@@ -209,28 +285,78 @@ there is a tiny overhead in calling a :keyword:`cpdef` method from Cython compar\n calling a :keyword:`cdef` method.\n \n Parameters of either type of function can be declared to have C data types,\n-using normal C declaration syntax. For example,::\n+using normal C declaration syntax. For example,\n \n-    def spam(int i, char *s):\n-        ...\n+.. tabs::\n \n-    cdef int eggs(unsigned long l, float f):\n-        ...\n+    .. group-tab:: Pure Python\n \n-``ctuples`` may also be used::\n+        .. code-block:: python\n \n-    cdef (int, float) chips((long, long, double) t):\n-        ...\n+            def spam(i: cython.int, s: cython.p_char):\n+                ...\n+\n+            @cython.cfunc\n+            def eggs(l: cython.ulong, f: cython.float) -> cython.int:\n+                ...\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            def spam(int i, char *s):\n+                ...\n+\n+\n+            cdef int eggs(unsigned long l, float f):\n+                ...\n+\n+\n+\n+``ctuples`` may also be used\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+         def chips(t: (cython.long, cython.long, cython.double)) -> (cython.int, cython.float)\n+            ...\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            cdef (int, float) chips((long, long, double) t):\n+                ...\n \n When a parameter of a Python function is declared to have a C data type, it is\n passed in as a Python object and automatically converted to a C value, if\n possible. In other words, the definition of ``spam`` above is equivalent to\n-writing::\n+writing\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            def spam(python_i, python_s):\n+                i: cython.int = python_i\n+                s: cython.p_char = python_s\n+                ...\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            def spam(python_i, python_s):\n+                cdef int i = python_i\n+                cdef char* s = python_s\n+                ...",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669204086",
            "id": 669204086,
            "in_reply_to_id": 660155346,
            "line": 400,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTIwNDA4Ng==",
            "original_commit_id": "b1067464260957c69d6756e77a726c71183d2569",
            "original_line": 399,
            "original_position": 290,
            "original_start_line": 345,
            "path": "docs/src/userguide/language_basics.rst",
            "position": 417,
            "pull_request_review_id": 705758374,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": 388,
            "start_side": "RIGHT",
            "updated_at": "2021-07-14T00:54:19Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669204086",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669206828"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669206828"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Will not align",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T01:02:22Z",
            "diff_hunk": "@@ -257,10 +426,24 @@ Python objects as parameters and return values\n If no type is specified for a parameter or return value, it is assumed to be a\n Python object. (Note that this is different from the C convention, where it\n would default to int.) For example, the following defines a C function that\n-takes two Python objects as parameters and returns a Python object::\n+takes two Python objects as parameters and returns a Python object\n \n-    cdef spamobjs(x, y):\n-        ...\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            @cfunc\n+            def spamobjs(x, y):\n+                ...\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            cdef spamobjs(x, y):",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669206828",
            "id": 669206828,
            "line": 445,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTIwNjgyOA==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 445,
            "original_position": 467,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": 459,
            "pull_request_review_id": 705761372,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T01:02:22Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669206828",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669207391"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669207391"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Will not align",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T01:04:26Z",
            "diff_hunk": "@@ -274,25 +457,50 @@ parameters and a new reference is returned).\n \n The name object can also be used to explicitly declare something as a Python\n object. This can be useful if the name being declared would otherwise be taken\n-as the name of a type, for example,::\n+as the name of a type, for example,\n \n-    cdef ftang(object int):\n-        ...\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            @cfunc\n+            def ftang(int: object):\n+                ...\n+\n+    .. group-tab:: Cython\n \n-declares a parameter called int which is a Python object. You can also use\n+        .. code-block:: cython\n+\n+            cdef ftang(object int):",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669207391",
            "id": 669207391,
            "line": 476,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTIwNzM5MQ==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 476,
            "original_position": 496,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": 488,
            "pull_request_review_id": 705762085,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T01:04:26Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669207391",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669209695"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669209695"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Will not align",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T01:12:08Z",
            "diff_hunk": "@@ -374,19 +593,33 @@ through defined error return values.  For functions that return a Python object\n ``NULL`` pointer, so any function returning a Python object has a well-defined\n error return value.\n \n-While this is always the case for :keyword:`def` functions, functions\n-defined as :keyword:`cdef` or :keyword:`cpdef` can return arbitrary C types,\n+While this is always the case for C functions, functions\n+defined as C functions or hybryd functions can return arbitrary C types,\n which do not have such a well-defined error return value.  Thus, if an\n exception is detected in such a function, a warning message is printed,\n the exception is ignored, and the function returns immediately without\n propagating the exception to its caller.\n \n If you want such a C function to be able to propagate exceptions, you need\n to declare an exception return value for it as a contract with the caller.\n-Here is an example::\n+Here is an example\n \n-    cdef int spam() except -1:\n-        ...\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            @exceptval(-1)\n+            def spam() -> cython.int:\n+                ...\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            cdef int spam() except -1:",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669209695",
            "id": 669209695,
            "line": 622,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTIwOTY5NQ==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 621,
            "original_position": 601,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": 594,
            "pull_request_review_id": 705764698,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T01:12:08Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669209695",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669210464"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669210464"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Will not align",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T01:14:44Z",
            "diff_hunk": "@@ -404,20 +637,56 @@ returns small results.\n \n If all possible return values are legal and you\n can't reserve one entirely for signalling errors, you can use an alternative\n-form of exception value declaration::\n+form of exception value declaration\n \n-    cdef int spam() except? -1:\n-        ...\n+.. tabs::\n \n-The \"?\" indicates that the value ``-1`` only signals a possible error. In this\n-case, Cython generates a call to :c:func:`PyErr_Occurred` if the exception value\n-is returned, to make sure it really received an exception and not just a normal\n-result.\n+    .. group-tab:: Pure Python\n \n-There is also a third form of exception value declaration::\n+        .. code-block:: python\n \n-    cdef int spam() except *:\n-        ...\n+            @exceptval(-1, check=True)",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669210464",
            "id": 669210464,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTIxMDQ2NA==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 648,
            "original_position": 628,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 705765671,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T01:14:44Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669210464",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669211577"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669211577"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "no need in new line here and in corresponding tab",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T01:18:26Z",
            "diff_hunk": "@@ -404,20 +637,56 @@ returns small results.\n \n If all possible return values are legal and you\n can't reserve one entirely for signalling errors, you can use an alternative\n-form of exception value declaration::\n+form of exception value declaration\n \n-    cdef int spam() except? -1:\n-        ...\n+.. tabs::\n \n-The \"?\" indicates that the value ``-1`` only signals a possible error. In this\n-case, Cython generates a call to :c:func:`PyErr_Occurred` if the exception value\n-is returned, to make sure it really received an exception and not just a normal\n-result.\n+    .. group-tab:: Pure Python\n \n-There is also a third form of exception value declaration::\n+        .. code-block:: python\n \n-    cdef int spam() except *:\n-        ...\n+            @exceptval(-1, check=True)\n+            def spam() -> cython.int:\n+                ...\n+\n+        The ``check=True`` indicates that the value ``-1`` only signals a possible error.\n+        In this\n+        case, Cython generates a call to :c:func:`PyErr_Occurred` if the exception value",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669211577",
            "id": 669211577,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTIxMTU3Nw==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 654,
            "original_position": 634,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 705766992,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T01:18:27Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669211577",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669211990"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669211990"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Please, move the same text out of tabs",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T01:19:51Z",
            "diff_hunk": "@@ -404,20 +637,56 @@ returns small results.\n \n If all possible return values are legal and you\n can't reserve one entirely for signalling errors, you can use an alternative\n-form of exception value declaration::\n+form of exception value declaration\n \n-    cdef int spam() except? -1:\n-        ...\n+.. tabs::\n \n-The \"?\" indicates that the value ``-1`` only signals a possible error. In this\n-case, Cython generates a call to :c:func:`PyErr_Occurred` if the exception value\n-is returned, to make sure it really received an exception and not just a normal\n-result.\n+    .. group-tab:: Pure Python\n \n-There is also a third form of exception value declaration::\n+        .. code-block:: python\n \n-    cdef int spam() except *:\n-        ...\n+            @exceptval(-1, check=True)\n+            def spam() -> cython.int:\n+                ...\n+\n+        The ``check=True`` indicates that the value ``-1`` only signals a possible error.\n+        In this\n+        case, Cython generates a call to :c:func:`PyErr_Occurred` if the exception value\n+        is returned, to make sure it really received an exception and not just a normal\n+        result.\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            cdef int spam() except? -1:\n+                ...\n+\n+        The ``?`` indicates that the value ``-1`` only signals a possible error.\n+        In this\n+        case, Cython generates a call to :c:func:`PyErr_Occurred` if the exception value\n+        is returned, to make sure it really received an exception and not just a normal",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669211990",
            "id": 669211990,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTIxMTk5MA==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 668,
            "original_position": 648,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 705767456,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T01:19:51Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669211990",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669212127"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669212127"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Will not align",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T01:20:18Z",
            "diff_hunk": "@@ -404,20 +637,56 @@ returns small results.\n \n If all possible return values are legal and you\n can't reserve one entirely for signalling errors, you can use an alternative\n-form of exception value declaration::\n+form of exception value declaration\n \n-    cdef int spam() except? -1:\n-        ...\n+.. tabs::\n \n-The \"?\" indicates that the value ``-1`` only signals a possible error. In this\n-case, Cython generates a call to :c:func:`PyErr_Occurred` if the exception value\n-is returned, to make sure it really received an exception and not just a normal\n-result.\n+    .. group-tab:: Pure Python\n \n-There is also a third form of exception value declaration::\n+        .. code-block:: python\n \n-    cdef int spam() except *:\n-        ...\n+            @exceptval(-1, check=True)\n+            def spam() -> cython.int:\n+                ...\n+\n+        The ``check=True`` indicates that the value ``-1`` only signals a possible error.\n+        In this\n+        case, Cython generates a call to :c:func:`PyErr_Occurred` if the exception value\n+        is returned, to make sure it really received an exception and not just a normal\n+        result.\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            cdef int spam() except? -1:\n+                ...\n+\n+        The ``?`` indicates that the value ``-1`` only signals a possible error.\n+        In this\n+        case, Cython generates a call to :c:func:`PyErr_Occurred` if the exception value\n+        is returned, to make sure it really received an exception and not just a normal\n+        result.\n+\n+\n+There is also a third form of exception value declaration\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            @exceptval(check=True)\n+            def spam() -> cython.int:\n+                ...\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            cdef int spam() except *:",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669212127",
            "id": 669212127,
            "line": 686,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTIxMjEyNw==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 688,
            "original_position": 668,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": 656,
            "pull_request_review_id": 705767610,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T01:20:18Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669212127",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669228877"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669228877"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "You forgot `cython.cfunc` and same in other places",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T02:11:30Z",
            "diff_hunk": "@@ -404,20 +637,56 @@ returns small results.\n \n If all possible return values are legal and you\n can't reserve one entirely for signalling errors, you can use an alternative\n-form of exception value declaration::\n+form of exception value declaration\n \n-    cdef int spam() except? -1:\n-        ...\n+.. tabs::\n \n-The \"?\" indicates that the value ``-1`` only signals a possible error. In this\n-case, Cython generates a call to :c:func:`PyErr_Occurred` if the exception value\n-is returned, to make sure it really received an exception and not just a normal\n-result.\n+    .. group-tab:: Pure Python\n \n-There is also a third form of exception value declaration::\n+        .. code-block:: python\n \n-    cdef int spam() except *:\n-        ...\n+            @exceptval(-1, check=True)\n+            def spam() -> cython.int:\n+                ...\n+\n+        The ``check=True`` indicates that the value ``-1`` only signals a possible error.\n+        In this\n+        case, Cython generates a call to :c:func:`PyErr_Occurred` if the exception value\n+        is returned, to make sure it really received an exception and not just a normal\n+        result.\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            cdef int spam() except? -1:\n+                ...\n+\n+        The ``?`` indicates that the value ``-1`` only signals a possible error.\n+        In this\n+        case, Cython generates a call to :c:func:`PyErr_Occurred` if the exception value\n+        is returned, to make sure it really received an exception and not just a normal\n+        result.\n+\n+\n+There is also a third form of exception value declaration\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            @exceptval(check=True)",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669228877",
            "id": 669228877,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTIyODg3Nw==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 680,
            "original_position": 660,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 705786578,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T02:11:31Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669228877",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669229472"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669229472"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "But I doubt it a little, so you better double check",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T02:13:24Z",
            "diff_hunk": "@@ -404,20 +637,56 @@ returns small results.\n \n If all possible return values are legal and you\n can't reserve one entirely for signalling errors, you can use an alternative\n-form of exception value declaration::\n+form of exception value declaration\n \n-    cdef int spam() except? -1:\n-        ...\n+.. tabs::\n \n-The \"?\" indicates that the value ``-1`` only signals a possible error. In this\n-case, Cython generates a call to :c:func:`PyErr_Occurred` if the exception value\n-is returned, to make sure it really received an exception and not just a normal\n-result.\n+    .. group-tab:: Pure Python\n \n-There is also a third form of exception value declaration::\n+        .. code-block:: python\n \n-    cdef int spam() except *:\n-        ...\n+            @exceptval(-1, check=True)\n+            def spam() -> cython.int:\n+                ...\n+\n+        The ``check=True`` indicates that the value ``-1`` only signals a possible error.\n+        In this\n+        case, Cython generates a call to :c:func:`PyErr_Occurred` if the exception value\n+        is returned, to make sure it really received an exception and not just a normal\n+        result.\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            cdef int spam() except? -1:\n+                ...\n+\n+        The ``?`` indicates that the value ``-1`` only signals a possible error.\n+        In this\n+        case, Cython generates a call to :c:func:`PyErr_Occurred` if the exception value\n+        is returned, to make sure it really received an exception and not just a normal\n+        result.\n+\n+\n+There is also a third form of exception value declaration\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            @exceptval(check=True)",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669229472",
            "id": 669229472,
            "in_reply_to_id": 669228877,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTIyOTQ3Mg==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 680,
            "original_position": 660,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 705787291,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T02:13:25Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669229472",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669235921"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669235921"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Created issue for that #4282",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T02:33:28Z",
            "diff_hunk": "@@ -430,14 +699,16 @@ An external C++ function that may raise an exception can be declared with::\n \n     cdef int spam() except +\n \n+.. note:: Pure python mode currently does not have equivalent to `except +`.",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669235921",
            "id": 669235921,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTIzNTkyMQ==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 702,
            "original_position": 677,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 705794519,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T02:33:28Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669235921",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669238439"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669238439"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "```suggestion\r\n.. note:: Pure python mode currently does not have equivalent to `except +`. (Github issue :issue:`4282`)\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T02:40:54Z",
            "diff_hunk": "@@ -430,14 +699,16 @@ An external C++ function that may raise an exception can be declared with::\n \n     cdef int spam() except +\n \n+.. note:: Pure python mode currently does not have equivalent to `except +`.",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669238439",
            "id": 669238439,
            "in_reply_to_id": 669235921,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTIzODQzOQ==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 702,
            "original_position": 677,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 705797375,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T02:40:55Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669238439",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669239019"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669239019"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "And also it would be really great if you will add those references to all other notes that needs that.",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T02:42:27Z",
            "diff_hunk": "@@ -430,14 +699,16 @@ An external C++ function that may raise an exception can be declared with::\n \n     cdef int spam() except +\n \n+.. note:: Pure python mode currently does not have equivalent to `except +`.",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669239019",
            "id": 669239019,
            "in_reply_to_id": 669235921,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTIzOTAxOQ==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 702,
            "original_position": 677,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 705798018,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T02:42:27Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669239019",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669240215"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669240215"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Again, this should be module-level and there should be no main",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T02:46:06Z",
            "diff_hunk": "@@ -548,10 +844,24 @@ as the C string is needed. If you can't guarantee that the Python string will\n live long enough, you will need to copy the C string.\n \n Cython detects and prevents some mistakes of this kind. For instance, if you\n-attempt something like::\n+attempt something like\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n \n-    cdef char *s\n-    s = pystring1 + pystring2\n+        .. code-block:: python\n+\n+            def main():\n+                s: cython.p_char\n+                s = pystring1 + pystring2",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669240215",
            "id": 669240215,
            "line": 855,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTI0MDIxNQ==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 857,
            "original_position": 770,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": 758,
            "pull_request_review_id": 705799368,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T02:46:06Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669240215",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669240382"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669240382"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "this should be module-level and there should be no main",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T02:46:45Z",
            "diff_hunk": "@@ -562,11 +872,26 @@ leaving ``s`` dangling. Since this code could not possibly work, Cython refuses\n compile it.\n \n The solution is to assign the result of the concatenation to a Python\n-variable, and then obtain the ``char*`` from that, i.e.::\n+variable, and then obtain the pointer to char from that, i.e.\n+\n+.. tabs::\n \n-    cdef char *s\n-    p = pystring1 + pystring2\n-    s = p\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            def main():\n+                s: cython.p_char\n+                p = pystring1 + pystring2\n+                s = p",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669240382",
            "id": 669240382,
            "line": 884,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTI0MDM4Mg==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 886,
            "original_position": 800,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": 788,
            "pull_request_review_id": 705799598,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T02:46:45Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669240382",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669240924"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669240924"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "`cython.cast`\r\nYou may consider moving this to tabs too",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T02:48:15Z",
            "diff_hunk": "@@ -581,44 +906,93 @@ be careful what you do.\n Type Casting\n ------------\n \n-Where C uses ``\"(\"`` and ``\")\"``, Cython uses ``\"<\"`` and ``\">\"``. For example::\n+Cython language supports type casting in a simmilar way as C. Where C uses ``\"(\"`` and ``\")\"``,\n+Cython uses ``\"<\"`` and ``\">\"``. In pure python mode, ``cast()`` function is used. For example:",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669240924",
            "id": 669240924,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTI0MDkyNA==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 910,
            "original_position": 818,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 705800172,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T02:48:15Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669240924",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669242654"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669242654"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "The only place as far where you should not move text, yeah it'll be better it you could turn off tabs but will left functionality of changing content. (I think it's good issue for sphinx-tabs repo)",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T02:53:44Z",
            "diff_hunk": "@@ -581,44 +906,93 @@ be careful what you do.\n Type Casting\n ------------\n \n-Where C uses ``\"(\"`` and ``\")\"``, Cython uses ``\"<\"`` and ``\">\"``. For example::\n+Cython language supports type casting in a simmilar way as C. Where C uses ``\"(\"`` and ``\")\"``,\n+Cython uses ``\"<\"`` and ``\">\"``. In pure python mode, ``cast()`` function is used. For example:\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            def main():\n+                p: cython.p_char\n+                q: cython.p_float\n+                p = cast(cython.p_char, q)\n+\n+        When casting a C value to a Python object type or vice versa,\n+        Cython will attempt a coercion. Simple examples are casts like ``cast(int, pyobj)``,\n+        which converts a Python number to a plain C ``int`` value, or ``cast(bytes, charptr)``,\n+        which copies a C ``char*`` string into a new Python bytes object.\n+\n+         .. note:: Cython will not prevent a redundant cast, but emits a warning for it.\n \n-    cdef char *p\n-    cdef float *q\n-    p = <char*>q\n+        To get the address of some Python object, use a cast to a pointer type\n+        like ``cast(p_void, ...)`` or ``cast(pointer(PyObject), ...)``.\n+        You can also cast a C pointer back to a Python object reference\n+        with ``cast(object, ...)``, or a more specific builtin or extension type\n+        (e.g. ``cast(MyExtType, ptr)``). This will increase the reference count of\n+        the object by one, i.e. the cast returns an owned reference.\n+        Here is an example:",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669242654",
            "id": 669242654,
            "line": 934,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTI0MjY1NA==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 936,
            "original_position": 847,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": 835,
            "pull_request_review_id": 705802111,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T09:30:08Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669242654",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669243892"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669243892"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Will be good to move to tabs",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T02:57:23Z",
            "diff_hunk": "@@ -581,44 +906,93 @@ be careful what you do.\n Type Casting\n ------------\n \n-Where C uses ``\"(\"`` and ``\")\"``, Cython uses ``\"<\"`` and ``\">\"``. For example::\n+Cython language supports type casting in a simmilar way as C. Where C uses ``\"(\"`` and ``\")\"``,\n+Cython uses ``\"<\"`` and ``\">\"``. In pure python mode, ``cast()`` function is used. For example:\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            def main():\n+                p: cython.p_char\n+                q: cython.p_float\n+                p = cast(cython.p_char, q)\n+\n+        When casting a C value to a Python object type or vice versa,\n+        Cython will attempt a coercion. Simple examples are casts like ``cast(int, pyobj)``,\n+        which converts a Python number to a plain C ``int`` value, or ``cast(bytes, charptr)``,\n+        which copies a C ``char*`` string into a new Python bytes object.\n+\n+         .. note:: Cython will not prevent a redundant cast, but emits a warning for it.\n \n-    cdef char *p\n-    cdef float *q\n-    p = <char*>q\n+        To get the address of some Python object, use a cast to a pointer type\n+        like ``cast(p_void, ...)`` or ``cast(pointer(PyObject), ...)``.\n+        You can also cast a C pointer back to a Python object reference\n+        with ``cast(object, ...)``, or a more specific builtin or extension type\n+        (e.g. ``cast(MyExtType, ptr)``). This will increase the reference count of\n+        the object by one, i.e. the cast returns an owned reference.\n+        Here is an example:\n \n-When casting a C value to a Python object type or vice versa,\n-Cython will attempt a coercion. Simple examples are casts like ``<int>pyobj``,\n-which converts a Python number to a plain C ``int`` value, or ``<bytes>charptr``,\n-which copies a C ``char*`` string into a new Python bytes object.\n \n- .. note:: Cython will not prevent a redundant cast, but emits a warning for it.\n+    .. group-tab:: Cython\n \n-To get the address of some Python object, use a cast to a pointer type\n-like ``<void*>`` or ``<PyObject*>``.\n-You can also cast a C pointer back to a Python object reference\n-with ``<object>``, or a more specific builtin or extension type\n-(e.g. ``<MyExtType>ptr``). This will increase the reference count of\n-the object by one, i.e. the cast returns an owned reference.\n-Here is an example:\n+        .. code-block:: cython\n \n-.. literalinclude:: ../../examples/userguide/language_basics/casting_python.pyx\n+            cdef char *p\n+            cdef float *q\n+            p = <char*>q\n \n-The precedence of ``<...>`` is such that ``<type>a.b.c`` is interpreted as ``<type>(a.b.c)``.\n+        When casting a C value to a Python object type or vice versa,\n+        Cython will attempt a coercion. Simple examples are casts like ``<int>pyobj``,\n+        which converts a Python number to a plain C ``int`` value, or ``<bytes>charptr``,\n+        which copies a C ``char*`` string into a new Python bytes object.\n \n-Casting to ``<object>`` creates an owned reference. Cython will automatically\n-perform a ``Py_INCREF`` and ``Py_DECREF`` operation. Casting to\n-``<PyObject *>`` creates a borrowed reference, leaving the refcount unchanged.\n+         .. note:: Cython will not prevent a redundant cast, but emits a warning for it.\n+\n+        To get the address of some Python object, use a cast to a pointer type\n+        like ``<void*>`` or ``<PyObject*>``.\n+        You can also cast a C pointer back to a Python object reference\n+        with ``<object>``, or a more specific builtin or extension type\n+        (e.g. ``<MyExtType>ptr``). This will increase the reference count of\n+        the object by one, i.e. the cast returns an owned reference.\n+        Here is an example:\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. literalinclude:: ../../examples/userguide/language_basics/casting_python.pxd\n+            :caption: casting_python.pxd\n+        .. literalinclude:: ../../examples/userguide/language_basics/casting_python.py\n+            :caption: casting_python.py\n+\n+        Casting to ``cast(object, ...)`` creates an owned reference. Cython will automatically\n+        perform a ``Py_INCREF`` and ``Py_DECREF`` operation. Casting to\n+        ``cast(pointer(PyObject), ...)`` creates a borrowed reference, leaving the refcount unchanged.\n+\n+    .. group-tab:: Cython\n+\n+        .. literalinclude:: ../../examples/userguide/language_basics/casting_python.pyx\n+            :caption: casting_python.pyx\n+\n+        The precedence of ``<...>`` is such that ``<type>a.b.c`` is interpreted as ``<type>(a.b.c)``.\n+\n+        Casting to ``<object>`` creates an owned reference. Cython will automatically\n+        perform a ``Py_INCREF`` and ``Py_DECREF`` operation. Casting to\n+        ``<PyObject *>`` creates a borrowed reference, leaving the refcount unchanged.\n \n .. _checked_type_casts:\n \n Checked Type Casts\n ------------------\n \n-A cast like ``<MyExtensionType>x`` will cast x to the class\n+A cast like ``<MyExtensionType>x`` or ``cast(MyExtensionType, x)`` will cast ``x`` to the class\n ``MyExtensionType`` without any checking at all.\n \n-To have a cast checked, use the syntax like: ``<MyExtensionType?>x``.\n+To have a cast checked, use the syntax like: ``<MyExtensionType?>x`` in Cython language",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669243892",
            "id": 669243892,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTI0Mzg5Mg==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 994,
            "original_position": 924,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 705803451,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T02:57:24Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669243892",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669244076"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669244076"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Just as reminder, i wil not comment on every one like those",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T02:58:01Z",
            "diff_hunk": "@@ -581,44 +906,93 @@ be careful what you do.\n Type Casting\n ------------\n \n-Where C uses ``\"(\"`` and ``\")\"``, Cython uses ``\"<\"`` and ``\">\"``. For example::\n+Cython language supports type casting in a simmilar way as C. Where C uses ``\"(\"`` and ``\")\"``,\n+Cython uses ``\"<\"`` and ``\">\"``. In pure python mode, ``cast()`` function is used. For example:\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            def main():\n+                p: cython.p_char\n+                q: cython.p_float\n+                p = cast(cython.p_char, q)\n+\n+        When casting a C value to a Python object type or vice versa,\n+        Cython will attempt a coercion. Simple examples are casts like ``cast(int, pyobj)``,\n+        which converts a Python number to a plain C ``int`` value, or ``cast(bytes, charptr)``,\n+        which copies a C ``char*`` string into a new Python bytes object.\n+\n+         .. note:: Cython will not prevent a redundant cast, but emits a warning for it.\n \n-    cdef char *p\n-    cdef float *q\n-    p = <char*>q\n+        To get the address of some Python object, use a cast to a pointer type\n+        like ``cast(p_void, ...)`` or ``cast(pointer(PyObject), ...)``.\n+        You can also cast a C pointer back to a Python object reference\n+        with ``cast(object, ...)``, or a more specific builtin or extension type\n+        (e.g. ``cast(MyExtType, ptr)``). This will increase the reference count of\n+        the object by one, i.e. the cast returns an owned reference.\n+        Here is an example:\n \n-When casting a C value to a Python object type or vice versa,\n-Cython will attempt a coercion. Simple examples are casts like ``<int>pyobj``,\n-which converts a Python number to a plain C ``int`` value, or ``<bytes>charptr``,\n-which copies a C ``char*`` string into a new Python bytes object.\n \n- .. note:: Cython will not prevent a redundant cast, but emits a warning for it.\n+    .. group-tab:: Cython\n \n-To get the address of some Python object, use a cast to a pointer type\n-like ``<void*>`` or ``<PyObject*>``.\n-You can also cast a C pointer back to a Python object reference\n-with ``<object>``, or a more specific builtin or extension type\n-(e.g. ``<MyExtType>ptr``). This will increase the reference count of\n-the object by one, i.e. the cast returns an owned reference.\n-Here is an example:\n+        .. code-block:: cython\n \n-.. literalinclude:: ../../examples/userguide/language_basics/casting_python.pyx\n+            cdef char *p\n+            cdef float *q\n+            p = <char*>q\n \n-The precedence of ``<...>`` is such that ``<type>a.b.c`` is interpreted as ``<type>(a.b.c)``.\n+        When casting a C value to a Python object type or vice versa,\n+        Cython will attempt a coercion. Simple examples are casts like ``<int>pyobj``,\n+        which converts a Python number to a plain C ``int`` value, or ``<bytes>charptr``,\n+        which copies a C ``char*`` string into a new Python bytes object.\n \n-Casting to ``<object>`` creates an owned reference. Cython will automatically\n-perform a ``Py_INCREF`` and ``Py_DECREF`` operation. Casting to\n-``<PyObject *>`` creates a borrowed reference, leaving the refcount unchanged.\n+         .. note:: Cython will not prevent a redundant cast, but emits a warning for it.\n+\n+        To get the address of some Python object, use a cast to a pointer type\n+        like ``<void*>`` or ``<PyObject*>``.\n+        You can also cast a C pointer back to a Python object reference\n+        with ``<object>``, or a more specific builtin or extension type\n+        (e.g. ``<MyExtType>ptr``). This will increase the reference count of\n+        the object by one, i.e. the cast returns an owned reference.\n+        Here is an example:\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. literalinclude:: ../../examples/userguide/language_basics/casting_python.pxd\n+            :caption: casting_python.pxd\n+        .. literalinclude:: ../../examples/userguide/language_basics/casting_python.py\n+            :caption: casting_python.py\n+\n+        Casting to ``cast(object, ...)`` creates an owned reference. Cython will automatically\n+        perform a ``Py_INCREF`` and ``Py_DECREF`` operation. Casting to\n+        ``cast(pointer(PyObject), ...)`` creates a borrowed reference, leaving the refcount unchanged.\n+\n+    .. group-tab:: Cython\n+\n+        .. literalinclude:: ../../examples/userguide/language_basics/casting_python.pyx\n+            :caption: casting_python.pyx\n+\n+        The precedence of ``<...>`` is such that ``<type>a.b.c`` is interpreted as ``<type>(a.b.c)``.\n+\n+        Casting to ``<object>`` creates an owned reference. Cython will automatically\n+        perform a ``Py_INCREF`` and ``Py_DECREF`` operation. Casting to\n+        ``<PyObject *>`` creates a borrowed reference, leaving the refcount unchanged.\n \n .. _checked_type_casts:\n \n Checked Type Casts\n ------------------\n \n-A cast like ``<MyExtensionType>x`` will cast x to the class\n+A cast like ``<MyExtensionType>x`` or ``cast(MyExtensionType, x)`` will cast ``x`` to the class\n ``MyExtensionType`` without any checking at all.\n \n-To have a cast checked, use the syntax like: ``<MyExtensionType?>x``.\n+To have a cast checked, use the syntax like: ``<MyExtensionType?>x`` in Cython language",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669244076",
            "id": 669244076,
            "in_reply_to_id": 669243892,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTI0NDA3Ng==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 994,
            "original_position": 924,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 705803640,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T02:58:02Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669244076",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669244624"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669244624"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "`cython.NULL` for pure python",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T02:59:58Z",
            "diff_hunk": "@@ -651,16 +1025,35 @@ direct equivalent in Python.\n * An integer literal is treated as a C constant, and will\n   be truncated to whatever size your C compiler thinks appropriate.\n   To get a Python integer (of arbitrary precision) cast immediately to\n-  an object (e.g. ``<object>100000000000000000000``). The ``L``, ``LL``,\n-  and ``U`` suffixes have the same meaning as in C.\n+  an object (e.g. ``<object>100000000000000000000`` or ``cast(object, 100000000000000000000)``). The ``L``, ``LL``,\n+  and ``U`` suffixes have the same meaning in Cython language as in C.\n * There is no ``->`` operator in Cython. Instead of ``p->x``, use ``p.x``\n * There is no unary ``*`` operator in Cython. Instead of ``*p``, use ``p[0]``\n-* There is an ``&`` operator, with the same semantics as in C.\n-* The null C pointer is called ``NULL``, not ``0`` (and ``NULL`` is a reserved word).\n-* Type casts are written ``<type>value`` , for example,::\n+* There is an ``&`` operator in Cython language, with the same semantics as in C. In pure python mode use ``address()`` function.\n+* The null C pointer is called ``NULL``, not ``0``. ``NULL`` is a reserved word in Cython language",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669244624",
            "id": 669244624,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTI0NDYyNA==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 1033,
            "original_position": 943,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 705804288,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T02:59:59Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669244624",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669245055"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669245055"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "You know, main and stuff",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T03:01:08Z",
            "diff_hunk": "@@ -651,16 +1025,35 @@ direct equivalent in Python.\n * An integer literal is treated as a C constant, and will\n   be truncated to whatever size your C compiler thinks appropriate.\n   To get a Python integer (of arbitrary precision) cast immediately to\n-  an object (e.g. ``<object>100000000000000000000``). The ``L``, ``LL``,\n-  and ``U`` suffixes have the same meaning as in C.\n+  an object (e.g. ``<object>100000000000000000000`` or ``cast(object, 100000000000000000000)``). The ``L``, ``LL``,\n+  and ``U`` suffixes have the same meaning in Cython language as in C.\n * There is no ``->`` operator in Cython. Instead of ``p->x``, use ``p.x``\n * There is no unary ``*`` operator in Cython. Instead of ``*p``, use ``p[0]``\n-* There is an ``&`` operator, with the same semantics as in C.\n-* The null C pointer is called ``NULL``, not ``0`` (and ``NULL`` is a reserved word).\n-* Type casts are written ``<type>value`` , for example,::\n+* There is an ``&`` operator in Cython language, with the same semantics as in C. In pure python mode use ``address()`` function.\n+* The null C pointer is called ``NULL``, not ``0``. ``NULL`` is a reserved word in Cython language\n+  and special object in pure python mode.\n+* Type casts are written ``<type>value`` or ``cast(type, value)``, for example,\n+\n+  .. tabs::\n+\n+      .. group-tab:: Pure Python\n \n-        cdef char* p, float* q\n-        p = <char*>q\n+          .. code-block:: python\n+\n+              def main():\n+                  p: cython.p_char\n+                  q: cython.p_float\n+\n+                  p = cast(cython.p_char, q)",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669245055",
            "id": 669245055,
            "line": 1046,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTI0NTA1NQ==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 1047,
            "original_position": 959,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": 950,
            "pull_request_review_id": 705804747,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T03:01:09Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669245055",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669354498"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669354498"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Hmm so I don't understand. I am still learning cython so I don't understand everything, but it means that I should move cython language version to `main()` function in order to make variables local?",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T07:18:17Z",
            "diff_hunk": "@@ -0,0 +1,22 @@\n+from cython.cimports.cpython.ref import PyObject\n+\n+def main():\n+\n+    python_string = \"foo\"\n+\n+    # Note that the variables below are automatically inferred\n+    # as the correct pointer type that is assigned to them.\n+    # They do not need to be typed explicitly.",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669354498",
            "id": 669354498,
            "in_reply_to_id": 660181392,
            "line": 9,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTM1NDQ5OA==",
            "original_commit_id": "b1067464260957c69d6756e77a726c71183d2569",
            "original_line": 9,
            "original_position": 9,
            "original_start_line": 7,
            "path": "docs/examples/userguide/language_basics/casting_python.py",
            "position": 9,
            "pull_request_review_id": 705933362,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": 7,
            "start_side": "RIGHT",
            "updated_at": "2021-07-14T07:18:18Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669354498",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669358155"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669358155"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "done thank you!",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T07:24:03Z",
            "diff_hunk": "@@ -1,8 +1,10 @@\n from __future__ import print_function\n \n+\n cdef class Shrubbery:\n     cdef int width, height",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669358155",
            "id": 669358155,
            "in_reply_to_id": 669121245,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTM1ODE1NQ==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 5,
            "original_position": 5,
            "original_start_line": null,
            "path": "docs/examples/userguide/extension_types/shrubbery.pyx",
            "position": null,
            "pull_request_review_id": 705937999,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T07:24:03Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669358155",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669359307"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669359307"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "The code is not 100% aligned everywhere. I have focused mainly finish the text around the code tu support both versions.",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T07:25:58Z",
            "diff_hunk": "@@ -44,72 +47,137 @@ the use of ‘early binding’ programming techniques.\n C variable and type definitions\n ===============================\n \n-The :keyword:`cdef` statement is used to declare C variables, either local or\n-module-level::\n+C variables can be declared by using the :keyword:`cdef` statement, by annotating\n+variable by special cython type or using function ``declare()``. Statement :keyword:`cdef`\n+and function ``declare()`` can declare either local or\n+module-level variables, but annotated version currently supports only local variables:\n \n-    cdef int i, j, k\n-    cdef float f, g[42], *h\n+.. tabs::\n \n-and C :keyword:`struct`, :keyword:`union` or :keyword:`enum` types:\n+    .. group-tab:: Pure Python\n \n-.. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.pyx\n+        .. code-block:: python\n \n-See also :ref:`struct-union-enum-styles`\n+            global_x = declare(cython.int)\n+            def main():\n+                i: cython.int\n+                j: cython.int\n+                k: cython.int\n+                f: cython.float\n+                g: cython.int[42]\n+                h: cython.p_float\n \n-.. note::\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            cdef int i, j, k",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669359307",
            "id": 669359307,
            "in_reply_to_id": 669137319,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTM1OTMwNw==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 74,
            "original_position": 46,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 705939523,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T07:25:58Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669359307",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669362405"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669362405"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "@0dminnimda to be honest I don't understand. @scoder mentioned that annotated variables should be moved to function since Cython does not support annotated global variables:\r\n\r\nhttps://github.com/cython/cython/pull/4242#discussion_r660033760\r\nhttps://github.com/cython/cython/pull/4242#pullrequestreview-694259168\r\n\r\nHence, I put all code to `main()` function. Or better idea is to use `declare()`? I am not sure what is better :-(",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T07:30:44Z",
            "diff_hunk": "@@ -119,40 +187,88 @@ You can read more about them in :ref:`extension-types`.\n Types\n -----\n \n-Cython uses the normal C syntax for C types, including pointers.  It provides\n-all the standard C types, namely ``char``, ``short``, ``int``, ``long``,\n-``long long`` as well as their ``unsigned`` versions, e.g. ``unsigned int``.\n-The special ``bint`` type is used for C boolean values (``int`` with 0/non-0\n-values for False/True) and ``Py_ssize_t`` for (signed) sizes of Python\n-containers.\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        Cython supports annotaions for C types, including pointers.  It provides\n+        all the standard C types, namely ``char``, ``short``, ``int``, ``long``,\n+        ``long long`` as well as their ``unsigned`` versions, e.g. ``uint``.\n+        The special ``bint`` type is used for C boolean values (``int`` with 0/non-0\n+        values for False/True) and ``Py_ssize_t`` for (signed) sizes of Python\n+        containers.\n+\n+        Pointer types are constructed by appending a ``p_`` to the base type\n+        they point to, e.g. ``pp_int`` for a pointer to a pointer to a C int.\n+        Further pointer types can be constructed with ``pointer()`` function.\n+        Arrays use the normal C array syntax, e.g. ``int[10]``, and the size must be known\n+        at compile time for stack allocated arrays. Cython doesn't support variable length arrays from C99.\n+        Note that Cython uses array access for pointer dereferencing.\n+\n+    .. group-tab:: Cython\n \n-Pointer types are constructed as in C, by appending a ``*`` to the base type\n-they point to, e.g. ``int**`` for a pointer to a pointer to a C int.\n-Arrays use the normal C array syntax, e.g. ``int[10]``, and the size must be known\n-at compile time for stack allocated arrays. Cython doesn't support variable length arrays from C99.\n-Note that Cython uses array access for pointer dereferencing, as ``*x`` is not valid Python syntax,\n-whereas ``x[0]`` is.\n+        Cython language uses the normal C syntax for C types, including pointers.  It provides\n+        all the standard C types, namely ``char``, ``short``, ``int``, ``long``,\n+        ``long long`` as well as their ``unsigned`` versions, e.g. ``unsigned int``.\n+        The special ``bint`` type is used for C boolean values (``int`` with 0/non-0\n+        values for False/True) and ``Py_ssize_t`` for (signed) sizes of Python\n+        containers.\n+\n+        Pointer types are constructed as in C, by appending a ``*`` to the base type\n+        they point to, e.g. ``int**`` for a pointer to a pointer to a C int.\n+        Arrays use the normal C array syntax, e.g. ``int[10]``, and the size must be known\n+        at compile time for stack allocated arrays. Cython doesn't support variable length arrays from C99.\n+        Note that Cython uses array access for pointer dereferencing, as ``*x`` is not valid Python syntax,\n+        whereas ``x[0]`` is.\n \n Also, the Python types ``list``, ``dict``, ``tuple``, etc. may be used for\n static typing, as well as any user defined :ref:`extension-types`.\n-For example::\n+For example\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            def main():\n+                foo: list = []",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669362405",
            "id": 669362405,
            "in_reply_to_id": 669181107,
            "line": 236,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTM2MjQwNQ==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 235,
            "original_position": 245,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": 237,
            "pull_request_review_id": 705943451,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T07:30:45Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669362405",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669362737"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669362737"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "See https://github.com/cython/cython/pull/4242#discussion_r669362405",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T07:31:15Z",
            "diff_hunk": "@@ -119,40 +187,88 @@ You can read more about them in :ref:`extension-types`.\n Types\n -----\n \n-Cython uses the normal C syntax for C types, including pointers.  It provides\n-all the standard C types, namely ``char``, ``short``, ``int``, ``long``,\n-``long long`` as well as their ``unsigned`` versions, e.g. ``unsigned int``.\n-The special ``bint`` type is used for C boolean values (``int`` with 0/non-0\n-values for False/True) and ``Py_ssize_t`` for (signed) sizes of Python\n-containers.\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        Cython supports annotaions for C types, including pointers.  It provides\n+        all the standard C types, namely ``char``, ``short``, ``int``, ``long``,\n+        ``long long`` as well as their ``unsigned`` versions, e.g. ``uint``.\n+        The special ``bint`` type is used for C boolean values (``int`` with 0/non-0\n+        values for False/True) and ``Py_ssize_t`` for (signed) sizes of Python\n+        containers.\n+\n+        Pointer types are constructed by appending a ``p_`` to the base type\n+        they point to, e.g. ``pp_int`` for a pointer to a pointer to a C int.\n+        Further pointer types can be constructed with ``pointer()`` function.\n+        Arrays use the normal C array syntax, e.g. ``int[10]``, and the size must be known\n+        at compile time for stack allocated arrays. Cython doesn't support variable length arrays from C99.\n+        Note that Cython uses array access for pointer dereferencing.\n+\n+    .. group-tab:: Cython\n \n-Pointer types are constructed as in C, by appending a ``*`` to the base type\n-they point to, e.g. ``int**`` for a pointer to a pointer to a C int.\n-Arrays use the normal C array syntax, e.g. ``int[10]``, and the size must be known\n-at compile time for stack allocated arrays. Cython doesn't support variable length arrays from C99.\n-Note that Cython uses array access for pointer dereferencing, as ``*x`` is not valid Python syntax,\n-whereas ``x[0]`` is.\n+        Cython language uses the normal C syntax for C types, including pointers.  It provides\n+        all the standard C types, namely ``char``, ``short``, ``int``, ``long``,\n+        ``long long`` as well as their ``unsigned`` versions, e.g. ``unsigned int``.\n+        The special ``bint`` type is used for C boolean values (``int`` with 0/non-0\n+        values for False/True) and ``Py_ssize_t`` for (signed) sizes of Python\n+        containers.\n+\n+        Pointer types are constructed as in C, by appending a ``*`` to the base type\n+        they point to, e.g. ``int**`` for a pointer to a pointer to a C int.\n+        Arrays use the normal C array syntax, e.g. ``int[10]``, and the size must be known\n+        at compile time for stack allocated arrays. Cython doesn't support variable length arrays from C99.\n+        Note that Cython uses array access for pointer dereferencing, as ``*x`` is not valid Python syntax,\n+        whereas ``x[0]`` is.\n \n Also, the Python types ``list``, ``dict``, ``tuple``, etc. may be used for\n static typing, as well as any user defined :ref:`extension-types`.\n-For example::\n+For example\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            def main():\n+                foo: list = []\n+\n+    .. group-tab:: Cython\n \n-    cdef list foo = []\n+        .. code-block:: cython\n+\n+            cdef list foo = []\n \n This requires an *exact* match of the class, it does not allow subclasses.\n This allows Cython to optimize code by accessing internals of the builtin class,\n which is the main reason for declaring builtin types in the first place.\n \n For declared builtin types, Cython uses internally a C variable of type ``PyObject*``.\n-The Python types int, long, and float are not available for static\n-typing and instead interpreted as C ``int``, ``long``, and ``float``\n-respectively, as statically typing variables with these Python\n-types has zero advantages.\n+\n+.. Note:: The Python types ``int``, ``long``, and ``float`` are not available for static\n+    typing in Cython language and instead interpreted as C ``int``, ``long``, and ``float``\n+    respectively, as statically typing variables with these Python\n+    types has zero advantages. On the other hand, annotating in Pure Python with\n+    ``int``, ``long``, and ``float`` python types will be interpreted as ``PyObject*`` type.\n \n Cython provides an accelerated and typed equivalent of a Python tuple, the ``ctuple``.\n-A ``ctuple`` is assembled from any valid C types. For example::\n+A ``ctuple`` is assembled from any valid C types. For example\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n \n-    cdef (double, int) bar\n+            def main():\n+                bar: (cython.double, cython.int)",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669362737",
            "id": 669362737,
            "in_reply_to_id": 669187673,
            "line": 267,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTM2MjczNw==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 265,
            "original_position": 282,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": 275,
            "pull_request_review_id": 705943848,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T07:31:15Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669362737",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669368717"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669368717"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Done thank you!",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T07:40:33Z",
            "diff_hunk": "@@ -404,20 +637,56 @@ returns small results.\n \n If all possible return values are legal and you\n can't reserve one entirely for signalling errors, you can use an alternative\n-form of exception value declaration::\n+form of exception value declaration\n \n-    cdef int spam() except? -1:\n-        ...\n+.. tabs::\n \n-The \"?\" indicates that the value ``-1`` only signals a possible error. In this\n-case, Cython generates a call to :c:func:`PyErr_Occurred` if the exception value\n-is returned, to make sure it really received an exception and not just a normal\n-result.\n+    .. group-tab:: Pure Python\n \n-There is also a third form of exception value declaration::\n+        .. code-block:: python\n \n-    cdef int spam() except *:\n-        ...\n+            @exceptval(-1, check=True)\n+            def spam() -> cython.int:\n+                ...\n+\n+        The ``check=True`` indicates that the value ``-1`` only signals a possible error.\n+        In this\n+        case, Cython generates a call to :c:func:`PyErr_Occurred` if the exception value\n+        is returned, to make sure it really received an exception and not just a normal\n+        result.\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            cdef int spam() except? -1:\n+                ...\n+\n+        The ``?`` indicates that the value ``-1`` only signals a possible error.\n+        In this\n+        case, Cython generates a call to :c:func:`PyErr_Occurred` if the exception value\n+        is returned, to make sure it really received an exception and not just a normal\n+        result.\n+\n+\n+There is also a third form of exception value declaration\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            @exceptval(check=True)",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669368717",
            "id": 669368717,
            "in_reply_to_id": 669228877,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTM2ODcxNw==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 680,
            "original_position": 660,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 705951532,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T07:40:33Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669368717",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669396771"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669396771"
                }
            },
            "author_association": "MEMBER",
            "body": "Seems a good change to me.",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T08:20:28Z",
            "diff_hunk": "@@ -119,40 +187,88 @@ You can read more about them in :ref:`extension-types`.\n Types\n -----\n \n-Cython uses the normal C syntax for C types, including pointers.  It provides\n-all the standard C types, namely ``char``, ``short``, ``int``, ``long``,\n-``long long`` as well as their ``unsigned`` versions, e.g. ``unsigned int``.\n-The special ``bint`` type is used for C boolean values (``int`` with 0/non-0\n-values for False/True) and ``Py_ssize_t`` for (signed) sizes of Python\n-containers.\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        Cython supports annotaions for C types, including pointers.  It provides\n+        all the standard C types, namely ``char``, ``short``, ``int``, ``long``,\n+        ``long long`` as well as their ``unsigned`` versions, e.g. ``uint``.\n+        The special ``bint`` type is used for C boolean values (``int`` with 0/non-0\n+        values for False/True) and ``Py_ssize_t`` for (signed) sizes of Python\n+        containers.\n+\n+        Pointer types are constructed by appending a ``p_`` to the base type\n+        they point to, e.g. ``pp_int`` for a pointer to a pointer to a C int.\n+        Further pointer types can be constructed with ``pointer()`` function.\n+        Arrays use the normal C array syntax, e.g. ``int[10]``, and the size must be known\n+        at compile time for stack allocated arrays. Cython doesn't support variable length arrays from C99.\n+        Note that Cython uses array access for pointer dereferencing.\n+\n+    .. group-tab:: Cython\n \n-Pointer types are constructed as in C, by appending a ``*`` to the base type\n-they point to, e.g. ``int**`` for a pointer to a pointer to a C int.\n-Arrays use the normal C array syntax, e.g. ``int[10]``, and the size must be known\n-at compile time for stack allocated arrays. Cython doesn't support variable length arrays from C99.\n-Note that Cython uses array access for pointer dereferencing, as ``*x`` is not valid Python syntax,\n-whereas ``x[0]`` is.\n+        Cython language uses the normal C syntax for C types, including pointers.  It provides\n+        all the standard C types, namely ``char``, ``short``, ``int``, ``long``,\n+        ``long long`` as well as their ``unsigned`` versions, e.g. ``unsigned int``.\n+        The special ``bint`` type is used for C boolean values (``int`` with 0/non-0\n+        values for False/True) and ``Py_ssize_t`` for (signed) sizes of Python\n+        containers.\n+\n+        Pointer types are constructed as in C, by appending a ``*`` to the base type\n+        they point to, e.g. ``int**`` for a pointer to a pointer to a C int.\n+        Arrays use the normal C array syntax, e.g. ``int[10]``, and the size must be known\n+        at compile time for stack allocated arrays. Cython doesn't support variable length arrays from C99.\n+        Note that Cython uses array access for pointer dereferencing, as ``*x`` is not valid Python syntax,\n+        whereas ``x[0]`` is.\n \n Also, the Python types ``list``, ``dict``, ``tuple``, etc. may be used for\n static typing, as well as any user defined :ref:`extension-types`.\n-For example::\n+For example\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            def main():\n+                foo: list = []\n+\n+    .. group-tab:: Cython\n \n-    cdef list foo = []\n+        .. code-block:: cython\n+\n+            cdef list foo = []\n \n This requires an *exact* match of the class, it does not allow subclasses.\n This allows Cython to optimize code by accessing internals of the builtin class,\n which is the main reason for declaring builtin types in the first place.\n \n For declared builtin types, Cython uses internally a C variable of type ``PyObject*``.\n-The Python types int, long, and float are not available for static\n-typing and instead interpreted as C ``int``, ``long``, and ``float``\n-respectively, as statically typing variables with these Python\n-types has zero advantages.\n+\n+.. Note:: The Python types ``int``, ``long``, and ``float`` are not available for static",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669396771",
            "id": 669396771,
            "in_reply_to_id": 669184157,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTM5Njc3MQ==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 249,
            "original_position": 264,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 705987907,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T08:20:28Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669396771",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669397375"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669397375"
                }
            },
            "author_association": "MEMBER",
            "body": "Not sure if `main()` is a good name, but it's definitely good enough for now and easy to change later. Let's stick with it.",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T08:21:23Z",
            "diff_hunk": "@@ -119,40 +187,88 @@ You can read more about them in :ref:`extension-types`.\n Types\n -----\n \n-Cython uses the normal C syntax for C types, including pointers.  It provides\n-all the standard C types, namely ``char``, ``short``, ``int``, ``long``,\n-``long long`` as well as their ``unsigned`` versions, e.g. ``unsigned int``.\n-The special ``bint`` type is used for C boolean values (``int`` with 0/non-0\n-values for False/True) and ``Py_ssize_t`` for (signed) sizes of Python\n-containers.\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        Cython supports annotaions for C types, including pointers.  It provides\n+        all the standard C types, namely ``char``, ``short``, ``int``, ``long``,\n+        ``long long`` as well as their ``unsigned`` versions, e.g. ``uint``.\n+        The special ``bint`` type is used for C boolean values (``int`` with 0/non-0\n+        values for False/True) and ``Py_ssize_t`` for (signed) sizes of Python\n+        containers.\n+\n+        Pointer types are constructed by appending a ``p_`` to the base type\n+        they point to, e.g. ``pp_int`` for a pointer to a pointer to a C int.\n+        Further pointer types can be constructed with ``pointer()`` function.\n+        Arrays use the normal C array syntax, e.g. ``int[10]``, and the size must be known\n+        at compile time for stack allocated arrays. Cython doesn't support variable length arrays from C99.\n+        Note that Cython uses array access for pointer dereferencing.\n+\n+    .. group-tab:: Cython\n \n-Pointer types are constructed as in C, by appending a ``*`` to the base type\n-they point to, e.g. ``int**`` for a pointer to a pointer to a C int.\n-Arrays use the normal C array syntax, e.g. ``int[10]``, and the size must be known\n-at compile time for stack allocated arrays. Cython doesn't support variable length arrays from C99.\n-Note that Cython uses array access for pointer dereferencing, as ``*x`` is not valid Python syntax,\n-whereas ``x[0]`` is.\n+        Cython language uses the normal C syntax for C types, including pointers.  It provides\n+        all the standard C types, namely ``char``, ``short``, ``int``, ``long``,\n+        ``long long`` as well as their ``unsigned`` versions, e.g. ``unsigned int``.\n+        The special ``bint`` type is used for C boolean values (``int`` with 0/non-0\n+        values for False/True) and ``Py_ssize_t`` for (signed) sizes of Python\n+        containers.\n+\n+        Pointer types are constructed as in C, by appending a ``*`` to the base type\n+        they point to, e.g. ``int**`` for a pointer to a pointer to a C int.\n+        Arrays use the normal C array syntax, e.g. ``int[10]``, and the size must be known\n+        at compile time for stack allocated arrays. Cython doesn't support variable length arrays from C99.\n+        Note that Cython uses array access for pointer dereferencing, as ``*x`` is not valid Python syntax,\n+        whereas ``x[0]`` is.\n \n Also, the Python types ``list``, ``dict``, ``tuple``, etc. may be used for\n static typing, as well as any user defined :ref:`extension-types`.\n-For example::\n+For example\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            def main():\n+                foo: list = []",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669397375",
            "id": 669397375,
            "in_reply_to_id": 669181107,
            "line": 236,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTM5NzM3NQ==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 235,
            "original_position": 245,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": 237,
            "pull_request_review_id": 705988748,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T08:21:23Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669397375",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669399552"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669399552"
                }
            },
            "author_association": "MEMBER",
            "body": "That's not important at all. In real code, pointers will almost never have more than two indirection levels, let alone more than three. Let's be reasonable.",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T08:24:15Z",
            "diff_hunk": "@@ -119,40 +187,88 @@ You can read more about them in :ref:`extension-types`.\n Types\n -----\n \n-Cython uses the normal C syntax for C types, including pointers.  It provides\n-all the standard C types, namely ``char``, ``short``, ``int``, ``long``,\n-``long long`` as well as their ``unsigned`` versions, e.g. ``unsigned int``.\n-The special ``bint`` type is used for C boolean values (``int`` with 0/non-0\n-values for False/True) and ``Py_ssize_t`` for (signed) sizes of Python\n-containers.\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        Cython supports annotaions for C types, including pointers.  It provides\n+        all the standard C types, namely ``char``, ``short``, ``int``, ``long``,\n+        ``long long`` as well as their ``unsigned`` versions, e.g. ``uint``.\n+        The special ``bint`` type is used for C boolean values (``int`` with 0/non-0\n+        values for False/True) and ``Py_ssize_t`` for (signed) sizes of Python\n+        containers.\n+\n+        Pointer types are constructed by appending a ``p_`` to the base type\n+        they point to, e.g. ``pp_int`` for a pointer to a pointer to a C int.\n+        Further pointer types can be constructed with ``pointer()`` function.",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669399552",
            "id": 669399552,
            "in_reply_to_id": 669164474,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTM5OTU1Mg==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 203,
            "original_position": 206,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 705991570,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T08:24:15Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669399552",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669400293"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669400293"
                }
            },
            "author_association": "MEMBER",
            "body": "The sentence seems correct and clear to me.",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T08:25:15Z",
            "diff_hunk": "@@ -119,40 +187,88 @@ You can read more about them in :ref:`extension-types`.\n Types\n -----\n \n-Cython uses the normal C syntax for C types, including pointers.  It provides\n-all the standard C types, namely ``char``, ``short``, ``int``, ``long``,\n-``long long`` as well as their ``unsigned`` versions, e.g. ``unsigned int``.\n-The special ``bint`` type is used for C boolean values (``int`` with 0/non-0\n-values for False/True) and ``Py_ssize_t`` for (signed) sizes of Python\n-containers.\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        Cython supports annotaions for C types, including pointers.  It provides\n+        all the standard C types, namely ``char``, ``short``, ``int``, ``long``,\n+        ``long long`` as well as their ``unsigned`` versions, e.g. ``uint``.\n+        The special ``bint`` type is used for C boolean values (``int`` with 0/non-0\n+        values for False/True) and ``Py_ssize_t`` for (signed) sizes of Python\n+        containers.\n+\n+        Pointer types are constructed by appending a ``p_`` to the base type\n+        they point to, e.g. ``pp_int`` for a pointer to a pointer to a C int.\n+        Further pointer types can be constructed with ``pointer()`` function.\n+        Arrays use the normal C array syntax, e.g. ``int[10]``, and the size must be known\n+        at compile time for stack allocated arrays. Cython doesn't support variable length arrays from C99.\n+        Note that Cython uses array access for pointer dereferencing.\n+\n+    .. group-tab:: Cython\n \n-Pointer types are constructed as in C, by appending a ``*`` to the base type\n-they point to, e.g. ``int**`` for a pointer to a pointer to a C int.\n-Arrays use the normal C array syntax, e.g. ``int[10]``, and the size must be known\n-at compile time for stack allocated arrays. Cython doesn't support variable length arrays from C99.\n-Note that Cython uses array access for pointer dereferencing, as ``*x`` is not valid Python syntax,\n-whereas ``x[0]`` is.\n+        Cython language uses the normal C syntax for C types, including pointers.  It provides\n+        all the standard C types, namely ``char``, ``short``, ``int``, ``long``,\n+        ``long long`` as well as their ``unsigned`` versions, e.g. ``unsigned int``.\n+        The special ``bint`` type is used for C boolean values (``int`` with 0/non-0\n+        values for False/True) and ``Py_ssize_t`` for (signed) sizes of Python\n+        containers.\n+\n+        Pointer types are constructed as in C, by appending a ``*`` to the base type\n+        they point to, e.g. ``int**`` for a pointer to a pointer to a C int.\n+        Arrays use the normal C array syntax, e.g. ``int[10]``, and the size must be known\n+        at compile time for stack allocated arrays. Cython doesn't support variable length arrays from C99.\n+        Note that Cython uses array access for pointer dereferencing, as ``*x`` is not valid Python syntax,\n+        whereas ``x[0]`` is.",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669400293",
            "id": 669400293,
            "in_reply_to_id": 669158941,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTQwMDI5Mw==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 222,
            "original_position": 231,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 705992564,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T08:25:15Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669400293",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669411971"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669411971"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Done thank you!",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T08:40:52Z",
            "diff_hunk": "@@ -119,40 +187,88 @@ You can read more about them in :ref:`extension-types`.\n Types\n -----\n \n-Cython uses the normal C syntax for C types, including pointers.  It provides\n-all the standard C types, namely ``char``, ``short``, ``int``, ``long``,\n-``long long`` as well as their ``unsigned`` versions, e.g. ``unsigned int``.\n-The special ``bint`` type is used for C boolean values (``int`` with 0/non-0\n-values for False/True) and ``Py_ssize_t`` for (signed) sizes of Python\n-containers.\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        Cython supports annotaions for C types, including pointers.  It provides\n+        all the standard C types, namely ``char``, ``short``, ``int``, ``long``,\n+        ``long long`` as well as their ``unsigned`` versions, e.g. ``uint``.\n+        The special ``bint`` type is used for C boolean values (``int`` with 0/non-0\n+        values for False/True) and ``Py_ssize_t`` for (signed) sizes of Python\n+        containers.\n+\n+        Pointer types are constructed by appending a ``p_`` to the base type\n+        they point to, e.g. ``pp_int`` for a pointer to a pointer to a C int.",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669411971",
            "id": 669411971,
            "in_reply_to_id": 669161725,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTQxMTk3MQ==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 202,
            "original_position": 205,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706007753,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T08:40:52Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669411971",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669413578"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669413578"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "`global_x` was added just to show how to declare global variables (using `declare()` function).",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T08:42:55Z",
            "diff_hunk": "@@ -44,72 +47,137 @@ the use of ‘early binding’ programming techniques.\n C variable and type definitions\n ===============================\n \n-The :keyword:`cdef` statement is used to declare C variables, either local or\n-module-level::\n+C variables can be declared by using the :keyword:`cdef` statement, by annotating\n+variable by special cython type or using function ``declare()``. Statement :keyword:`cdef`\n+and function ``declare()`` can declare either local or\n+module-level variables, but annotated version currently supports only local variables:\n \n-    cdef int i, j, k\n-    cdef float f, g[42], *h\n+.. tabs::\n \n-and C :keyword:`struct`, :keyword:`union` or :keyword:`enum` types:\n+    .. group-tab:: Pure Python\n \n-.. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.pyx\n+        .. code-block:: python\n \n-See also :ref:`struct-union-enum-styles`\n+            global_x = declare(cython.int)\n+            def main():",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669413578",
            "id": 669413578,
            "in_reply_to_id": 669138802,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTQxMzU3OA==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 62,
            "original_position": 33,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706009780,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T08:42:55Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669413578",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669420222"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669420222"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Based on https://github.com/cython/cython/pull/4242#issuecomment-879666879 I would close it without change.",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T08:51:52Z",
            "diff_hunk": "@@ -581,44 +906,93 @@ be careful what you do.\n Type Casting\n ------------\n \n-Where C uses ``\"(\"`` and ``\")\"``, Cython uses ``\"<\"`` and ``\">\"``. For example::\n+Cython language supports type casting in a simmilar way as C. Where C uses ``\"(\"`` and ``\")\"``,\n+Cython uses ``\"<\"`` and ``\">\"``. In pure python mode, ``cast()`` function is used. For example:\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            def main():\n+                p: cython.p_char\n+                q: cython.p_float\n+                p = cast(cython.p_char, q)\n+\n+        When casting a C value to a Python object type or vice versa,\n+        Cython will attempt a coercion. Simple examples are casts like ``cast(int, pyobj)``,\n+        which converts a Python number to a plain C ``int`` value, or ``cast(bytes, charptr)``,\n+        which copies a C ``char*`` string into a new Python bytes object.\n+\n+         .. note:: Cython will not prevent a redundant cast, but emits a warning for it.\n \n-    cdef char *p\n-    cdef float *q\n-    p = <char*>q\n+        To get the address of some Python object, use a cast to a pointer type\n+        like ``cast(p_void, ...)`` or ``cast(pointer(PyObject), ...)``.\n+        You can also cast a C pointer back to a Python object reference\n+        with ``cast(object, ...)``, or a more specific builtin or extension type\n+        (e.g. ``cast(MyExtType, ptr)``). This will increase the reference count of\n+        the object by one, i.e. the cast returns an owned reference.\n+        Here is an example:\n \n-When casting a C value to a Python object type or vice versa,\n-Cython will attempt a coercion. Simple examples are casts like ``<int>pyobj``,\n-which converts a Python number to a plain C ``int`` value, or ``<bytes>charptr``,\n-which copies a C ``char*`` string into a new Python bytes object.\n \n- .. note:: Cython will not prevent a redundant cast, but emits a warning for it.\n+    .. group-tab:: Cython\n \n-To get the address of some Python object, use a cast to a pointer type\n-like ``<void*>`` or ``<PyObject*>``.\n-You can also cast a C pointer back to a Python object reference\n-with ``<object>``, or a more specific builtin or extension type\n-(e.g. ``<MyExtType>ptr``). This will increase the reference count of\n-the object by one, i.e. the cast returns an owned reference.\n-Here is an example:\n+        .. code-block:: cython\n \n-.. literalinclude:: ../../examples/userguide/language_basics/casting_python.pyx\n+            cdef char *p\n+            cdef float *q\n+            p = <char*>q\n \n-The precedence of ``<...>`` is such that ``<type>a.b.c`` is interpreted as ``<type>(a.b.c)``.\n+        When casting a C value to a Python object type or vice versa,\n+        Cython will attempt a coercion. Simple examples are casts like ``<int>pyobj``,\n+        which converts a Python number to a plain C ``int`` value, or ``<bytes>charptr``,\n+        which copies a C ``char*`` string into a new Python bytes object.\n \n-Casting to ``<object>`` creates an owned reference. Cython will automatically\n-perform a ``Py_INCREF`` and ``Py_DECREF`` operation. Casting to\n-``<PyObject *>`` creates a borrowed reference, leaving the refcount unchanged.\n+         .. note:: Cython will not prevent a redundant cast, but emits a warning for it.\n+\n+        To get the address of some Python object, use a cast to a pointer type\n+        like ``<void*>`` or ``<PyObject*>``.\n+        You can also cast a C pointer back to a Python object reference\n+        with ``<object>``, or a more specific builtin or extension type\n+        (e.g. ``<MyExtType>ptr``). This will increase the reference count of\n+        the object by one, i.e. the cast returns an owned reference.\n+        Here is an example:\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. literalinclude:: ../../examples/userguide/language_basics/casting_python.pxd\n+            :caption: casting_python.pxd\n+        .. literalinclude:: ../../examples/userguide/language_basics/casting_python.py\n+            :caption: casting_python.py\n+\n+        Casting to ``cast(object, ...)`` creates an owned reference. Cython will automatically\n+        perform a ``Py_INCREF`` and ``Py_DECREF`` operation. Casting to\n+        ``cast(pointer(PyObject), ...)`` creates a borrowed reference, leaving the refcount unchanged.\n+\n+    .. group-tab:: Cython\n+\n+        .. literalinclude:: ../../examples/userguide/language_basics/casting_python.pyx\n+            :caption: casting_python.pyx\n+\n+        The precedence of ``<...>`` is such that ``<type>a.b.c`` is interpreted as ``<type>(a.b.c)``.\n+\n+        Casting to ``<object>`` creates an owned reference. Cython will automatically\n+        perform a ``Py_INCREF`` and ``Py_DECREF`` operation. Casting to\n+        ``<PyObject *>`` creates a borrowed reference, leaving the refcount unchanged.\n \n .. _checked_type_casts:\n \n Checked Type Casts\n ------------------\n \n-A cast like ``<MyExtensionType>x`` will cast x to the class\n+A cast like ``<MyExtensionType>x`` or ``cast(MyExtensionType, x)`` will cast ``x`` to the class\n ``MyExtensionType`` without any checking at all.\n \n-To have a cast checked, use the syntax like: ``<MyExtensionType?>x``.\n+To have a cast checked, use the syntax like: ``<MyExtensionType?>x`` in Cython language",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669420222",
            "id": 669420222,
            "in_reply_to_id": 669243892,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTQyMDIyMg==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 994,
            "original_position": 924,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706018363,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T08:51:52Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669420222",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669424086"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669424086"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "fixed.",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T08:56:27Z",
            "diff_hunk": "@@ -404,20 +637,56 @@ returns small results.\n \n If all possible return values are legal and you\n can't reserve one entirely for signalling errors, you can use an alternative\n-form of exception value declaration::\n+form of exception value declaration\n \n-    cdef int spam() except? -1:\n-        ...\n+.. tabs::\n \n-The \"?\" indicates that the value ``-1`` only signals a possible error. In this\n-case, Cython generates a call to :c:func:`PyErr_Occurred` if the exception value\n-is returned, to make sure it really received an exception and not just a normal\n-result.\n+    .. group-tab:: Pure Python\n \n-There is also a third form of exception value declaration::\n+        .. code-block:: python\n \n-    cdef int spam() except *:\n-        ...\n+            @exceptval(-1, check=True)\n+            def spam() -> cython.int:\n+                ...\n+\n+        The ``check=True`` indicates that the value ``-1`` only signals a possible error.\n+        In this\n+        case, Cython generates a call to :c:func:`PyErr_Occurred` if the exception value\n+        is returned, to make sure it really received an exception and not just a normal\n+        result.\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            cdef int spam() except? -1:\n+                ...\n+\n+        The ``?`` indicates that the value ``-1`` only signals a possible error.\n+        In this\n+        case, Cython generates a call to :c:func:`PyErr_Occurred` if the exception value\n+        is returned, to make sure it really received an exception and not just a normal",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669424086",
            "id": 669424086,
            "in_reply_to_id": 669211990,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTQyNDA4Ng==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 668,
            "original_position": 648,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706023163,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T08:56:27Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669424086",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669424713"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669424713"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "fixed.",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T08:57:15Z",
            "diff_hunk": "@@ -404,20 +637,56 @@ returns small results.\n \n If all possible return values are legal and you\n can't reserve one entirely for signalling errors, you can use an alternative\n-form of exception value declaration::\n+form of exception value declaration\n \n-    cdef int spam() except? -1:\n-        ...\n+.. tabs::\n \n-The \"?\" indicates that the value ``-1`` only signals a possible error. In this\n-case, Cython generates a call to :c:func:`PyErr_Occurred` if the exception value\n-is returned, to make sure it really received an exception and not just a normal\n-result.\n+    .. group-tab:: Pure Python\n \n-There is also a third form of exception value declaration::\n+        .. code-block:: python\n \n-    cdef int spam() except *:\n-        ...\n+            @exceptval(-1, check=True)\n+            def spam() -> cython.int:\n+                ...\n+\n+        The ``check=True`` indicates that the value ``-1`` only signals a possible error.\n+        In this\n+        case, Cython generates a call to :c:func:`PyErr_Occurred` if the exception value",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669424713",
            "id": 669424713,
            "in_reply_to_id": 669211577,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTQyNDcxMw==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 654,
            "original_position": 634,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706023952,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T08:57:16Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669424713",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669426071"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669426071"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Tabs were introduced by mistake here. I have removed them.",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T08:59:01Z",
            "diff_hunk": "@@ -119,40 +187,88 @@ You can read more about them in :ref:`extension-types`.\n Types\n -----\n \n-Cython uses the normal C syntax for C types, including pointers.  It provides\n-all the standard C types, namely ``char``, ``short``, ``int``, ``long``,\n-``long long`` as well as their ``unsigned`` versions, e.g. ``unsigned int``.\n-The special ``bint`` type is used for C boolean values (``int`` with 0/non-0\n-values for False/True) and ``Py_ssize_t`` for (signed) sizes of Python\n-containers.\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        Cython supports annotaions for C types, including pointers.  It provides\n+        all the standard C types, namely ``char``, ``short``, ``int``, ``long``,\n+        ``long long`` as well as their ``unsigned`` versions, e.g. ``uint``.\n+        The special ``bint`` type is used for C boolean values (``int`` with 0/non-0\n+        values for False/True) and ``Py_ssize_t`` for (signed) sizes of Python\n+        containers.\n+\n+        Pointer types are constructed by appending a ``p_`` to the base type\n+        they point to, e.g. ``pp_int`` for a pointer to a pointer to a C int.\n+        Further pointer types can be constructed with ``pointer()`` function.\n+        Arrays use the normal C array syntax, e.g. ``int[10]``, and the size must be known\n+        at compile time for stack allocated arrays. Cython doesn't support variable length arrays from C99.\n+        Note that Cython uses array access for pointer dereferencing.\n+\n+    .. group-tab:: Cython",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669426071",
            "id": 669426071,
            "in_reply_to_id": 669157842,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTQyNjA3MQ==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 208,
            "original_position": 211,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706025793,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T08:59:02Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669426071",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669427024"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669427024"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Closing based on following comment: https://github.com/cython/cython/pull/4242#issuecomment-879666879",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T09:00:13Z",
            "diff_hunk": "@@ -189,48 +308,98 @@ Python functions vs. C functions\n \n There are two kinds of function definition in Cython:\n \n-Python functions are defined using the def statement, as in Python. They take\n+Python functions are defined using the ``def`` statement, as in Python. They take\n :term:`Python objects<Python object>` as parameters and return Python objects.\n \n-C functions are defined using the new :keyword:`cdef` statement. They take\n+C functions are defined using the new :keyword:`cdef` statement in Cython language or by ``@cfunc`` decorator. They take",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669427024",
            "id": 669427024,
            "in_reply_to_id": 669191991,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTQyNzAyNA==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 314,
            "original_position": 325,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706027059,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T09:00:14Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669427024",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669432331"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669432331"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "`declare()` can be used for multiple variable declaration but the scope of cdef block is more generic (functions, structs etc).",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T09:07:35Z",
            "diff_hunk": "@@ -178,8 +294,11 @@ Grouping multiple C declarations\n If you have a series of declarations that all begin with :keyword:`cdef`, you\n can group them into a :keyword:`cdef` block like this:\n \n+.. note:: This is supported only by Cython language.",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669432331",
            "id": 669432331,
            "in_reply_to_id": 669191309,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTQzMjMzMQ==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 297,
            "original_position": 308,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706034294,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T09:07:35Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669432331",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669434056"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669434056"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "You could use declare in both versions or use cdef in cython version instead of declare, i think I'll look better",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T09:09:51Z",
            "diff_hunk": "@@ -44,72 +47,137 @@ the use of ‘early binding’ programming techniques.\n C variable and type definitions\n ===============================\n \n-The :keyword:`cdef` statement is used to declare C variables, either local or\n-module-level::\n+C variables can be declared by using the :keyword:`cdef` statement, by annotating\n+variable by special cython type or using function ``declare()``. Statement :keyword:`cdef`\n+and function ``declare()`` can declare either local or\n+module-level variables, but annotated version currently supports only local variables:\n \n-    cdef int i, j, k\n-    cdef float f, g[42], *h\n+.. tabs::\n \n-and C :keyword:`struct`, :keyword:`union` or :keyword:`enum` types:\n+    .. group-tab:: Pure Python\n \n-.. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.pyx\n+        .. code-block:: python\n \n-See also :ref:`struct-union-enum-styles`\n+            global_x = declare(cython.int)\n+            def main():",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669434056",
            "id": 669434056,
            "in_reply_to_id": 669138802,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTQzNDA1Ng==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 62,
            "original_position": 33,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706036538,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T09:09:51Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669434056",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669437360"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669437360"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "done.",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T09:14:24Z",
            "diff_hunk": "@@ -44,72 +47,137 @@ the use of ‘early binding’ programming techniques.\n C variable and type definitions\n ===============================\n \n-The :keyword:`cdef` statement is used to declare C variables, either local or\n-module-level::\n+C variables can be declared by using the :keyword:`cdef` statement, by annotating\n+variable by special cython type or using function ``declare()``. Statement :keyword:`cdef`",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669437360",
            "id": 669437360,
            "in_reply_to_id": 669168566,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTQzNzM2MA==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 51,
            "original_position": 17,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706040859,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T09:14:24Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669437360",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669438914"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669438914"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "@scoder, yeah, you probably would never want to use more then two pointers, but documentation should not lie, at least pp should be changed to ppp, so documentation would convey truth",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T09:16:29Z",
            "diff_hunk": "@@ -119,40 +187,88 @@ You can read more about them in :ref:`extension-types`.\n Types\n -----\n \n-Cython uses the normal C syntax for C types, including pointers.  It provides\n-all the standard C types, namely ``char``, ``short``, ``int``, ``long``,\n-``long long`` as well as their ``unsigned`` versions, e.g. ``unsigned int``.\n-The special ``bint`` type is used for C boolean values (``int`` with 0/non-0\n-values for False/True) and ``Py_ssize_t`` for (signed) sizes of Python\n-containers.\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        Cython supports annotaions for C types, including pointers.  It provides\n+        all the standard C types, namely ``char``, ``short``, ``int``, ``long``,\n+        ``long long`` as well as their ``unsigned`` versions, e.g. ``uint``.\n+        The special ``bint`` type is used for C boolean values (``int`` with 0/non-0\n+        values for False/True) and ``Py_ssize_t`` for (signed) sizes of Python\n+        containers.\n+\n+        Pointer types are constructed by appending a ``p_`` to the base type\n+        they point to, e.g. ``pp_int`` for a pointer to a pointer to a C int.\n+        Further pointer types can be constructed with ``pointer()`` function.",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669438914",
            "id": 669438914,
            "in_reply_to_id": 669164474,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTQzODkxNA==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 203,
            "original_position": 206,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706042884,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T09:16:29Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669438914",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669441083"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669441083"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "> Or better idea is to use declare()?\r\n\r\nthat's the other way of doing this",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T09:19:32Z",
            "diff_hunk": "@@ -119,40 +187,88 @@ You can read more about them in :ref:`extension-types`.\n Types\n -----\n \n-Cython uses the normal C syntax for C types, including pointers.  It provides\n-all the standard C types, namely ``char``, ``short``, ``int``, ``long``,\n-``long long`` as well as their ``unsigned`` versions, e.g. ``unsigned int``.\n-The special ``bint`` type is used for C boolean values (``int`` with 0/non-0\n-values for False/True) and ``Py_ssize_t`` for (signed) sizes of Python\n-containers.\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        Cython supports annotaions for C types, including pointers.  It provides\n+        all the standard C types, namely ``char``, ``short``, ``int``, ``long``,\n+        ``long long`` as well as their ``unsigned`` versions, e.g. ``uint``.\n+        The special ``bint`` type is used for C boolean values (``int`` with 0/non-0\n+        values for False/True) and ``Py_ssize_t`` for (signed) sizes of Python\n+        containers.\n+\n+        Pointer types are constructed by appending a ``p_`` to the base type\n+        they point to, e.g. ``pp_int`` for a pointer to a pointer to a C int.\n+        Further pointer types can be constructed with ``pointer()`` function.\n+        Arrays use the normal C array syntax, e.g. ``int[10]``, and the size must be known\n+        at compile time for stack allocated arrays. Cython doesn't support variable length arrays from C99.\n+        Note that Cython uses array access for pointer dereferencing.\n+\n+    .. group-tab:: Cython\n \n-Pointer types are constructed as in C, by appending a ``*`` to the base type\n-they point to, e.g. ``int**`` for a pointer to a pointer to a C int.\n-Arrays use the normal C array syntax, e.g. ``int[10]``, and the size must be known\n-at compile time for stack allocated arrays. Cython doesn't support variable length arrays from C99.\n-Note that Cython uses array access for pointer dereferencing, as ``*x`` is not valid Python syntax,\n-whereas ``x[0]`` is.\n+        Cython language uses the normal C syntax for C types, including pointers.  It provides\n+        all the standard C types, namely ``char``, ``short``, ``int``, ``long``,\n+        ``long long`` as well as their ``unsigned`` versions, e.g. ``unsigned int``.\n+        The special ``bint`` type is used for C boolean values (``int`` with 0/non-0\n+        values for False/True) and ``Py_ssize_t`` for (signed) sizes of Python\n+        containers.\n+\n+        Pointer types are constructed as in C, by appending a ``*`` to the base type\n+        they point to, e.g. ``int**`` for a pointer to a pointer to a C int.\n+        Arrays use the normal C array syntax, e.g. ``int[10]``, and the size must be known\n+        at compile time for stack allocated arrays. Cython doesn't support variable length arrays from C99.\n+        Note that Cython uses array access for pointer dereferencing, as ``*x`` is not valid Python syntax,\n+        whereas ``x[0]`` is.\n \n Also, the Python types ``list``, ``dict``, ``tuple``, etc. may be used for\n static typing, as well as any user defined :ref:`extension-types`.\n-For example::\n+For example\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            def main():\n+                foo: list = []",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669441083",
            "id": 669441083,
            "in_reply_to_id": 669181107,
            "line": 236,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTQ0MTA4Mw==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 235,
            "original_position": 245,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": 237,
            "pull_request_review_id": 706045719,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T09:19:33Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669441083",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669443732"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669443732"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "multiline* sorry",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T09:23:05Z",
            "diff_hunk": "@@ -178,8 +294,11 @@ Grouping multiple C declarations\n If you have a series of declarations that all begin with :keyword:`cdef`, you\n can group them into a :keyword:`cdef` block like this:\n \n+.. note:: This is supported only by Cython language.",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669443732",
            "id": 669443732,
            "in_reply_to_id": 669191309,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTQ0MzczMg==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 297,
            "original_position": 308,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706048982,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T09:23:05Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669443732",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669444502"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669444502"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "> but the scope of cdef block is more generic (functions, structs etc).\r\n\r\nYeah true, didn't think about it",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T09:24:11Z",
            "diff_hunk": "@@ -178,8 +294,11 @@ Grouping multiple C declarations\n If you have a series of declarations that all begin with :keyword:`cdef`, you\n can group them into a :keyword:`cdef` block like this:\n \n+.. note:: This is supported only by Cython language.",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669444502",
            "id": 669444502,
            "in_reply_to_id": 669191309,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTQ0NDUwMg==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 297,
            "original_position": 308,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706050006,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T09:24:12Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669444502",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669447358"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669447358"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "In main we don't declare anything, we can throw out main in this case",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T09:28:14Z",
            "diff_hunk": "@@ -0,0 +1,23 @@\n+from __future__ import print_function\n+\n+from cython.cimports.cpython.ref import PyObject\n+\n+import sys\n+\n+python_dict = {\"abc\": 123}\n+python_dict_refcount = sys.getrefcount(python_dict)\n+\n+@cython.cfunc\n+def owned_reference(obj: object):\n+    refcount = sys.getrefcount(python_dict)\n+    print('Inside owned_reference: {refcount}'.format(refcount=refcount))\n+\n+@cython.cfunc\n+def borrowed_reference(obj: cython.pointer(PyObject)):\n+    refcount = obj.ob_refcnt\n+    print('Inside borrowed_reference: {refcount}'.format(refcount=refcount))\n+\n+def main():\n+    print('Initial refcount: {refcount}'.format(refcount=python_dict_refcount))\n+    owned_reference(python_dict)\n+    borrowed_reference(cython.cast(cython.pointer(PyObject), python_dict))",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669447358",
            "id": 669447358,
            "in_reply_to_id": 667531914,
            "line": 23,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTQ0NzM1OA==",
            "original_commit_id": "99e669f7a90cc845afb494dbd8e8f8692744e37f",
            "original_line": 23,
            "original_position": 23,
            "original_start_line": 20,
            "path": "docs/examples/userguide/language_basics/parameter_refcount.py",
            "position": 23,
            "pull_request_review_id": 706053826,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": 20,
            "start_side": "RIGHT",
            "updated_at": "2021-07-14T09:28:14Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669447358",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669675835"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669675835"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n        .. note:: Currently, Pure Python mode does not support enums.\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T14:36:34Z",
            "diff_hunk": "@@ -44,72 +47,137 @@ the use of ‘early binding’ programming techniques.\n C variable and type definitions\n ===============================\n \n-The :keyword:`cdef` statement is used to declare C variables, either local or\n-module-level::\n+C variables can be declared by using the :keyword:`cdef` statement, by annotating\n+variable by special cython type or using function ``declare()``. Statement :keyword:`cdef`\n+and function ``declare()`` can declare either local or\n+module-level variables, but annotated version currently supports only local variables:\n \n-    cdef int i, j, k\n-    cdef float f, g[42], *h\n+.. tabs::\n \n-and C :keyword:`struct`, :keyword:`union` or :keyword:`enum` types:\n+    .. group-tab:: Pure Python\n \n-.. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.pyx\n+        .. code-block:: python\n \n-See also :ref:`struct-union-enum-styles`\n+            global_x = declare(cython.int)\n+            def main():\n+                i: cython.int\n+                j: cython.int\n+                k: cython.int\n+                f: cython.float\n+                g: cython.int[42]\n+                h: cython.p_float\n \n-.. note::\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            cdef int i, j, k\n+            cdef float f, g[42], *h\n+\n+Moreover, C :keyword:`struct`, :keyword:`union` or :keyword:`enum` are supported:\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.py\n+\n+        .. NOTE:: Currently, Pure Python mode does not support enums.",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669675835",
            "id": 669675835,
            "in_reply_to_id": 669146002,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTY3NTgzNQ==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 85,
            "original_position": 57,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706356165,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T14:36:34Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669675835",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669677434"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669677434"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nMoreover, C :keyword:`struct`, :keyword:`union` and :keyword:`enum` are supported:\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T14:38:07Z",
            "diff_hunk": "@@ -44,72 +47,141 @@ the use of ‘early binding’ programming techniques.\n C variable and type definitions\n ===============================\n \n-The :keyword:`cdef` statement is used to declare C variables, either local or\n-module-level::\n+C variables can be declared by \n \n-    cdef int i, j, k\n-    cdef float f, g[42], *h\n+* using the Cython language :keyword:`cdef` statement,\n+* annotating variable by special cython type or\n+* using function ``declare()``.\n \n-and C :keyword:`struct`, :keyword:`union` or :keyword:`enum` types:\n+Statement :keyword:`cdef` and function ``declare()`` can declare either local or\n+module-level variables, but annotated version currently supports only local variables:\n \n-.. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.pyx\n+.. tabs::\n \n-See also :ref:`struct-union-enum-styles`\n+    .. group-tab:: Pure Python\n \n-.. note::\n+        .. code-block:: python\n+\n+            global_x = declare(cython.int)\n+            def main():\n+                i: cython.int\n+                j: cython.int\n+                k: cython.int\n+                f: cython.float\n+                g: cython.int[42]\n+                h: cython.p_float\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            cdef int i, j, k\n+            cdef float f, g[42], *h\n+\n+Moreover, C :keyword:`struct`, :keyword:`union` or :keyword:`enum` are supported:",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669677434",
            "id": 669677434,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTY3NzQzNA==",
            "original_commit_id": "db174e70e9b705f3d66425371220969b6de60550",
            "original_line": 81,
            "original_position": 53,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706358129,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T15:24:43Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669677434",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669682816"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669682816"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    There is also support for giving names to types using the\r\n    ``ctypedef`` statement or the ``cython.typedef()`` function, e.g.\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T14:43:49Z",
            "diff_hunk": "@@ -44,72 +47,141 @@ the use of ‘early binding’ programming techniques.\n C variable and type definitions\n ===============================\n \n-The :keyword:`cdef` statement is used to declare C variables, either local or\n-module-level::\n+C variables can be declared by \n \n-    cdef int i, j, k\n-    cdef float f, g[42], *h\n+* using the Cython language :keyword:`cdef` statement,\n+* annotating variable by special cython type or\n+* using function ``declare()``.\n \n-and C :keyword:`struct`, :keyword:`union` or :keyword:`enum` types:\n+Statement :keyword:`cdef` and function ``declare()`` can declare either local or\n+module-level variables, but annotated version currently supports only local variables:\n \n-.. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.pyx\n+.. tabs::\n \n-See also :ref:`struct-union-enum-styles`\n+    .. group-tab:: Pure Python\n \n-.. note::\n+        .. code-block:: python\n+\n+            global_x = declare(cython.int)\n+            def main():\n+                i: cython.int\n+                j: cython.int\n+                k: cython.int\n+                f: cython.float\n+                g: cython.int[42]\n+                h: cython.p_float\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            cdef int i, j, k\n+            cdef float f, g[42], *h\n+\n+Moreover, C :keyword:`struct`, :keyword:`union` or :keyword:`enum` are supported:\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.py\n+\n+        .. NOTE:: Currently, Pure Python mode does not support enums.\n \n-    Structs can be declared as ``cdef packed struct``, which has\n-    the same effect as the C directive ``#pragma pack(1)``.\n+    .. group-tab:: Cython\n \n-Declaring an enum as ``cpdef`` will create a :pep:`435`-style Python wrapper::\n+        .. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.pyx\n \n-    cpdef enum CheeseState:\n-        hard = 1\n-        soft = 2\n-        runny = 3\n+        See also :ref:`struct-union-enum-styles`\n \n+        .. note::\n \n+            Structs can be declared as ``cdef packed struct``, which has\n+            the same effect as the C directive ``#pragma pack(1)``.\n \n-There is currently no special syntax for defining a constant, but you can use\n-an anonymous :keyword:`enum` declaration for this purpose, for example,::\n+        Declaring an enum as ``cpdef`` will create a :pep:`435`-style Python wrapper::\n \n-    cdef enum:\n-        tons_of_spam = 3\n+            cpdef enum CheeseState:\n+                hard = 1\n+                soft = 2\n+                runny = 3\n+\n+        There is currently no special syntax for defining a constant, but you can use\n+        an anonymous :keyword:`enum` declaration for this purpose, for example,::\n+\n+            cdef enum:\n+                tons_of_spam = 3\n+\n+        .. note::\n+            the words ``struct``, ``union`` and ``enum`` are used only when\n+            defining a type, not when referring to it. For example, to declare a variable\n+            pointing to a ``Grail`` you would write::\n+\n+                cdef Grail *gp\n+\n+            and not::\n+\n+                cdef struct Grail *gp # WRONG\n \n .. note::\n-    the words ``struct``, ``union`` and ``enum`` are used only when\n-    defining a type, not when referring to it. For example, to declare a variable\n-    pointing to a ``Grail`` you would write::\n \n-        cdef Grail *gp\n+    There is also support for giving names to types by ``ctypedef`` statement or ``typedef()`` function, e.g.",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669682816",
            "id": 669682816,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTY4MjgxNg==",
            "original_commit_id": "db174e70e9b705f3d66425371220969b6de60550",
            "original_line": 128,
            "original_position": 115,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706358129,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T15:24:43Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669682816",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669683970"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669683970"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n            pointing to a ``Grail`` struct, you would write::\r\n\r\n                cdef Grail *gp\r\n\r\n            and not::\r\n\r\n                cdef struct Grail *gp  # WRONG\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T14:45:03Z",
            "diff_hunk": "@@ -44,72 +47,141 @@ the use of ‘early binding’ programming techniques.\n C variable and type definitions\n ===============================\n \n-The :keyword:`cdef` statement is used to declare C variables, either local or\n-module-level::\n+C variables can be declared by \n \n-    cdef int i, j, k\n-    cdef float f, g[42], *h\n+* using the Cython language :keyword:`cdef` statement,\n+* annotating variable by special cython type or\n+* using function ``declare()``.\n \n-and C :keyword:`struct`, :keyword:`union` or :keyword:`enum` types:\n+Statement :keyword:`cdef` and function ``declare()`` can declare either local or\n+module-level variables, but annotated version currently supports only local variables:\n \n-.. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.pyx\n+.. tabs::\n \n-See also :ref:`struct-union-enum-styles`\n+    .. group-tab:: Pure Python\n \n-.. note::\n+        .. code-block:: python\n+\n+            global_x = declare(cython.int)\n+            def main():\n+                i: cython.int\n+                j: cython.int\n+                k: cython.int\n+                f: cython.float\n+                g: cython.int[42]\n+                h: cython.p_float\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            cdef int i, j, k\n+            cdef float f, g[42], *h\n+\n+Moreover, C :keyword:`struct`, :keyword:`union` or :keyword:`enum` are supported:\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.py\n+\n+        .. NOTE:: Currently, Pure Python mode does not support enums.\n \n-    Structs can be declared as ``cdef packed struct``, which has\n-    the same effect as the C directive ``#pragma pack(1)``.\n+    .. group-tab:: Cython\n \n-Declaring an enum as ``cpdef`` will create a :pep:`435`-style Python wrapper::\n+        .. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.pyx\n \n-    cpdef enum CheeseState:\n-        hard = 1\n-        soft = 2\n-        runny = 3\n+        See also :ref:`struct-union-enum-styles`\n \n+        .. note::\n \n+            Structs can be declared as ``cdef packed struct``, which has\n+            the same effect as the C directive ``#pragma pack(1)``.\n \n-There is currently no special syntax for defining a constant, but you can use\n-an anonymous :keyword:`enum` declaration for this purpose, for example,::\n+        Declaring an enum as ``cpdef`` will create a :pep:`435`-style Python wrapper::\n \n-    cdef enum:\n-        tons_of_spam = 3\n+            cpdef enum CheeseState:\n+                hard = 1\n+                soft = 2\n+                runny = 3\n+\n+        There is currently no special syntax for defining a constant, but you can use\n+        an anonymous :keyword:`enum` declaration for this purpose, for example,::\n+\n+            cdef enum:\n+                tons_of_spam = 3\n+\n+        .. note::\n+            the words ``struct``, ``union`` and ``enum`` are used only when\n+            defining a type, not when referring to it. For example, to declare a variable\n+            pointing to a ``Grail`` you would write::\n+\n+                cdef Grail *gp\n+\n+            and not::\n+\n+                cdef struct Grail *gp # WRONG",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669683970",
            "id": 669683970,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTY4Mzk3MA==",
            "original_commit_id": "db174e70e9b705f3d66425371220969b6de60550",
            "original_line": 124,
            "original_position": 107,
            "original_start_line": 118,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706358129,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-07-14T15:24:43Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669683970",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669684834"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669684834"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n                 ULong = cython.typedef(cython.ulong)\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T14:46:06Z",
            "diff_hunk": "@@ -44,72 +47,141 @@ the use of ‘early binding’ programming techniques.\n C variable and type definitions\n ===============================\n \n-The :keyword:`cdef` statement is used to declare C variables, either local or\n-module-level::\n+C variables can be declared by \n \n-    cdef int i, j, k\n-    cdef float f, g[42], *h\n+* using the Cython language :keyword:`cdef` statement,\n+* annotating variable by special cython type or\n+* using function ``declare()``.\n \n-and C :keyword:`struct`, :keyword:`union` or :keyword:`enum` types:\n+Statement :keyword:`cdef` and function ``declare()`` can declare either local or\n+module-level variables, but annotated version currently supports only local variables:\n \n-.. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.pyx\n+.. tabs::\n \n-See also :ref:`struct-union-enum-styles`\n+    .. group-tab:: Pure Python\n \n-.. note::\n+        .. code-block:: python\n+\n+            global_x = declare(cython.int)\n+            def main():\n+                i: cython.int\n+                j: cython.int\n+                k: cython.int\n+                f: cython.float\n+                g: cython.int[42]\n+                h: cython.p_float\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            cdef int i, j, k\n+            cdef float f, g[42], *h\n+\n+Moreover, C :keyword:`struct`, :keyword:`union` or :keyword:`enum` are supported:\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.py\n+\n+        .. NOTE:: Currently, Pure Python mode does not support enums.\n \n-    Structs can be declared as ``cdef packed struct``, which has\n-    the same effect as the C directive ``#pragma pack(1)``.\n+    .. group-tab:: Cython\n \n-Declaring an enum as ``cpdef`` will create a :pep:`435`-style Python wrapper::\n+        .. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.pyx\n \n-    cpdef enum CheeseState:\n-        hard = 1\n-        soft = 2\n-        runny = 3\n+        See also :ref:`struct-union-enum-styles`\n \n+        .. note::\n \n+            Structs can be declared as ``cdef packed struct``, which has\n+            the same effect as the C directive ``#pragma pack(1)``.\n \n-There is currently no special syntax for defining a constant, but you can use\n-an anonymous :keyword:`enum` declaration for this purpose, for example,::\n+        Declaring an enum as ``cpdef`` will create a :pep:`435`-style Python wrapper::\n \n-    cdef enum:\n-        tons_of_spam = 3\n+            cpdef enum CheeseState:\n+                hard = 1\n+                soft = 2\n+                runny = 3\n+\n+        There is currently no special syntax for defining a constant, but you can use\n+        an anonymous :keyword:`enum` declaration for this purpose, for example,::\n+\n+            cdef enum:\n+                tons_of_spam = 3\n+\n+        .. note::\n+            the words ``struct``, ``union`` and ``enum`` are used only when\n+            defining a type, not when referring to it. For example, to declare a variable\n+            pointing to a ``Grail`` you would write::\n+\n+                cdef Grail *gp\n+\n+            and not::\n+\n+                cdef struct Grail *gp # WRONG\n \n .. note::\n-    the words ``struct``, ``union`` and ``enum`` are used only when\n-    defining a type, not when referring to it. For example, to declare a variable\n-    pointing to a ``Grail`` you would write::\n \n-        cdef Grail *gp\n+    There is also support for giving names to types by ``ctypedef`` statement or ``typedef()`` function, e.g.\n \n-    and not::\n+    .. tabs::\n \n-        cdef struct Grail *gp # WRONG\n+        .. group-tab:: Pure Python\n \n-    There is also a ``ctypedef`` statement for giving names to types, e.g.::\n+            .. code-block:: python\n \n-        ctypedef unsigned long ULong\n+                 ULong = typedef(cython.ulong)",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669684834",
            "id": 669684834,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTY4NDgzNA==",
            "original_commit_id": "db174e70e9b705f3d66425371220969b6de60550",
            "original_line": 136,
            "original_position": 127,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706358129,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T15:24:43Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669684834",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669684996"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669684996"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n                 IntPtr = cython.typedef(cython.p_int)\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T14:46:17Z",
            "diff_hunk": "@@ -44,72 +47,141 @@ the use of ‘early binding’ programming techniques.\n C variable and type definitions\n ===============================\n \n-The :keyword:`cdef` statement is used to declare C variables, either local or\n-module-level::\n+C variables can be declared by \n \n-    cdef int i, j, k\n-    cdef float f, g[42], *h\n+* using the Cython language :keyword:`cdef` statement,\n+* annotating variable by special cython type or\n+* using function ``declare()``.\n \n-and C :keyword:`struct`, :keyword:`union` or :keyword:`enum` types:\n+Statement :keyword:`cdef` and function ``declare()`` can declare either local or\n+module-level variables, but annotated version currently supports only local variables:\n \n-.. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.pyx\n+.. tabs::\n \n-See also :ref:`struct-union-enum-styles`\n+    .. group-tab:: Pure Python\n \n-.. note::\n+        .. code-block:: python\n+\n+            global_x = declare(cython.int)\n+            def main():\n+                i: cython.int\n+                j: cython.int\n+                k: cython.int\n+                f: cython.float\n+                g: cython.int[42]\n+                h: cython.p_float\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            cdef int i, j, k\n+            cdef float f, g[42], *h\n+\n+Moreover, C :keyword:`struct`, :keyword:`union` or :keyword:`enum` are supported:\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.py\n+\n+        .. NOTE:: Currently, Pure Python mode does not support enums.\n \n-    Structs can be declared as ``cdef packed struct``, which has\n-    the same effect as the C directive ``#pragma pack(1)``.\n+    .. group-tab:: Cython\n \n-Declaring an enum as ``cpdef`` will create a :pep:`435`-style Python wrapper::\n+        .. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.pyx\n \n-    cpdef enum CheeseState:\n-        hard = 1\n-        soft = 2\n-        runny = 3\n+        See also :ref:`struct-union-enum-styles`\n \n+        .. note::\n \n+            Structs can be declared as ``cdef packed struct``, which has\n+            the same effect as the C directive ``#pragma pack(1)``.\n \n-There is currently no special syntax for defining a constant, but you can use\n-an anonymous :keyword:`enum` declaration for this purpose, for example,::\n+        Declaring an enum as ``cpdef`` will create a :pep:`435`-style Python wrapper::\n \n-    cdef enum:\n-        tons_of_spam = 3\n+            cpdef enum CheeseState:\n+                hard = 1\n+                soft = 2\n+                runny = 3\n+\n+        There is currently no special syntax for defining a constant, but you can use\n+        an anonymous :keyword:`enum` declaration for this purpose, for example,::\n+\n+            cdef enum:\n+                tons_of_spam = 3\n+\n+        .. note::\n+            the words ``struct``, ``union`` and ``enum`` are used only when\n+            defining a type, not when referring to it. For example, to declare a variable\n+            pointing to a ``Grail`` you would write::\n+\n+                cdef Grail *gp\n+\n+            and not::\n+\n+                cdef struct Grail *gp # WRONG\n \n .. note::\n-    the words ``struct``, ``union`` and ``enum`` are used only when\n-    defining a type, not when referring to it. For example, to declare a variable\n-    pointing to a ``Grail`` you would write::\n \n-        cdef Grail *gp\n+    There is also support for giving names to types by ``ctypedef`` statement or ``typedef()`` function, e.g.\n \n-    and not::\n+    .. tabs::\n \n-        cdef struct Grail *gp # WRONG\n+        .. group-tab:: Pure Python\n \n-    There is also a ``ctypedef`` statement for giving names to types, e.g.::\n+            .. code-block:: python\n \n-        ctypedef unsigned long ULong\n+                 ULong = typedef(cython.ulong)\n \n-        ctypedef int* IntPtr\n+                 IntPtr = typedef(cython.p_int)",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669684996",
            "id": 669684996,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTY4NDk5Ng==",
            "original_commit_id": "db174e70e9b705f3d66425371220969b6de60550",
            "original_line": 138,
            "original_position": 130,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706358129,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T15:24:43Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669684996",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669686223"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669686223"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nYou can create a C function by declaring it with :keyword:`cdef` or by decorating a Python function with ``@cfunc``:\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T14:47:33Z",
            "diff_hunk": "@@ -44,72 +47,141 @@ the use of ‘early binding’ programming techniques.\n C variable and type definitions\n ===============================\n \n-The :keyword:`cdef` statement is used to declare C variables, either local or\n-module-level::\n+C variables can be declared by \n \n-    cdef int i, j, k\n-    cdef float f, g[42], *h\n+* using the Cython language :keyword:`cdef` statement,\n+* annotating variable by special cython type or\n+* using function ``declare()``.\n \n-and C :keyword:`struct`, :keyword:`union` or :keyword:`enum` types:\n+Statement :keyword:`cdef` and function ``declare()`` can declare either local or\n+module-level variables, but annotated version currently supports only local variables:\n \n-.. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.pyx\n+.. tabs::\n \n-See also :ref:`struct-union-enum-styles`\n+    .. group-tab:: Pure Python\n \n-.. note::\n+        .. code-block:: python\n+\n+            global_x = declare(cython.int)\n+            def main():\n+                i: cython.int\n+                j: cython.int\n+                k: cython.int\n+                f: cython.float\n+                g: cython.int[42]\n+                h: cython.p_float\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            cdef int i, j, k\n+            cdef float f, g[42], *h\n+\n+Moreover, C :keyword:`struct`, :keyword:`union` or :keyword:`enum` are supported:\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.py\n+\n+        .. NOTE:: Currently, Pure Python mode does not support enums.\n \n-    Structs can be declared as ``cdef packed struct``, which has\n-    the same effect as the C directive ``#pragma pack(1)``.\n+    .. group-tab:: Cython\n \n-Declaring an enum as ``cpdef`` will create a :pep:`435`-style Python wrapper::\n+        .. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.pyx\n \n-    cpdef enum CheeseState:\n-        hard = 1\n-        soft = 2\n-        runny = 3\n+        See also :ref:`struct-union-enum-styles`\n \n+        .. note::\n \n+            Structs can be declared as ``cdef packed struct``, which has\n+            the same effect as the C directive ``#pragma pack(1)``.\n \n-There is currently no special syntax for defining a constant, but you can use\n-an anonymous :keyword:`enum` declaration for this purpose, for example,::\n+        Declaring an enum as ``cpdef`` will create a :pep:`435`-style Python wrapper::\n \n-    cdef enum:\n-        tons_of_spam = 3\n+            cpdef enum CheeseState:\n+                hard = 1\n+                soft = 2\n+                runny = 3\n+\n+        There is currently no special syntax for defining a constant, but you can use\n+        an anonymous :keyword:`enum` declaration for this purpose, for example,::\n+\n+            cdef enum:\n+                tons_of_spam = 3\n+\n+        .. note::\n+            the words ``struct``, ``union`` and ``enum`` are used only when\n+            defining a type, not when referring to it. For example, to declare a variable\n+            pointing to a ``Grail`` you would write::\n+\n+                cdef Grail *gp\n+\n+            and not::\n+\n+                cdef struct Grail *gp # WRONG\n \n .. note::\n-    the words ``struct``, ``union`` and ``enum`` are used only when\n-    defining a type, not when referring to it. For example, to declare a variable\n-    pointing to a ``Grail`` you would write::\n \n-        cdef Grail *gp\n+    There is also support for giving names to types by ``ctypedef`` statement or ``typedef()`` function, e.g.\n \n-    and not::\n+    .. tabs::\n \n-        cdef struct Grail *gp # WRONG\n+        .. group-tab:: Pure Python\n \n-    There is also a ``ctypedef`` statement for giving names to types, e.g.::\n+            .. code-block:: python\n \n-        ctypedef unsigned long ULong\n+                 ULong = typedef(cython.ulong)\n \n-        ctypedef int* IntPtr\n+                 IntPtr = typedef(cython.p_int)\n \n+        .. group-tab:: Cython\n \n-It is also possible to declare functions with :keyword:`cdef`, making them c functions.\n+            .. code-block:: cython\n \n-::\n+                ctypedef unsigned long ULong\n \n-    cdef int eggs(unsigned long l, float f):\n-        ...\n+                ctypedef int* IntPtr\n+\n+\n+It is also possible to create c function by declaring functions with :keyword:`cdef` or by decorating function with ``@cfunc``:",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669686223",
            "id": 669686223,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTY4NjIyMw==",
            "original_commit_id": "db174e70e9b705f3d66425371220969b6de60550",
            "original_line": 149,
            "original_position": 145,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706358129,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T15:24:43Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669686223",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669687560"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669687560"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nClasses can be declared as :ref:`extension-types`.  Those will\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T14:48:55Z",
            "diff_hunk": "@@ -44,72 +47,141 @@ the use of ‘early binding’ programming techniques.\n C variable and type definitions\n ===============================\n \n-The :keyword:`cdef` statement is used to declare C variables, either local or\n-module-level::\n+C variables can be declared by \n \n-    cdef int i, j, k\n-    cdef float f, g[42], *h\n+* using the Cython language :keyword:`cdef` statement,\n+* annotating variable by special cython type or\n+* using function ``declare()``.\n \n-and C :keyword:`struct`, :keyword:`union` or :keyword:`enum` types:\n+Statement :keyword:`cdef` and function ``declare()`` can declare either local or\n+module-level variables, but annotated version currently supports only local variables:\n \n-.. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.pyx\n+.. tabs::\n \n-See also :ref:`struct-union-enum-styles`\n+    .. group-tab:: Pure Python\n \n-.. note::\n+        .. code-block:: python\n+\n+            global_x = declare(cython.int)\n+            def main():\n+                i: cython.int\n+                j: cython.int\n+                k: cython.int\n+                f: cython.float\n+                g: cython.int[42]\n+                h: cython.p_float\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            cdef int i, j, k\n+            cdef float f, g[42], *h\n+\n+Moreover, C :keyword:`struct`, :keyword:`union` or :keyword:`enum` are supported:\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.py\n+\n+        .. NOTE:: Currently, Pure Python mode does not support enums.\n \n-    Structs can be declared as ``cdef packed struct``, which has\n-    the same effect as the C directive ``#pragma pack(1)``.\n+    .. group-tab:: Cython\n \n-Declaring an enum as ``cpdef`` will create a :pep:`435`-style Python wrapper::\n+        .. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.pyx\n \n-    cpdef enum CheeseState:\n-        hard = 1\n-        soft = 2\n-        runny = 3\n+        See also :ref:`struct-union-enum-styles`\n \n+        .. note::\n \n+            Structs can be declared as ``cdef packed struct``, which has\n+            the same effect as the C directive ``#pragma pack(1)``.\n \n-There is currently no special syntax for defining a constant, but you can use\n-an anonymous :keyword:`enum` declaration for this purpose, for example,::\n+        Declaring an enum as ``cpdef`` will create a :pep:`435`-style Python wrapper::\n \n-    cdef enum:\n-        tons_of_spam = 3\n+            cpdef enum CheeseState:\n+                hard = 1\n+                soft = 2\n+                runny = 3\n+\n+        There is currently no special syntax for defining a constant, but you can use\n+        an anonymous :keyword:`enum` declaration for this purpose, for example,::\n+\n+            cdef enum:\n+                tons_of_spam = 3\n+\n+        .. note::\n+            the words ``struct``, ``union`` and ``enum`` are used only when\n+            defining a type, not when referring to it. For example, to declare a variable\n+            pointing to a ``Grail`` you would write::\n+\n+                cdef Grail *gp\n+\n+            and not::\n+\n+                cdef struct Grail *gp # WRONG\n \n .. note::\n-    the words ``struct``, ``union`` and ``enum`` are used only when\n-    defining a type, not when referring to it. For example, to declare a variable\n-    pointing to a ``Grail`` you would write::\n \n-        cdef Grail *gp\n+    There is also support for giving names to types by ``ctypedef`` statement or ``typedef()`` function, e.g.\n \n-    and not::\n+    .. tabs::\n \n-        cdef struct Grail *gp # WRONG\n+        .. group-tab:: Pure Python\n \n-    There is also a ``ctypedef`` statement for giving names to types, e.g.::\n+            .. code-block:: python\n \n-        ctypedef unsigned long ULong\n+                 ULong = typedef(cython.ulong)\n \n-        ctypedef int* IntPtr\n+                 IntPtr = typedef(cython.p_int)\n \n+        .. group-tab:: Cython\n \n-It is also possible to declare functions with :keyword:`cdef`, making them c functions.\n+            .. code-block:: cython\n \n-::\n+                ctypedef unsigned long ULong\n \n-    cdef int eggs(unsigned long l, float f):\n-        ...\n+                ctypedef int* IntPtr\n+\n+\n+It is also possible to create c function by declaring functions with :keyword:`cdef` or by decorating function with ``@cfunc``:\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            @cfunc\n+            def eggs(l: cython.ulong, f: cython.float) -> cython.int:\n+                ...\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            cdef int eggs(unsigned long l, float f):\n+                ...\n \n You can read more about them in :ref:`python_functions_vs_c_functions`.\n \n-You can declare classes with :keyword:`cdef`, making them :ref:`extension-types`. Those will\n+Cython is supporting special type of classes known as :ref:`extension-types`. Those will",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669687560",
            "id": 669687560,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTY4NzU2MA==",
            "original_commit_id": "db174e70e9b705f3d66425371220969b6de60550",
            "original_line": 170,
            "original_position": 167,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706358129,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T15:24:43Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669687560",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669688036"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669688036"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\ninternally to store attributes.\r\nThey are declared with the :keyword:`cdef` keyword or the ``@cclass`` class decorator.\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T14:49:26Z",
            "diff_hunk": "@@ -44,72 +47,141 @@ the use of ‘early binding’ programming techniques.\n C variable and type definitions\n ===============================\n \n-The :keyword:`cdef` statement is used to declare C variables, either local or\n-module-level::\n+C variables can be declared by \n \n-    cdef int i, j, k\n-    cdef float f, g[42], *h\n+* using the Cython language :keyword:`cdef` statement,\n+* annotating variable by special cython type or\n+* using function ``declare()``.\n \n-and C :keyword:`struct`, :keyword:`union` or :keyword:`enum` types:\n+Statement :keyword:`cdef` and function ``declare()`` can declare either local or\n+module-level variables, but annotated version currently supports only local variables:\n \n-.. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.pyx\n+.. tabs::\n \n-See also :ref:`struct-union-enum-styles`\n+    .. group-tab:: Pure Python\n \n-.. note::\n+        .. code-block:: python\n+\n+            global_x = declare(cython.int)\n+            def main():\n+                i: cython.int\n+                j: cython.int\n+                k: cython.int\n+                f: cython.float\n+                g: cython.int[42]\n+                h: cython.p_float\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            cdef int i, j, k\n+            cdef float f, g[42], *h\n+\n+Moreover, C :keyword:`struct`, :keyword:`union` or :keyword:`enum` are supported:\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.py\n+\n+        .. NOTE:: Currently, Pure Python mode does not support enums.\n \n-    Structs can be declared as ``cdef packed struct``, which has\n-    the same effect as the C directive ``#pragma pack(1)``.\n+    .. group-tab:: Cython\n \n-Declaring an enum as ``cpdef`` will create a :pep:`435`-style Python wrapper::\n+        .. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.pyx\n \n-    cpdef enum CheeseState:\n-        hard = 1\n-        soft = 2\n-        runny = 3\n+        See also :ref:`struct-union-enum-styles`\n \n+        .. note::\n \n+            Structs can be declared as ``cdef packed struct``, which has\n+            the same effect as the C directive ``#pragma pack(1)``.\n \n-There is currently no special syntax for defining a constant, but you can use\n-an anonymous :keyword:`enum` declaration for this purpose, for example,::\n+        Declaring an enum as ``cpdef`` will create a :pep:`435`-style Python wrapper::\n \n-    cdef enum:\n-        tons_of_spam = 3\n+            cpdef enum CheeseState:\n+                hard = 1\n+                soft = 2\n+                runny = 3\n+\n+        There is currently no special syntax for defining a constant, but you can use\n+        an anonymous :keyword:`enum` declaration for this purpose, for example,::\n+\n+            cdef enum:\n+                tons_of_spam = 3\n+\n+        .. note::\n+            the words ``struct``, ``union`` and ``enum`` are used only when\n+            defining a type, not when referring to it. For example, to declare a variable\n+            pointing to a ``Grail`` you would write::\n+\n+                cdef Grail *gp\n+\n+            and not::\n+\n+                cdef struct Grail *gp # WRONG\n \n .. note::\n-    the words ``struct``, ``union`` and ``enum`` are used only when\n-    defining a type, not when referring to it. For example, to declare a variable\n-    pointing to a ``Grail`` you would write::\n \n-        cdef Grail *gp\n+    There is also support for giving names to types by ``ctypedef`` statement or ``typedef()`` function, e.g.\n \n-    and not::\n+    .. tabs::\n \n-        cdef struct Grail *gp # WRONG\n+        .. group-tab:: Pure Python\n \n-    There is also a ``ctypedef`` statement for giving names to types, e.g.::\n+            .. code-block:: python\n \n-        ctypedef unsigned long ULong\n+                 ULong = typedef(cython.ulong)\n \n-        ctypedef int* IntPtr\n+                 IntPtr = typedef(cython.p_int)\n \n+        .. group-tab:: Cython\n \n-It is also possible to declare functions with :keyword:`cdef`, making them c functions.\n+            .. code-block:: cython\n \n-::\n+                ctypedef unsigned long ULong\n \n-    cdef int eggs(unsigned long l, float f):\n-        ...\n+                ctypedef int* IntPtr\n+\n+\n+It is also possible to create c function by declaring functions with :keyword:`cdef` or by decorating function with ``@cfunc``:\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            @cfunc\n+            def eggs(l: cython.ulong, f: cython.float) -> cython.int:\n+                ...\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            cdef int eggs(unsigned long l, float f):\n+                ...\n \n You can read more about them in :ref:`python_functions_vs_c_functions`.\n \n-You can declare classes with :keyword:`cdef`, making them :ref:`extension-types`. Those will\n+Cython is supporting special type of classes known as :ref:`extension-types`. Those will\n have a behavior very close to python classes, but are faster because they use a ``struct``\n-internally to store attributes.\n+internally to store attributes. They are declared by :keyword:`cdef` keyword or by ``@cclass`` decorator.",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669688036",
            "id": 669688036,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTY4ODAzNg==",
            "original_commit_id": "db174e70e9b705f3d66425371220969b6de60550",
            "original_line": 172,
            "original_position": 170,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706358129,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T15:24:43Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669688036",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669688448"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669688448"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nThe Cython language uses the normal C syntax for C types, including pointers.  It provides\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T14:49:53Z",
            "diff_hunk": "@@ -119,40 +191,73 @@ You can read more about them in :ref:`extension-types`.\n Types\n -----\n \n-Cython uses the normal C syntax for C types, including pointers.  It provides\n+Cython language uses the normal C syntax for C types, including pointers.  It provides",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669688448",
            "id": 669688448,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTY4ODQ0OA==",
            "original_commit_id": "db174e70e9b705f3d66425371220969b6de60550",
            "original_line": 194,
            "original_position": 192,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706358129,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T15:24:43Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669688448",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669689373"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669689373"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\ne.g. ``unsigned int`` (``cython.uint`` in Python code).\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T14:50:52Z",
            "diff_hunk": "@@ -119,40 +191,73 @@ You can read more about them in :ref:`extension-types`.\n Types\n -----\n \n-Cython uses the normal C syntax for C types, including pointers.  It provides\n+Cython language uses the normal C syntax for C types, including pointers.  It provides\n all the standard C types, namely ``char``, ``short``, ``int``, ``long``,\n-``long long`` as well as their ``unsigned`` versions, e.g. ``unsigned int``.\n+``long long`` as well as their ``unsigned`` versions,\n+e.g. ``unsigned int`` in Cython laguage and ``uint`` in Pure Python.",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669689373",
            "id": 669689373,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTY4OTM3Mw==",
            "original_commit_id": "db174e70e9b705f3d66425371220969b6de60550",
            "original_line": 197,
            "original_position": 196,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706358129,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T15:24:43Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669689373",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669690105"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669690105"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nPointer types are constructed as in C when using Cython syntax, by appending a ``*`` to the base type\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T14:51:40Z",
            "diff_hunk": "@@ -119,40 +191,73 @@ You can read more about them in :ref:`extension-types`.\n Types\n -----\n \n-Cython uses the normal C syntax for C types, including pointers.  It provides\n+Cython language uses the normal C syntax for C types, including pointers.  It provides\n all the standard C types, namely ``char``, ``short``, ``int``, ``long``,\n-``long long`` as well as their ``unsigned`` versions, e.g. ``unsigned int``.\n+``long long`` as well as their ``unsigned`` versions,\n+e.g. ``unsigned int`` in Cython laguage and ``uint`` in Pure Python.\n The special ``bint`` type is used for C boolean values (``int`` with 0/non-0\n values for False/True) and ``Py_ssize_t`` for (signed) sizes of Python\n containers.\n \n-Pointer types are constructed as in C, by appending a ``*`` to the base type\n-they point to, e.g. ``int**`` for a pointer to a pointer to a C int.\n+Pointer types are constructed as in C in Cython language, by appending a ``*`` to the base type",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669690105",
            "id": 669690105,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTY5MDEwNQ==",
            "original_commit_id": "db174e70e9b705f3d66425371220969b6de60550",
            "original_line": 202,
            "original_position": 203,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706358129,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T15:24:43Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669690105",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669691705"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669691705"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nuse a naming scheme with \"p\"s instead, separated from the type name with an underscore, e.g. ``cython.pp_int`` for a pointer to\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T14:53:23Z",
            "diff_hunk": "@@ -119,40 +191,73 @@ You can read more about them in :ref:`extension-types`.\n Types\n -----\n \n-Cython uses the normal C syntax for C types, including pointers.  It provides\n+Cython language uses the normal C syntax for C types, including pointers.  It provides\n all the standard C types, namely ``char``, ``short``, ``int``, ``long``,\n-``long long`` as well as their ``unsigned`` versions, e.g. ``unsigned int``.\n+``long long`` as well as their ``unsigned`` versions,\n+e.g. ``unsigned int`` in Cython laguage and ``uint`` in Pure Python.\n The special ``bint`` type is used for C boolean values (``int`` with 0/non-0\n values for False/True) and ``Py_ssize_t`` for (signed) sizes of Python\n containers.\n \n-Pointer types are constructed as in C, by appending a ``*`` to the base type\n-they point to, e.g. ``int**`` for a pointer to a pointer to a C int.\n+Pointer types are constructed as in C in Cython language, by appending a ``*`` to the base type\n+they point to, e.g. ``int**`` for a pointer to a pointer to a C int. In Pure python mode, pointer types\n+are constructed by needed number of \"p\" s and then \"_\", e.g. ``pp_int`` for a pointer to",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669691705",
            "id": 669691705,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTY5MTcwNQ==",
            "original_commit_id": "db174e70e9b705f3d66425371220969b6de60550",
            "original_line": 204,
            "original_position": 205,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706358129,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T15:24:43Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669691705",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669692425"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669692425"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\na pointer to a C int. Further pointer types can be constructed with the ``cython.pointer()`` function.\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T14:54:06Z",
            "diff_hunk": "@@ -119,40 +191,73 @@ You can read more about them in :ref:`extension-types`.\n Types\n -----\n \n-Cython uses the normal C syntax for C types, including pointers.  It provides\n+Cython language uses the normal C syntax for C types, including pointers.  It provides\n all the standard C types, namely ``char``, ``short``, ``int``, ``long``,\n-``long long`` as well as their ``unsigned`` versions, e.g. ``unsigned int``.\n+``long long`` as well as their ``unsigned`` versions,\n+e.g. ``unsigned int`` in Cython laguage and ``uint`` in Pure Python.\n The special ``bint`` type is used for C boolean values (``int`` with 0/non-0\n values for False/True) and ``Py_ssize_t`` for (signed) sizes of Python\n containers.\n \n-Pointer types are constructed as in C, by appending a ``*`` to the base type\n-they point to, e.g. ``int**`` for a pointer to a pointer to a C int.\n+Pointer types are constructed as in C in Cython language, by appending a ``*`` to the base type\n+they point to, e.g. ``int**`` for a pointer to a pointer to a C int. In Pure python mode, pointer types\n+are constructed by needed number of \"p\" s and then \"_\", e.g. ``pp_int`` for a pointer to\n+a pointer to a C int. Further pointer types can be constructed with ``pointer()`` function.",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669692425",
            "id": 669692425,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTY5MjQyNQ==",
            "original_commit_id": "db174e70e9b705f3d66425371220969b6de60550",
            "original_line": 205,
            "original_position": 206,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706358129,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T15:24:43Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669692425",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669695738"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669695738"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    typing in ``.pyx`` files and instead interpreted as C ``int``, ``long``, and ``float``\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T14:57:33Z",
            "diff_hunk": "@@ -119,40 +191,73 @@ You can read more about them in :ref:`extension-types`.\n Types\n -----\n \n-Cython uses the normal C syntax for C types, including pointers.  It provides\n+Cython language uses the normal C syntax for C types, including pointers.  It provides\n all the standard C types, namely ``char``, ``short``, ``int``, ``long``,\n-``long long`` as well as their ``unsigned`` versions, e.g. ``unsigned int``.\n+``long long`` as well as their ``unsigned`` versions,\n+e.g. ``unsigned int`` in Cython laguage and ``uint`` in Pure Python.\n The special ``bint`` type is used for C boolean values (``int`` with 0/non-0\n values for False/True) and ``Py_ssize_t`` for (signed) sizes of Python\n containers.\n \n-Pointer types are constructed as in C, by appending a ``*`` to the base type\n-they point to, e.g. ``int**`` for a pointer to a pointer to a C int.\n+Pointer types are constructed as in C in Cython language, by appending a ``*`` to the base type\n+they point to, e.g. ``int**`` for a pointer to a pointer to a C int. In Pure python mode, pointer types\n+are constructed by needed number of \"p\" s and then \"_\", e.g. ``pp_int`` for a pointer to\n+a pointer to a C int. Further pointer types can be constructed with ``pointer()`` function.\n+\n+\n Arrays use the normal C array syntax, e.g. ``int[10]``, and the size must be known\n at compile time for stack allocated arrays. Cython doesn't support variable length arrays from C99.\n Note that Cython uses array access for pointer dereferencing, as ``*x`` is not valid Python syntax,\n whereas ``x[0]`` is.\n \n Also, the Python types ``list``, ``dict``, ``tuple``, etc. may be used for\n static typing, as well as any user defined :ref:`extension-types`.\n-For example::\n+For example\n \n-    cdef list foo = []\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            def main():\n+                foo: list = []\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            cdef list foo = []\n \n This requires an *exact* match of the class, it does not allow subclasses.\n This allows Cython to optimize code by accessing internals of the builtin class,\n which is the main reason for declaring builtin types in the first place.\n \n For declared builtin types, Cython uses internally a C variable of type ``PyObject*``.\n-The Python types int, long, and float are not available for static\n-typing and instead interpreted as C ``int``, ``long``, and ``float``\n-respectively, as statically typing variables with these Python\n-types has zero advantages.\n+\n+.. Note:: The Python types ``int``, ``long``, and ``float`` are not available for static\n+    typing in Cython language and instead interpreted as C ``int``, ``long``, and ``float``",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669695738",
            "id": 669695738,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTY5NTczOA==",
            "original_commit_id": "db174e70e9b705f3d66425371220969b6de60550",
            "original_line": 239,
            "original_position": 246,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706358129,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T15:24:44Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669695738",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669696484"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669696484"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    ``int``, ``long``, and ``float`` python types will be interpreted as ``object`` type.\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T14:58:18Z",
            "diff_hunk": "@@ -119,40 +191,73 @@ You can read more about them in :ref:`extension-types`.\n Types\n -----\n \n-Cython uses the normal C syntax for C types, including pointers.  It provides\n+Cython language uses the normal C syntax for C types, including pointers.  It provides\n all the standard C types, namely ``char``, ``short``, ``int``, ``long``,\n-``long long`` as well as their ``unsigned`` versions, e.g. ``unsigned int``.\n+``long long`` as well as their ``unsigned`` versions,\n+e.g. ``unsigned int`` in Cython laguage and ``uint`` in Pure Python.\n The special ``bint`` type is used for C boolean values (``int`` with 0/non-0\n values for False/True) and ``Py_ssize_t`` for (signed) sizes of Python\n containers.\n \n-Pointer types are constructed as in C, by appending a ``*`` to the base type\n-they point to, e.g. ``int**`` for a pointer to a pointer to a C int.\n+Pointer types are constructed as in C in Cython language, by appending a ``*`` to the base type\n+they point to, e.g. ``int**`` for a pointer to a pointer to a C int. In Pure python mode, pointer types\n+are constructed by needed number of \"p\" s and then \"_\", e.g. ``pp_int`` for a pointer to\n+a pointer to a C int. Further pointer types can be constructed with ``pointer()`` function.\n+\n+\n Arrays use the normal C array syntax, e.g. ``int[10]``, and the size must be known\n at compile time for stack allocated arrays. Cython doesn't support variable length arrays from C99.\n Note that Cython uses array access for pointer dereferencing, as ``*x`` is not valid Python syntax,\n whereas ``x[0]`` is.\n \n Also, the Python types ``list``, ``dict``, ``tuple``, etc. may be used for\n static typing, as well as any user defined :ref:`extension-types`.\n-For example::\n+For example\n \n-    cdef list foo = []\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            def main():\n+                foo: list = []\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            cdef list foo = []\n \n This requires an *exact* match of the class, it does not allow subclasses.\n This allows Cython to optimize code by accessing internals of the builtin class,\n which is the main reason for declaring builtin types in the first place.\n \n For declared builtin types, Cython uses internally a C variable of type ``PyObject*``.\n-The Python types int, long, and float are not available for static\n-typing and instead interpreted as C ``int``, ``long``, and ``float``\n-respectively, as statically typing variables with these Python\n-types has zero advantages.\n+\n+.. Note:: The Python types ``int``, ``long``, and ``float`` are not available for static\n+    typing in Cython language and instead interpreted as C ``int``, ``long``, and ``float``\n+    respectively, as statically typing variables with these Python\n+    types has zero advantages. On the other hand, annotating in Pure Python with\n+    ``int``, ``long``, and ``float`` python types will be interpreted as ``PyObject*`` type.",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669696484",
            "id": 669696484,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTY5NjQ4NA==",
            "original_commit_id": "db174e70e9b705f3d66425371220969b6de60550",
            "original_line": 242,
            "original_position": 249,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706358129,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T15:24:44Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669696484",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669697049"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669697049"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nIt is also possible to declare :ref:`extension-types` (declared with ``cdef class`` or the ``@cclass`` decorator).\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T14:58:51Z",
            "diff_hunk": "@@ -165,9 +270,9 @@ and is typically what one wants).\n If you want to use these numeric Python types simply omit the\n type declaration and let them be objects.\n \n-It is also possible to declare :ref:`extension-types` (declared with ``cdef class``).\n+It is also possible to declare :ref:`extension-types` (declared with ``cdef class`` or by ``@cclass`` decorator).",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669697049",
            "id": 669697049,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTY5NzA0OQ==",
            "original_commit_id": "db174e70e9b705f3d66425371220969b6de60550",
            "original_line": 273,
            "original_position": 278,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706358129,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T15:24:44Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669697049",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669699440"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669699440"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n.. note:: This is supported only in Cython's ``cdef`` syntax.\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T15:01:27Z",
            "diff_hunk": "@@ -178,8 +283,11 @@ Grouping multiple C declarations\n If you have a series of declarations that all begin with :keyword:`cdef`, you\n can group them into a :keyword:`cdef` block like this:\n \n+.. note:: This is supported only by Cython language.",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669699440",
            "id": 669699440,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTY5OTQ0MA==",
            "original_commit_id": "db174e70e9b705f3d66425371220969b6de60550",
            "original_line": 286,
            "original_position": 289,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706358129,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T15:24:44Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669699440",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669699873"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669699873"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nPython functions are defined using the :keyword:`def` statement, as in Python. They take\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T15:01:57Z",
            "diff_hunk": "@@ -189,48 +297,98 @@ Python functions vs. C functions\n \n There are two kinds of function definition in Cython:\n \n-Python functions are defined using the def statement, as in Python. They take\n+Python functions are defined using the ``def`` statement, as in Python. They take",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669699873",
            "id": 669699873,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTY5OTg3Mw==",
            "original_commit_id": "db174e70e9b705f3d66425371220969b6de60550",
            "original_line": 300,
            "original_position": 302,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706358129,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T15:24:44Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669699873",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669700595"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669700595"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nC functions are defined using the :keyword:`cdef` statement in Cython syntax or with the ``@cfunc`` decorator. They take\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T15:02:45Z",
            "diff_hunk": "@@ -189,48 +297,98 @@ Python functions vs. C functions\n \n There are two kinds of function definition in Cython:\n \n-Python functions are defined using the def statement, as in Python. They take\n+Python functions are defined using the ``def`` statement, as in Python. They take\n :term:`Python objects<Python object>` as parameters and return Python objects.\n \n-C functions are defined using the new :keyword:`cdef` statement. They take\n+C functions are defined using the new :keyword:`cdef` statement in Cython language or by ``@cfunc`` decorator. They take",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669700595",
            "id": 669700595,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTcwMDU5NQ==",
            "original_commit_id": "db174e70e9b705f3d66425371220969b6de60550",
            "original_line": 303,
            "original_position": 306,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706358129,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T15:24:44Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669700595",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669701234"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669701234"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nThere is also a hybrid function, declared with :keyword:`cpdef` in ``.pyx`` files or with the ``@ccall`` decorator.  These functions\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T15:03:29Z",
            "diff_hunk": "@@ -189,48 +297,98 @@ Python functions vs. C functions\n \n There are two kinds of function definition in Cython:\n \n-Python functions are defined using the def statement, as in Python. They take\n+Python functions are defined using the ``def`` statement, as in Python. They take\n :term:`Python objects<Python object>` as parameters and return Python objects.\n \n-C functions are defined using the new :keyword:`cdef` statement. They take\n+C functions are defined using the new :keyword:`cdef` statement in Cython language or by ``@cfunc`` decorator. They take\n either Python objects or C values as parameters, and can return either Python\n objects or C values.\n \n Within a Cython module, Python functions and C functions can call each other\n freely, but only Python functions can be called from outside the module by\n interpreted Python code. So, any functions that you want to \"export\" from your\n-Cython module must be declared as Python functions using def.\n-There is also a hybrid function, called :keyword:`cpdef`. A :keyword:`cpdef`\n+Cython module must be declared as Python functions using ``def``.\n+There is also a hybrid function, declared by :keyword:`cpdef` in Cython language or by ``@ccall`` decorator. A hybrid function",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669701234",
            "id": 669701234,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTcwMTIzNA==",
            "original_commit_id": "db174e70e9b705f3d66425371220969b6de60550",
            "original_line": 311,
            "original_position": 316,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706358129,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T15:24:44Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669701234",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669702147"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669702147"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\ncan be called from anywhere, but use the faster C calling convention\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T15:04:35Z",
            "diff_hunk": "@@ -189,48 +297,98 @@ Python functions vs. C functions\n \n There are two kinds of function definition in Cython:\n \n-Python functions are defined using the def statement, as in Python. They take\n+Python functions are defined using the ``def`` statement, as in Python. They take\n :term:`Python objects<Python object>` as parameters and return Python objects.\n \n-C functions are defined using the new :keyword:`cdef` statement. They take\n+C functions are defined using the new :keyword:`cdef` statement in Cython language or by ``@cfunc`` decorator. They take\n either Python objects or C values as parameters, and can return either Python\n objects or C values.\n \n Within a Cython module, Python functions and C functions can call each other\n freely, but only Python functions can be called from outside the module by\n interpreted Python code. So, any functions that you want to \"export\" from your\n-Cython module must be declared as Python functions using def.\n-There is also a hybrid function, called :keyword:`cpdef`. A :keyword:`cpdef`\n+Cython module must be declared as Python functions using ``def``.\n+There is also a hybrid function, declared by :keyword:`cpdef` in Cython language or by ``@ccall`` decorator. A hybrid function\n can be called from anywhere, but uses the faster C calling conventions",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669702147",
            "id": 669702147,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTcwMjE0Nw==",
            "original_commit_id": "db174e70e9b705f3d66425371220969b6de60550",
            "original_line": 312,
            "original_position": 317,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706358129,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T15:24:44Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669702147",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669702423"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669702423"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nwhen being called from other Cython code. They can also be overridden\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T15:04:54Z",
            "diff_hunk": "@@ -189,48 +297,98 @@ Python functions vs. C functions\n \n There are two kinds of function definition in Cython:\n \n-Python functions are defined using the def statement, as in Python. They take\n+Python functions are defined using the ``def`` statement, as in Python. They take\n :term:`Python objects<Python object>` as parameters and return Python objects.\n \n-C functions are defined using the new :keyword:`cdef` statement. They take\n+C functions are defined using the new :keyword:`cdef` statement in Cython language or by ``@cfunc`` decorator. They take\n either Python objects or C values as parameters, and can return either Python\n objects or C values.\n \n Within a Cython module, Python functions and C functions can call each other\n freely, but only Python functions can be called from outside the module by\n interpreted Python code. So, any functions that you want to \"export\" from your\n-Cython module must be declared as Python functions using def.\n-There is also a hybrid function, called :keyword:`cpdef`. A :keyword:`cpdef`\n+Cython module must be declared as Python functions using ``def``.\n+There is also a hybrid function, declared by :keyword:`cpdef` in Cython language or by ``@ccall`` decorator. A hybrid function\n can be called from anywhere, but uses the faster C calling conventions\n-when being called from other Cython code. A :keyword:`cpdef` can also be overridden\n+when being called from other Cython code. A hybrid function can also be overridden",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669702423",
            "id": 669702423,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTcwMjQyMw==",
            "original_commit_id": "db174e70e9b705f3d66425371220969b6de60550",
            "original_line": 313,
            "original_position": 319,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706358129,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T15:24:44Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669702423",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669702981"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669702981"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nthere is a tiny overhead in calling such a method from Cython compared to\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T15:05:35Z",
            "diff_hunk": "@@ -189,48 +297,98 @@ Python functions vs. C functions\n \n There are two kinds of function definition in Cython:\n \n-Python functions are defined using the def statement, as in Python. They take\n+Python functions are defined using the ``def`` statement, as in Python. They take\n :term:`Python objects<Python object>` as parameters and return Python objects.\n \n-C functions are defined using the new :keyword:`cdef` statement. They take\n+C functions are defined using the new :keyword:`cdef` statement in Cython language or by ``@cfunc`` decorator. They take\n either Python objects or C values as parameters, and can return either Python\n objects or C values.\n \n Within a Cython module, Python functions and C functions can call each other\n freely, but only Python functions can be called from outside the module by\n interpreted Python code. So, any functions that you want to \"export\" from your\n-Cython module must be declared as Python functions using def.\n-There is also a hybrid function, called :keyword:`cpdef`. A :keyword:`cpdef`\n+Cython module must be declared as Python functions using ``def``.\n+There is also a hybrid function, declared by :keyword:`cpdef` in Cython language or by ``@ccall`` decorator. A hybrid function\n can be called from anywhere, but uses the faster C calling conventions\n-when being called from other Cython code. A :keyword:`cpdef` can also be overridden\n+when being called from other Cython code. A hybrid function can also be overridden\n by a Python method on a subclass or an instance attribute, even when called from Cython.\n If this happens, most performance gains are of course lost and even if it does not,\n-there is a tiny overhead in calling a :keyword:`cpdef` method from Cython compared to\n-calling a :keyword:`cdef` method.\n+there is a tiny overhead in calling a hybfid method from Cython compared to",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669702981",
            "id": 669702981,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTcwMjk4MQ==",
            "original_commit_id": "db174e70e9b705f3d66425371220969b6de60550",
            "original_line": 316,
            "original_position": 324,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706358129,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T15:24:44Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669702981",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669704011"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669704011"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nC Functions declared using :keyword:`cdef` or the ``@cfunc`` decorator with a\r\nPython object return type, like Python functions, will return a :keyword:`None`\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T15:06:48Z",
            "diff_hunk": "@@ -243,7 +401,7 @@ with string attributes if they are to be used after the function returns.\n C functions, on the other hand, can have parameters of any type, since they're\n passed in directly using a normal C function call.\n \n-Functions declared using :keyword:`cdef` with Python object return type, like Python functions, will return a :keyword:`None`\n+C Functions declared using :keyword:`cdef` or ``@cfunc`` decorator with Python object return type, like Python functions, will return a :keyword:`None`",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669704011",
            "id": 669704011,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTcwNDAxMQ==",
            "original_commit_id": "db174e70e9b705f3d66425371220969b6de60550",
            "original_line": 404,
            "original_position": 421,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706358129,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T15:24:44Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669704011",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669705106"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669705106"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    pure python from a C function.\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T15:08:01Z",
            "diff_hunk": "@@ -274,25 +446,50 @@ parameters and a new reference is returned).\n \n The name object can also be used to explicitly declare something as a Python\n object. This can be useful if the name being declared would otherwise be taken\n-as the name of a type, for example,::\n+as the name of a type, for example,\n \n-    cdef ftang(object int):\n-        ...\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            @cfunc\n+            def ftang(int: object):\n+                ...\n+\n+    .. group-tab:: Cython\n \n-declares a parameter called int which is a Python object. You can also use\n+        .. code-block:: cython\n+\n+            cdef ftang(object int):\n+                ...\n+\n+declares a parameter called ``int`` which is a Python object. You can also use\n object as the explicit return type of a function, e.g.::\n \n     cdef object ftang(object int):\n         ...\n \n+.. note:: Currently, Cython contains a bug not allowing returning ``object`` in\n+    pure python from C function.",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669705106",
            "id": 669705106,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTcwNTEwNg==",
            "original_commit_id": "db174e70e9b705f3d66425371220969b6de60550",
            "original_line": 475,
            "original_position": 487,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706358129,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T15:24:44Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669705106",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669705549"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669705549"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nUnlike C, it is possible to use optional arguments in C and ``cpdef``/``@ccall`` functions.\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T15:08:32Z",
            "diff_hunk": "@@ -305,23 +502,34 @@ will display::\n Optional Arguments\n ------------------\n \n-Unlike C, it is possible to use optional arguments in ``cdef`` and ``cpdef`` functions.\n-There are differences though whether you declare them in a ``.pyx``\n+Unlike C, it is possible to use optional arguments in C and hybrid functions.",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669705549",
            "id": 669705549,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTcwNTU0OQ==",
            "original_commit_id": "db174e70e9b705f3d66425371220969b6de60550",
            "original_line": 505,
            "original_position": 515,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706358129,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T15:24:44Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669705549",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669706689"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669706689"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\ndefined as C functions or ``cpdef``/``@ccall`` functions can return arbitrary C types,\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T15:09:39Z",
            "diff_hunk": "@@ -374,19 +582,34 @@ through defined error return values.  For functions that return a Python object\n ``NULL`` pointer, so any function returning a Python object has a well-defined\n error return value.\n \n-While this is always the case for :keyword:`def` functions, functions\n-defined as :keyword:`cdef` or :keyword:`cpdef` can return arbitrary C types,\n+While this is always the case for C functions, functions\n+defined as C functions or hybryd functions can return arbitrary C types,",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669706689",
            "id": 669706689,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTcwNjY4OQ==",
            "original_commit_id": "db174e70e9b705f3d66425371220969b6de60550",
            "original_line": 586,
            "original_position": 555,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706358129,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T15:24:44Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669706689",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669708082"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669708082"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n.. note:: These declarations are not used in Python code, only in ``.pxd``  and ``.pyx`` files.\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T15:11:15Z",
            "diff_hunk": "@@ -430,14 +686,16 @@ An external C++ function that may raise an exception can be declared with::\n \n     cdef int spam() except +\n \n+.. note:: Pure python mode does not have equivalent to `except +`.",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669708082",
            "id": 669708082,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTcwODA4Mg==",
            "original_commit_id": "db174e70e9b705f3d66425371220969b6de60550",
            "original_line": 689,
            "original_position": 654,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706358129,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T15:24:44Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669708082",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669708653"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669708653"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n  .. note:: Pointers to functions are currently not supported by pure Python mode.\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T15:11:57Z",
            "diff_hunk": "@@ -446,6 +704,8 @@ Some things to note:\n \n       int (*grail)(int, char*) except -1\n \n+  .. note:: Pointer to function is currently not supported by pure python mode.",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669708653",
            "id": 669708653,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTcwODY1Mw==",
            "original_commit_id": "db174e70e9b705f3d66425371220969b6de60550",
            "original_line": 707,
            "original_position": 672,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706358129,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T15:24:44Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669708653",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669709072"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669709072"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n``cpdef``/``@ccall`` methods can override C methods:\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T15:12:27Z",
            "diff_hunk": "@@ -470,23 +730,46 @@ function or a C function that calls Python/C API routines. To get an exception\n from a non-Python-aware function such as :func:`fopen`, you will have to check the\n return value and raise it yourself, for example:\n \n-.. literalinclude:: ../../examples/userguide/language_basics/open_file.pyx\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. literalinclude:: ../../examples/userguide/language_basics/open_file.py\n+\n+    .. group-tab:: Cython\n+\n+        .. literalinclude:: ../../examples/userguide/language_basics/open_file.pyx\n \n .. _overriding_in_extension_types:\n \n Overriding in extension types\n -----------------------------\n \n \n-``cpdef`` methods can override ``cdef`` methods:\n+Hybrid methods can override C methods:",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669709072",
            "id": 669709072,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTcwOTA3Mg==",
            "original_commit_id": "db174e70e9b705f3d66425371220969b6de60550",
            "original_line": 749,
            "original_position": 699,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706358129,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T15:24:44Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669709072",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669709968"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669709968"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nPython methods can override ``cpdef``/``@ccall`` methods but not plain C methods:\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T15:13:26Z",
            "diff_hunk": "@@ -470,23 +730,46 @@ function or a C function that calls Python/C API routines. To get an exception\n from a non-Python-aware function such as :func:`fopen`, you will have to check the\n return value and raise it yourself, for example:\n \n-.. literalinclude:: ../../examples/userguide/language_basics/open_file.pyx\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. literalinclude:: ../../examples/userguide/language_basics/open_file.py\n+\n+    .. group-tab:: Cython\n+\n+        .. literalinclude:: ../../examples/userguide/language_basics/open_file.pyx\n \n .. _overriding_in_extension_types:\n \n Overriding in extension types\n -----------------------------\n \n \n-``cpdef`` methods can override ``cdef`` methods:\n+Hybrid methods can override C methods:\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. literalinclude:: ../../examples/userguide/language_basics/optional_subclassing.py\n+\n+    .. group-tab:: Cython\n \n-.. literalinclude:: ../../examples/userguide/language_basics/optional_subclassing.pyx\n+        .. literalinclude:: ../../examples/userguide/language_basics/optional_subclassing.pyx\n \n When subclassing an extension type with a Python class,\n-``def`` methods can override ``cpdef`` methods but not ``cdef``\n-methods:\n+C methods can override hybrid methods but not C methods:",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669709968",
            "id": 669709968,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTcwOTk2OA==",
            "original_commit_id": "db174e70e9b705f3d66425371220969b6de60550",
            "original_line": 762,
            "original_position": 715,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706358129,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T15:24:44Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669709968",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669710482"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669710482"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nvariable, and then obtain the ``char*`` from that, i.e.\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T15:14:02Z",
            "diff_hunk": "@@ -562,11 +859,26 @@ leaving ``s`` dangling. Since this code could not possibly work, Cython refuses\n compile it.\n \n The solution is to assign the result of the concatenation to a Python\n-variable, and then obtain the ``char*`` from that, i.e.::\n+variable, and then obtain the pointer to char from that, i.e.",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669710482",
            "id": 669710482,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTcxMDQ4Mg==",
            "original_commit_id": "db174e70e9b705f3d66425371220969b6de60550",
            "original_line": 862,
            "original_position": 763,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706358129,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T15:24:44Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669710482",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669710973"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669710973"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nThe Cython language supports type casting in a similar way as C. Where C uses ``\"(\"`` and ``\")\"``,\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T15:14:34Z",
            "diff_hunk": "@@ -581,44 +893,93 @@ be careful what you do.\n Type Casting\n ------------\n \n-Where C uses ``\"(\"`` and ``\")\"``, Cython uses ``\"<\"`` and ``\">\"``. For example::\n+Cython language supports type casting in a simmilar way as C. Where C uses ``\"(\"`` and ``\")\"``,",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669710973",
            "id": 669710973,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTcxMDk3Mw==",
            "original_commit_id": "db174e70e9b705f3d66425371220969b6de60550",
            "original_line": 896,
            "original_position": 794,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706358129,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T15:24:44Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669710973",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669711521"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669711521"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nCython uses ``\"<\"`` and ``\">\"``.  In pure python mode, the ``cython.cast()`` function is used.  For example:\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T15:15:11Z",
            "diff_hunk": "@@ -581,44 +893,93 @@ be careful what you do.\n Type Casting\n ------------\n \n-Where C uses ``\"(\"`` and ``\")\"``, Cython uses ``\"<\"`` and ``\">\"``. For example::\n+Cython language supports type casting in a simmilar way as C. Where C uses ``\"(\"`` and ``\")\"``,\n+Cython uses ``\"<\"`` and ``\">\"``. In pure python mode, ``cast()`` function is used. For example:",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669711521",
            "id": 669711521,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTcxMTUyMQ==",
            "original_commit_id": "db174e70e9b705f3d66425371220969b6de60550",
            "original_line": 897,
            "original_position": 795,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706358129,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T15:24:44Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669711521",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669712355"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669712355"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n        Cython will attempt a coercion. Simple examples are casts like ``cast(int, pyobj_value)``,\r\n        which converts a Python number to a plain C ``int`` value, or ``cast(bytes, charptr_value)``,\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T15:16:12Z",
            "diff_hunk": "@@ -581,44 +893,93 @@ be careful what you do.\n Type Casting\n ------------\n \n-Where C uses ``\"(\"`` and ``\")\"``, Cython uses ``\"<\"`` and ``\">\"``. For example::\n+Cython language supports type casting in a simmilar way as C. Where C uses ``\"(\"`` and ``\")\"``,\n+Cython uses ``\"<\"`` and ``\">\"``. In pure python mode, ``cast()`` function is used. For example:\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            def main():\n+                p: cython.p_char\n+                q: cython.p_float\n+                p = cast(cython.p_char, q)\n+\n+        When casting a C value to a Python object type or vice versa,\n+        Cython will attempt a coercion. Simple examples are casts like ``cast(int, pyobj)``,\n+        which converts a Python number to a plain C ``int`` value, or ``cast(bytes, charptr)``,",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669712355",
            "id": 669712355,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTcxMjM1NQ==",
            "original_commit_id": "db174e70e9b705f3d66425371220969b6de60550",
            "original_line": 912,
            "original_position": 810,
            "original_start_line": 911,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706358129,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-07-14T15:24:44Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669712355",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669713813"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669713813"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n        Cython will attempt a coercion. Simple examples are casts like ``<int>pyobj_value``,\r\n        which converts a Python number to a plain C ``int`` value, or ``<bytes>charptr_value``,\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T15:17:57Z",
            "diff_hunk": "@@ -581,44 +893,93 @@ be careful what you do.\n Type Casting\n ------------\n \n-Where C uses ``\"(\"`` and ``\")\"``, Cython uses ``\"<\"`` and ``\">\"``. For example::\n+Cython language supports type casting in a simmilar way as C. Where C uses ``\"(\"`` and ``\")\"``,\n+Cython uses ``\"<\"`` and ``\">\"``. In pure python mode, ``cast()`` function is used. For example:\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            def main():\n+                p: cython.p_char\n+                q: cython.p_float\n+                p = cast(cython.p_char, q)\n+\n+        When casting a C value to a Python object type or vice versa,\n+        Cython will attempt a coercion. Simple examples are casts like ``cast(int, pyobj)``,\n+        which converts a Python number to a plain C ``int`` value, or ``cast(bytes, charptr)``,\n+        which copies a C ``char*`` string into a new Python bytes object.\n+\n+         .. note:: Cython will not prevent a redundant cast, but emits a warning for it.\n \n-    cdef char *p\n-    cdef float *q\n-    p = <char*>q\n+        To get the address of some Python object, use a cast to a pointer type\n+        like ``cast(p_void, ...)`` or ``cast(pointer(PyObject), ...)``.\n+        You can also cast a C pointer back to a Python object reference\n+        with ``cast(object, ...)``, or a more specific builtin or extension type\n+        (e.g. ``cast(MyExtType, ptr)``). This will increase the reference count of\n+        the object by one, i.e. the cast returns an owned reference.\n+        Here is an example:\n \n-When casting a C value to a Python object type or vice versa,\n-Cython will attempt a coercion. Simple examples are casts like ``<int>pyobj``,\n-which converts a Python number to a plain C ``int`` value, or ``<bytes>charptr``,\n-which copies a C ``char*`` string into a new Python bytes object.\n \n- .. note:: Cython will not prevent a redundant cast, but emits a warning for it.\n+    .. group-tab:: Cython\n \n-To get the address of some Python object, use a cast to a pointer type\n-like ``<void*>`` or ``<PyObject*>``.\n-You can also cast a C pointer back to a Python object reference\n-with ``<object>``, or a more specific builtin or extension type\n-(e.g. ``<MyExtType>ptr``). This will increase the reference count of\n-the object by one, i.e. the cast returns an owned reference.\n-Here is an example:\n+        .. code-block:: cython\n \n-.. literalinclude:: ../../examples/userguide/language_basics/casting_python.pyx\n+            cdef char *p\n+            cdef float *q\n+            p = <char*>q\n \n-The precedence of ``<...>`` is such that ``<type>a.b.c`` is interpreted as ``<type>(a.b.c)``.\n+        When casting a C value to a Python object type or vice versa,\n+        Cython will attempt a coercion. Simple examples are casts like ``<int>pyobj``,\n+        which converts a Python number to a plain C ``int`` value, or ``<bytes>charptr``,",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669713813",
            "id": 669713813,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTcxMzgxMw==",
            "original_commit_id": "db174e70e9b705f3d66425371220969b6de60550",
            "original_line": 936,
            "original_position": 851,
            "original_start_line": 935,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706358129,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-07-14T15:24:44Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669713813",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669715090"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669715090"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n        Casting with ``cast(object, ...)`` creates an owned reference. Cython will automatically\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T15:19:26Z",
            "diff_hunk": "@@ -581,44 +893,93 @@ be careful what you do.\n Type Casting\n ------------\n \n-Where C uses ``\"(\"`` and ``\")\"``, Cython uses ``\"<\"`` and ``\">\"``. For example::\n+Cython language supports type casting in a simmilar way as C. Where C uses ``\"(\"`` and ``\")\"``,\n+Cython uses ``\"<\"`` and ``\">\"``. In pure python mode, ``cast()`` function is used. For example:\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            def main():\n+                p: cython.p_char\n+                q: cython.p_float\n+                p = cast(cython.p_char, q)\n+\n+        When casting a C value to a Python object type or vice versa,\n+        Cython will attempt a coercion. Simple examples are casts like ``cast(int, pyobj)``,\n+        which converts a Python number to a plain C ``int`` value, or ``cast(bytes, charptr)``,\n+        which copies a C ``char*`` string into a new Python bytes object.\n+\n+         .. note:: Cython will not prevent a redundant cast, but emits a warning for it.\n \n-    cdef char *p\n-    cdef float *q\n-    p = <char*>q\n+        To get the address of some Python object, use a cast to a pointer type\n+        like ``cast(p_void, ...)`` or ``cast(pointer(PyObject), ...)``.\n+        You can also cast a C pointer back to a Python object reference\n+        with ``cast(object, ...)``, or a more specific builtin or extension type\n+        (e.g. ``cast(MyExtType, ptr)``). This will increase the reference count of\n+        the object by one, i.e. the cast returns an owned reference.\n+        Here is an example:\n \n-When casting a C value to a Python object type or vice versa,\n-Cython will attempt a coercion. Simple examples are casts like ``<int>pyobj``,\n-which converts a Python number to a plain C ``int`` value, or ``<bytes>charptr``,\n-which copies a C ``char*`` string into a new Python bytes object.\n \n- .. note:: Cython will not prevent a redundant cast, but emits a warning for it.\n+    .. group-tab:: Cython\n \n-To get the address of some Python object, use a cast to a pointer type\n-like ``<void*>`` or ``<PyObject*>``.\n-You can also cast a C pointer back to a Python object reference\n-with ``<object>``, or a more specific builtin or extension type\n-(e.g. ``<MyExtType>ptr``). This will increase the reference count of\n-the object by one, i.e. the cast returns an owned reference.\n-Here is an example:\n+        .. code-block:: cython\n \n-.. literalinclude:: ../../examples/userguide/language_basics/casting_python.pyx\n+            cdef char *p\n+            cdef float *q\n+            p = <char*>q\n \n-The precedence of ``<...>`` is such that ``<type>a.b.c`` is interpreted as ``<type>(a.b.c)``.\n+        When casting a C value to a Python object type or vice versa,\n+        Cython will attempt a coercion. Simple examples are casts like ``<int>pyobj``,\n+        which converts a Python number to a plain C ``int`` value, or ``<bytes>charptr``,\n+        which copies a C ``char*`` string into a new Python bytes object.\n \n-Casting to ``<object>`` creates an owned reference. Cython will automatically\n-perform a ``Py_INCREF`` and ``Py_DECREF`` operation. Casting to\n-``<PyObject *>`` creates a borrowed reference, leaving the refcount unchanged.\n+         .. note:: Cython will not prevent a redundant cast, but emits a warning for it.\n+\n+        To get the address of some Python object, use a cast to a pointer type\n+        like ``<void*>`` or ``<PyObject*>``.\n+        You can also cast a C pointer back to a Python object reference\n+        with ``<object>``, or a more specific builtin or extension type\n+        (e.g. ``<MyExtType>ptr``). This will increase the reference count of\n+        the object by one, i.e. the cast returns an owned reference.\n+        Here is an example:\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. literalinclude:: ../../examples/userguide/language_basics/casting_python.pxd\n+            :caption: casting_python.pxd\n+        .. literalinclude:: ../../examples/userguide/language_basics/casting_python.py\n+            :caption: casting_python.py\n+\n+        Casting to ``cast(object, ...)`` creates an owned reference. Cython will automatically",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669715090",
            "id": 669715090,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTcxNTA5MA==",
            "original_commit_id": "db174e70e9b705f3d66425371220969b6de60550",
            "original_line": 958,
            "original_position": 876,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706358129,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T15:24:44Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669715090",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669715825"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669715825"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nTo have a cast checked, use ``<MyExtensionType?>x`` in Cython syntax\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T15:20:18Z",
            "diff_hunk": "@@ -581,44 +893,93 @@ be careful what you do.\n Type Casting\n ------------\n \n-Where C uses ``\"(\"`` and ``\")\"``, Cython uses ``\"<\"`` and ``\">\"``. For example::\n+Cython language supports type casting in a simmilar way as C. Where C uses ``\"(\"`` and ``\")\"``,\n+Cython uses ``\"<\"`` and ``\">\"``. In pure python mode, ``cast()`` function is used. For example:\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            def main():\n+                p: cython.p_char\n+                q: cython.p_float\n+                p = cast(cython.p_char, q)\n+\n+        When casting a C value to a Python object type or vice versa,\n+        Cython will attempt a coercion. Simple examples are casts like ``cast(int, pyobj)``,\n+        which converts a Python number to a plain C ``int`` value, or ``cast(bytes, charptr)``,\n+        which copies a C ``char*`` string into a new Python bytes object.\n+\n+         .. note:: Cython will not prevent a redundant cast, but emits a warning for it.\n \n-    cdef char *p\n-    cdef float *q\n-    p = <char*>q\n+        To get the address of some Python object, use a cast to a pointer type\n+        like ``cast(p_void, ...)`` or ``cast(pointer(PyObject), ...)``.\n+        You can also cast a C pointer back to a Python object reference\n+        with ``cast(object, ...)``, or a more specific builtin or extension type\n+        (e.g. ``cast(MyExtType, ptr)``). This will increase the reference count of\n+        the object by one, i.e. the cast returns an owned reference.\n+        Here is an example:\n \n-When casting a C value to a Python object type or vice versa,\n-Cython will attempt a coercion. Simple examples are casts like ``<int>pyobj``,\n-which converts a Python number to a plain C ``int`` value, or ``<bytes>charptr``,\n-which copies a C ``char*`` string into a new Python bytes object.\n \n- .. note:: Cython will not prevent a redundant cast, but emits a warning for it.\n+    .. group-tab:: Cython\n \n-To get the address of some Python object, use a cast to a pointer type\n-like ``<void*>`` or ``<PyObject*>``.\n-You can also cast a C pointer back to a Python object reference\n-with ``<object>``, or a more specific builtin or extension type\n-(e.g. ``<MyExtType>ptr``). This will increase the reference count of\n-the object by one, i.e. the cast returns an owned reference.\n-Here is an example:\n+        .. code-block:: cython\n \n-.. literalinclude:: ../../examples/userguide/language_basics/casting_python.pyx\n+            cdef char *p\n+            cdef float *q\n+            p = <char*>q\n \n-The precedence of ``<...>`` is such that ``<type>a.b.c`` is interpreted as ``<type>(a.b.c)``.\n+        When casting a C value to a Python object type or vice versa,\n+        Cython will attempt a coercion. Simple examples are casts like ``<int>pyobj``,\n+        which converts a Python number to a plain C ``int`` value, or ``<bytes>charptr``,\n+        which copies a C ``char*`` string into a new Python bytes object.\n \n-Casting to ``<object>`` creates an owned reference. Cython will automatically\n-perform a ``Py_INCREF`` and ``Py_DECREF`` operation. Casting to\n-``<PyObject *>`` creates a borrowed reference, leaving the refcount unchanged.\n+         .. note:: Cython will not prevent a redundant cast, but emits a warning for it.\n+\n+        To get the address of some Python object, use a cast to a pointer type\n+        like ``<void*>`` or ``<PyObject*>``.\n+        You can also cast a C pointer back to a Python object reference\n+        with ``<object>``, or a more specific builtin or extension type\n+        (e.g. ``<MyExtType>ptr``). This will increase the reference count of\n+        the object by one, i.e. the cast returns an owned reference.\n+        Here is an example:\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. literalinclude:: ../../examples/userguide/language_basics/casting_python.pxd\n+            :caption: casting_python.pxd\n+        .. literalinclude:: ../../examples/userguide/language_basics/casting_python.py\n+            :caption: casting_python.py\n+\n+        Casting to ``cast(object, ...)`` creates an owned reference. Cython will automatically\n+        perform a ``Py_INCREF`` and ``Py_DECREF`` operation. Casting to\n+        ``cast(pointer(PyObject), ...)`` creates a borrowed reference, leaving the refcount unchanged.\n+\n+    .. group-tab:: Cython\n+\n+        .. literalinclude:: ../../examples/userguide/language_basics/casting_python.pyx\n+            :caption: casting_python.pyx\n+\n+        The precedence of ``<...>`` is such that ``<type>a.b.c`` is interpreted as ``<type>(a.b.c)``.\n+\n+        Casting to ``<object>`` creates an owned reference. Cython will automatically\n+        perform a ``Py_INCREF`` and ``Py_DECREF`` operation. Casting to\n+        ``<PyObject *>`` creates a borrowed reference, leaving the refcount unchanged.\n \n .. _checked_type_casts:\n \n Checked Type Casts\n ------------------\n \n-A cast like ``<MyExtensionType>x`` will cast x to the class\n+A cast like ``<MyExtensionType>x`` or ``cast(MyExtensionType, x)`` will cast ``x`` to the class\n ``MyExtensionType`` without any checking at all.\n \n-To have a cast checked, use the syntax like: ``<MyExtensionType?>x``.\n+To have a cast checked, use the syntax like: ``<MyExtensionType?>x`` in Cython language",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669715825",
            "id": 669715825,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTcxNTgyNQ==",
            "original_commit_id": "db174e70e9b705f3d66425371220969b6de60550",
            "original_line": 981,
            "original_position": 901,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706358129,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T15:24:44Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669715825",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669716565"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669716565"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n  To get a Python integer (of arbitrary precision), cast immediately to\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T15:21:09Z",
            "diff_hunk": "@@ -651,16 +1012,35 @@ direct equivalent in Python.\n * An integer literal is treated as a C constant, and will\n   be truncated to whatever size your C compiler thinks appropriate.\n   To get a Python integer (of arbitrary precision) cast immediately to",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669716565",
            "id": 669716565,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTcxNjU2NQ==",
            "original_commit_id": "db174e70e9b705f3d66425371220969b6de60550",
            "original_line": 1014,
            "original_position": 909,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706358129,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T15:24:44Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669716565",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669716894"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669716894"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n  and ``U`` suffixes have the same meaning in Cython syntax as in C.\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T15:21:31Z",
            "diff_hunk": "@@ -651,16 +1012,35 @@ direct equivalent in Python.\n * An integer literal is treated as a C constant, and will\n   be truncated to whatever size your C compiler thinks appropriate.\n   To get a Python integer (of arbitrary precision) cast immediately to\n-  an object (e.g. ``<object>100000000000000000000``). The ``L``, ``LL``,\n-  and ``U`` suffixes have the same meaning as in C.\n+  an object (e.g. ``<object>100000000000000000000`` or ``cast(object, 100000000000000000000)``). The ``L``, ``LL``,\n+  and ``U`` suffixes have the same meaning in Cython language as in C.",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669716894",
            "id": 669716894,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTcxNjg5NA==",
            "original_commit_id": "db174e70e9b705f3d66425371220969b6de60550",
            "original_line": 1016,
            "original_position": 913,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706358129,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T15:24:44Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669716894",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669717720"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669717720"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n* There is an ``&`` operator in Cython, with the same semantics as in C.\r\n  In pure python mode, use the ``cython.address()`` function instead.\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T15:22:25Z",
            "diff_hunk": "@@ -651,16 +1012,35 @@ direct equivalent in Python.\n * An integer literal is treated as a C constant, and will\n   be truncated to whatever size your C compiler thinks appropriate.\n   To get a Python integer (of arbitrary precision) cast immediately to\n-  an object (e.g. ``<object>100000000000000000000``). The ``L``, ``LL``,\n-  and ``U`` suffixes have the same meaning as in C.\n+  an object (e.g. ``<object>100000000000000000000`` or ``cast(object, 100000000000000000000)``). The ``L``, ``LL``,\n+  and ``U`` suffixes have the same meaning in Cython language as in C.\n * There is no ``->`` operator in Cython. Instead of ``p->x``, use ``p.x``\n * There is no unary ``*`` operator in Cython. Instead of ``*p``, use ``p[0]``\n-* There is an ``&`` operator, with the same semantics as in C.\n-* The null C pointer is called ``NULL``, not ``0`` (and ``NULL`` is a reserved word).\n-* Type casts are written ``<type>value`` , for example,::\n+* There is an ``&`` operator in Cython language, with the same semantics as in C. In pure python mode use ``address()`` function.",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669717720",
            "id": 669717720,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTcxNzcyMA==",
            "original_commit_id": "db174e70e9b705f3d66425371220969b6de60550",
            "original_line": 1019,
            "original_position": 919,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706358129,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T15:24:44Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669717720",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669718353"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669718353"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n* The null C pointer is called ``NULL``, not ``0``. ``NULL`` is a reserved word in Cython\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T15:23:11Z",
            "diff_hunk": "@@ -651,16 +1012,35 @@ direct equivalent in Python.\n * An integer literal is treated as a C constant, and will\n   be truncated to whatever size your C compiler thinks appropriate.\n   To get a Python integer (of arbitrary precision) cast immediately to\n-  an object (e.g. ``<object>100000000000000000000``). The ``L``, ``LL``,\n-  and ``U`` suffixes have the same meaning as in C.\n+  an object (e.g. ``<object>100000000000000000000`` or ``cast(object, 100000000000000000000)``). The ``L``, ``LL``,\n+  and ``U`` suffixes have the same meaning in Cython language as in C.\n * There is no ``->`` operator in Cython. Instead of ``p->x``, use ``p.x``\n * There is no unary ``*`` operator in Cython. Instead of ``*p``, use ``p[0]``\n-* There is an ``&`` operator, with the same semantics as in C.\n-* The null C pointer is called ``NULL``, not ``0`` (and ``NULL`` is a reserved word).\n-* Type casts are written ``<type>value`` , for example,::\n+* There is an ``&`` operator in Cython language, with the same semantics as in C. In pure python mode use ``address()`` function.\n+* The null C pointer is called ``NULL``, not ``0``. ``NULL`` is a reserved word in Cython language",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669718353",
            "id": 669718353,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTcxODM1Mw==",
            "original_commit_id": "db174e70e9b705f3d66425371220969b6de60550",
            "original_line": 1020,
            "original_position": 920,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706358129,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T15:24:44Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669718353",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669719021"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669719021"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n.. note:: This syntax is supported only in Cython files and not in Python.\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T15:24:03Z",
            "diff_hunk": "@@ -742,6 +1122,8 @@ Python and C, and that Cython uses the Python precedences, not the C ones.\n Integer for-loops\n ------------------\n \n+.. note:: This syntax is supported only by Cython language.",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669719021",
            "id": 669719021,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTcxOTAyMQ==",
            "original_commit_id": "db174e70e9b705f3d66425371220969b6de60550",
            "original_line": 1125,
            "original_position": 953,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706358129,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T15:24:44Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669719021",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669849993"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669849993"
                }
            },
            "author_association": "MEMBER",
            "body": "I like how this shows off one of the main advantages of the Cython syntax: it's very concise.",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T18:21:28Z",
            "diff_hunk": "@@ -44,72 +47,137 @@ the use of ‘early binding’ programming techniques.\n C variable and type definitions\n ===============================\n \n-The :keyword:`cdef` statement is used to declare C variables, either local or\n-module-level::\n+C variables can be declared by using the :keyword:`cdef` statement, by annotating\n+variable by special cython type or using function ``declare()``. Statement :keyword:`cdef`\n+and function ``declare()`` can declare either local or\n+module-level variables, but annotated version currently supports only local variables:\n \n-    cdef int i, j, k\n-    cdef float f, g[42], *h\n+.. tabs::\n \n-and C :keyword:`struct`, :keyword:`union` or :keyword:`enum` types:\n+    .. group-tab:: Pure Python\n \n-.. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.pyx\n+        .. code-block:: python\n \n-See also :ref:`struct-union-enum-styles`\n+            global_x = declare(cython.int)\n+            def main():\n+                i: cython.int\n+                j: cython.int\n+                k: cython.int\n+                f: cython.float\n+                g: cython.int[42]\n+                h: cython.p_float\n \n-.. note::\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            cdef int i, j, k",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669849993",
            "id": 669849993,
            "in_reply_to_id": 669137319,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTg0OTk5Mw==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 74,
            "original_position": 46,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706585754,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T18:21:28Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669849993",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669852191"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669852191"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n* using the Cython specific :keyword:`cdef` statement,\r\n* using PEP-484/526 type annotations with C data types or\r\n* using the function ``cython.declare()``.\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T18:24:41Z",
            "diff_hunk": "@@ -44,72 +47,143 @@ the use of ‘early binding’ programming techniques.\n C variable and type definitions\n ===============================\n \n-The :keyword:`cdef` statement is used to declare C variables, either local or\n-module-level::\n+C variables can be declared by \n \n-    cdef int i, j, k\n-    cdef float f, g[42], *h\n+* using the Cython language :keyword:`cdef` statement,\n+* annotating variable by special cython type or\n+* using function ``declare()``.",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669852191",
            "id": 669852191,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTg1MjE5MQ==",
            "original_commit_id": "b6f028827acb10f1fc56bbd046d48a4b073259d6",
            "original_line": 54,
            "original_position": 22,
            "original_start_line": 52,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706588498,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-07-14T18:43:17Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669852191",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669855133"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669855133"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "It's bot the only one, there are other cases that i saw, it's better to replace all note entries in this document with `note`",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T18:28:59Z",
            "diff_hunk": "@@ -86,7 +86,7 @@ Moreover, C :keyword:`struct`, :keyword:`union` or :keyword:`enum` are supported\n \n         .. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.py\n \n-        .. NOTE:: Currently, Pure Python mode does not support enums.\n+        .. note:: Currently, Pure Python mode does not support enums.\n ",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669855133",
            "id": 669855133,
            "line": 99,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTg1NTEzMw==",
            "original_commit_id": "f555ea1e81834d788d28d864024dbdf15c6417ee",
            "original_line": 90,
            "original_position": 6,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": 74,
            "pull_request_review_id": 706592260,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T18:28:59Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669855133",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669857027"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669857027"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nThe :keyword:`cdef` statement and ``declare()`` can define function-local and\r\nmodule-level variables, but type annotations only affect local variables.\r\nThis is because type annotations are not Cython specific, so Cython keeps\r\nthe variables in the module dict (as Python values) instead of making them\r\nmodule internal C variables. Use ``declare()`` in Python code to explicitly\r\ndefine global C variables.\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T18:31:55Z",
            "diff_hunk": "@@ -44,72 +47,143 @@ the use of ‘early binding’ programming techniques.\n C variable and type definitions\n ===============================\n \n-The :keyword:`cdef` statement is used to declare C variables, either local or\n-module-level::\n+C variables can be declared by \n \n-    cdef int i, j, k\n-    cdef float f, g[42], *h\n+* using the Cython language :keyword:`cdef` statement,\n+* annotating variable by special cython type or\n+* using function ``declare()``.\n \n-and C :keyword:`struct`, :keyword:`union` or :keyword:`enum` types:\n+Statement :keyword:`cdef` and function ``declare()`` can declare either local or\n+module-level variables, but annotated version currently supports only local variables:",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669857027",
            "id": 669857027,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTg1NzAyNw==",
            "original_commit_id": "b6f028827acb10f1fc56bbd046d48a4b073259d6",
            "original_line": 57,
            "original_position": 26,
            "original_start_line": 56,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706588498,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-07-14T18:43:17Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669857027",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669859288"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669859288"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nthey point to, e.g. ``int**`` for a pointer to a pointer to a C int. In Pure python mode, simple pointer types\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T18:35:34Z",
            "diff_hunk": "@@ -119,40 +193,73 @@ You can read more about them in :ref:`extension-types`.\n Types\n -----\n \n-Cython uses the normal C syntax for C types, including pointers.  It provides\n+The Cython language uses the normal C syntax for C types, including pointers.  It provides\n all the standard C types, namely ``char``, ``short``, ``int``, ``long``,\n-``long long`` as well as their ``unsigned`` versions, e.g. ``unsigned int``.\n+``long long`` as well as their ``unsigned`` versions,\n+e.g. ``unsigned int`` (``cython.uint`` in Python code).\n The special ``bint`` type is used for C boolean values (``int`` with 0/non-0\n values for False/True) and ``Py_ssize_t`` for (signed) sizes of Python\n containers.\n \n-Pointer types are constructed as in C, by appending a ``*`` to the base type\n-they point to, e.g. ``int**`` for a pointer to a pointer to a C int.\n+Pointer types are constructed as in C when using Cython syntax, by appending a ``*`` to the base type\n+they point to, e.g. ``int**`` for a pointer to a pointer to a C int. In Pure python mode, pointer types",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669859288",
            "id": 669859288,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTg1OTI4OA==",
            "original_commit_id": "b6f028827acb10f1fc56bbd046d48a4b073259d6",
            "original_line": 205,
            "original_position": 205,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706588498,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T18:43:17Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669859288",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669860266"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669860266"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\na pointer to a C int.  Further pointer types can be constructed with the ``cython.pointer()`` function,\r\ne.g. ``cython.pointer(cython.int)``.\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T18:37:07Z",
            "diff_hunk": "@@ -119,40 +193,73 @@ You can read more about them in :ref:`extension-types`.\n Types\n -----\n \n-Cython uses the normal C syntax for C types, including pointers.  It provides\n+The Cython language uses the normal C syntax for C types, including pointers.  It provides\n all the standard C types, namely ``char``, ``short``, ``int``, ``long``,\n-``long long`` as well as their ``unsigned`` versions, e.g. ``unsigned int``.\n+``long long`` as well as their ``unsigned`` versions,\n+e.g. ``unsigned int`` (``cython.uint`` in Python code).\n The special ``bint`` type is used for C boolean values (``int`` with 0/non-0\n values for False/True) and ``Py_ssize_t`` for (signed) sizes of Python\n containers.\n \n-Pointer types are constructed as in C, by appending a ``*`` to the base type\n-they point to, e.g. ``int**`` for a pointer to a pointer to a C int.\n+Pointer types are constructed as in C when using Cython syntax, by appending a ``*`` to the base type\n+they point to, e.g. ``int**`` for a pointer to a pointer to a C int. In Pure python mode, pointer types\n+use a naming scheme with \"p\"s instead, separated from the type name with an underscore, e.g. ``cython.pp_int`` for a pointer to\n+a pointer to a C int. Further pointer types can be constructed with the ``cython.pointer()`` function.",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669860266",
            "id": 669860266,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTg2MDI2Ng==",
            "original_commit_id": "b6f028827acb10f1fc56bbd046d48a4b073259d6",
            "original_line": 207,
            "original_position": 207,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706588498,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T18:43:17Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669860266",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669861214"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669861214"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    ``int``, ``long``, and ``float`` Python types will be interpreted as\r\n    Python object types.\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T18:38:35Z",
            "diff_hunk": "@@ -119,40 +193,73 @@ You can read more about them in :ref:`extension-types`.\n Types\n -----\n \n-Cython uses the normal C syntax for C types, including pointers.  It provides\n+The Cython language uses the normal C syntax for C types, including pointers.  It provides\n all the standard C types, namely ``char``, ``short``, ``int``, ``long``,\n-``long long`` as well as their ``unsigned`` versions, e.g. ``unsigned int``.\n+``long long`` as well as their ``unsigned`` versions,\n+e.g. ``unsigned int`` (``cython.uint`` in Python code).\n The special ``bint`` type is used for C boolean values (``int`` with 0/non-0\n values for False/True) and ``Py_ssize_t`` for (signed) sizes of Python\n containers.\n \n-Pointer types are constructed as in C, by appending a ``*`` to the base type\n-they point to, e.g. ``int**`` for a pointer to a pointer to a C int.\n+Pointer types are constructed as in C when using Cython syntax, by appending a ``*`` to the base type\n+they point to, e.g. ``int**`` for a pointer to a pointer to a C int. In Pure python mode, pointer types\n+use a naming scheme with \"p\"s instead, separated from the type name with an underscore, e.g. ``cython.pp_int`` for a pointer to\n+a pointer to a C int. Further pointer types can be constructed with the ``cython.pointer()`` function.\n+\n+\n Arrays use the normal C array syntax, e.g. ``int[10]``, and the size must be known\n at compile time for stack allocated arrays. Cython doesn't support variable length arrays from C99.\n Note that Cython uses array access for pointer dereferencing, as ``*x`` is not valid Python syntax,\n whereas ``x[0]`` is.\n \n Also, the Python types ``list``, ``dict``, ``tuple``, etc. may be used for\n static typing, as well as any user defined :ref:`extension-types`.\n-For example::\n+For example\n \n-    cdef list foo = []\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            def main():\n+                foo: list = []\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            cdef list foo = []\n \n This requires an *exact* match of the class, it does not allow subclasses.\n This allows Cython to optimize code by accessing internals of the builtin class,\n which is the main reason for declaring builtin types in the first place.\n \n For declared builtin types, Cython uses internally a C variable of type ``PyObject*``.\n-The Python types int, long, and float are not available for static\n-typing and instead interpreted as C ``int``, ``long``, and ``float``\n-respectively, as statically typing variables with these Python\n-types has zero advantages.\n+\n+.. Note:: The Python types ``int``, ``long``, and ``float`` are not available for static\n+    typing in ``.pyx`` files and instead interpreted as C ``int``, ``long``, and ``float``\n+    respectively, as statically typing variables with these Python\n+    types has zero advantages. On the other hand, annotating in Pure Python with\n+    ``int``, ``long``, and ``float`` python types will be interpreted as ``object`` type.",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669861214",
            "id": 669861214,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTg2MTIxNA==",
            "original_commit_id": "b6f028827acb10f1fc56bbd046d48a4b073259d6",
            "original_line": 244,
            "original_position": 250,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706588498,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T18:43:17Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669861214",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669862257"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669862257"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T18:40:10Z",
            "diff_hunk": "@@ -189,48 +299,98 @@ Python functions vs. C functions\n \n There are two kinds of function definition in Cython:\n \n-Python functions are defined using the def statement, as in Python. They take\n+Python functions are defined using the :keyword:`def` statement, as in Python. They take\n :term:`Python objects<Python object>` as parameters and return Python objects.\n \n-C functions are defined using the new :keyword:`cdef` statement. They take\n+C functions are defined using the :keyword:`cdef` statement in Cython syntax or with the ``@cfunc`` decorator. They take\n either Python objects or C values as parameters, and can return either Python\n objects or C values.\n \n Within a Cython module, Python functions and C functions can call each other\n freely, but only Python functions can be called from outside the module by\n interpreted Python code. So, any functions that you want to \"export\" from your\n-Cython module must be declared as Python functions using def.\n-There is also a hybrid function, called :keyword:`cpdef`. A :keyword:`cpdef`\n-can be called from anywhere, but uses the faster C calling conventions\n-when being called from other Cython code. A :keyword:`cpdef` can also be overridden\n+Cython module must be declared as Python functions using ``def``.\n+There is also a hybrid function, declared with :keyword:`cpdef` in ``.pyx`` files or with the ``@ccall`` decorator.  These functions\n+can be called from anywhere, but use the faster C calling convention\n+when being called from other Cython code. They can also be overridden\n by a Python method on a subclass or an instance attribute, even when called from Cython.\n If this happens, most performance gains are of course lost and even if it does not,\n-there is a tiny overhead in calling a :keyword:`cpdef` method from Cython compared to\n-calling a :keyword:`cdef` method.\n+there is a tiny overhead in calling such a method from Cython compared to\n+calling a C method.\n \n Parameters of either type of function can be declared to have C data types,\n-using normal C declaration syntax. For example,::\n+using normal C declaration syntax. For example,\n \n-    def spam(int i, char *s):\n-        ...\n+.. tabs::\n \n-    cdef int eggs(unsigned long l, float f):\n-        ...\n+    .. group-tab:: Pure Python\n \n-``ctuples`` may also be used::\n+        .. code-block:: python\n \n-    cdef (int, float) chips((long, long, double) t):\n-        ...\n+            def spam(i: cython.int, s: cython.p_char):\n+                ...\n+\n+            @cfunc\n+            def eggs(l: cython.ulong, f: cython.float) -> cython.int:\n+                ...\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            def spam(int i, char *s):\n+                ...\n+\n+\n+            cdef int eggs(unsigned long l, float f):\n+                ...\n+\n+\n+",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669862257",
            "id": 669862257,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTg2MjI1Nw==",
            "original_commit_id": "b6f028827acb10f1fc56bbd046d48a4b073259d6",
            "original_line": 349,
            "original_position": 365,
            "original_start_line": 347,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706588498,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-07-14T18:43:17Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669862257",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669873309"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669873309"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nThe :keyword:`cdef` statement and ``declare()`` can define function-local and\r\nmodule-level variables as well as attributes in classes, but type annotations only\r\naffect local variables and attributes and are ignored at the module level.\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T18:57:07Z",
            "diff_hunk": "@@ -44,72 +47,147 @@ the use of ‘early binding’ programming techniques.\n C variable and type definitions\n ===============================\n \n-The :keyword:`cdef` statement is used to declare C variables, either local or\n-module-level::\n+C variables can be declared by \n \n-    cdef int i, j, k\n-    cdef float f, g[42], *h\n+* using the Cython specific :keyword:`cdef` statement,\n+* using PEP-484/526 type annotations with C data types or\n+* using the function ``cython.declare()``.\n \n-and C :keyword:`struct`, :keyword:`union` or :keyword:`enum` types:\n+The :keyword:`cdef` statement and ``declare()`` can define function-local and\n+module-level variables, but type annotations only affect local variables.",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669873309",
            "id": 669873309,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTg3MzMwOQ==",
            "original_commit_id": "5c03058b64172bc3f77168e2df3b2b955f09968d",
            "original_line": 57,
            "original_position": 26,
            "original_start_line": 56,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706615732,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-07-14T18:57:08Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669873309",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669893504"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669893504"
                }
            },
            "author_association": "NONE",
            "body": "Is there an issue for this that could be referenced here? That would make it easy to find out if the docs become outdated (by seeing that the referenced issue has been closed).",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T19:29:19Z",
            "diff_hunk": "@@ -274,25 +453,50 @@ parameters and a new reference is returned).\n \n The name object can also be used to explicitly declare something as a Python\n object. This can be useful if the name being declared would otherwise be taken\n-as the name of a type, for example,::\n+as the name of a type, for example,\n \n-    cdef ftang(object int):\n-        ...\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            @cfunc\n+            def ftang(int: object):\n+                ...\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            cdef ftang(object int):\n+                ...\n \n-declares a parameter called int which is a Python object. You can also use\n+declares a parameter called ``int`` which is a Python object. You can also use\n object as the explicit return type of a function, e.g.::\n \n     cdef object ftang(object int):\n         ...\n \n+.. note:: Currently, Cython contains a bug not allowing returning ``object`` in\n+    pure python from a C function.",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669893504",
            "id": 669893504,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTg5MzUwNA==",
            "original_commit_id": "09223505690dfb48f1ed900ee9226eceb4f12a68",
            "original_line": 482,
            "original_position": 494,
            "original_start_line": 481,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706641868,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-07-14T19:45:49Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669893504",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669897915"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669897915"
                }
            },
            "author_association": "NONE",
            "body": "```suggestion\r\n        The keyword argument ``check=True`` indicates that the value ``-1`` _may_ signal an error.\r\n```\r\n\r\nI can see that the formulation existed before, but I find it hard to parse.",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T19:36:15Z",
            "diff_hunk": "@@ -404,20 +634,53 @@ returns small results.\n \n If all possible return values are legal and you\n can't reserve one entirely for signalling errors, you can use an alternative\n-form of exception value declaration::\n+form of exception value declaration\n \n-    cdef int spam() except? -1:\n-        ...\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            @cfunc\n+            @exceptval(-1, check=True)\n+            def spam() -> cython.int:\n+                ...\n+\n+        The ``check=True`` indicates that the value ``-1`` only signals a possible error.",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669897915",
            "id": 669897915,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTg5NzkxNQ==",
            "original_commit_id": "09223505690dfb48f1ed900ee9226eceb4f12a68",
            "original_line": 650,
            "original_position": 615,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706641868,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-18T09:00:06Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669897915",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669898441"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669898441"
                }
            },
            "author_association": "NONE",
            "body": "```suggestion\r\n        The ``?`` indicates that the value ``-1`` _may_ signal an error.\r\n```\r\n\r\nConsistency with the above.",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T19:37:08Z",
            "diff_hunk": "@@ -404,20 +634,53 @@ returns small results.\n \n If all possible return values are legal and you\n can't reserve one entirely for signalling errors, you can use an alternative\n-form of exception value declaration::\n+form of exception value declaration\n \n-    cdef int spam() except? -1:\n-        ...\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            @cfunc\n+            @exceptval(-1, check=True)\n+            def spam() -> cython.int:\n+                ...\n+\n+        The ``check=True`` indicates that the value ``-1`` only signals a possible error.\n+\n+    .. group-tab:: Cython\n \n-The \"?\" indicates that the value ``-1`` only signals a possible error. In this\n-case, Cython generates a call to :c:func:`PyErr_Occurred` if the exception value\n+        .. code-block:: cython\n+\n+            cdef int spam() except? -1:\n+                ...\n+\n+        The ``?`` indicates that the value ``-1`` only signals a possible error.",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669898441",
            "id": 669898441,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTg5ODQ0MQ==",
            "original_commit_id": "09223505690dfb48f1ed900ee9226eceb4f12a68",
            "original_line": 659,
            "original_position": 626,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706641868,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-18T09:00:34Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669898441",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669901561"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669901561"
                }
            },
            "author_association": "NONE",
            "body": "```suggestion\r\n        which convert a Python number to a plain C ``int`` value, or the statement ``cast(bytes, charptr_value)``,\r\n        which copies a C ``char*`` string into a new Python bytes object.\r\n```\r\n\r\nCasts [...] which convert [...] or `<xxx>`** which copies [...]\r\n\r\n**  changed object for clarity & readability",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T19:41:56Z",
            "diff_hunk": "@@ -581,44 +900,93 @@ be careful what you do.\n Type Casting\n ------------\n \n-Where C uses ``\"(\"`` and ``\")\"``, Cython uses ``\"<\"`` and ``\">\"``. For example::\n+The Cython language supports type casting in a similar way as C. Where C uses ``\"(\"`` and ``\")\"``,\n+Cython uses ``\"<\"`` and ``\">\"``.  In pure python mode, the ``cython.cast()`` function is used.  For example:\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            def main():\n+                p: cython.p_char\n+                q: cython.p_float\n+                p = cast(cython.p_char, q)\n+\n+        When casting a C value to a Python object type or vice versa,\n+        Cython will attempt a coercion. Simple examples are casts like ``cast(int, pyobj_value)``,\n+        which converts a Python number to a plain C ``int`` value, or ``cast(bytes, charptr_value)``,\n+        which copies a C ``char*`` string into a new Python bytes object.",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669901561",
            "id": 669901561,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTkwMTU2MQ==",
            "original_commit_id": "09223505690dfb48f1ed900ee9226eceb4f12a68",
            "original_line": 920,
            "original_position": 818,
            "original_start_line": 919,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706641868,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-07-14T19:45:49Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669901561",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669901987"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669901987"
                }
            },
            "author_association": "NONE",
            "body": "```suggestion\r\n        You can also cast a C pointer back to a Python object reference\r\n        with ``cast(object, ...)``, or to a more specific builtin or extension type\r\n        (e.g. ``cast(MyExtType, ptr)``). This will increase the reference count of\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T19:42:36Z",
            "diff_hunk": "@@ -581,44 +900,93 @@ be careful what you do.\n Type Casting\n ------------\n \n-Where C uses ``\"(\"`` and ``\")\"``, Cython uses ``\"<\"`` and ``\">\"``. For example::\n+The Cython language supports type casting in a similar way as C. Where C uses ``\"(\"`` and ``\")\"``,\n+Cython uses ``\"<\"`` and ``\">\"``.  In pure python mode, the ``cython.cast()`` function is used.  For example:\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            def main():\n+                p: cython.p_char\n+                q: cython.p_float\n+                p = cast(cython.p_char, q)\n+\n+        When casting a C value to a Python object type or vice versa,\n+        Cython will attempt a coercion. Simple examples are casts like ``cast(int, pyobj_value)``,\n+        which converts a Python number to a plain C ``int`` value, or ``cast(bytes, charptr_value)``,\n+        which copies a C ``char*`` string into a new Python bytes object.\n+\n+         .. note:: Cython will not prevent a redundant cast, but emits a warning for it.\n \n-    cdef char *p\n-    cdef float *q\n-    p = <char*>q\n+        To get the address of some Python object, use a cast to a pointer type\n+        like ``cast(p_void, ...)`` or ``cast(pointer(PyObject), ...)``.\n+        You can also cast a C pointer back to a Python object reference\n+        with ``cast(object, ...)``, or a more specific builtin or extension type\n+        (e.g. ``cast(MyExtType, ptr)``). This will increase the reference count of",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669901987",
            "id": 669901987,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTkwMTk4Nw==",
            "original_commit_id": "09223505690dfb48f1ed900ee9226eceb4f12a68",
            "original_line": 928,
            "original_position": 829,
            "original_start_line": 926,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706641868,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-07-14T19:45:49Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669901987",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669902491"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669902491"
                }
            },
            "author_association": "NONE",
            "body": "```suggestion\r\n        Cython will attempt a coercion. Simple examples are casts like ``<int>pyobj_value``,\r\n        which convert a Python number to a plain C ``int`` value, or the statement ``<bytes>charptr_value``,\r\n        which copies a C ``char*`` string into a new Python bytes object.\r\n```\r\n\r\nAs above",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T19:43:24Z",
            "diff_hunk": "@@ -581,44 +900,93 @@ be careful what you do.\n Type Casting\n ------------\n \n-Where C uses ``\"(\"`` and ``\")\"``, Cython uses ``\"<\"`` and ``\">\"``. For example::\n+The Cython language supports type casting in a similar way as C. Where C uses ``\"(\"`` and ``\")\"``,\n+Cython uses ``\"<\"`` and ``\">\"``.  In pure python mode, the ``cython.cast()`` function is used.  For example:\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            def main():\n+                p: cython.p_char\n+                q: cython.p_float\n+                p = cast(cython.p_char, q)\n+\n+        When casting a C value to a Python object type or vice versa,\n+        Cython will attempt a coercion. Simple examples are casts like ``cast(int, pyobj_value)``,\n+        which converts a Python number to a plain C ``int`` value, or ``cast(bytes, charptr_value)``,\n+        which copies a C ``char*`` string into a new Python bytes object.\n+\n+         .. note:: Cython will not prevent a redundant cast, but emits a warning for it.\n \n-    cdef char *p\n-    cdef float *q\n-    p = <char*>q\n+        To get the address of some Python object, use a cast to a pointer type\n+        like ``cast(p_void, ...)`` or ``cast(pointer(PyObject), ...)``.\n+        You can also cast a C pointer back to a Python object reference\n+        with ``cast(object, ...)``, or a more specific builtin or extension type\n+        (e.g. ``cast(MyExtType, ptr)``). This will increase the reference count of\n+        the object by one, i.e. the cast returns an owned reference.\n+        Here is an example:\n \n-When casting a C value to a Python object type or vice versa,\n-Cython will attempt a coercion. Simple examples are casts like ``<int>pyobj``,\n-which converts a Python number to a plain C ``int`` value, or ``<bytes>charptr``,\n-which copies a C ``char*`` string into a new Python bytes object.\n \n- .. note:: Cython will not prevent a redundant cast, but emits a warning for it.\n+    .. group-tab:: Cython\n \n-To get the address of some Python object, use a cast to a pointer type\n-like ``<void*>`` or ``<PyObject*>``.\n-You can also cast a C pointer back to a Python object reference\n-with ``<object>``, or a more specific builtin or extension type\n-(e.g. ``<MyExtType>ptr``). This will increase the reference count of\n-the object by one, i.e. the cast returns an owned reference.\n-Here is an example:\n+        .. code-block:: cython\n \n-.. literalinclude:: ../../examples/userguide/language_basics/casting_python.pyx\n+            cdef char *p\n+            cdef float *q\n+            p = <char*>q\n \n-The precedence of ``<...>`` is such that ``<type>a.b.c`` is interpreted as ``<type>(a.b.c)``.\n+        When casting a C value to a Python object type or vice versa,\n+        Cython will attempt a coercion. Simple examples are casts like ``<int>pyobj_value``,\n+        which converts a Python number to a plain C ``int`` value, or ``<bytes>charptr_value``,\n+        which copies a C ``char*`` string into a new Python bytes object.",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669902491",
            "id": 669902491,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTkwMjQ5MQ==",
            "original_commit_id": "09223505690dfb48f1ed900ee9226eceb4f12a68",
            "original_line": 944,
            "original_position": 859,
            "original_start_line": 942,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706641868,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-07-14T19:45:49Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669902491",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r669902643"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/669902643"
                }
            },
            "author_association": "NONE",
            "body": "```suggestion\r\n        with ``<object>``, or to a more specific builtin or extension type\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-14T19:43:41Z",
            "diff_hunk": "@@ -581,44 +900,93 @@ be careful what you do.\n Type Casting\n ------------\n \n-Where C uses ``\"(\"`` and ``\")\"``, Cython uses ``\"<\"`` and ``\">\"``. For example::\n+The Cython language supports type casting in a similar way as C. Where C uses ``\"(\"`` and ``\")\"``,\n+Cython uses ``\"<\"`` and ``\">\"``.  In pure python mode, the ``cython.cast()`` function is used.  For example:\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            def main():\n+                p: cython.p_char\n+                q: cython.p_float\n+                p = cast(cython.p_char, q)\n+\n+        When casting a C value to a Python object type or vice versa,\n+        Cython will attempt a coercion. Simple examples are casts like ``cast(int, pyobj_value)``,\n+        which converts a Python number to a plain C ``int`` value, or ``cast(bytes, charptr_value)``,\n+        which copies a C ``char*`` string into a new Python bytes object.\n+\n+         .. note:: Cython will not prevent a redundant cast, but emits a warning for it.\n \n-    cdef char *p\n-    cdef float *q\n-    p = <char*>q\n+        To get the address of some Python object, use a cast to a pointer type\n+        like ``cast(p_void, ...)`` or ``cast(pointer(PyObject), ...)``.\n+        You can also cast a C pointer back to a Python object reference\n+        with ``cast(object, ...)``, or a more specific builtin or extension type\n+        (e.g. ``cast(MyExtType, ptr)``). This will increase the reference count of\n+        the object by one, i.e. the cast returns an owned reference.\n+        Here is an example:\n \n-When casting a C value to a Python object type or vice versa,\n-Cython will attempt a coercion. Simple examples are casts like ``<int>pyobj``,\n-which converts a Python number to a plain C ``int`` value, or ``<bytes>charptr``,\n-which copies a C ``char*`` string into a new Python bytes object.\n \n- .. note:: Cython will not prevent a redundant cast, but emits a warning for it.\n+    .. group-tab:: Cython\n \n-To get the address of some Python object, use a cast to a pointer type\n-like ``<void*>`` or ``<PyObject*>``.\n-You can also cast a C pointer back to a Python object reference\n-with ``<object>``, or a more specific builtin or extension type\n-(e.g. ``<MyExtType>ptr``). This will increase the reference count of\n-the object by one, i.e. the cast returns an owned reference.\n-Here is an example:\n+        .. code-block:: cython\n \n-.. literalinclude:: ../../examples/userguide/language_basics/casting_python.pyx\n+            cdef char *p\n+            cdef float *q\n+            p = <char*>q\n \n-The precedence of ``<...>`` is such that ``<type>a.b.c`` is interpreted as ``<type>(a.b.c)``.\n+        When casting a C value to a Python object type or vice versa,\n+        Cython will attempt a coercion. Simple examples are casts like ``<int>pyobj_value``,\n+        which converts a Python number to a plain C ``int`` value, or ``<bytes>charptr_value``,\n+        which copies a C ``char*`` string into a new Python bytes object.\n \n-Casting to ``<object>`` creates an owned reference. Cython will automatically\n-perform a ``Py_INCREF`` and ``Py_DECREF`` operation. Casting to\n-``<PyObject *>`` creates a borrowed reference, leaving the refcount unchanged.\n+         .. note:: Cython will not prevent a redundant cast, but emits a warning for it.\n+\n+        To get the address of some Python object, use a cast to a pointer type\n+        like ``<void*>`` or ``<PyObject*>``.\n+        You can also cast a C pointer back to a Python object reference\n+        with ``<object>``, or a more specific builtin or extension type",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r669902643",
            "id": 669902643,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTkwMjY0Mw==",
            "original_commit_id": "09223505690dfb48f1ed900ee9226eceb4f12a68",
            "original_line": 951,
            "original_position": 869,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706641868,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-14T19:45:49Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/669902643",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r670145261"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/670145261"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "The bug referenced is following: #2529. Not sure whether we want there references to bugs... (I understand that it adds visibility)",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-15T05:31:38Z",
            "diff_hunk": "@@ -274,25 +453,50 @@ parameters and a new reference is returned).\n \n The name object can also be used to explicitly declare something as a Python\n object. This can be useful if the name being declared would otherwise be taken\n-as the name of a type, for example,::\n+as the name of a type, for example,\n \n-    cdef ftang(object int):\n-        ...\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            @cfunc\n+            def ftang(int: object):\n+                ...\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            cdef ftang(object int):\n+                ...\n \n-declares a parameter called int which is a Python object. You can also use\n+declares a parameter called ``int`` which is a Python object. You can also use\n object as the explicit return type of a function, e.g.::\n \n     cdef object ftang(object int):\n         ...\n \n+.. note:: Currently, Cython contains a bug not allowing returning ``object`` in\n+    pure python from a C function.",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r670145261",
            "id": 670145261,
            "in_reply_to_id": 669893504,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MDE0NTI2MQ==",
            "original_commit_id": "09223505690dfb48f1ed900ee9226eceb4f12a68",
            "original_line": 482,
            "original_position": 494,
            "original_start_line": 481,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 706938521,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-07-15T05:31:38Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/670145261",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r670308336"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/670308336"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "```suggestion\r\n        .. note:: Currently, Pure Python mode does not support enums. (GitHub issue :issue:`4252`)\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-15T09:45:32Z",
            "diff_hunk": "@@ -44,72 +47,148 @@ the use of ‘early binding’ programming techniques.\n C variable and type definitions\n ===============================\n \n-The :keyword:`cdef` statement is used to declare C variables, either local or\n-module-level::\n+C variables can be declared by \n \n-    cdef int i, j, k\n-    cdef float f, g[42], *h\n+* using the Cython specific :keyword:`cdef` statement,\n+* using PEP-484/526 type annotations with C data types or\n+* using the function ``cython.declare()``.\n \n-and C :keyword:`struct`, :keyword:`union` or :keyword:`enum` types:\n+The :keyword:`cdef` statement and ``declare()`` can define function-local and\n+module-level variables as well as attributes in classes, but type annotations only\n+affect local variables and attributes and are ignored at the module level.\n+This is because type annotations are not Cython specific, so Cython keeps\n+the variables in the module dict (as Python values) instead of making them\n+module internal C variables. Use ``declare()`` in Python code to explicitly\n+define global C variables.\n \n-.. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.pyx\n+.. tabs::\n \n-See also :ref:`struct-union-enum-styles`\n+    .. group-tab:: Pure Python\n \n-.. note::\n+        .. code-block:: python\n+\n+            global_x = declare(cython.int)\n+            def main():\n+                i: cython.int\n+                j: cython.int\n+                k: cython.int\n+                f: cython.float\n+                g: cython.int[42]\n+                h: cython.p_float\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            cdef int i, j, k\n+            cdef float f, g[42], *h\n+\n+Moreover, C :keyword:`struct`, :keyword:`union` and :keyword:`enum` are supported:\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.py\n+\n+        .. note:: Currently, Pure Python mode does not support enums.",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r670308336",
            "id": 670308336,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MDMwODMzNg==",
            "original_commit_id": "e582b4d63edec94516998b3905da019bb08210f4",
            "original_line": 94,
            "original_position": 66,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 707149448,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-15T11:48:26Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/670308336",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r670313870"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/670313870"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "```suggestion\r\n.. note:: Currently, Cython contains a bug not allowing ``object`` as return annotation in\r\n    pure Python from a C function. (GitHub issue :issue:`2529`)\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-15T09:53:11Z",
            "diff_hunk": "@@ -274,25 +453,50 @@ parameters and a new reference is returned).\n \n The name object can also be used to explicitly declare something as a Python\n object. This can be useful if the name being declared would otherwise be taken\n-as the name of a type, for example,::\n+as the name of a type, for example,\n \n-    cdef ftang(object int):\n-        ...\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            @cfunc\n+            def ftang(int: object):\n+                ...\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            cdef ftang(object int):\n+                ...\n \n-declares a parameter called int which is a Python object. You can also use\n+declares a parameter called ``int`` which is a Python object. You can also use\n object as the explicit return type of a function, e.g.::\n \n     cdef object ftang(object int):\n         ...\n \n+.. note:: Currently, Cython contains a bug not allowing returning ``object`` in\n+    pure python from a C function.",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r670313870",
            "id": 670313870,
            "in_reply_to_id": 669893504,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MDMxMzg3MA==",
            "original_commit_id": "09223505690dfb48f1ed900ee9226eceb4f12a68",
            "original_line": 482,
            "original_position": 494,
            "original_start_line": 481,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 707149448,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-07-18T08:33:10Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/670313870",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r670318304"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/670318304"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "```suggestion\r\n  .. note:: Pointers to functions are currently not supported by pure Python mode. (GitHub issue :issue:`4279`)\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-15T09:59:15Z",
            "diff_hunk": "@@ -446,6 +711,8 @@ Some things to note:\n \n       int (*grail)(int, char*) except -1\n \n+  .. note:: Pointers to functions are currently not supported by pure Python mode.",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r670318304",
            "id": 670318304,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MDMxODMwNA==",
            "original_commit_id": "e582b4d63edec94516998b3905da019bb08210f4",
            "original_line": 714,
            "original_position": 679,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 707149448,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-15T11:48:26Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/670318304",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r670321144"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/670321144"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Maybe something like \"with cython compilation but not from interpretation mode\"? I just see cython files as pyx/pxd, in this context but loops will be changed in py files too, if they will be compiled",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-15T10:03:13Z",
            "diff_hunk": "@@ -742,6 +1130,8 @@ Python and C, and that Cython uses the Python precedences, not the C ones.\n Integer for-loops\n ------------------\n \n+.. note:: This syntax is supported only in Cython files and not in Python.",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r670321144",
            "id": 670321144,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MDMyMTE0NA==",
            "original_commit_id": "e582b4d63edec94516998b3905da019bb08210f4",
            "original_line": 1133,
            "original_position": 963,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 707149448,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-15T11:52:27Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/670321144",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r670387507"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/670387507"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I propose split this to two notes to each subsection and add references to those issues: #4286, #4287",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-15T11:46:59Z",
            "diff_hunk": "@@ -890,6 +1280,11 @@ Conditional Compilation\n Some features are available for conditional compilation and compile-time\n constants within a Cython source file.\n \n+.. note::\n+\n+    Cython currently does not support conditional compilation and compile-time\n+    definitions in Pure Python mode.",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r670387507",
            "id": 670387507,
            "line": 1290,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MDM4NzUwNw==",
            "original_commit_id": "e582b4d63edec94516998b3905da019bb08210f4",
            "original_line": 1286,
            "original_position": 975,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": 979,
            "pull_request_review_id": 707149448,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-15T11:48:26Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/670387507",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r671805692"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/671805692"
                }
            },
            "author_association": "MEMBER",
            "body": "> @scoder I would generally suggest covering C API path of `Python.h` with type declarations. Not necessarily in this PR, but it will be more pleasant if there are already `ctypedef `s for the cpython.\r\n\r\nI fail to understand what you are suggesting here.",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-18T08:30:31Z",
            "diff_hunk": "@@ -0,0 +1,2 @@\n+cdef extern from *:\n+    ctypedef Py_ssize_t Py_intptr_t",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r671805692",
            "id": 671805692,
            "in_reply_to_id": 660180889,
            "line": 2,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTgwNTY5Mg==",
            "original_commit_id": "b1067464260957c69d6756e77a726c71183d2569",
            "original_line": 2,
            "original_position": 2,
            "original_start_line": 1,
            "path": "docs/examples/userguide/language_basics/casting_python.pxd",
            "position": 2,
            "pull_request_review_id": 709001866,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": 1,
            "start_side": "RIGHT",
            "updated_at": "2021-07-18T08:57:27Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/671805692",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r671806313"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/671806313"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n.. note:: This syntax is supported only in Cython files.  Use a normal `for-in-range()` loop instead.\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-18T08:35:31Z",
            "diff_hunk": "@@ -742,6 +1130,8 @@ Python and C, and that Cython uses the Python precedences, not the C ones.\n Integer for-loops\n ------------------\n \n+.. note:: This syntax is supported only in Cython files and not in Python.",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r671806313",
            "id": 671806313,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTgwNjMxMw==",
            "original_commit_id": "e582b4d63edec94516998b3905da019bb08210f4",
            "original_line": 1133,
            "original_position": 963,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 709001866,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-18T09:01:14Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/671806313",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r671806736"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/671806736"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n            cdef int a_global_variable\r\n\r\n            def func():\r\n                cdef int i, j, k\r\n                cdef float f, g[42], *h\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-18T08:38:33Z",
            "diff_hunk": "@@ -44,72 +47,148 @@ the use of ‘early binding’ programming techniques.\n C variable and type definitions\n ===============================\n \n-The :keyword:`cdef` statement is used to declare C variables, either local or\n-module-level::\n+C variables can be declared by \n \n-    cdef int i, j, k\n-    cdef float f, g[42], *h\n+* using the Cython specific :keyword:`cdef` statement,\n+* using PEP-484/526 type annotations with C data types or\n+* using the function ``cython.declare()``.\n \n-and C :keyword:`struct`, :keyword:`union` or :keyword:`enum` types:\n+The :keyword:`cdef` statement and ``declare()`` can define function-local and\n+module-level variables as well as attributes in classes, but type annotations only\n+affect local variables and attributes and are ignored at the module level.\n+This is because type annotations are not Cython specific, so Cython keeps\n+the variables in the module dict (as Python values) instead of making them\n+module internal C variables. Use ``declare()`` in Python code to explicitly\n+define global C variables.\n \n-.. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.pyx\n+.. tabs::\n \n-See also :ref:`struct-union-enum-styles`\n+    .. group-tab:: Pure Python\n \n-.. note::\n+        .. code-block:: python\n+\n+            global_x = declare(cython.int)\n+            def main():\n+                i: cython.int\n+                j: cython.int\n+                k: cython.int\n+                f: cython.float\n+                g: cython.int[42]\n+                h: cython.p_float\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            cdef int i, j, k\n+            cdef float f, g[42], *h",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r671806736",
            "id": 671806736,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTgwNjczNg==",
            "original_commit_id": "e582b4d63edec94516998b3905da019bb08210f4",
            "original_line": 84,
            "original_position": 56,
            "original_start_line": 83,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 709001866,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-07-18T08:57:27Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/671806736",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r671806887"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/671806887"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n            a_global_variable = declare(cython.int)\r\n\r\n            def func():\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-18T08:40:00Z",
            "diff_hunk": "@@ -44,72 +47,148 @@ the use of ‘early binding’ programming techniques.\n C variable and type definitions\n ===============================\n \n-The :keyword:`cdef` statement is used to declare C variables, either local or\n-module-level::\n+C variables can be declared by \n \n-    cdef int i, j, k\n-    cdef float f, g[42], *h\n+* using the Cython specific :keyword:`cdef` statement,\n+* using PEP-484/526 type annotations with C data types or\n+* using the function ``cython.declare()``.\n \n-and C :keyword:`struct`, :keyword:`union` or :keyword:`enum` types:\n+The :keyword:`cdef` statement and ``declare()`` can define function-local and\n+module-level variables as well as attributes in classes, but type annotations only\n+affect local variables and attributes and are ignored at the module level.\n+This is because type annotations are not Cython specific, so Cython keeps\n+the variables in the module dict (as Python values) instead of making them\n+module internal C variables. Use ``declare()`` in Python code to explicitly\n+define global C variables.\n \n-.. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.pyx\n+.. tabs::\n \n-See also :ref:`struct-union-enum-styles`\n+    .. group-tab:: Pure Python\n \n-.. note::\n+        .. code-block:: python\n+\n+            global_x = declare(cython.int)\n+            def main():",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r671806887",
            "id": 671806887,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTgwNjg4Nw==",
            "original_commit_id": "e582b4d63edec94516998b3905da019bb08210f4",
            "original_line": 71,
            "original_position": 43,
            "original_start_line": 70,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 709001866,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-07-18T08:57:27Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/671806887",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r671807107"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/671807107"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n            @cython.cfunc\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-18T08:41:36Z",
            "diff_hunk": "@@ -44,72 +47,148 @@ the use of ‘early binding’ programming techniques.\n C variable and type definitions\n ===============================\n \n-The :keyword:`cdef` statement is used to declare C variables, either local or\n-module-level::\n+C variables can be declared by \n \n-    cdef int i, j, k\n-    cdef float f, g[42], *h\n+* using the Cython specific :keyword:`cdef` statement,\n+* using PEP-484/526 type annotations with C data types or\n+* using the function ``cython.declare()``.\n \n-and C :keyword:`struct`, :keyword:`union` or :keyword:`enum` types:\n+The :keyword:`cdef` statement and ``declare()`` can define function-local and\n+module-level variables as well as attributes in classes, but type annotations only\n+affect local variables and attributes and are ignored at the module level.\n+This is because type annotations are not Cython specific, so Cython keeps\n+the variables in the module dict (as Python values) instead of making them\n+module internal C variables. Use ``declare()`` in Python code to explicitly\n+define global C variables.\n \n-.. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.pyx\n+.. tabs::\n \n-See also :ref:`struct-union-enum-styles`\n+    .. group-tab:: Pure Python\n \n-.. note::\n+        .. code-block:: python\n+\n+            global_x = declare(cython.int)\n+            def main():\n+                i: cython.int\n+                j: cython.int\n+                k: cython.int\n+                f: cython.float\n+                g: cython.int[42]\n+                h: cython.p_float\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            cdef int i, j, k\n+            cdef float f, g[42], *h\n+\n+Moreover, C :keyword:`struct`, :keyword:`union` and :keyword:`enum` are supported:\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.py\n+\n+        .. note:: Currently, Pure Python mode does not support enums.\n \n-    Structs can be declared as ``cdef packed struct``, which has\n-    the same effect as the C directive ``#pragma pack(1)``.\n+    .. group-tab:: Cython\n \n-Declaring an enum as ``cpdef`` will create a :pep:`435`-style Python wrapper::\n+        .. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.pyx\n \n-    cpdef enum CheeseState:\n-        hard = 1\n-        soft = 2\n-        runny = 3\n+        See also :ref:`struct-union-enum-styles`\n \n+        .. note::\n \n+            Structs can be declared as ``cdef packed struct``, which has\n+            the same effect as the C directive ``#pragma pack(1)``.\n \n-There is currently no special syntax for defining a constant, but you can use\n-an anonymous :keyword:`enum` declaration for this purpose, for example,::\n+        Declaring an enum as ``cpdef`` will create a :pep:`435`-style Python wrapper::\n \n-    cdef enum:\n-        tons_of_spam = 3\n+            cpdef enum CheeseState:\n+                hard = 1\n+                soft = 2\n+                runny = 3\n+\n+        There is currently no special syntax for defining a constant, but you can use\n+        an anonymous :keyword:`enum` declaration for this purpose, for example,::\n+\n+            cdef enum:\n+                tons_of_spam = 3\n+\n+        .. note::\n+            the words ``struct``, ``union`` and ``enum`` are used only when\n+            defining a type, not when referring to it. For example, to declare a variable\n+            pointing to a ``Grail`` struct, you would write::\n+\n+                cdef Grail *gp\n+\n+            and not::\n+\n+                cdef struct Grail *gp  # WRONG\n \n .. note::\n-    the words ``struct``, ``union`` and ``enum`` are used only when\n-    defining a type, not when referring to it. For example, to declare a variable\n-    pointing to a ``Grail`` you would write::\n \n-        cdef Grail *gp\n+    There is also support for giving names to types using the\n+    ``ctypedef`` statement or the ``cython.typedef()`` function, e.g.\n \n-    and not::\n+    .. tabs::\n \n-        cdef struct Grail *gp # WRONG\n+        .. group-tab:: Pure Python\n \n-    There is also a ``ctypedef`` statement for giving names to types, e.g.::\n+            .. code-block:: python\n \n-        ctypedef unsigned long ULong\n+                 ULong = cython.typedef(cython.ulong)\n \n-        ctypedef int* IntPtr\n+                 IntPtr = cython.typedef(cython.p_int)\n \n+        .. group-tab:: Cython\n \n-It is also possible to declare functions with :keyword:`cdef`, making them c functions.\n+            .. code-block:: cython\n \n-::\n+                ctypedef unsigned long ULong\n \n-    cdef int eggs(unsigned long l, float f):\n-        ...\n+                ctypedef int* IntPtr\n+\n+\n+You can create a C function by declaring it with :keyword:`cdef` or by decorating a Python function with ``@cfunc``:\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            @cfunc",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r671807107",
            "id": 671807107,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTgwNzEwNw==",
            "original_commit_id": "e582b4d63edec94516998b3905da019bb08210f4",
            "original_line": 163,
            "original_position": 159,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 709001866,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-18T08:57:27Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/671807107",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r671808728"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/671808728"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n            @cython.cfunc\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-18T08:54:33Z",
            "diff_hunk": "@@ -189,48 +306,95 @@ Python functions vs. C functions\n \n There are two kinds of function definition in Cython:\n \n-Python functions are defined using the def statement, as in Python. They take\n+Python functions are defined using the :keyword:`def` statement, as in Python. They take\n :term:`Python objects<Python object>` as parameters and return Python objects.\n \n-C functions are defined using the new :keyword:`cdef` statement. They take\n+C functions are defined using the :keyword:`cdef` statement in Cython syntax or with the ``@cfunc`` decorator. They take\n either Python objects or C values as parameters, and can return either Python\n objects or C values.\n \n Within a Cython module, Python functions and C functions can call each other\n freely, but only Python functions can be called from outside the module by\n interpreted Python code. So, any functions that you want to \"export\" from your\n-Cython module must be declared as Python functions using def.\n-There is also a hybrid function, called :keyword:`cpdef`. A :keyword:`cpdef`\n-can be called from anywhere, but uses the faster C calling conventions\n-when being called from other Cython code. A :keyword:`cpdef` can also be overridden\n+Cython module must be declared as Python functions using ``def``.\n+There is also a hybrid function, declared with :keyword:`cpdef` in ``.pyx`` files or with the ``@ccall`` decorator.  These functions\n+can be called from anywhere, but use the faster C calling convention\n+when being called from other Cython code. They can also be overridden\n by a Python method on a subclass or an instance attribute, even when called from Cython.\n If this happens, most performance gains are of course lost and even if it does not,\n-there is a tiny overhead in calling a :keyword:`cpdef` method from Cython compared to\n-calling a :keyword:`cdef` method.\n+there is a tiny overhead in calling such a method from Cython compared to\n+calling a C method.\n \n Parameters of either type of function can be declared to have C data types,\n-using normal C declaration syntax. For example,::\n+using normal C declaration syntax. For example,\n \n-    def spam(int i, char *s):\n-        ...\n+.. tabs::\n \n-    cdef int eggs(unsigned long l, float f):\n-        ...\n+    .. group-tab:: Pure Python\n \n-``ctuples`` may also be used::\n+        .. code-block:: python\n \n-    cdef (int, float) chips((long, long, double) t):\n-        ...\n+            def spam(i: cython.int, s: cython.p_char):\n+                ...\n+\n+            @cfunc",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r671808728",
            "id": 671808728,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTgwODcyOA==",
            "original_commit_id": "e582b4d63edec94516998b3905da019bb08210f4",
            "original_line": 340,
            "original_position": 356,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 709001866,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-18T08:57:27Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/671808728",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r671808748"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/671808748"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n            @cython.cfunc\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-18T08:54:43Z",
            "diff_hunk": "@@ -189,48 +306,95 @@ Python functions vs. C functions\n \n There are two kinds of function definition in Cython:\n \n-Python functions are defined using the def statement, as in Python. They take\n+Python functions are defined using the :keyword:`def` statement, as in Python. They take\n :term:`Python objects<Python object>` as parameters and return Python objects.\n \n-C functions are defined using the new :keyword:`cdef` statement. They take\n+C functions are defined using the :keyword:`cdef` statement in Cython syntax or with the ``@cfunc`` decorator. They take\n either Python objects or C values as parameters, and can return either Python\n objects or C values.\n \n Within a Cython module, Python functions and C functions can call each other\n freely, but only Python functions can be called from outside the module by\n interpreted Python code. So, any functions that you want to \"export\" from your\n-Cython module must be declared as Python functions using def.\n-There is also a hybrid function, called :keyword:`cpdef`. A :keyword:`cpdef`\n-can be called from anywhere, but uses the faster C calling conventions\n-when being called from other Cython code. A :keyword:`cpdef` can also be overridden\n+Cython module must be declared as Python functions using ``def``.\n+There is also a hybrid function, declared with :keyword:`cpdef` in ``.pyx`` files or with the ``@ccall`` decorator.  These functions\n+can be called from anywhere, but use the faster C calling convention\n+when being called from other Cython code. They can also be overridden\n by a Python method on a subclass or an instance attribute, even when called from Cython.\n If this happens, most performance gains are of course lost and even if it does not,\n-there is a tiny overhead in calling a :keyword:`cpdef` method from Cython compared to\n-calling a :keyword:`cdef` method.\n+there is a tiny overhead in calling such a method from Cython compared to\n+calling a C method.\n \n Parameters of either type of function can be declared to have C data types,\n-using normal C declaration syntax. For example,::\n+using normal C declaration syntax. For example,\n \n-    def spam(int i, char *s):\n-        ...\n+.. tabs::\n \n-    cdef int eggs(unsigned long l, float f):\n-        ...\n+    .. group-tab:: Pure Python\n \n-``ctuples`` may also be used::\n+        .. code-block:: python\n \n-    cdef (int, float) chips((long, long, double) t):\n-        ...\n+            def spam(i: cython.int, s: cython.p_char):\n+                ...\n+\n+            @cfunc\n+            def eggs(l: cython.ulong, f: cython.float) -> cython.int:\n+                ...\n+\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            def spam(int i, char *s):\n+                ...\n+\n+\n+            cdef int eggs(unsigned long l, float f):\n+                ...\n+``ctuples`` may also be used\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            @cfunc",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r671808748",
            "id": 671808748,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTgwODc0OA==",
            "original_commit_id": "e582b4d63edec94516998b3905da019bb08210f4",
            "original_line": 362,
            "original_position": 378,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 709001866,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-18T08:57:27Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/671808748",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r671808811"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/671808811"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n            @cython.cfunc\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-18T08:55:03Z",
            "diff_hunk": "@@ -257,10 +422,24 @@ Python objects as parameters and return values\n If no type is specified for a parameter or return value, it is assumed to be a\n Python object. (Note that this is different from the C convention, where it\n would default to int.) For example, the following defines a C function that\n-takes two Python objects as parameters and returns a Python object::\n+takes two Python objects as parameters and returns a Python object\n \n-    cdef spamobjs(x, y):\n-        ...\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            @cfunc",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r671808811",
            "id": 671808811,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTgwODgxMQ==",
            "original_commit_id": "e582b4d63edec94516998b3905da019bb08210f4",
            "original_line": 433,
            "original_position": 447,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 709001866,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-18T08:57:27Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/671808811",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r671808841"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/671808841"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n            @cython.cfunc\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-18T08:55:16Z",
            "diff_hunk": "@@ -274,25 +453,50 @@ parameters and a new reference is returned).\n \n The name object can also be used to explicitly declare something as a Python\n object. This can be useful if the name being declared would otherwise be taken\n-as the name of a type, for example,::\n+as the name of a type, for example,\n \n-    cdef ftang(object int):\n-        ...\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            @cfunc",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r671808841",
            "id": 671808841,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTgwODg0MQ==",
            "original_commit_id": "e582b4d63edec94516998b3905da019bb08210f4",
            "original_line": 464,
            "original_position": 475,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 709001866,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-18T08:57:27Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/671808841",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r671808922"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/671808922"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n            @cython.cfunc\r\n            @cython.exceptval(-1)\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-18T08:55:42Z",
            "diff_hunk": "@@ -374,19 +589,34 @@ through defined error return values.  For functions that return a Python object\n ``NULL`` pointer, so any function returning a Python object has a well-defined\n error return value.\n \n-While this is always the case for :keyword:`def` functions, functions\n-defined as :keyword:`cdef` or :keyword:`cpdef` can return arbitrary C types,\n+While this is always the case for C functions, functions\n+defined as C functions or ``cpdef``/``@ccall`` functions can return arbitrary C types,\n which do not have such a well-defined error return value.  Thus, if an\n exception is detected in such a function, a warning message is printed,\n the exception is ignored, and the function returns immediately without\n propagating the exception to its caller.\n \n If you want such a C function to be able to propagate exceptions, you need\n to declare an exception return value for it as a contract with the caller.\n-Here is an example::\n+Here is an example\n \n-    cdef int spam() except -1:\n-        ...\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            @cfunc\n+            @exceptval(-1)",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r671808922",
            "id": 671808922,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTgwODkyMg==",
            "original_commit_id": "e582b4d63edec94516998b3905da019bb08210f4",
            "original_line": 610,
            "original_position": 582,
            "original_start_line": 609,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 709001866,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-07-18T08:57:27Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/671808922",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r671808976"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/671808976"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n            @cython.cfunc\r\n            @cython.exceptval(-1, check=True)\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-18T08:56:02Z",
            "diff_hunk": "@@ -404,20 +634,53 @@ returns small results.\n \n If all possible return values are legal and you\n can't reserve one entirely for signalling errors, you can use an alternative\n-form of exception value declaration::\n+form of exception value declaration\n \n-    cdef int spam() except? -1:\n-        ...\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            @cfunc\n+            @exceptval(-1, check=True)",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r671808976",
            "id": 671808976,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTgwODk3Ng==",
            "original_commit_id": "e582b4d63edec94516998b3905da019bb08210f4",
            "original_line": 646,
            "original_position": 611,
            "original_start_line": 645,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 709001866,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-07-18T08:57:27Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/671808976",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r671809054"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/671809054"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n            @cython.cfunc\r\n            @cython.exceptval(check=True)\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-18T08:56:40Z",
            "diff_hunk": "@@ -404,20 +634,53 @@ returns small results.\n \n If all possible return values are legal and you\n can't reserve one entirely for signalling errors, you can use an alternative\n-form of exception value declaration::\n+form of exception value declaration\n \n-    cdef int spam() except? -1:\n-        ...\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            @cfunc\n+            @exceptval(-1, check=True)\n+            def spam() -> cython.int:\n+                ...\n+\n+        The ``check=True`` indicates that the value ``-1`` only signals a possible error.\n+\n+    .. group-tab:: Cython\n \n-The \"?\" indicates that the value ``-1`` only signals a possible error. In this\n-case, Cython generates a call to :c:func:`PyErr_Occurred` if the exception value\n+        .. code-block:: cython\n+\n+            cdef int spam() except? -1:\n+                ...\n+\n+        The ``?`` indicates that the value ``-1`` only signals a possible error.\n+\n+In this case, Cython generates a call to :c:func:`PyErr_Occurred` if the exception value\n is returned, to make sure it really received an exception and not just a normal\n result.\n \n-There is also a third form of exception value declaration::\n+There is also a third form of exception value declaration\n \n-    cdef int spam() except *:\n-        ...\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            @cfunc\n+            @exceptval(check=True)",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r671809054",
            "id": 671809054,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTgwOTA1NA==",
            "original_commit_id": "e582b4d63edec94516998b3905da019bb08210f4",
            "original_line": 674,
            "original_position": 644,
            "original_start_line": 673,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 709001866,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-07-18T08:57:27Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/671809054",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r671815915"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/671815915"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "i just will find and suggest change, i think it'll be more useful",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-18T09:53:43Z",
            "diff_hunk": "@@ -86,7 +86,7 @@ Moreover, C :keyword:`struct`, :keyword:`union` or :keyword:`enum` are supported\n \n         .. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.py\n \n-        .. NOTE:: Currently, Pure Python mode does not support enums.\n+        .. note:: Currently, Pure Python mode does not support enums.\n ",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r671815915",
            "id": 671815915,
            "in_reply_to_id": 669855133,
            "line": 99,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTgxNTkxNQ==",
            "original_commit_id": "f555ea1e81834d788d28d864024dbdf15c6417ee",
            "original_line": 90,
            "original_position": 6,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": 74,
            "pull_request_review_id": 709008631,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-18T09:53:43Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/671815915",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r671815930"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/671815930"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "This conversation should be resolved",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-18T09:54:01Z",
            "diff_hunk": "@@ -86,7 +86,7 @@ Moreover, C :keyword:`struct`, :keyword:`union` or :keyword:`enum` are supported\n \n         .. literalinclude:: ../../examples/userguide/language_basics/struct_union_enum.py\n \n-        .. NOTE:: Currently, Pure Python mode does not support enums.\n+        .. note:: Currently, Pure Python mode does not support enums.\n ",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r671815930",
            "id": 671815930,
            "in_reply_to_id": 669855133,
            "line": 99,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTgxNTkzMA==",
            "original_commit_id": "f555ea1e81834d788d28d864024dbdf15c6417ee",
            "original_line": 90,
            "original_position": 6,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": 74,
            "pull_request_review_id": 709008646,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-18T09:54:01Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/671815930",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r671816744"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/671816744"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "```suggestion\r\n.. note:: The Python types ``int``, ``long``, and ``float`` are not available for static\r\n```",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-18T10:00:39Z",
            "diff_hunk": "@@ -119,40 +202,75 @@ You can read more about them in :ref:`extension-types`.\n Types\n -----\n \n-Cython uses the normal C syntax for C types, including pointers.  It provides\n+The Cython language uses the normal C syntax for C types, including pointers.  It provides\n all the standard C types, namely ``char``, ``short``, ``int``, ``long``,\n-``long long`` as well as their ``unsigned`` versions, e.g. ``unsigned int``.\n+``long long`` as well as their ``unsigned`` versions,\n+e.g. ``unsigned int`` (``cython.uint`` in Python code).\n The special ``bint`` type is used for C boolean values (``int`` with 0/non-0\n values for False/True) and ``Py_ssize_t`` for (signed) sizes of Python\n containers.\n \n-Pointer types are constructed as in C, by appending a ``*`` to the base type\n-they point to, e.g. ``int**`` for a pointer to a pointer to a C int.\n+Pointer types are constructed as in C when using Cython syntax, by appending a ``*`` to the base type\n+they point to, e.g. ``int**`` for a pointer to a pointer to a C int. In Pure python mode, simple pointer types\n+use a naming scheme with \"p\"s instead, separated from the type name with an underscore, e.g. ``cython.pp_int`` for a pointer to\n+a pointer to a C int.  Further pointer types can be constructed with the ``cython.pointer()`` function,\n+e.g. ``cython.pointer(cython.int)``.\n+\n+\n Arrays use the normal C array syntax, e.g. ``int[10]``, and the size must be known\n at compile time for stack allocated arrays. Cython doesn't support variable length arrays from C99.\n Note that Cython uses array access for pointer dereferencing, as ``*x`` is not valid Python syntax,\n whereas ``x[0]`` is.\n \n Also, the Python types ``list``, ``dict``, ``tuple``, etc. may be used for\n static typing, as well as any user defined :ref:`extension-types`.\n-For example::\n+For example\n+\n+.. tabs::\n+\n+    .. group-tab:: Pure Python\n+\n+        .. code-block:: python\n+\n+            def main():\n+                foo: list = []\n \n-    cdef list foo = []\n+    .. group-tab:: Cython\n+\n+        .. code-block:: cython\n+\n+            cdef list foo = []\n \n This requires an *exact* match of the class, it does not allow subclasses.\n This allows Cython to optimize code by accessing internals of the builtin class,\n which is the main reason for declaring builtin types in the first place.\n \n For declared builtin types, Cython uses internally a C variable of type ``PyObject*``.\n-The Python types int, long, and float are not available for static\n-typing and instead interpreted as C ``int``, ``long``, and ``float``\n-respectively, as statically typing variables with these Python\n-types has zero advantages.\n+\n+.. Note:: The Python types ``int``, ``long``, and ``float`` are not available for static",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r671816744",
            "id": 671816744,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTgxNjc0NA==",
            "original_commit_id": "85b4bf24a34b6fecf1e9081fb0006972ff49c9c4",
            "original_line": 250,
            "original_position": 256,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 709009189,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-18T10:03:37Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/671816744",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r671817922"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/671817922"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "As said in #4282 we should not allow it, and it should be reflected in the text",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-18T10:09:55Z",
            "diff_hunk": "@@ -430,14 +699,16 @@ An external C++ function that may raise an exception can be declared with::\n \n     cdef int spam() except +\n \n+.. note:: Pure python mode currently does not have equivalent to `except +`.",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r671817922",
            "id": 671817922,
            "in_reply_to_id": 669235921,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTgxNzkyMg==",
            "original_commit_id": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "original_line": 702,
            "original_position": 677,
            "original_start_line": null,
            "path": "docs/src/userguide/language_basics.rst",
            "position": null,
            "pull_request_review_id": 709010002,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-07-18T10:10:06Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/671817922",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4242#discussion_r671819343"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4242"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/671819343"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "> I fail to understand what you are suggesting here.\r\n\r\nI suggested to create [these](https://github.com/cython/cython/tree/master/Cython/Includes/cpython) includes, but it seems that many of them are already listed in those pxd-s.",
            "commit_id": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "created_at": "2021-07-18T10:22:07Z",
            "diff_hunk": "@@ -0,0 +1,2 @@\n+cdef extern from *:\n+    ctypedef Py_ssize_t Py_intptr_t",
            "html_url": "https://github.com/cython/cython/pull/4242#discussion_r671819343",
            "id": 671819343,
            "in_reply_to_id": 660180889,
            "line": 2,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTgxOTM0Mw==",
            "original_commit_id": "b1067464260957c69d6756e77a726c71183d2569",
            "original_line": 2,
            "original_position": 2,
            "original_start_line": 1,
            "path": "docs/examples/userguide/language_basics/casting_python.pxd",
            "position": 2,
            "pull_request_review_id": 709010901,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4242",
            "side": "RIGHT",
            "start_line": 1,
            "start_side": "RIGHT",
            "updated_at": "2021-07-18T10:22:07Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/671819343",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/cython/cython/issues/4242/comments",
    "commit_data": [
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/300965693b0c0277564d363a02f55e9d6e8c6510/comments",
            "commit": {
                "author": {
                    "date": "2021-06-23T09:13:08Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-07-13T12:17:25Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "message": "Introduce pure python mode in language basics documentation",
                "tree": {
                    "sha": "7624abdbf0ae95453a2cf9f3883f2ff53ff12d7e",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/7624abdbf0ae95453a2cf9f3883f2ff53ff12d7e"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/300965693b0c0277564d363a02f55e9d6e8c6510",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "html_url": "https://github.com/cython/cython/commit/300965693b0c0277564d363a02f55e9d6e8c6510",
            "node_id": "MDY6Q29tbWl0MzQ4MDA5NDQzOjMwMDk2NTY5M2IwYzAyNzc1NjRkMzYzYTAyZjU1ZTlkNmU4YzY1MTA=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/fae33cf7d42559384deb7a9949f47b0881b0a29b",
                    "sha": "fae33cf7d42559384deb7a9949f47b0881b0a29b",
                    "url": "https://api.github.com/repos/cython/cython/commits/fae33cf7d42559384deb7a9949f47b0881b0a29b"
                }
            ],
            "sha": "300965693b0c0277564d363a02f55e9d6e8c6510",
            "url": "https://api.github.com/repos/cython/cython/commits/300965693b0c0277564d363a02f55e9d6e8c6510"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/8ef08511448caf936990dd29e997fde45860433f/comments",
            "commit": {
                "author": {
                    "date": "2021-06-24T07:21:11Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-07-13T12:17:25Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "message": "Move union documentation to cython tab",
                "tree": {
                    "sha": "9ec0f178cea65de273ed5389e94b72308bd00e45",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/9ec0f178cea65de273ed5389e94b72308bd00e45"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/8ef08511448caf936990dd29e997fde45860433f",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "html_url": "https://github.com/cython/cython/commit/8ef08511448caf936990dd29e997fde45860433f",
            "node_id": "MDY6Q29tbWl0MzQ4MDA5NDQzOjhlZjA4NTExNDQ4Y2FmOTM2OTkwZGQyOWU5OTdmZGU0NTg2MDQzM2Y=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/300965693b0c0277564d363a02f55e9d6e8c6510",
                    "sha": "300965693b0c0277564d363a02f55e9d6e8c6510",
                    "url": "https://api.github.com/repos/cython/cython/commits/300965693b0c0277564d363a02f55e9d6e8c6510"
                }
            ],
            "sha": "8ef08511448caf936990dd29e997fde45860433f",
            "url": "https://api.github.com/repos/cython/cython/commits/8ef08511448caf936990dd29e997fde45860433f"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/81b0f69ee9a41be48948ee179345135f130c4bd3/comments",
            "commit": {
                "author": {
                    "date": "2021-06-24T08:38:03Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-07-13T12:17:25Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "message": "Added casting_python.py example",
                "tree": {
                    "sha": "625e76a079bdb7935d49faf3b9080a2cf7e29682",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/625e76a079bdb7935d49faf3b9080a2cf7e29682"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/81b0f69ee9a41be48948ee179345135f130c4bd3",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "html_url": "https://github.com/cython/cython/commit/81b0f69ee9a41be48948ee179345135f130c4bd3",
            "node_id": "MDY6Q29tbWl0MzQ4MDA5NDQzOjgxYjBmNjllZTlhNDFiZTQ4OTQ4ZWUxNzkzNDUxMzVmMTMwYzRiZDM=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/8ef08511448caf936990dd29e997fde45860433f",
                    "sha": "8ef08511448caf936990dd29e997fde45860433f",
                    "url": "https://api.github.com/repos/cython/cython/commits/8ef08511448caf936990dd29e997fde45860433f"
                }
            ],
            "sha": "81b0f69ee9a41be48948ee179345135f130c4bd3",
            "url": "https://api.github.com/repos/cython/cython/commits/81b0f69ee9a41be48948ee179345135f130c4bd3"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/ae987af370ebb34a8b535b1666927b6be2f14b2a/comments",
            "commit": {
                "author": {
                    "date": "2021-06-24T09:32:03Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-07-13T12:17:25Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "message": "Note that DEF/IF/ELIF is not supported by pure python mode",
                "tree": {
                    "sha": "d4b6198adc0077f1132bf3155b78793d23032a8a",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/d4b6198adc0077f1132bf3155b78793d23032a8a"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/ae987af370ebb34a8b535b1666927b6be2f14b2a",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "html_url": "https://github.com/cython/cython/commit/ae987af370ebb34a8b535b1666927b6be2f14b2a",
            "node_id": "MDY6Q29tbWl0MzQ4MDA5NDQzOmFlOTg3YWYzNzBlYmIzNGE4YjUzNWIxNjY2OTI3YjZiZTJmMTRiMmE=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/81b0f69ee9a41be48948ee179345135f130c4bd3",
                    "sha": "81b0f69ee9a41be48948ee179345135f130c4bd3",
                    "url": "https://api.github.com/repos/cython/cython/commits/81b0f69ee9a41be48948ee179345135f130c4bd3"
                }
            ],
            "sha": "ae987af370ebb34a8b535b1666927b6be2f14b2a",
            "url": "https://api.github.com/repos/cython/cython/commits/ae987af370ebb34a8b535b1666927b6be2f14b2a"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/56b8f9123bbf4d511108d55f9c93072245d982be/comments",
            "commit": {
                "author": {
                    "date": "2021-06-25T19:43:35Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-07-13T12:17:25Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "message": "Improve examples, added initial note about pure python",
                "tree": {
                    "sha": "66e28f242e3d7fa50f4b0ff97fdfbb7e0af268bf",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/66e28f242e3d7fa50f4b0ff97fdfbb7e0af268bf"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/56b8f9123bbf4d511108d55f9c93072245d982be",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "html_url": "https://github.com/cython/cython/commit/56b8f9123bbf4d511108d55f9c93072245d982be",
            "node_id": "MDY6Q29tbWl0MzQ4MDA5NDQzOjU2YjhmOTEyM2JiZjRkNTExMTA4ZDU1ZjljOTMwNzIyNDVkOTgyYmU=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/ae987af370ebb34a8b535b1666927b6be2f14b2a",
                    "sha": "ae987af370ebb34a8b535b1666927b6be2f14b2a",
                    "url": "https://api.github.com/repos/cython/cython/commits/ae987af370ebb34a8b535b1666927b6be2f14b2a"
                }
            ],
            "sha": "56b8f9123bbf4d511108d55f9c93072245d982be",
            "url": "https://api.github.com/repos/cython/cython/commits/56b8f9123bbf4d511108d55f9c93072245d982be"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/e5a9d12d67ed4b60a84ce09085ee6f9d306672f3/comments",
            "commit": {
                "author": {
                    "date": "2021-06-25T20:08:16Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-07-13T12:17:25Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "message": "Minor fixes in code examples",
                "tree": {
                    "sha": "435aee7b5212f087f3ef52aea7c46f1aacec3d10",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/435aee7b5212f087f3ef52aea7c46f1aacec3d10"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/e5a9d12d67ed4b60a84ce09085ee6f9d306672f3",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "html_url": "https://github.com/cython/cython/commit/e5a9d12d67ed4b60a84ce09085ee6f9d306672f3",
            "node_id": "MDY6Q29tbWl0MzQ4MDA5NDQzOmU1YTlkMTJkNjdlZDRiNjBhODRjZTA5MDg1ZWU2ZjlkMzA2NjcyZjM=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/56b8f9123bbf4d511108d55f9c93072245d982be",
                    "sha": "56b8f9123bbf4d511108d55f9c93072245d982be",
                    "url": "https://api.github.com/repos/cython/cython/commits/56b8f9123bbf4d511108d55f9c93072245d982be"
                }
            ],
            "sha": "e5a9d12d67ed4b60a84ce09085ee6f9d306672f3",
            "url": "https://api.github.com/repos/cython/cython/commits/e5a9d12d67ed4b60a84ce09085ee6f9d306672f3"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/f2ae0609ae1f1279f8a4c4a1ac9c97c1a2833d91/comments",
            "commit": {
                "author": {
                    "date": "2021-06-28T19:52:50Z",
                    "email": "matusvalo@users.noreply.github.com",
                    "name": "Matus Valo"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-07-13T12:17:25Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "message": "Remove redundant empty line\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                "tree": {
                    "sha": "7c03b8837767a3b07d0aaf143615ca118bf36941",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/7c03b8837767a3b07d0aaf143615ca118bf36941"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/f2ae0609ae1f1279f8a4c4a1ac9c97c1a2833d91",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "html_url": "https://github.com/cython/cython/commit/f2ae0609ae1f1279f8a4c4a1ac9c97c1a2833d91",
            "node_id": "MDY6Q29tbWl0MzQ4MDA5NDQzOmYyYWUwNjA5YWUxZjEyNzlmOGE0YzRhMWFjOWM5N2MxYTI4MzNkOTE=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/e5a9d12d67ed4b60a84ce09085ee6f9d306672f3",
                    "sha": "e5a9d12d67ed4b60a84ce09085ee6f9d306672f3",
                    "url": "https://api.github.com/repos/cython/cython/commits/e5a9d12d67ed4b60a84ce09085ee6f9d306672f3"
                }
            ],
            "sha": "f2ae0609ae1f1279f8a4c4a1ac9c97c1a2833d91",
            "url": "https://api.github.com/repos/cython/cython/commits/f2ae0609ae1f1279f8a4c4a1ac9c97c1a2833d91"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/85bd06eda66a0419c32d229a164650fb6972ef57/comments",
            "commit": {
                "author": {
                    "date": "2021-06-28T19:56:18Z",
                    "email": "matusvalo@users.noreply.github.com",
                    "name": "Matus Valo"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-07-13T12:17:25Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "message": "Don't specify type of variable when type can be automatically inferred.\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                "tree": {
                    "sha": "db8778190eac67cf0201251c3b06ce119ac66a06",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/db8778190eac67cf0201251c3b06ce119ac66a06"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/85bd06eda66a0419c32d229a164650fb6972ef57",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "html_url": "https://github.com/cython/cython/commit/85bd06eda66a0419c32d229a164650fb6972ef57",
            "node_id": "MDY6Q29tbWl0MzQ4MDA5NDQzOjg1YmQwNmVkYTY2YTA0MTljMzJkMjI5YTE2NDY1MGZiNjk3MmVmNTc=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/f2ae0609ae1f1279f8a4c4a1ac9c97c1a2833d91",
                    "sha": "f2ae0609ae1f1279f8a4c4a1ac9c97c1a2833d91",
                    "url": "https://api.github.com/repos/cython/cython/commits/f2ae0609ae1f1279f8a4c4a1ac9c97c1a2833d91"
                }
            ],
            "sha": "85bd06eda66a0419c32d229a164650fb6972ef57",
            "url": "https://api.github.com/repos/cython/cython/commits/85bd06eda66a0419c32d229a164650fb6972ef57"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/40a5c045c934a9445b5d984bc7c5639efde61396/comments",
            "commit": {
                "author": {
                    "date": "2021-06-28T20:09:01Z",
                    "email": "matusvalo@users.noreply.github.com",
                    "name": "Matus Valo"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-07-13T12:17:25Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "message": "Use automatic type inference in example\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                "tree": {
                    "sha": "8dc876c4fb62243779d04b9aa5b035fdec9245d9",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/8dc876c4fb62243779d04b9aa5b035fdec9245d9"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/40a5c045c934a9445b5d984bc7c5639efde61396",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "html_url": "https://github.com/cython/cython/commit/40a5c045c934a9445b5d984bc7c5639efde61396",
            "node_id": "MDY6Q29tbWl0MzQ4MDA5NDQzOjQwYTVjMDQ1YzkzNGE5NDQ1YjVkOTg0YmM3YzU2MzllZmRlNjEzOTY=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/85bd06eda66a0419c32d229a164650fb6972ef57",
                    "sha": "85bd06eda66a0419c32d229a164650fb6972ef57",
                    "url": "https://api.github.com/repos/cython/cython/commits/85bd06eda66a0419c32d229a164650fb6972ef57"
                }
            ],
            "sha": "40a5c045c934a9445b5d984bc7c5639efde61396",
            "url": "https://api.github.com/repos/cython/cython/commits/40a5c045c934a9445b5d984bc7c5639efde61396"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/4daeb9245645474a6f0ff91ce2219eb5bb354911/comments",
            "commit": {
                "author": {
                    "date": "2021-06-28T20:09:20Z",
                    "email": "matusvalo@users.noreply.github.com",
                    "name": "Matus Valo"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-07-13T12:17:25Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "message": "Use automatic type inference in example\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                "tree": {
                    "sha": "8746cf2d9a8d5c0502eb3e481d6497296bc7745e",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/8746cf2d9a8d5c0502eb3e481d6497296bc7745e"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/4daeb9245645474a6f0ff91ce2219eb5bb354911",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "html_url": "https://github.com/cython/cython/commit/4daeb9245645474a6f0ff91ce2219eb5bb354911",
            "node_id": "MDY6Q29tbWl0MzQ4MDA5NDQzOjRkYWViOTI0NTY0NTQ3NGE2ZjBmZjkxY2UyMjE5ZWI1YmIzNTQ5MTE=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/40a5c045c934a9445b5d984bc7c5639efde61396",
                    "sha": "40a5c045c934a9445b5d984bc7c5639efde61396",
                    "url": "https://api.github.com/repos/cython/cython/commits/40a5c045c934a9445b5d984bc7c5639efde61396"
                }
            ],
            "sha": "4daeb9245645474a6f0ff91ce2219eb5bb354911",
            "url": "https://api.github.com/repos/cython/cython/commits/4daeb9245645474a6f0ff91ce2219eb5bb354911"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/3064b2dab53cfa11a4cecea75a3dc04b8a4a900f/comments",
            "commit": {
                "author": {
                    "date": "2021-06-28T14:41:33Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-07-13T12:17:25Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "message": "Move ctypedef to pure python and minor fixes",
                "tree": {
                    "sha": "99ec13401fbe6a713302bcfe32642373d7491b25",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/99ec13401fbe6a713302bcfe32642373d7491b25"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/3064b2dab53cfa11a4cecea75a3dc04b8a4a900f",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "html_url": "https://github.com/cython/cython/commit/3064b2dab53cfa11a4cecea75a3dc04b8a4a900f",
            "node_id": "MDY6Q29tbWl0MzQ4MDA5NDQzOjMwNjRiMmRhYjUzY2ZhMTFhNGNlY2VhNzVhM2RjMDRiOGE0YTkwMGY=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/4daeb9245645474a6f0ff91ce2219eb5bb354911",
                    "sha": "4daeb9245645474a6f0ff91ce2219eb5bb354911",
                    "url": "https://api.github.com/repos/cython/cython/commits/4daeb9245645474a6f0ff91ce2219eb5bb354911"
                }
            ],
            "sha": "3064b2dab53cfa11a4cecea75a3dc04b8a4a900f",
            "url": "https://api.github.com/repos/cython/cython/commits/3064b2dab53cfa11a4cecea75a3dc04b8a4a900f"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/137be39ccdced77fa1101b076aaedb8835b01128/comments",
            "commit": {
                "author": {
                    "date": "2021-07-11T20:07:14Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-07-13T12:17:25Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "message": "Added python version of parameter_refcount example",
                "tree": {
                    "sha": "b762e491043195ffcb479987f8f6d27e0f836aa2",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/b762e491043195ffcb479987f8f6d27e0f836aa2"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/137be39ccdced77fa1101b076aaedb8835b01128",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "html_url": "https://github.com/cython/cython/commit/137be39ccdced77fa1101b076aaedb8835b01128",
            "node_id": "MDY6Q29tbWl0MzQ4MDA5NDQzOjEzN2JlMzljY2RjZWQ3N2ZhMTEwMWIwNzZhYWVkYjg4MzViMDExMjg=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/3064b2dab53cfa11a4cecea75a3dc04b8a4a900f",
                    "sha": "3064b2dab53cfa11a4cecea75a3dc04b8a4a900f",
                    "url": "https://api.github.com/repos/cython/cython/commits/3064b2dab53cfa11a4cecea75a3dc04b8a4a900f"
                }
            ],
            "sha": "137be39ccdced77fa1101b076aaedb8835b01128",
            "url": "https://api.github.com/repos/cython/cython/commits/137be39ccdced77fa1101b076aaedb8835b01128"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/db2978010b21c7bae75ccaa1838b66140ae7e980/comments",
            "commit": {
                "author": {
                    "date": "2021-07-13T12:16:21Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-07-13T12:17:25Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "message": "Fixed minor issues, adjusted text to pure python mode",
                "tree": {
                    "sha": "ae8b942e4721c978940859f86a265090d835416a",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/ae8b942e4721c978940859f86a265090d835416a"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/db2978010b21c7bae75ccaa1838b66140ae7e980",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "html_url": "https://github.com/cython/cython/commit/db2978010b21c7bae75ccaa1838b66140ae7e980",
            "node_id": "MDY6Q29tbWl0MzQ4MDA5NDQzOmRiMjk3ODAxMGIyMWM3YmFlNzVjY2FhMTgzOGI2NjE0MGFlN2U5ODA=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/137be39ccdced77fa1101b076aaedb8835b01128",
                    "sha": "137be39ccdced77fa1101b076aaedb8835b01128",
                    "url": "https://api.github.com/repos/cython/cython/commits/137be39ccdced77fa1101b076aaedb8835b01128"
                }
            ],
            "sha": "db2978010b21c7bae75ccaa1838b66140ae7e980",
            "url": "https://api.github.com/repos/cython/cython/commits/db2978010b21c7bae75ccaa1838b66140ae7e980"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/6a018a70fd56976926bb83f20ec8cff741c6c853/comments",
            "commit": {
                "author": {
                    "date": "2021-07-13T19:54:07Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-07-13T20:08:53Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "message": "Multiple improvements to pure python in leanguage_basics documentation",
                "tree": {
                    "sha": "e7bd9338da054a11d35522a778338dd38dc43ef5",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/e7bd9338da054a11d35522a778338dd38dc43ef5"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/6a018a70fd56976926bb83f20ec8cff741c6c853",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "html_url": "https://github.com/cython/cython/commit/6a018a70fd56976926bb83f20ec8cff741c6c853",
            "node_id": "MDY6Q29tbWl0MzQ4MDA5NDQzOjZhMDE4YTcwZmQ1Njk3NjkyNmJiODNmMjBlYzhjZmY3NDFjNmM4NTM=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/db2978010b21c7bae75ccaa1838b66140ae7e980",
                    "sha": "db2978010b21c7bae75ccaa1838b66140ae7e980",
                    "url": "https://api.github.com/repos/cython/cython/commits/db2978010b21c7bae75ccaa1838b66140ae7e980"
                }
            ],
            "sha": "6a018a70fd56976926bb83f20ec8cff741c6c853",
            "url": "https://api.github.com/repos/cython/cython/commits/6a018a70fd56976926bb83f20ec8cff741c6c853"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7/comments",
            "commit": {
                "author": {
                    "date": "2021-07-13T20:19:31Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-07-13T20:19:31Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "message": "Added note about bug not allowing returning ``object`` from C function",
                "tree": {
                    "sha": "fbe934bda06cc1b93de3a97e0e1fdaa39f25e6d0",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/fbe934bda06cc1b93de3a97e0e1fdaa39f25e6d0"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "html_url": "https://github.com/cython/cython/commit/7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "node_id": "MDY6Q29tbWl0MzQ4MDA5NDQzOjdlMTJmZWY3ZWZkMjVlMzFlYzZlYzU3YmI0NWE3YzUzMzBmZmE3Zjc=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/6a018a70fd56976926bb83f20ec8cff741c6c853",
                    "sha": "6a018a70fd56976926bb83f20ec8cff741c6c853",
                    "url": "https://api.github.com/repos/cython/cython/commits/6a018a70fd56976926bb83f20ec8cff741c6c853"
                }
            ],
            "sha": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
            "url": "https://api.github.com/repos/cython/cython/commits/7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/c2ab4bbb5c6dfecbd047b31feb15e547369cafaf/comments",
            "commit": {
                "author": {
                    "date": "2021-07-14T07:23:44Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-07-14T07:23:44Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "message": "Improve alignment of the code",
                "tree": {
                    "sha": "eb6c1b076cd0095d2413e60202c8cdd4635ab314",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/eb6c1b076cd0095d2413e60202c8cdd4635ab314"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/c2ab4bbb5c6dfecbd047b31feb15e547369cafaf",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "html_url": "https://github.com/cython/cython/commit/c2ab4bbb5c6dfecbd047b31feb15e547369cafaf",
            "node_id": "MDY6Q29tbWl0MzQ4MDA5NDQzOmMyYWI0YmJiNWM2ZGZlY2JkMDQ3YjMxZmViMTVlNTQ3MzY5Y2FmYWY=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
                    "sha": "7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7",
                    "url": "https://api.github.com/repos/cython/cython/commits/7e12fef7efd25e31ec6ec57bb45a7c5330ffa7f7"
                }
            ],
            "sha": "c2ab4bbb5c6dfecbd047b31feb15e547369cafaf",
            "url": "https://api.github.com/repos/cython/cython/commits/c2ab4bbb5c6dfecbd047b31feb15e547369cafaf"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/ecef40b4853223af4e5f6c9a4874f2c90588b296/comments",
            "commit": {
                "author": {
                    "date": "2021-07-14T07:40:26Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-07-14T07:40:26Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "message": "Add missed @cfunc in language_basics.rst",
                "tree": {
                    "sha": "e479d6e246ea0c215f6498961cf310c7db1491e0",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/e479d6e246ea0c215f6498961cf310c7db1491e0"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/ecef40b4853223af4e5f6c9a4874f2c90588b296",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "html_url": "https://github.com/cython/cython/commit/ecef40b4853223af4e5f6c9a4874f2c90588b296",
            "node_id": "MDY6Q29tbWl0MzQ4MDA5NDQzOmVjZWY0MGI0ODUzMjIzYWY0ZTVmNmM5YTQ4NzRmMmM5MDU4OGIyOTY=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/c2ab4bbb5c6dfecbd047b31feb15e547369cafaf",
                    "sha": "c2ab4bbb5c6dfecbd047b31feb15e547369cafaf",
                    "url": "https://api.github.com/repos/cython/cython/commits/c2ab4bbb5c6dfecbd047b31feb15e547369cafaf"
                }
            ],
            "sha": "ecef40b4853223af4e5f6c9a4874f2c90588b296",
            "url": "https://api.github.com/repos/cython/cython/commits/ecef40b4853223af4e5f6c9a4874f2c90588b296"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/50fef63f86148f6a52ca2e4f77880bacff9cc2d4/comments",
            "commit": {
                "author": {
                    "date": "2021-07-14T08:45:05Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-07-14T08:45:05Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "message": "Remove tabs introduced by mistake",
                "tree": {
                    "sha": "2216460c30f17ea19821cff350243463c3fcdbcf",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/2216460c30f17ea19821cff350243463c3fcdbcf"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/50fef63f86148f6a52ca2e4f77880bacff9cc2d4",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "html_url": "https://github.com/cython/cython/commit/50fef63f86148f6a52ca2e4f77880bacff9cc2d4",
            "node_id": "MDY6Q29tbWl0MzQ4MDA5NDQzOjUwZmVmNjNmODYxNDhmNmE1MmNhMmU0Zjc3ODgwYmFjZmY5Y2MyZDQ=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/ecef40b4853223af4e5f6c9a4874f2c90588b296",
                    "sha": "ecef40b4853223af4e5f6c9a4874f2c90588b296",
                    "url": "https://api.github.com/repos/cython/cython/commits/ecef40b4853223af4e5f6c9a4874f2c90588b296"
                }
            ],
            "sha": "50fef63f86148f6a52ca2e4f77880bacff9cc2d4",
            "url": "https://api.github.com/repos/cython/cython/commits/50fef63f86148f6a52ca2e4f77880bacff9cc2d4"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/e297f8ba05aa596dc20a26191278a8b2a65d728a/comments",
            "commit": {
                "author": {
                    "date": "2021-07-14T09:02:01Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-07-14T09:02:01Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "message": "Move out commont text out of tabs",
                "tree": {
                    "sha": "a13ddff1b4ff75f26de3609e5c9da0267aeb1f02",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/a13ddff1b4ff75f26de3609e5c9da0267aeb1f02"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/e297f8ba05aa596dc20a26191278a8b2a65d728a",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "html_url": "https://github.com/cython/cython/commit/e297f8ba05aa596dc20a26191278a8b2a65d728a",
            "node_id": "MDY6Q29tbWl0MzQ4MDA5NDQzOmUyOTdmOGJhMDVhYTU5NmRjMjBhMjYxOTEyNzhhOGIyYTY1ZDcyOGE=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/50fef63f86148f6a52ca2e4f77880bacff9cc2d4",
                    "sha": "50fef63f86148f6a52ca2e4f77880bacff9cc2d4",
                    "url": "https://api.github.com/repos/cython/cython/commits/50fef63f86148f6a52ca2e4f77880bacff9cc2d4"
                }
            ],
            "sha": "e297f8ba05aa596dc20a26191278a8b2a65d728a",
            "url": "https://api.github.com/repos/cython/cython/commits/e297f8ba05aa596dc20a26191278a8b2a65d728a"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/8ce09d3f3699149454754c84bb5ff6c925e669d8/comments",
            "commit": {
                "author": {
                    "date": "2021-07-14T09:04:12Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-07-14T09:04:12Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "message": "Small typo",
                "tree": {
                    "sha": "31b95f2c5c2e141bb8e9d613d5a31a34929fedfa",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/31b95f2c5c2e141bb8e9d613d5a31a34929fedfa"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/8ce09d3f3699149454754c84bb5ff6c925e669d8",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "html_url": "https://github.com/cython/cython/commit/8ce09d3f3699149454754c84bb5ff6c925e669d8",
            "node_id": "MDY6Q29tbWl0MzQ4MDA5NDQzOjhjZTA5ZDNmMzY5OTE0OTQ1NDc1NGM4NGJiNWZmNmM5MjVlNjY5ZDg=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/e297f8ba05aa596dc20a26191278a8b2a65d728a",
                    "sha": "e297f8ba05aa596dc20a26191278a8b2a65d728a",
                    "url": "https://api.github.com/repos/cython/cython/commits/e297f8ba05aa596dc20a26191278a8b2a65d728a"
                }
            ],
            "sha": "8ce09d3f3699149454754c84bb5ff6c925e669d8",
            "url": "https://api.github.com/repos/cython/cython/commits/8ce09d3f3699149454754c84bb5ff6c925e669d8"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/db174e70e9b705f3d66425371220969b6de60550/comments",
            "commit": {
                "author": {
                    "date": "2021-07-14T09:14:27Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-07-14T09:14:27Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "message": "Use bullets for variable declaration variants",
                "tree": {
                    "sha": "d8802a5b4c30a4b05d5f00a4abcb70e68b2042c5",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/d8802a5b4c30a4b05d5f00a4abcb70e68b2042c5"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/db174e70e9b705f3d66425371220969b6de60550",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "html_url": "https://github.com/cython/cython/commit/db174e70e9b705f3d66425371220969b6de60550",
            "node_id": "MDY6Q29tbWl0MzQ4MDA5NDQzOmRiMTc0ZTcwZTliNzA1ZjNkNjY0MjUzNzEyMjA5NjliNmRlNjA1NTA=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/8ce09d3f3699149454754c84bb5ff6c925e669d8",
                    "sha": "8ce09d3f3699149454754c84bb5ff6c925e669d8",
                    "url": "https://api.github.com/repos/cython/cython/commits/8ce09d3f3699149454754c84bb5ff6c925e669d8"
                }
            ],
            "sha": "db174e70e9b705f3d66425371220969b6de60550",
            "url": "https://api.github.com/repos/cython/cython/commits/db174e70e9b705f3d66425371220969b6de60550"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/f555ea1e81834d788d28d864024dbdf15c6417ee/comments",
            "commit": {
                "author": {
                    "date": "2021-07-14T14:36:53Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "scoder"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-07-14T14:36:53Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Make 'note' lower case.",
                "tree": {
                    "sha": "1e0564720c44bea2fdc00e4d01a47aa48468600d",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/1e0564720c44bea2fdc00e4d01a47aa48468600d"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/f555ea1e81834d788d28d864024dbdf15c6417ee",
                "verification": {
                    "payload": "tree 1e0564720c44bea2fdc00e4d01a47aa48468600d\nparent db174e70e9b705f3d66425371220969b6de60550\nauthor scoder <stefan_ml@behnel.de> 1626273413 +0200\ncommitter GitHub <noreply@github.com> 1626273413 +0200\n\nMake 'note' lower case.",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg7vaFCRBK7hj4Ov3rIwAAYyMIAKbJRpSlJ+XQySC7pRsbAnD5\nqWG4NSxt5GhTH6SOUAMVBdd11pVMcqj1EAxkwkzAKeGPIXlw5Whrg7z/F8Jv11SZ\nP6HIUswAXEZZd+IRRU514VGCvZd/F8G74WzrqrQgHOc2dk4fpIOmaNWgYzw+pJvH\nRDjSdGxf6sciQO9rtXo3jes/NHwCI5/Ul+N8xszVPTzH6loIF5vdY9OwiyWQkeLW\nErwCb3+MeCpt5dxEchwsdFt5vlaxp+0o1neoCL/Q5fS6UihGIGXOCS9DOrPLWkSR\nFUq/tD1TlJkQWshaxQ4HdxpHo7d5Fexr/FWoRoTIndQuWyKDr1nplivXgN33lOA=\n=ivo6\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/f555ea1e81834d788d28d864024dbdf15c6417ee",
            "node_id": "MDY6Q29tbWl0MzQ4MDA5NDQzOmY1NTVlYTFlODE4MzRkNzg4ZDI4ZDg2NDAyNGRiZGYxNWM2NDE3ZWU=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/db174e70e9b705f3d66425371220969b6de60550",
                    "sha": "db174e70e9b705f3d66425371220969b6de60550",
                    "url": "https://api.github.com/repos/cython/cython/commits/db174e70e9b705f3d66425371220969b6de60550"
                }
            ],
            "sha": "f555ea1e81834d788d28d864024dbdf15c6417ee",
            "url": "https://api.github.com/repos/cython/cython/commits/f555ea1e81834d788d28d864024dbdf15c6417ee"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/b6f028827acb10f1fc56bbd046d48a4b073259d6/comments",
            "commit": {
                "author": {
                    "date": "2021-07-14T15:29:17Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "scoder"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-07-14T15:29:17Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Fix several grammar issues.",
                "tree": {
                    "sha": "65e269cbd643ace459980c7b209cb79094306ab4",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/65e269cbd643ace459980c7b209cb79094306ab4"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/b6f028827acb10f1fc56bbd046d48a4b073259d6",
                "verification": {
                    "payload": "tree 65e269cbd643ace459980c7b209cb79094306ab4\nparent f555ea1e81834d788d28d864024dbdf15c6417ee\nauthor scoder <stefan_ml@behnel.de> 1626276557 +0200\ncommitter GitHub <noreply@github.com> 1626276557 +0200\n\nFix several grammar issues.",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg7wLNCRBK7hj4Ov3rIwAApu4IAFLoU3hsKwr9mqO9WQZrAkIw\nxeFN4kRAQrcuEnjJEgA+XaqXyt/DZJ9VfdXOK7vj814fc6uPmToJswzh/m2br+Yh\nnZzyORuByETQmMLDO9y1nGMY7gXNzzjJ7pEkOfFY0NIa65L+YQuSkNYfh2ddtf3V\nj/1AcbWQCipcX4GrqEr3t708nYKglDk3XDHIQQrC4n5fAuZHOgRZU6ZrnjIHWvPy\n9fWZGi8JOSzr4sO9qR+pfZ9Me47pKB/yUfGfz3DJj92yLovnJNmFaUEypocbqtSF\nT0Qc9TMzTTM1s59QGJ8GEKQEB1Hlm2pxx9OcInlxDWXTZ7m5VQVoc2p5qmwd+rs=\n=xN+q\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/b6f028827acb10f1fc56bbd046d48a4b073259d6",
            "node_id": "MDY6Q29tbWl0MzQ4MDA5NDQzOmI2ZjAyODgyN2FjYjEwZjFmYzU2YmJkMDQ2ZDQ4YTRiMDczMjU5ZDY=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/f555ea1e81834d788d28d864024dbdf15c6417ee",
                    "sha": "f555ea1e81834d788d28d864024dbdf15c6417ee",
                    "url": "https://api.github.com/repos/cython/cython/commits/f555ea1e81834d788d28d864024dbdf15c6417ee"
                }
            ],
            "sha": "b6f028827acb10f1fc56bbd046d48a4b073259d6",
            "url": "https://api.github.com/repos/cython/cython/commits/b6f028827acb10f1fc56bbd046d48a4b073259d6"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/5c03058b64172bc3f77168e2df3b2b955f09968d/comments",
            "commit": {
                "author": {
                    "date": "2021-07-14T18:45:11Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "scoder"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-07-14T18:45:11Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Fix more wording and grammar issues.",
                "tree": {
                    "sha": "f9dc206746a8704008e4ecc5be42117b6e0d57de",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/f9dc206746a8704008e4ecc5be42117b6e0d57de"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/5c03058b64172bc3f77168e2df3b2b955f09968d",
                "verification": {
                    "payload": "tree f9dc206746a8704008e4ecc5be42117b6e0d57de\nparent b6f028827acb10f1fc56bbd046d48a4b073259d6\nauthor scoder <stefan_ml@behnel.de> 1626288311 +0200\ncommitter GitHub <noreply@github.com> 1626288311 +0200\n\nFix more wording and grammar issues.",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg7zC4CRBK7hj4Ov3rIwAAfiUIALC5nRKx8pIa13BM8AoMih5B\n6T8SUJ9PdUQFOH4Zp1dwlSvh5V6s0BfwKSdKjLMsAtFNVcXwUymq+j5fBS5qUB+w\nw60hMtZxjw0lnjvrtTjd0t3gIPwTNS6s5XodIkiAzKxsjlBURYeMvAOmb711B3NR\nElrHUGfuMLnBLeEVmF8hcX9/Z0rXNG61jbNs1w2pv4hpKKrw4YIHbG6UaqadhEOo\nMJ8EXNhxXmKacpqB8TAP90j0FlWZHYUqREwAB7qP6otGVqJ5MFZAjlErv/uRZHAR\nwWoAWNJhkBv6/mfKfuAmx/lplLbFNFRxjlbj3/+3xzlISxb/jmIaUxaX523pxBA=\n=hiZW\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/5c03058b64172bc3f77168e2df3b2b955f09968d",
            "node_id": "MDY6Q29tbWl0MzQ4MDA5NDQzOjVjMDMwNThiNjQxNzJiYzNmNzcxNjhlMmRmM2IyYjk1NWYwOTk2OGQ=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/b6f028827acb10f1fc56bbd046d48a4b073259d6",
                    "sha": "b6f028827acb10f1fc56bbd046d48a4b073259d6",
                    "url": "https://api.github.com/repos/cython/cython/commits/b6f028827acb10f1fc56bbd046d48a4b073259d6"
                }
            ],
            "sha": "5c03058b64172bc3f77168e2df3b2b955f09968d",
            "url": "https://api.github.com/repos/cython/cython/commits/5c03058b64172bc3f77168e2df3b2b955f09968d"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/09223505690dfb48f1ed900ee9226eceb4f12a68/comments",
            "commit": {
                "author": {
                    "date": "2021-07-14T18:57:43Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "scoder"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-07-14T18:57:43Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Clarify that object attributes can also have type annotations.",
                "tree": {
                    "sha": "4009f3349b5f244a6ed7014c1af85bfa2417967a",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/4009f3349b5f244a6ed7014c1af85bfa2417967a"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/09223505690dfb48f1ed900ee9226eceb4f12a68",
                "verification": {
                    "payload": "tree 4009f3349b5f244a6ed7014c1af85bfa2417967a\nparent 5c03058b64172bc3f77168e2df3b2b955f09968d\nauthor scoder <stefan_ml@behnel.de> 1626289063 +0200\ncommitter GitHub <noreply@github.com> 1626289063 +0200\n\nClarify that object attributes can also have type annotations.",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg7zOnCRBK7hj4Ov3rIwAANV8IAATuzii3f3TdZb+qLNIxVrxO\nxgLWPCz5oROdY3bPTLycpfs84dM2oaFHZKI+LywpCOiguQ+QV63yoXKE8JO3G3nf\nLfzUUHvLPLSZVFkvJ5x0iJJDnYinYLjRk4h5s4OYmPzluXc9Xj6NwsDsaaa5fmJD\nr9/D+GTJxALTQqH9fA3w3XtwtsCMhDZX8LPcyvsff1ep1CxeKf8pEY2ntO/G2MZB\n6grKUm+wJ7lmLHgI+/VDnrvo3RIO4R4BhAh8KwoftJ1AMhd8RheMnXjUpyhneD2G\npsGriGWhkLYzWguwAxQXdh7a1+B6ETpZmyBfPBsyYjrrGJTG7SY0VzxDKc9YyNQ=\n=zmlN\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/09223505690dfb48f1ed900ee9226eceb4f12a68",
            "node_id": "MDY6Q29tbWl0MzQ4MDA5NDQzOjA5MjIzNTA1NjkwZGZiNDhmMWVkOTAwZWU5MjI2ZWNlYjRmMTJhNjg=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/5c03058b64172bc3f77168e2df3b2b955f09968d",
                    "sha": "5c03058b64172bc3f77168e2df3b2b955f09968d",
                    "url": "https://api.github.com/repos/cython/cython/commits/5c03058b64172bc3f77168e2df3b2b955f09968d"
                }
            ],
            "sha": "09223505690dfb48f1ed900ee9226eceb4f12a68",
            "url": "https://api.github.com/repos/cython/cython/commits/09223505690dfb48f1ed900ee9226eceb4f12a68"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/4f51831309312424af9d2b35c2424c38b532e773/comments",
            "commit": {
                "author": {
                    "date": "2021-07-15T05:24:47Z",
                    "email": "matusvalo@users.noreply.github.com",
                    "name": "Matus Valo"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-07-15T05:24:47Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Minor grammar fix in docs/src/userguide/language_basics.rst\n\nCo-authored-by: h-vetinari <h.vetinari@gmx.com>",
                "tree": {
                    "sha": "3bf92312d33010953f7a40af96fde71ef7b5da7f",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/3bf92312d33010953f7a40af96fde71ef7b5da7f"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/4f51831309312424af9d2b35c2424c38b532e773",
                "verification": {
                    "payload": "tree 3bf92312d33010953f7a40af96fde71ef7b5da7f\nparent 09223505690dfb48f1ed900ee9226eceb4f12a68\nauthor Matus Valo <matusvalo@users.noreply.github.com> 1626326687 +0200\ncommitter GitHub <noreply@github.com> 1626326687 +0200\n\nMinor grammar fix in docs/src/userguide/language_basics.rst\n\nCo-authored-by: h-vetinari <h.vetinari@gmx.com>",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg78afCRBK7hj4Ov3rIwAAS3oIAKYEE+w6+7fXpO6lspStxeQ7\naW2YEneoYia/DTalGYv4vbY8QJDrTi4hcmSm2g4hUz0WnBBjiCtNgSMciCkZnb0t\nGQDPKu5Ix7RklYf/h7ahG21yAnZqVLJQhDCAhSRts8kMtLQmJ9i6MHUAEfEC0vvw\nnchIONM+m9fkoE4gONNx6ygCUitr7luUGCJACRhqrYhcHKLTgesH4CLyxMHGKqLm\nk6I2xME0CkuMB/7VZ5aLseEO0dTbVj8XZtn21gKPR3i/sIWCiflWkUlVuBr9ByoQ\nKGoX3plZtlAcgcTRXU4P032lfzVfhyLwBs2dU9hIsTgAx44nNnrmXaBQhNtOiCU=\n=Q5ao\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/4f51831309312424af9d2b35c2424c38b532e773",
            "node_id": "MDY6Q29tbWl0MzQ4MDA5NDQzOjRmNTE4MzEzMDkzMTI0MjRhZjlkMmIzNWMyNDI0YzM4YjUzMmU3NzM=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/09223505690dfb48f1ed900ee9226eceb4f12a68",
                    "sha": "09223505690dfb48f1ed900ee9226eceb4f12a68",
                    "url": "https://api.github.com/repos/cython/cython/commits/09223505690dfb48f1ed900ee9226eceb4f12a68"
                }
            ],
            "sha": "4f51831309312424af9d2b35c2424c38b532e773",
            "url": "https://api.github.com/repos/cython/cython/commits/4f51831309312424af9d2b35c2424c38b532e773"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/f4f3fa7f192f841a89d7e7975e202380671b26c4/comments",
            "commit": {
                "author": {
                    "date": "2021-07-15T05:28:13Z",
                    "email": "matusvalo@users.noreply.github.com",
                    "name": "Matus Valo"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-07-15T05:28:13Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Minor grammar fix in docs/src/userguide/language_basics.rst\n\nCo-authored-by: h-vetinari <h.vetinari@gmx.com>",
                "tree": {
                    "sha": "35ecf988fe3e8e417deabef6b8647d0c17d472d4",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/35ecf988fe3e8e417deabef6b8647d0c17d472d4"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/f4f3fa7f192f841a89d7e7975e202380671b26c4",
                "verification": {
                    "payload": "tree 35ecf988fe3e8e417deabef6b8647d0c17d472d4\nparent 4f51831309312424af9d2b35c2424c38b532e773\nauthor Matus Valo <matusvalo@users.noreply.github.com> 1626326893 +0200\ncommitter GitHub <noreply@github.com> 1626326893 +0200\n\nMinor grammar fix in docs/src/userguide/language_basics.rst\n\nCo-authored-by: h-vetinari <h.vetinari@gmx.com>",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg78dtCRBK7hj4Ov3rIwAAqyAIAAJet+g7bPU+waMygEBAOK0h\npl4VPG/KzaL8n5KQYxIEYgsGyC7Lsd6Wf5IZZ41grLiWCqFD9Hh/3HMxO1Q1OxCU\nbTQLKllFuoQJN4xj7u3Wuj9o/9ryaZvY2JeErASmnLKJNnaH5yZqKYdKbXs6yI/X\na5F2hTuYdkJKHKq0Iw9G9IOUvBnrMml/yrQqW9trcvl7eiRvfWoHDkQJlnxMxXT7\n/HYYrroY8VAPehWp9K1MNv8LOll31IHdQH4I2ZKpUsK643XCO0A4FUM33jqqhNoV\nNk5zhyXvL5BTKQVCKzhOh2s9opkqI4aFLMzpcCR7XumEAxlKQeyPpQiz0J9j9Ng=\n=JkIY\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/f4f3fa7f192f841a89d7e7975e202380671b26c4",
            "node_id": "MDY6Q29tbWl0MzQ4MDA5NDQzOmY0ZjNmYTdmMTkyZjg0MWE4OWQ3ZTc5NzVlMjAyMzgwNjcxYjI2YzQ=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/4f51831309312424af9d2b35c2424c38b532e773",
                    "sha": "4f51831309312424af9d2b35c2424c38b532e773",
                    "url": "https://api.github.com/repos/cython/cython/commits/4f51831309312424af9d2b35c2424c38b532e773"
                }
            ],
            "sha": "f4f3fa7f192f841a89d7e7975e202380671b26c4",
            "url": "https://api.github.com/repos/cython/cython/commits/f4f3fa7f192f841a89d7e7975e202380671b26c4"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/d173c1015cf68db1c4edec35684c59617d473272/comments",
            "commit": {
                "author": {
                    "date": "2021-07-15T05:29:29Z",
                    "email": "matusvalo@users.noreply.github.com",
                    "name": "Matus Valo"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-07-15T05:29:29Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Minor grammar fix in docs/src/userguide/language_basics.rst\n\nCo-authored-by: h-vetinari <h.vetinari@gmx.com>",
                "tree": {
                    "sha": "f3f33d0f8500b79c69cf50a62d9491da143d302d",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/f3f33d0f8500b79c69cf50a62d9491da143d302d"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/d173c1015cf68db1c4edec35684c59617d473272",
                "verification": {
                    "payload": "tree f3f33d0f8500b79c69cf50a62d9491da143d302d\nparent f4f3fa7f192f841a89d7e7975e202380671b26c4\nauthor Matus Valo <matusvalo@users.noreply.github.com> 1626326969 +0200\ncommitter GitHub <noreply@github.com> 1626326969 +0200\n\nMinor grammar fix in docs/src/userguide/language_basics.rst\n\nCo-authored-by: h-vetinari <h.vetinari@gmx.com>",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg78e5CRBK7hj4Ov3rIwAAb9wIADFsY0TC+FPHrtHzdS5jaPcZ\nc+9kGIYWljSRUu6KnZyX9FndAXQxPT0vtRgCpR8VwZU9dqf7210yiD9fqaNtDgSv\nsNmy0BuLA+inaIHcXoJcV4cQK9InJkCR5DeuqmGHl/oIjHkviG39vWDrqpURgZEJ\n6WqrvHJyWcFTY2N683AUciDLrfv6mPF6mPzEo4HlWX2qpgJUMc8lCapCUAtXkGhH\n1bfpE2PXCi9XBxMy5vbw+kXrI/11eQTYGrn9CLJ/RP+kcN2d7RPGOCDn5hFLRq/m\nDDixhtAT00szDUt4VvXofbyQkWV9NgVtIwefPKIAhuIEO/mbPNOPcJOPALs0KoI=\n=DM60\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/d173c1015cf68db1c4edec35684c59617d473272",
            "node_id": "MDY6Q29tbWl0MzQ4MDA5NDQzOmQxNzNjMTAxNWNmNjhkYjFjNGVkZWMzNTY4NGM1OTYxN2Q0NzMyNzI=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/f4f3fa7f192f841a89d7e7975e202380671b26c4",
                    "sha": "f4f3fa7f192f841a89d7e7975e202380671b26c4",
                    "url": "https://api.github.com/repos/cython/cython/commits/f4f3fa7f192f841a89d7e7975e202380671b26c4"
                }
            ],
            "sha": "d173c1015cf68db1c4edec35684c59617d473272",
            "url": "https://api.github.com/repos/cython/cython/commits/d173c1015cf68db1c4edec35684c59617d473272"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/e582b4d63edec94516998b3905da019bb08210f4/comments",
            "commit": {
                "author": {
                    "date": "2021-07-15T05:29:53Z",
                    "email": "matusvalo@users.noreply.github.com",
                    "name": "Matus Valo"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-07-15T05:29:53Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Minor grammar fix in docs/src/userguide/language_basics.rst\n\nCo-authored-by: h-vetinari <h.vetinari@gmx.com>",
                "tree": {
                    "sha": "8ebdd2a81715291f4a613bb1941e721dc132e85c",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/8ebdd2a81715291f4a613bb1941e721dc132e85c"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/e582b4d63edec94516998b3905da019bb08210f4",
                "verification": {
                    "payload": "tree 8ebdd2a81715291f4a613bb1941e721dc132e85c\nparent d173c1015cf68db1c4edec35684c59617d473272\nauthor Matus Valo <matusvalo@users.noreply.github.com> 1626326993 +0200\ncommitter GitHub <noreply@github.com> 1626326993 +0200\n\nMinor grammar fix in docs/src/userguide/language_basics.rst\n\nCo-authored-by: h-vetinari <h.vetinari@gmx.com>",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg78fRCRBK7hj4Ov3rIwAA4wMIAB7w/P0K5TLn6MnMgl24xLJ0\nTqhmlcfirg30/H0KruA4iRVWX3thGTD2jtQUSIRj7TY81GXoJFe715DLLfUb4Ei3\nnz/VVsn5pvEXbyo5E7vqzRU/8/yq8vgFPYVZsU/T1ym1kJw3wHl7tkeHXlCEJ+h2\nHLfnDF3SCaHp60gGvjuNfQU+URS6u8uit90ytPvadLA5RnoVm5n00IvVQUTjqmB/\nC6zWLga6FeEYebprdtXhbg5rVPAMj+ZzRBgx3EMM9J7FGsw7XQrdolDS0ojQleVO\nN0EBLc0U6Y4a59zuf8wIwd67fb2QP4LFKJkF2qFdxthpJhP9fSMEsatOq6HMdVQ=\n=MXBe\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/e582b4d63edec94516998b3905da019bb08210f4",
            "node_id": "MDY6Q29tbWl0MzQ4MDA5NDQzOmU1ODJiNGQ2M2VkZWM5NDUxNjk5OGIzOTA1ZGEwMTliYjA4MjEwZjQ=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/d173c1015cf68db1c4edec35684c59617d473272",
                    "sha": "d173c1015cf68db1c4edec35684c59617d473272",
                    "url": "https://api.github.com/repos/cython/cython/commits/d173c1015cf68db1c4edec35684c59617d473272"
                }
            ],
            "sha": "e582b4d63edec94516998b3905da019bb08210f4",
            "url": "https://api.github.com/repos/cython/cython/commits/e582b4d63edec94516998b3905da019bb08210f4"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/85b4bf24a34b6fecf1e9081fb0006972ff49c9c4/comments",
            "commit": {
                "author": {
                    "date": "2021-07-18T09:02:06Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "scoder"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-07-18T09:02:06Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Apply suggestions from code review\n\nCo-authored-by: 0dminnimda <0dminnimda@gmail.com>\nCo-authored-by: h-vetinari <h.vetinari@gmx.com>",
                "tree": {
                    "sha": "45832b1907fd0daa5dd7b0ea67755e755275e186",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/45832b1907fd0daa5dd7b0ea67755e755275e186"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/85b4bf24a34b6fecf1e9081fb0006972ff49c9c4",
                "verification": {
                    "payload": "tree 45832b1907fd0daa5dd7b0ea67755e755275e186\nparent e582b4d63edec94516998b3905da019bb08210f4\nauthor scoder <stefan_ml@behnel.de> 1626598926 +0200\ncommitter GitHub <noreply@github.com> 1626598926 +0200\n\nApply suggestions from code review\n\nCo-authored-by: 0dminnimda <0dminnimda@gmail.com>\nCo-authored-by: h-vetinari <h.vetinari@gmx.com>",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg8+4OCRBK7hj4Ov3rIwAANaYIAErJoKOuER2yu2EpC+IgBNiV\nKlIztEoaVeaF14EViCWqgBPl9EPtEK1BZ3GRjyeOjidgDsAsekjNk4l27pO1dlow\nIKiDzQr75tvKvFie7gHsRiykdUbWibqJoxfP8p5hmVnX6HQtIFP1lJjJeulEVSpw\nlfhnkg1Cw381o2Z/OTR4ryfOvoqRXhHp+WNG3RscctGB59/U2pPVA670Tt61p6lS\nP0aQe8i+GXDkuugq3lE/r/o8yj3HdrQAJur6Ty113vAcGO0azbw5xqDobtqjOaa5\nLUbl90a0wY2DxSXlahFQ11UwQkSwacHLcmttlXri1Zlh0o9JJRPzKKPneODUSlU=\n=ZpPj\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/85b4bf24a34b6fecf1e9081fb0006972ff49c9c4",
            "node_id": "MDY6Q29tbWl0MzQ4MDA5NDQzOjg1YjRiZjI0YTM0YjZmZWNmMWU5MDgxZmIwMDA2OTcyZmY0OWM5YzQ=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/e582b4d63edec94516998b3905da019bb08210f4",
                    "sha": "e582b4d63edec94516998b3905da019bb08210f4",
                    "url": "https://api.github.com/repos/cython/cython/commits/e582b4d63edec94516998b3905da019bb08210f4"
                }
            ],
            "sha": "85b4bf24a34b6fecf1e9081fb0006972ff49c9c4",
            "url": "https://api.github.com/repos/cython/cython/commits/85b4bf24a34b6fecf1e9081fb0006972ff49c9c4"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/f1dcc69a612871f700684d9598955ebeecb9274c/comments",
            "commit": {
                "author": {
                    "date": "2021-07-18T19:59:25Z",
                    "email": "matusvalo@users.noreply.github.com",
                    "name": "Matus Valo"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-07-18T19:59:25Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Lowercase .. Note::\n\nCo-authored-by: 0dminnimda <0dminnimda@gmail.com>",
                "tree": {
                    "sha": "83ca212c4981ba7a865d3db2fd974afedf4e8b5d",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/83ca212c4981ba7a865d3db2fd974afedf4e8b5d"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/f1dcc69a612871f700684d9598955ebeecb9274c",
                "verification": {
                    "payload": "tree 83ca212c4981ba7a865d3db2fd974afedf4e8b5d\nparent 85b4bf24a34b6fecf1e9081fb0006972ff49c9c4\nauthor Matus Valo <matusvalo@users.noreply.github.com> 1626638365 +0200\ncommitter GitHub <noreply@github.com> 1626638365 +0200\n\nLowercase .. Note::\n\nCo-authored-by: 0dminnimda <0dminnimda@gmail.com>",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg9IgdCRBK7hj4Ov3rIwAAPWIIABc2O4OAjBNrtSTbtztTbm86\nm+Wcfmo6Eaxtn0K2xAXEhk7qvpbbpi1RnzNXHiagPuyT3EA0OeXRobB+GysOHXfO\nHEJgvrPsluHJ04vC2gKGrxjS9B5MSOQF3An8p2T3A3t82BbHZE7kascOZl9PmutL\ncFnVvw3HBeiBP2HDocMJyQdclyzwfw8cr2rDYt9W2nZtqB/T9vzYMSOQSqWIrLgY\nG8eJtr+mbHgo1P/tsTlor57ZDax88jYguJ4Z7dvYpDNWlz3jtCxJO9A0h32EE+4R\nhcWBhbOgVavKWdI1nq5eYFdFvk/tkuYXM03THwvL4KsXCghbbmHv36Kf/uHKZEM=\n=auj1\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/f1dcc69a612871f700684d9598955ebeecb9274c",
            "node_id": "MDY6Q29tbWl0MzQ4MDA5NDQzOmYxZGNjNjlhNjEyODcxZjcwMDY4NGQ5NTk4OTU1ZWJlZWNiOTI3NGM=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/85b4bf24a34b6fecf1e9081fb0006972ff49c9c4",
                    "sha": "85b4bf24a34b6fecf1e9081fb0006972ff49c9c4",
                    "url": "https://api.github.com/repos/cython/cython/commits/85b4bf24a34b6fecf1e9081fb0006972ff49c9c4"
                }
            ],
            "sha": "f1dcc69a612871f700684d9598955ebeecb9274c",
            "url": "https://api.github.com/repos/cython/cython/commits/f1dcc69a612871f700684d9598955ebeecb9274c"
        }
    ],
    "commits_url": "https://api.github.com/repos/cython/cython/pulls/4242/commits",
    "created_at": "2021-06-23T09:17:30Z",
    "diff_url": "https://github.com/cython/cython/pull/4242.diff",
    "draft": false,
    "head": {
        "label": "matusvalo:language_basics_pure_python",
        "ref": "language_basics_pure_python",
        "repo": {
            "archive_url": "https://api.github.com/repos/matusvalo/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/matusvalo/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/matusvalo/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/matusvalo/cython/branches{/branch}",
            "clone_url": "https://github.com/matusvalo/cython.git",
            "collaborators_url": "https://api.github.com/repos/matusvalo/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/matusvalo/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/matusvalo/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/matusvalo/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/matusvalo/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/matusvalo/cython/contributors",
            "created_at": "2021-03-15T14:49:34Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/matusvalo/cython/deployments",
            "description": "The most widely used Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/matusvalo/cython/downloads",
            "events_url": "https://api.github.com/repos/matusvalo/cython/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/matusvalo/cython/forks",
            "full_name": "matusvalo/cython",
            "git_commits_url": "https://api.github.com/repos/matusvalo/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/matusvalo/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/matusvalo/cython/git/tags{/sha}",
            "git_url": "git://github.com/matusvalo/cython.git",
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://cython.org",
            "hooks_url": "https://api.github.com/repos/matusvalo/cython/hooks",
            "html_url": "https://github.com/matusvalo/cython",
            "id": 348009443,
            "issue_comment_url": "https://api.github.com/repos/matusvalo/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/matusvalo/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/matusvalo/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/matusvalo/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/matusvalo/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/matusvalo/cython/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/matusvalo/cython/merges",
            "milestones_url": "https://api.github.com/repos/matusvalo/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkzNDgwMDk0NDM=",
            "notifications_url": "https://api.github.com/repos/matusvalo/cython/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/matusvalo/cython/pulls{/number}",
            "pushed_at": "2021-07-23T07:59:28Z",
            "releases_url": "https://api.github.com/repos/matusvalo/cython/releases{/id}",
            "size": 62989,
            "ssh_url": "git@github.com:matusvalo/cython.git",
            "stargazers_count": 2,
            "stargazers_url": "https://api.github.com/repos/matusvalo/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/matusvalo/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/matusvalo/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/matusvalo/cython/subscription",
            "svn_url": "https://github.com/matusvalo/cython",
            "tags_url": "https://api.github.com/repos/matusvalo/cython/tags",
            "teams_url": "https://api.github.com/repos/matusvalo/cython/teams",
            "trees_url": "https://api.github.com/repos/matusvalo/cython/git/trees{/sha}",
            "updated_at": "2021-07-21T07:04:34Z",
            "url": "https://api.github.com/repos/matusvalo/cython",
            "watchers": 2,
            "watchers_count": 2
        },
        "sha": "f1dcc69a612871f700684d9598955ebeecb9274c",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
            "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
            "followers_url": "https://api.github.com/users/matusvalo/followers",
            "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
            "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/matusvalo",
            "id": 827060,
            "login": "matusvalo",
            "node_id": "MDQ6VXNlcjgyNzA2MA==",
            "organizations_url": "https://api.github.com/users/matusvalo/orgs",
            "received_events_url": "https://api.github.com/users/matusvalo/received_events",
            "repos_url": "https://api.github.com/users/matusvalo/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/matusvalo"
        }
    },
    "html_url": "https://github.com/cython/cython/pull/4242",
    "id": 676104138,
    "issue_url": "https://api.github.com/repos/cython/cython/issues/4242",
    "labels": [
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425561345,
            "name": "Documentation",
            "node_id": "MDU6TGFiZWw0MjU1NjEzNDU=",
            "url": "https://api.github.com/repos/cython/cython/labels/Documentation"
        }
    ],
    "locked": false,
    "merge_commit_sha": "afc8a2c2f54624b1739c85fca6c8d9322881b05b",
    "merged_at": "2021-07-20T20:51:57Z",
    "milestone": {
        "closed_at": null,
        "closed_issues": 433,
        "created_at": "2018-08-18T06:33:08Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
            "events_url": "https://api.github.com/users/scoder/events{/privacy}",
            "followers_url": "https://api.github.com/users/scoder/followers",
            "following_url": "https://api.github.com/users/scoder/following{/other_user}",
            "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/scoder",
            "id": 491659,
            "login": "scoder",
            "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
            "organizations_url": "https://api.github.com/users/scoder/orgs",
            "received_events_url": "https://api.github.com/users/scoder/received_events",
            "repos_url": "https://api.github.com/users/scoder/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/scoder"
        },
        "description": "Goals:\r\n– New version scheme: 3.x instead of 0.x.\r\n– Change default `language_level` from `2` to `3`.\r\n– Change default for `binding` directive from `False` to `True`.\r\n– Fix some Python compatibility issues (if possible, allowing for breaking changes).\r\n",
        "due_on": null,
        "html_url": "https://github.com/cython/cython/milestone/58",
        "id": 3580387,
        "labels_url": "https://api.github.com/repos/cython/cython/milestones/58/labels",
        "node_id": "MDk6TWlsZXN0b25lMzU4MDM4Nw==",
        "number": 58,
        "open_issues": 28,
        "state": "open",
        "title": "3.0",
        "updated_at": "2021-07-22T21:01:56Z",
        "url": "https://api.github.com/repos/cython/cython/milestones/58"
    },
    "node_id": "MDExOlB1bGxSZXF1ZXN0Njc2MTA0MTM4",
    "number": 4242,
    "patch_url": "https://github.com/cython/cython/pull/4242.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/cython/cython/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/cython/cython/pulls/4242/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/cython/cython/statuses/f1dcc69a612871f700684d9598955ebeecb9274c",
    "title": "Introduce pure python mode in language basics documentation",
    "updated_at": "2021-07-22T20:08:20Z",
    "url": "https://api.github.com/repos/cython/cython/pulls/4242",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
        "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
        "followers_url": "https://api.github.com/users/matusvalo/followers",
        "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
        "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/matusvalo",
        "id": 827060,
        "login": "matusvalo",
        "node_id": "MDQ6VXNlcjgyNzA2MA==",
        "organizations_url": "https://api.github.com/users/matusvalo/orgs",
        "received_events_url": "https://api.github.com/users/matusvalo/received_events",
        "repos_url": "https://api.github.com/users/matusvalo/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/matusvalo"
    }
}