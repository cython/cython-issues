{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/cython/cython/issues/7149/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/cython/cython/pulls/7149/commits"
        },
        "html": {
            "href": "https://github.com/cython/cython/pull/7149"
        },
        "issue": {
            "href": "https://api.github.com/repos/cython/cython/issues/7149"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/cython/cython/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/cython/cython/pulls/7149/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/cython/cython/pulls/7149"
        },
        "statuses": {
            "href": "https://api.github.com/repos/cython/cython/statuses/8832941781c34392c44c4453d0db5bbf9374a8bb"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "cython:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/cython/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/cython/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/cython/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/cython/cython/branches{/branch}",
            "clone_url": "https://github.com/cython/cython.git",
            "collaborators_url": "https://api.github.com/repos/cython/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/cython/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/cython/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/cython/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/cython/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/cython/cython/contributors",
            "created_at": "2010-11-21T07:44:20Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/cython/cython/deployments",
            "description": "The most widely used Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/cython/cython/downloads",
            "events_url": "https://api.github.com/repos/cython/cython/events",
            "fork": false,
            "forks": 1567,
            "forks_count": 1567,
            "forks_url": "https://api.github.com/repos/cython/cython/forks",
            "full_name": "cython/cython",
            "git_commits_url": "https://api.github.com/repos/cython/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/cython/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/cython/cython/git/tags{/sha}",
            "git_url": "git://github.com/cython/cython.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": false,
            "has_wiki": true,
            "homepage": "https://cython.org",
            "hooks_url": "https://api.github.com/repos/cython/cython/hooks",
            "html_url": "https://github.com/cython/cython",
            "id": 1099265,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/cython/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/cython/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/cython/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/cython/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/cython/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/cython/cython/languages",
            "license": {
                "key": "apache-2.0",
                "name": "Apache License 2.0",
                "node_id": "MDc6TGljZW5zZTI=",
                "spdx_id": "Apache-2.0",
                "url": "https://api.github.com/licenses/apache-2.0"
            },
            "merges_url": "https://api.github.com/repos/cython/cython/merges",
            "milestones_url": "https://api.github.com/repos/cython/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkxMDk5MjY1",
            "notifications_url": "https://api.github.com/repos/cython/cython/notifications{?since,all,participating}",
            "open_issues": 1470,
            "open_issues_count": 1470,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/486082?v=4",
                "events_url": "https://api.github.com/users/cython/events{/privacy}",
                "followers_url": "https://api.github.com/users/cython/followers",
                "following_url": "https://api.github.com/users/cython/following{/other_user}",
                "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/cython",
                "id": 486082,
                "login": "cython",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
                "organizations_url": "https://api.github.com/users/cython/orgs",
                "received_events_url": "https://api.github.com/users/cython/received_events",
                "repos_url": "https://api.github.com/users/cython/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/cython",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/cython/cython/pulls{/number}",
            "pushed_at": "2025-09-26T02:15:27Z",
            "releases_url": "https://api.github.com/repos/cython/cython/releases{/id}",
            "size": 77057,
            "ssh_url": "git@github.com:cython/cython.git",
            "stargazers_count": 10307,
            "stargazers_url": "https://api.github.com/repos/cython/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/cython/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/cython/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/cython/cython/subscription",
            "svn_url": "https://github.com/cython/cython",
            "tags_url": "https://api.github.com/repos/cython/cython/tags",
            "teams_url": "https://api.github.com/repos/cython/cython/teams",
            "topics": [
                "big-data",
                "c",
                "cpp",
                "cpython",
                "cpython-extensions",
                "cython",
                "performance",
                "python"
            ],
            "trees_url": "https://api.github.com/repos/cython/cython/git/trees{/sha}",
            "updated_at": "2025-09-26T13:51:48Z",
            "url": "https://api.github.com/repos/cython/cython",
            "visibility": "public",
            "watchers": 10307,
            "watchers_count": 10307,
            "web_commit_signoff_required": false
        },
        "sha": "169494842634c1b96c8875c1793c29abea0a41da",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/486082?v=4",
            "events_url": "https://api.github.com/users/cython/events{/privacy}",
            "followers_url": "https://api.github.com/users/cython/followers",
            "following_url": "https://api.github.com/users/cython/following{/other_user}",
            "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/cython",
            "id": 486082,
            "login": "cython",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
            "organizations_url": "https://api.github.com/users/cython/orgs",
            "received_events_url": "https://api.github.com/users/cython/received_events",
            "repos_url": "https://api.github.com/users/cython/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/cython",
            "user_view_type": "public"
        }
    },
    "body": null,
    "closed_at": "2025-09-25T18:00:18Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7149#discussion_r2345988332"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7149"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2345988332"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nSurround expression with ``{{ ... }}``, which is evaluated in the template\r\n```",
            "commit_id": "2f8999048a5be9db604614622775a834e085f51d",
            "created_at": "2025-09-13T07:21:50Z",
            "diff_hunk": "@@ -0,0 +1,295 @@\n+.. _tempita:\n+\n+Tempita templating language\n+===========================\n+\n+This document describes template syntax features supported by Tempita - expressions, control blocks, escaping, filters, etc.\n+\n+Overview\n+--------\n+\n+A Tempita is a simple templating language Cython built-in similar to Jinja. Basic usage\n+is as follows:\n+\n+.. code-block:: python\n+\n+    from Cython.Tempita import Template\n+\n+    tmpl1 = Template(template_string)       # load from string\n+    tmpl2 = Template.from_filename(path)    # load template from file\n+\n+    tmpl1.substitute(**kwargs)     # pass parameters as named arguments.\n+    tmpl2.sub_vars(mapping)        # pass an argument as dict-like mapping.\n+\n+Tempita supports also shortcut function:\n+\n+.. code-block:: python\n+\n+    from Cython.Tempita import sub\n+    sub(template_string, **kwargs)\n+\n+Templating Syntax\n+-----------------\n+\n+Below are the different directive types and expression forms supported.\n+\n+Simple Expression Substitution\n+------------------------------\n+\n+Surround expression in ``{{ ... }}``, which is evaluated in the template",
            "html_url": "https://github.com/cython/cython/pull/7149#discussion_r2345988332",
            "id": 2345988332,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc6L1PDs",
            "original_commit_id": "0218f80ab6e2e59fbf8679c50ec2832c1fb0b254",
            "original_line": 39,
            "original_position": 39,
            "original_start_line": null,
            "path": "docs/src/userguide/tempita.rst",
            "position": 1,
            "pull_request_review_id": 3219797721,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7149",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2345988332/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-09-13T07:29:51Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2345988332",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7149#discussion_r2345995086"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7149"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2345995086"
                }
            },
            "author_association": "MEMBER",
            "body": "This does imply\r\n\r\n> Expressions can be any valid Python expression\r\n\r\nmay not be quite true.\r\n\r\n(Don't think this needs changes to the PR though)",
            "commit_id": "8832941781c34392c44c4453d0db5bbf9374a8bb",
            "created_at": "2025-09-13T07:24:58Z",
            "diff_hunk": "@@ -0,0 +1,295 @@\n+.. _tempita:\n+\n+Tempita templating language\n+===========================\n+\n+This document describes template syntax features supported by Tempita - expressions, control blocks, escaping, filters, etc.\n+\n+Overview\n+--------\n+\n+A Tempita is a simple templating language Cython built-in similar to Jinja. Basic usage\n+is as follows:\n+\n+.. code-block:: python\n+\n+    from Cython.Tempita import Template\n+\n+    tmpl1 = Template(template_string)       # load from string\n+    tmpl2 = Template.from_filename(path)    # load template from file\n+\n+    tmpl1.substitute(**kwargs)     # pass parameters as named arguments.\n+    tmpl2.sub_vars(mapping)        # pass an argument as dict-like mapping.\n+\n+Tempita supports also shortcut function:\n+\n+.. code-block:: python\n+\n+    from Cython.Tempita import sub\n+    sub(template_string, **kwargs)\n+\n+Templating Syntax\n+-----------------\n+\n+Below are the different directive types and expression forms supported.\n+\n+Simple Expression Substitution\n+------------------------------\n+\n+Surround expression in ``{{ ... }}``, which is evaluated in the template\n+context.\n+\n+Example:\n+\n+.. code-block:: python\n+\n+    >>> sub(\"Hello {{name}}!\", name=\"World\")\n+    'Hello World!'\n+\n+Expressions can be any valid Python expression: arithmetic, attribute access,\n+indexing, function calls etc.:\n+\n+.. code-block:: python\n+\n+    >>> sub(\"2 * 3 = {{2 * 3}}\")\n+    '2 * 3 = 6'\n+    >>> class User:\n+    ...     name = 'Mark'\n+    ...\n+    >>> sub(\"User: {{ user.name }}\", user=User())\n+    'User: Mark'\n+    >>> sub(\"Hex: {{ hex(num) }}\", num=10)\n+    'Hex: 0xa'\n+    >>> sub(\"Number: {{ func(num) }}\", func=abs, num=-10)\n+    'Number: 10'\n+    >>> sub(\"List[0] = {{ mylist[0] }}\", mylist=[10,20,30])\n+    'List[0] = 10'\n+    >>> sub(\"Dist['name'] = {{ mydict['name'] }}\", mydict={'name': 'Miss Islington'})\n+    \"Dist['name'] = Miss Islington\"\n+    >>> sub(\"Uppercase {{ string.upper() }}\", string=\"hello\")\n+    'Uppercase HELLO'\n+\n+Default Values\n+--------------\n+\n+You can specify a default value for a variable using ``default`` keyword:\n+\n+.. code-block:: python\n+\n+    >>> tmpl = Template(\"\"\"\n+    ... {{default name = \"Sir Lancelot the Brave\"}}\n+    ... My name is {{name}}.\n+    ... \"\"\"\n+    ... )\n+    >>> tmpl.substitute()\n+    'My name is Sir Lancelot the Brave.\\n'\n+    >>> tmpl.substitute(name=\"Sir Bedevere the Wise\")\n+    'My name is Sir Bedevere the Wise.\\n'\n+\n+\n+Inline Python Code\n+------------------\n+\n+Arbitrary python statements can be inserted inline with ``{{py: ...}}``.\n+These do not emit output directly but can modify the template context.\n+\n+.. code-block:: python\n+\n+    >>> tmpl = Template(\"\"\"\n+    ... {{py: x = 5}}\n+    ... Value of x: {{x}}\n+    ... \"\"\")\n+    >>> tmpl.substitute()\n+    'Value of x: 5\\n'\n+\n+Comments\n+--------\n+\n+Comments are introduced with ``{{# ... }}``. They are completely removed\n+from output.\n+\n+.. code-block:: python\n+\n+    >>> sub(\"Hello {{# This is a comment }}World.\")\n+    'Hello World.'\n+\n+Custom delimiters\n+-----------------\n+\n+If you want literal text that looks like a directive (e.g. `{{...}}`), you\n+can use custom delimiters:\n+\n+.. code-block:: python\n+\n+    >>> sub(\"Show literal braces: {{((name))}}\", delimiters=['((', '))'], name=\"x\")\n+    'Show literal braces: {{x}}'\n+\n+.. note:: Parameter `delimiters` can be also passed to ``Template`` class as an argument:\n+\n+   ``Template(\"...\", delimiters=['((', '))'])``\n+\n+Filters\n+-------\n+\n+You can pass callable which will be automatically called with expression as parameter:\n+\n+.. code-block:: python\n+\n+    {{ expression | filtername }}",
            "html_url": "https://github.com/cython/cython/pull/7149#discussion_r2345995086",
            "id": 2345995086,
            "line": 156,
            "node_id": "PRRC_kwDOABDGAc6L1QtO",
            "original_commit_id": "0218f80ab6e2e59fbf8679c50ec2832c1fb0b254",
            "original_line": 138,
            "original_position": 138,
            "original_start_line": null,
            "path": "docs/src/userguide/tempita.rst",
            "position": 156,
            "pull_request_review_id": 3219797721,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7149",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2345995086/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-09-13T07:29:51Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2345995086",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7149#discussion_r2346003555"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7149"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2346003555"
                }
            },
            "author_association": "MEMBER",
            "body": "I think it might be worth adding a quick description here. Something like:\r\n\r\n> Tempita is used internally in Cython for code-generation purposes. It is also available to users as a public API so they can generate or customize code when building a Cython module.",
            "commit_id": "086c83ac6c90a49fb227b46f4de6257ffe32c8a4",
            "created_at": "2025-09-13T07:27:57Z",
            "diff_hunk": "@@ -0,0 +1,295 @@\n+.. _tempita:\n+\n+Tempita templating language\n+===========================\n+\n+This document describes template syntax features supported by Tempita - expressions, control blocks, escaping, filters, etc.",
            "html_url": "https://github.com/cython/cython/pull/7149#discussion_r2346003555",
            "id": 2346003555,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc6L1Sxj",
            "original_commit_id": "0218f80ab6e2e59fbf8679c50ec2832c1fb0b254",
            "original_line": 6,
            "original_position": 6,
            "original_start_line": null,
            "path": "docs/src/userguide/tempita.rst",
            "position": 1,
            "pull_request_review_id": 3219797721,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7149",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2346003555/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-09-13T07:29:51Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2346003555",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7149#discussion_r2346005702"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7149"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2346005702"
                }
            },
            "author_association": "MEMBER",
            "body": "> runtime\r\n\r\nThis might be confused with \"when running your Cython module\". Maybe\r\n\r\n> Templates are evaluated when they are substituted, rather than when they are created.",
            "commit_id": "a616a3aea636d8136cc9866e357b1ec71ef12886",
            "created_at": "2025-09-13T07:29:29Z",
            "diff_hunk": "@@ -0,0 +1,295 @@\n+.. _tempita:\n+\n+Tempita templating language\n+===========================\n+\n+This document describes template syntax features supported by Tempita - expressions, control blocks, escaping, filters, etc.\n+\n+Overview\n+--------\n+\n+A Tempita is a simple templating language Cython built-in similar to Jinja. Basic usage\n+is as follows:\n+\n+.. code-block:: python\n+\n+    from Cython.Tempita import Template\n+\n+    tmpl1 = Template(template_string)       # load from string\n+    tmpl2 = Template.from_filename(path)    # load template from file\n+\n+    tmpl1.substitute(**kwargs)     # pass parameters as named arguments.\n+    tmpl2.sub_vars(mapping)        # pass an argument as dict-like mapping.\n+\n+Tempita supports also shortcut function:\n+\n+.. code-block:: python\n+\n+    from Cython.Tempita import sub\n+    sub(template_string, **kwargs)\n+\n+Templating Syntax\n+-----------------\n+\n+Below are the different directive types and expression forms supported.\n+\n+Simple Expression Substitution\n+------------------------------\n+\n+Surround expression in ``{{ ... }}``, which is evaluated in the template\n+context.\n+\n+Example:\n+\n+.. code-block:: python\n+\n+    >>> sub(\"Hello {{name}}!\", name=\"World\")\n+    'Hello World!'\n+\n+Expressions can be any valid Python expression: arithmetic, attribute access,\n+indexing, function calls etc.:\n+\n+.. code-block:: python\n+\n+    >>> sub(\"2 * 3 = {{2 * 3}}\")\n+    '2 * 3 = 6'\n+    >>> class User:\n+    ...     name = 'Mark'\n+    ...\n+    >>> sub(\"User: {{ user.name }}\", user=User())\n+    'User: Mark'\n+    >>> sub(\"Hex: {{ hex(num) }}\", num=10)\n+    'Hex: 0xa'\n+    >>> sub(\"Number: {{ func(num) }}\", func=abs, num=-10)\n+    'Number: 10'\n+    >>> sub(\"List[0] = {{ mylist[0] }}\", mylist=[10,20,30])\n+    'List[0] = 10'\n+    >>> sub(\"Dist['name'] = {{ mydict['name'] }}\", mydict={'name': 'Miss Islington'})\n+    \"Dist['name'] = Miss Islington\"\n+    >>> sub(\"Uppercase {{ string.upper() }}\", string=\"hello\")\n+    'Uppercase HELLO'\n+\n+Default Values\n+--------------\n+\n+You can specify a default value for a variable using ``default`` keyword:\n+\n+.. code-block:: python\n+\n+    >>> tmpl = Template(\"\"\"\n+    ... {{default name = \"Sir Lancelot the Brave\"}}\n+    ... My name is {{name}}.\n+    ... \"\"\"\n+    ... )\n+    >>> tmpl.substitute()\n+    'My name is Sir Lancelot the Brave.\\n'\n+    >>> tmpl.substitute(name=\"Sir Bedevere the Wise\")\n+    'My name is Sir Bedevere the Wise.\\n'\n+\n+\n+Inline Python Code\n+------------------\n+\n+Arbitrary python statements can be inserted inline with ``{{py: ...}}``.\n+These do not emit output directly but can modify the template context.\n+\n+.. code-block:: python\n+\n+    >>> tmpl = Template(\"\"\"\n+    ... {{py: x = 5}}\n+    ... Value of x: {{x}}\n+    ... \"\"\")\n+    >>> tmpl.substitute()\n+    'Value of x: 5\\n'\n+\n+Comments\n+--------\n+\n+Comments are introduced with ``{{# ... }}``. They are completely removed\n+from output.\n+\n+.. code-block:: python\n+\n+    >>> sub(\"Hello {{# This is a comment }}World.\")\n+    'Hello World.'\n+\n+Custom delimiters\n+-----------------\n+\n+If you want literal text that looks like a directive (e.g. `{{...}}`), you\n+can use custom delimiters:\n+\n+.. code-block:: python\n+\n+    >>> sub(\"Show literal braces: {{((name))}}\", delimiters=['((', '))'], name=\"x\")\n+    'Show literal braces: {{x}}'\n+\n+.. note:: Parameter `delimiters` can be also passed to ``Template`` class as an argument:\n+\n+   ``Template(\"...\", delimiters=['((', '))'])``\n+\n+Filters\n+-------\n+\n+You can pass callable which will be automatically called with expression as parameter:\n+\n+.. code-block:: python\n+\n+    {{ expression | filtername }}\n+\n+Example:\n+\n+.. code-block:: python\n+\n+    >>> sub(\"Lowercase: {{ name | lower }}\", name=\"ALICE\", lower=lambda x: x.lower())\n+    'Lowercase: alice'\n+\n+Control Blocks\n+==============\n+\n+Tempita supports Python-like control flow directives.\n+These are evaluated at runtime and allow conditional rendering and iteration.\n+\n+Each block has an explicit *closing directive* such as ``endif`` or ``endfor``.\n+\n+``if`` / ``elif`` / ``else`` block\n+----------------------------------\n+\n+Conditional execution based on an expression.\n+\n+**Syntax**::\n+\n+    {{if condition}}\n+      ... content if true ...\n+    {{elif other_condition}}\n+      ... content if elif is true ...\n+    {{else}}\n+      ... content if all above are false ...\n+    {{endif}}\n+\n+**Example**:\n+\n+.. code-block:: python\n+\n+    >>> tmpl = Template(\"\"\"\n+    ... {{if x > 0}}\n+    ... Positive\n+    ... {{elif x == 0}}\n+    ... Zero\n+    ... {{else}}\n+    ... Negative\n+    ... {{endif}}\n+    ... \"\"\")\n+    >>> tmpl.substitute(x=-5)\n+    'Negative\\n'\n+\n+``for`` block\n+-------------\n+\n+Iterate over a sequence and render the body for each element.\n+\n+**Syntax**::\n+\n+    {{for var in iterable}}\n+      ... body using {{var}} ...\n+    {{endfor}}\n+\n+You may also unpack tuples or iterate with multiple variables.\n+\n+**Example**:\n+\n+.. code-block:: python\n+\n+    >>> tmpl = Template(\"\"\"\n+    ... {{for name, score in scores}}\n+    ... {{name}}: {{score}}\n+    ... {{endfor}}\n+    ... \"\"\")\n+    >>> print(tmpl.substitute(scores=[(\"Alice\", 95), (\"Bob\", 88)]))\n+    Alice: 95\n+    Bob: 88\n+\n+\n+.. note:: Tempita ``for`` block supports also ``{{break}}`` and ``{{continue}}`` statements.\n+\n+Nesting Blocks\n+--------------\n+\n+Blocks can be nested arbitrarily.\n+\n+.. code-block:: python\n+\n+    >>> tmpl = Template(\"\"\"\n+    ... {{for item in items}}\n+    ...   {{if item < 0}}\n+    ...   {{continue}}\n+    ...   {{elif item % 2 == 0}}\n+    ...   {{item}} is even\n+    ...   {{else}}\n+    ...   {{item}} is odd\n+    ...   {{endif}}\n+    ... {{endfor}}\n+    ... \"\"\")\n+    >>> print(tmpl.substitute(items=[-1, 1, 2, 3]))\n+      1 is odd\n+      2 is even\n+      3 is odd\n+\n+Indentation, Whitespace, and Newlines\n+-------------------------------------\n+\n+- The template preserves whitespace exactly as written around directives.\n+- Newlines in the template become newlines in output.\n+- Indentation is preserved, so control block bodies should be indented\n+  meaningfully by the template author if you want nice output.\n+\n+Examples\n+--------\n+\n+Here are consolidated examples showing most syntax in use:\n+\n+.. code-block:: python\n+\n+    from Cython.Tempita import Template\n+\n+    tmpl = Template(\"\"\"\n+    Header\n+    {{# This is a comment }}\n+\n+    {{if user[\"is_admin\"]}}\n+      Welcome, Admin {{user[\"name\"]}}!\n+    {{else}}\n+      Hello, {{user[\"name\"] or 'Guest'}}.\n+    {{endif}}\n+\n+    {{for item in items}}\n+      * {{item[\"name\"]}}: {{item[\"value\"]}}\n+    {{endfor}}\n+\n+    {{py: x = 1 + 2}}\n+    Inline code result: {{x}}\n+\n+    Expression: 1 + 2 = {{1 + 2}}\n+\n+    \"\"\")\n+\n+    print(tmpl.substitute(user={'name': 'Bob', 'is_admin': False},\n+                          items=[{'name':'A','value':10},\n+                                 {'name':'B','value':20}]))\n+\n+Output::\n+\n+    Header\n+      Hello, Bob.\n+\n+      * A: 10\n+      * B: 20\n+\n+    Expression: 1 + 2 = 3\n+\n+Notes and Limitations\n+---------------------\n+\n+- Templates are evaluated at runtime; errors show up when calling",
            "html_url": "https://github.com/cython/cython/pull/7149#discussion_r2346005702",
            "id": 2346005702,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc6L1TTG",
            "original_commit_id": "0218f80ab6e2e59fbf8679c50ec2832c1fb0b254",
            "original_line": 293,
            "original_position": 293,
            "original_start_line": null,
            "path": "docs/src/userguide/tempita.rst",
            "position": 1,
            "pull_request_review_id": 3219797721,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7149",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2346005702/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-09-13T07:29:51Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2346005702",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7149#discussion_r2348781516"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7149"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2348781516"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "```suggestion\r\nTempita is a simple templating language Cython built-in similar to Jinja. Basic usage\r\n```",
            "commit_id": "2f8999048a5be9db604614622775a834e085f51d",
            "created_at": "2025-09-15T12:04:40Z",
            "diff_hunk": "@@ -0,0 +1,295 @@\n+.. _tempita:\n+\n+Tempita templating language\n+===========================\n+\n+This document describes template syntax features supported by Tempita - expressions, control blocks, escaping, filters, etc.\n+\n+Overview\n+--------\n+\n+A Tempita is a simple templating language Cython built-in similar to Jinja. Basic usage",
            "html_url": "https://github.com/cython/cython/pull/7149#discussion_r2348781516",
            "id": 2348781516,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc6L_4_M",
            "original_commit_id": "2f8999048a5be9db604614622775a834e085f51d",
            "original_line": 11,
            "original_position": 11,
            "original_start_line": null,
            "path": "docs/src/userguide/tempita.rst",
            "position": 1,
            "pull_request_review_id": 3224281796,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7149",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2348781516/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-09-15T12:10:44Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2348781516",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/14075922?v=4",
                "events_url": "https://api.github.com/users/neutrinoceros/events{/privacy}",
                "followers_url": "https://api.github.com/users/neutrinoceros/followers",
                "following_url": "https://api.github.com/users/neutrinoceros/following{/other_user}",
                "gists_url": "https://api.github.com/users/neutrinoceros/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neutrinoceros",
                "id": 14075922,
                "login": "neutrinoceros",
                "node_id": "MDQ6VXNlcjE0MDc1OTIy",
                "organizations_url": "https://api.github.com/users/neutrinoceros/orgs",
                "received_events_url": "https://api.github.com/users/neutrinoceros/received_events",
                "repos_url": "https://api.github.com/users/neutrinoceros/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neutrinoceros/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neutrinoceros/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/neutrinoceros",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7149#discussion_r2348782390"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7149"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2348782390"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "```suggestion\r\nTempita also provides a shortcut function:\r\n```",
            "commit_id": "2f8999048a5be9db604614622775a834e085f51d",
            "created_at": "2025-09-15T12:05:05Z",
            "diff_hunk": "@@ -0,0 +1,295 @@\n+.. _tempita:\n+\n+Tempita templating language\n+===========================\n+\n+This document describes template syntax features supported by Tempita - expressions, control blocks, escaping, filters, etc.\n+\n+Overview\n+--------\n+\n+A Tempita is a simple templating language Cython built-in similar to Jinja. Basic usage\n+is as follows:\n+\n+.. code-block:: python\n+\n+    from Cython.Tempita import Template\n+\n+    tmpl1 = Template(template_string)       # load from string\n+    tmpl2 = Template.from_filename(path)    # load template from file\n+\n+    tmpl1.substitute(**kwargs)     # pass parameters as named arguments.\n+    tmpl2.sub_vars(mapping)        # pass an argument as dict-like mapping.\n+\n+Tempita supports also shortcut function:",
            "html_url": "https://github.com/cython/cython/pull/7149#discussion_r2348782390",
            "id": 2348782390,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc6L_5M2",
            "original_commit_id": "2f8999048a5be9db604614622775a834e085f51d",
            "original_line": 24,
            "original_position": 24,
            "original_start_line": null,
            "path": "docs/src/userguide/tempita.rst",
            "position": 1,
            "pull_request_review_id": 3224281796,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7149",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2348782390/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-09-15T12:10:44Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2348782390",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/14075922?v=4",
                "events_url": "https://api.github.com/users/neutrinoceros/events{/privacy}",
                "followers_url": "https://api.github.com/users/neutrinoceros/followers",
                "following_url": "https://api.github.com/users/neutrinoceros/following{/other_user}",
                "gists_url": "https://api.github.com/users/neutrinoceros/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neutrinoceros",
                "id": 14075922,
                "login": "neutrinoceros",
                "node_id": "MDQ6VXNlcjE0MDc1OTIy",
                "organizations_url": "https://api.github.com/users/neutrinoceros/orgs",
                "received_events_url": "https://api.github.com/users/neutrinoceros/received_events",
                "repos_url": "https://api.github.com/users/neutrinoceros/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neutrinoceros/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neutrinoceros/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/neutrinoceros",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7149#discussion_r2348787158"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7149"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2348787158"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "```suggestion\r\nArbitrary Python statements can be inserted inline with ``{{py: ...}}``.\r\n```",
            "commit_id": "2f8999048a5be9db604614622775a834e085f51d",
            "created_at": "2025-09-15T12:07:19Z",
            "diff_hunk": "@@ -0,0 +1,295 @@\n+.. _tempita:\n+\n+Tempita templating language\n+===========================\n+\n+This document describes template syntax features supported by Tempita - expressions, control blocks, escaping, filters, etc.\n+\n+Overview\n+--------\n+\n+A Tempita is a simple templating language Cython built-in similar to Jinja. Basic usage\n+is as follows:\n+\n+.. code-block:: python\n+\n+    from Cython.Tempita import Template\n+\n+    tmpl1 = Template(template_string)       # load from string\n+    tmpl2 = Template.from_filename(path)    # load template from file\n+\n+    tmpl1.substitute(**kwargs)     # pass parameters as named arguments.\n+    tmpl2.sub_vars(mapping)        # pass an argument as dict-like mapping.\n+\n+Tempita supports also shortcut function:\n+\n+.. code-block:: python\n+\n+    from Cython.Tempita import sub\n+    sub(template_string, **kwargs)\n+\n+Templating Syntax\n+-----------------\n+\n+Below are the different directive types and expression forms supported.\n+\n+Simple Expression Substitution\n+------------------------------\n+\n+Surround expression with ``{{ ... }}``, which is evaluated in the template\n+context.\n+\n+Example:\n+\n+.. code-block:: python\n+\n+    >>> sub(\"Hello {{name}}!\", name=\"World\")\n+    'Hello World!'\n+\n+Expressions can be any valid Python expression: arithmetic, attribute access,\n+indexing, function calls etc.:\n+\n+.. code-block:: python\n+\n+    >>> sub(\"2 * 3 = {{2 * 3}}\")\n+    '2 * 3 = 6'\n+    >>> class User:\n+    ...     name = 'Mark'\n+    ...\n+    >>> sub(\"User: {{ user.name }}\", user=User())\n+    'User: Mark'\n+    >>> sub(\"Hex: {{ hex(num) }}\", num=10)\n+    'Hex: 0xa'\n+    >>> sub(\"Number: {{ func(num) }}\", func=abs, num=-10)\n+    'Number: 10'\n+    >>> sub(\"List[0] = {{ mylist[0] }}\", mylist=[10,20,30])\n+    'List[0] = 10'\n+    >>> sub(\"Dist['name'] = {{ mydict['name'] }}\", mydict={'name': 'Miss Islington'})\n+    \"Dist['name'] = Miss Islington\"\n+    >>> sub(\"Uppercase {{ string.upper() }}\", string=\"hello\")\n+    'Uppercase HELLO'\n+\n+Default Values\n+--------------\n+\n+You can specify a default value for a variable using ``default`` keyword:\n+\n+.. code-block:: python\n+\n+    >>> tmpl = Template(\"\"\"\n+    ... {{default name = \"Sir Lancelot the Brave\"}}\n+    ... My name is {{name}}.\n+    ... \"\"\"\n+    ... )\n+    >>> tmpl.substitute()\n+    'My name is Sir Lancelot the Brave.\\n'\n+    >>> tmpl.substitute(name=\"Sir Bedevere the Wise\")\n+    'My name is Sir Bedevere the Wise.\\n'\n+\n+\n+Inline Python Code\n+------------------\n+\n+Arbitrary python statements can be inserted inline with ``{{py: ...}}``.",
            "html_url": "https://github.com/cython/cython/pull/7149#discussion_r2348787158",
            "id": 2348787158,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc6L_6XW",
            "original_commit_id": "2f8999048a5be9db604614622775a834e085f51d",
            "original_line": 93,
            "original_position": 93,
            "original_start_line": null,
            "path": "docs/src/userguide/tempita.rst",
            "position": 1,
            "pull_request_review_id": 3224281796,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7149",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2348787158/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-09-15T12:10:44Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2348787158",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/14075922?v=4",
                "events_url": "https://api.github.com/users/neutrinoceros/events{/privacy}",
                "followers_url": "https://api.github.com/users/neutrinoceros/followers",
                "following_url": "https://api.github.com/users/neutrinoceros/following{/other_user}",
                "gists_url": "https://api.github.com/users/neutrinoceros/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neutrinoceros",
                "id": 14075922,
                "login": "neutrinoceros",
                "node_id": "MDQ6VXNlcjE0MDc1OTIy",
                "organizations_url": "https://api.github.com/users/neutrinoceros/orgs",
                "received_events_url": "https://api.github.com/users/neutrinoceros/received_events",
                "repos_url": "https://api.github.com/users/neutrinoceros/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neutrinoceros/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neutrinoceros/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/neutrinoceros",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7149#discussion_r2348788626"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7149"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2348788626"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "```suggestion\r\nIf you want literal text that looks like a directive (e.g. ``{{...}}``), you\r\n```",
            "commit_id": "2f8999048a5be9db604614622775a834e085f51d",
            "created_at": "2025-09-15T12:08:02Z",
            "diff_hunk": "@@ -0,0 +1,295 @@\n+.. _tempita:\n+\n+Tempita templating language\n+===========================\n+\n+This document describes template syntax features supported by Tempita - expressions, control blocks, escaping, filters, etc.\n+\n+Overview\n+--------\n+\n+A Tempita is a simple templating language Cython built-in similar to Jinja. Basic usage\n+is as follows:\n+\n+.. code-block:: python\n+\n+    from Cython.Tempita import Template\n+\n+    tmpl1 = Template(template_string)       # load from string\n+    tmpl2 = Template.from_filename(path)    # load template from file\n+\n+    tmpl1.substitute(**kwargs)     # pass parameters as named arguments.\n+    tmpl2.sub_vars(mapping)        # pass an argument as dict-like mapping.\n+\n+Tempita supports also shortcut function:\n+\n+.. code-block:: python\n+\n+    from Cython.Tempita import sub\n+    sub(template_string, **kwargs)\n+\n+Templating Syntax\n+-----------------\n+\n+Below are the different directive types and expression forms supported.\n+\n+Simple Expression Substitution\n+------------------------------\n+\n+Surround expression with ``{{ ... }}``, which is evaluated in the template\n+context.\n+\n+Example:\n+\n+.. code-block:: python\n+\n+    >>> sub(\"Hello {{name}}!\", name=\"World\")\n+    'Hello World!'\n+\n+Expressions can be any valid Python expression: arithmetic, attribute access,\n+indexing, function calls etc.:\n+\n+.. code-block:: python\n+\n+    >>> sub(\"2 * 3 = {{2 * 3}}\")\n+    '2 * 3 = 6'\n+    >>> class User:\n+    ...     name = 'Mark'\n+    ...\n+    >>> sub(\"User: {{ user.name }}\", user=User())\n+    'User: Mark'\n+    >>> sub(\"Hex: {{ hex(num) }}\", num=10)\n+    'Hex: 0xa'\n+    >>> sub(\"Number: {{ func(num) }}\", func=abs, num=-10)\n+    'Number: 10'\n+    >>> sub(\"List[0] = {{ mylist[0] }}\", mylist=[10,20,30])\n+    'List[0] = 10'\n+    >>> sub(\"Dist['name'] = {{ mydict['name'] }}\", mydict={'name': 'Miss Islington'})\n+    \"Dist['name'] = Miss Islington\"\n+    >>> sub(\"Uppercase {{ string.upper() }}\", string=\"hello\")\n+    'Uppercase HELLO'\n+\n+Default Values\n+--------------\n+\n+You can specify a default value for a variable using ``default`` keyword:\n+\n+.. code-block:: python\n+\n+    >>> tmpl = Template(\"\"\"\n+    ... {{default name = \"Sir Lancelot the Brave\"}}\n+    ... My name is {{name}}.\n+    ... \"\"\"\n+    ... )\n+    >>> tmpl.substitute()\n+    'My name is Sir Lancelot the Brave.\\n'\n+    >>> tmpl.substitute(name=\"Sir Bedevere the Wise\")\n+    'My name is Sir Bedevere the Wise.\\n'\n+\n+\n+Inline Python Code\n+------------------\n+\n+Arbitrary python statements can be inserted inline with ``{{py: ...}}``.\n+These do not emit output directly but can modify the template context.\n+\n+.. code-block:: python\n+\n+    >>> tmpl = Template(\"\"\"\n+    ... {{py: x = 5}}\n+    ... Value of x: {{x}}\n+    ... \"\"\")\n+    >>> tmpl.substitute()\n+    'Value of x: 5\\n'\n+\n+Comments\n+--------\n+\n+Comments are introduced with ``{{# ... }}``. They are completely removed\n+from output.\n+\n+.. code-block:: python\n+\n+    >>> sub(\"Hello {{# This is a comment }}World.\")\n+    'Hello World.'\n+\n+Custom delimiters\n+-----------------\n+\n+If you want literal text that looks like a directive (e.g. `{{...}}`), you",
            "html_url": "https://github.com/cython/cython/pull/7149#discussion_r2348788626",
            "id": 2348788626,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc6L_6uS",
            "original_commit_id": "2f8999048a5be9db604614622775a834e085f51d",
            "original_line": 119,
            "original_position": 119,
            "original_start_line": null,
            "path": "docs/src/userguide/tempita.rst",
            "position": 1,
            "pull_request_review_id": 3224281796,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7149",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2348788626/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-09-15T12:10:44Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2348788626",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/14075922?v=4",
                "events_url": "https://api.github.com/users/neutrinoceros/events{/privacy}",
                "followers_url": "https://api.github.com/users/neutrinoceros/followers",
                "following_url": "https://api.github.com/users/neutrinoceros/following{/other_user}",
                "gists_url": "https://api.github.com/users/neutrinoceros/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neutrinoceros",
                "id": 14075922,
                "login": "neutrinoceros",
                "node_id": "MDQ6VXNlcjE0MDc1OTIy",
                "organizations_url": "https://api.github.com/users/neutrinoceros/orgs",
                "received_events_url": "https://api.github.com/users/neutrinoceros/received_events",
                "repos_url": "https://api.github.com/users/neutrinoceros/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neutrinoceros/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neutrinoceros/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/neutrinoceros",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7149#discussion_r2348789775"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7149"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2348789775"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "```suggestion\r\n.. note:: Parameter ``delimiters`` can be also passed to ``Template`` class as an argument:\r\n```",
            "commit_id": "2f8999048a5be9db604614622775a834e085f51d",
            "created_at": "2025-09-15T12:08:33Z",
            "diff_hunk": "@@ -0,0 +1,295 @@\n+.. _tempita:\n+\n+Tempita templating language\n+===========================\n+\n+This document describes template syntax features supported by Tempita - expressions, control blocks, escaping, filters, etc.\n+\n+Overview\n+--------\n+\n+A Tempita is a simple templating language Cython built-in similar to Jinja. Basic usage\n+is as follows:\n+\n+.. code-block:: python\n+\n+    from Cython.Tempita import Template\n+\n+    tmpl1 = Template(template_string)       # load from string\n+    tmpl2 = Template.from_filename(path)    # load template from file\n+\n+    tmpl1.substitute(**kwargs)     # pass parameters as named arguments.\n+    tmpl2.sub_vars(mapping)        # pass an argument as dict-like mapping.\n+\n+Tempita supports also shortcut function:\n+\n+.. code-block:: python\n+\n+    from Cython.Tempita import sub\n+    sub(template_string, **kwargs)\n+\n+Templating Syntax\n+-----------------\n+\n+Below are the different directive types and expression forms supported.\n+\n+Simple Expression Substitution\n+------------------------------\n+\n+Surround expression with ``{{ ... }}``, which is evaluated in the template\n+context.\n+\n+Example:\n+\n+.. code-block:: python\n+\n+    >>> sub(\"Hello {{name}}!\", name=\"World\")\n+    'Hello World!'\n+\n+Expressions can be any valid Python expression: arithmetic, attribute access,\n+indexing, function calls etc.:\n+\n+.. code-block:: python\n+\n+    >>> sub(\"2 * 3 = {{2 * 3}}\")\n+    '2 * 3 = 6'\n+    >>> class User:\n+    ...     name = 'Mark'\n+    ...\n+    >>> sub(\"User: {{ user.name }}\", user=User())\n+    'User: Mark'\n+    >>> sub(\"Hex: {{ hex(num) }}\", num=10)\n+    'Hex: 0xa'\n+    >>> sub(\"Number: {{ func(num) }}\", func=abs, num=-10)\n+    'Number: 10'\n+    >>> sub(\"List[0] = {{ mylist[0] }}\", mylist=[10,20,30])\n+    'List[0] = 10'\n+    >>> sub(\"Dist['name'] = {{ mydict['name'] }}\", mydict={'name': 'Miss Islington'})\n+    \"Dist['name'] = Miss Islington\"\n+    >>> sub(\"Uppercase {{ string.upper() }}\", string=\"hello\")\n+    'Uppercase HELLO'\n+\n+Default Values\n+--------------\n+\n+You can specify a default value for a variable using ``default`` keyword:\n+\n+.. code-block:: python\n+\n+    >>> tmpl = Template(\"\"\"\n+    ... {{default name = \"Sir Lancelot the Brave\"}}\n+    ... My name is {{name}}.\n+    ... \"\"\"\n+    ... )\n+    >>> tmpl.substitute()\n+    'My name is Sir Lancelot the Brave.\\n'\n+    >>> tmpl.substitute(name=\"Sir Bedevere the Wise\")\n+    'My name is Sir Bedevere the Wise.\\n'\n+\n+\n+Inline Python Code\n+------------------\n+\n+Arbitrary python statements can be inserted inline with ``{{py: ...}}``.\n+These do not emit output directly but can modify the template context.\n+\n+.. code-block:: python\n+\n+    >>> tmpl = Template(\"\"\"\n+    ... {{py: x = 5}}\n+    ... Value of x: {{x}}\n+    ... \"\"\")\n+    >>> tmpl.substitute()\n+    'Value of x: 5\\n'\n+\n+Comments\n+--------\n+\n+Comments are introduced with ``{{# ... }}``. They are completely removed\n+from output.\n+\n+.. code-block:: python\n+\n+    >>> sub(\"Hello {{# This is a comment }}World.\")\n+    'Hello World.'\n+\n+Custom delimiters\n+-----------------\n+\n+If you want literal text that looks like a directive (e.g. `{{...}}`), you\n+can use custom delimiters:\n+\n+.. code-block:: python\n+\n+    >>> sub(\"Show literal braces: {{((name))}}\", delimiters=['((', '))'], name=\"x\")\n+    'Show literal braces: {{x}}'\n+\n+.. note:: Parameter `delimiters` can be also passed to ``Template`` class as an argument:",
            "html_url": "https://github.com/cython/cython/pull/7149#discussion_r2348789775",
            "id": 2348789775,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc6L_7AP",
            "original_commit_id": "2f8999048a5be9db604614622775a834e085f51d",
            "original_line": 127,
            "original_position": 127,
            "original_start_line": null,
            "path": "docs/src/userguide/tempita.rst",
            "position": 1,
            "pull_request_review_id": 3224281796,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7149",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2348789775/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-09-15T12:10:44Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2348789775",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/14075922?v=4",
                "events_url": "https://api.github.com/users/neutrinoceros/events{/privacy}",
                "followers_url": "https://api.github.com/users/neutrinoceros/followers",
                "following_url": "https://api.github.com/users/neutrinoceros/following{/other_user}",
                "gists_url": "https://api.github.com/users/neutrinoceros/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neutrinoceros",
                "id": 14075922,
                "login": "neutrinoceros",
                "node_id": "MDQ6VXNlcjE0MDc1OTIy",
                "organizations_url": "https://api.github.com/users/neutrinoceros/orgs",
                "received_events_url": "https://api.github.com/users/neutrinoceros/received_events",
                "repos_url": "https://api.github.com/users/neutrinoceros/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neutrinoceros/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neutrinoceros/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/neutrinoceros",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7149#discussion_r2348792418"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7149"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2348792418"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "```suggestion\r\n- Templates preserve whitespace exactly as written around directives.\r\n```",
            "commit_id": "2f8999048a5be9db604614622775a834e085f51d",
            "created_at": "2025-09-15T12:09:42Z",
            "diff_hunk": "@@ -0,0 +1,295 @@\n+.. _tempita:\n+\n+Tempita templating language\n+===========================\n+\n+This document describes template syntax features supported by Tempita - expressions, control blocks, escaping, filters, etc.\n+\n+Overview\n+--------\n+\n+A Tempita is a simple templating language Cython built-in similar to Jinja. Basic usage\n+is as follows:\n+\n+.. code-block:: python\n+\n+    from Cython.Tempita import Template\n+\n+    tmpl1 = Template(template_string)       # load from string\n+    tmpl2 = Template.from_filename(path)    # load template from file\n+\n+    tmpl1.substitute(**kwargs)     # pass parameters as named arguments.\n+    tmpl2.sub_vars(mapping)        # pass an argument as dict-like mapping.\n+\n+Tempita supports also shortcut function:\n+\n+.. code-block:: python\n+\n+    from Cython.Tempita import sub\n+    sub(template_string, **kwargs)\n+\n+Templating Syntax\n+-----------------\n+\n+Below are the different directive types and expression forms supported.\n+\n+Simple Expression Substitution\n+------------------------------\n+\n+Surround expression with ``{{ ... }}``, which is evaluated in the template\n+context.\n+\n+Example:\n+\n+.. code-block:: python\n+\n+    >>> sub(\"Hello {{name}}!\", name=\"World\")\n+    'Hello World!'\n+\n+Expressions can be any valid Python expression: arithmetic, attribute access,\n+indexing, function calls etc.:\n+\n+.. code-block:: python\n+\n+    >>> sub(\"2 * 3 = {{2 * 3}}\")\n+    '2 * 3 = 6'\n+    >>> class User:\n+    ...     name = 'Mark'\n+    ...\n+    >>> sub(\"User: {{ user.name }}\", user=User())\n+    'User: Mark'\n+    >>> sub(\"Hex: {{ hex(num) }}\", num=10)\n+    'Hex: 0xa'\n+    >>> sub(\"Number: {{ func(num) }}\", func=abs, num=-10)\n+    'Number: 10'\n+    >>> sub(\"List[0] = {{ mylist[0] }}\", mylist=[10,20,30])\n+    'List[0] = 10'\n+    >>> sub(\"Dist['name'] = {{ mydict['name'] }}\", mydict={'name': 'Miss Islington'})\n+    \"Dist['name'] = Miss Islington\"\n+    >>> sub(\"Uppercase {{ string.upper() }}\", string=\"hello\")\n+    'Uppercase HELLO'\n+\n+Default Values\n+--------------\n+\n+You can specify a default value for a variable using ``default`` keyword:\n+\n+.. code-block:: python\n+\n+    >>> tmpl = Template(\"\"\"\n+    ... {{default name = \"Sir Lancelot the Brave\"}}\n+    ... My name is {{name}}.\n+    ... \"\"\"\n+    ... )\n+    >>> tmpl.substitute()\n+    'My name is Sir Lancelot the Brave.\\n'\n+    >>> tmpl.substitute(name=\"Sir Bedevere the Wise\")\n+    'My name is Sir Bedevere the Wise.\\n'\n+\n+\n+Inline Python Code\n+------------------\n+\n+Arbitrary python statements can be inserted inline with ``{{py: ...}}``.\n+These do not emit output directly but can modify the template context.\n+\n+.. code-block:: python\n+\n+    >>> tmpl = Template(\"\"\"\n+    ... {{py: x = 5}}\n+    ... Value of x: {{x}}\n+    ... \"\"\")\n+    >>> tmpl.substitute()\n+    'Value of x: 5\\n'\n+\n+Comments\n+--------\n+\n+Comments are introduced with ``{{# ... }}``. They are completely removed\n+from output.\n+\n+.. code-block:: python\n+\n+    >>> sub(\"Hello {{# This is a comment }}World.\")\n+    'Hello World.'\n+\n+Custom delimiters\n+-----------------\n+\n+If you want literal text that looks like a directive (e.g. `{{...}}`), you\n+can use custom delimiters:\n+\n+.. code-block:: python\n+\n+    >>> sub(\"Show literal braces: {{((name))}}\", delimiters=['((', '))'], name=\"x\")\n+    'Show literal braces: {{x}}'\n+\n+.. note:: Parameter `delimiters` can be also passed to ``Template`` class as an argument:\n+\n+   ``Template(\"...\", delimiters=['((', '))'])``\n+\n+Filters\n+-------\n+\n+You can pass callable which will be automatically called with expression as parameter:\n+\n+.. code-block:: python\n+\n+    {{ expression | filtername }}\n+\n+Example:\n+\n+.. code-block:: python\n+\n+    >>> sub(\"Lowercase: {{ name | lower }}\", name=\"ALICE\", lower=lambda x: x.lower())\n+    'Lowercase: alice'\n+\n+Control Blocks\n+==============\n+\n+Tempita supports Python-like control flow directives.\n+These are evaluated at runtime and allow conditional rendering and iteration.\n+\n+Each block has an explicit *closing directive* such as ``endif`` or ``endfor``.\n+\n+``if`` / ``elif`` / ``else`` block\n+----------------------------------\n+\n+Conditional execution based on an expression.\n+\n+**Syntax**::\n+\n+    {{if condition}}\n+      ... content if true ...\n+    {{elif other_condition}}\n+      ... content if elif is true ...\n+    {{else}}\n+      ... content if all above are false ...\n+    {{endif}}\n+\n+**Example**:\n+\n+.. code-block:: python\n+\n+    >>> tmpl = Template(\"\"\"\n+    ... {{if x > 0}}\n+    ... Positive\n+    ... {{elif x == 0}}\n+    ... Zero\n+    ... {{else}}\n+    ... Negative\n+    ... {{endif}}\n+    ... \"\"\")\n+    >>> tmpl.substitute(x=-5)\n+    'Negative\\n'\n+\n+``for`` block\n+-------------\n+\n+Iterate over a sequence and render the body for each element.\n+\n+**Syntax**::\n+\n+    {{for var in iterable}}\n+      ... body using {{var}} ...\n+    {{endfor}}\n+\n+You may also unpack tuples or iterate with multiple variables.\n+\n+**Example**:\n+\n+.. code-block:: python\n+\n+    >>> tmpl = Template(\"\"\"\n+    ... {{for name, score in scores}}\n+    ... {{name}}: {{score}}\n+    ... {{endfor}}\n+    ... \"\"\")\n+    >>> print(tmpl.substitute(scores=[(\"Alice\", 95), (\"Bob\", 88)]))\n+    Alice: 95\n+    Bob: 88\n+\n+\n+.. note:: Tempita ``for`` block supports also ``{{break}}`` and ``{{continue}}`` statements.\n+\n+Nesting Blocks\n+--------------\n+\n+Blocks can be nested arbitrarily.\n+\n+.. code-block:: python\n+\n+    >>> tmpl = Template(\"\"\"\n+    ... {{for item in items}}\n+    ...   {{if item < 0}}\n+    ...   {{continue}}\n+    ...   {{elif item % 2 == 0}}\n+    ...   {{item}} is even\n+    ...   {{else}}\n+    ...   {{item}} is odd\n+    ...   {{endif}}\n+    ... {{endfor}}\n+    ... \"\"\")\n+    >>> print(tmpl.substitute(items=[-1, 1, 2, 3]))\n+      1 is odd\n+      2 is even\n+      3 is odd\n+\n+Indentation, Whitespace, and Newlines\n+-------------------------------------\n+\n+- The template preserves whitespace exactly as written around directives.",
            "html_url": "https://github.com/cython/cython/pull/7149#discussion_r2348792418",
            "id": 2348792418,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc6L_7pi",
            "original_commit_id": "2f8999048a5be9db604614622775a834e085f51d",
            "original_line": 241,
            "original_position": 241,
            "original_start_line": null,
            "path": "docs/src/userguide/tempita.rst",
            "position": 1,
            "pull_request_review_id": 3224281796,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7149",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2348792418/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-09-15T12:10:44Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2348792418",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/14075922?v=4",
                "events_url": "https://api.github.com/users/neutrinoceros/events{/privacy}",
                "followers_url": "https://api.github.com/users/neutrinoceros/followers",
                "following_url": "https://api.github.com/users/neutrinoceros/following{/other_user}",
                "gists_url": "https://api.github.com/users/neutrinoceros/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neutrinoceros",
                "id": 14075922,
                "login": "neutrinoceros",
                "node_id": "MDQ6VXNlcjE0MDc1OTIy",
                "organizations_url": "https://api.github.com/users/neutrinoceros/orgs",
                "received_events_url": "https://api.github.com/users/neutrinoceros/received_events",
                "repos_url": "https://api.github.com/users/neutrinoceros/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neutrinoceros/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neutrinoceros/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/neutrinoceros",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7149#discussion_r2348792799"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7149"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2348792799"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "```suggestion\r\n- Newlines in templates become newlines in outputs.\r\n```",
            "commit_id": "2f8999048a5be9db604614622775a834e085f51d",
            "created_at": "2025-09-15T12:09:54Z",
            "diff_hunk": "@@ -0,0 +1,295 @@\n+.. _tempita:\n+\n+Tempita templating language\n+===========================\n+\n+This document describes template syntax features supported by Tempita - expressions, control blocks, escaping, filters, etc.\n+\n+Overview\n+--------\n+\n+A Tempita is a simple templating language Cython built-in similar to Jinja. Basic usage\n+is as follows:\n+\n+.. code-block:: python\n+\n+    from Cython.Tempita import Template\n+\n+    tmpl1 = Template(template_string)       # load from string\n+    tmpl2 = Template.from_filename(path)    # load template from file\n+\n+    tmpl1.substitute(**kwargs)     # pass parameters as named arguments.\n+    tmpl2.sub_vars(mapping)        # pass an argument as dict-like mapping.\n+\n+Tempita supports also shortcut function:\n+\n+.. code-block:: python\n+\n+    from Cython.Tempita import sub\n+    sub(template_string, **kwargs)\n+\n+Templating Syntax\n+-----------------\n+\n+Below are the different directive types and expression forms supported.\n+\n+Simple Expression Substitution\n+------------------------------\n+\n+Surround expression with ``{{ ... }}``, which is evaluated in the template\n+context.\n+\n+Example:\n+\n+.. code-block:: python\n+\n+    >>> sub(\"Hello {{name}}!\", name=\"World\")\n+    'Hello World!'\n+\n+Expressions can be any valid Python expression: arithmetic, attribute access,\n+indexing, function calls etc.:\n+\n+.. code-block:: python\n+\n+    >>> sub(\"2 * 3 = {{2 * 3}}\")\n+    '2 * 3 = 6'\n+    >>> class User:\n+    ...     name = 'Mark'\n+    ...\n+    >>> sub(\"User: {{ user.name }}\", user=User())\n+    'User: Mark'\n+    >>> sub(\"Hex: {{ hex(num) }}\", num=10)\n+    'Hex: 0xa'\n+    >>> sub(\"Number: {{ func(num) }}\", func=abs, num=-10)\n+    'Number: 10'\n+    >>> sub(\"List[0] = {{ mylist[0] }}\", mylist=[10,20,30])\n+    'List[0] = 10'\n+    >>> sub(\"Dist['name'] = {{ mydict['name'] }}\", mydict={'name': 'Miss Islington'})\n+    \"Dist['name'] = Miss Islington\"\n+    >>> sub(\"Uppercase {{ string.upper() }}\", string=\"hello\")\n+    'Uppercase HELLO'\n+\n+Default Values\n+--------------\n+\n+You can specify a default value for a variable using ``default`` keyword:\n+\n+.. code-block:: python\n+\n+    >>> tmpl = Template(\"\"\"\n+    ... {{default name = \"Sir Lancelot the Brave\"}}\n+    ... My name is {{name}}.\n+    ... \"\"\"\n+    ... )\n+    >>> tmpl.substitute()\n+    'My name is Sir Lancelot the Brave.\\n'\n+    >>> tmpl.substitute(name=\"Sir Bedevere the Wise\")\n+    'My name is Sir Bedevere the Wise.\\n'\n+\n+\n+Inline Python Code\n+------------------\n+\n+Arbitrary python statements can be inserted inline with ``{{py: ...}}``.\n+These do not emit output directly but can modify the template context.\n+\n+.. code-block:: python\n+\n+    >>> tmpl = Template(\"\"\"\n+    ... {{py: x = 5}}\n+    ... Value of x: {{x}}\n+    ... \"\"\")\n+    >>> tmpl.substitute()\n+    'Value of x: 5\\n'\n+\n+Comments\n+--------\n+\n+Comments are introduced with ``{{# ... }}``. They are completely removed\n+from output.\n+\n+.. code-block:: python\n+\n+    >>> sub(\"Hello {{# This is a comment }}World.\")\n+    'Hello World.'\n+\n+Custom delimiters\n+-----------------\n+\n+If you want literal text that looks like a directive (e.g. `{{...}}`), you\n+can use custom delimiters:\n+\n+.. code-block:: python\n+\n+    >>> sub(\"Show literal braces: {{((name))}}\", delimiters=['((', '))'], name=\"x\")\n+    'Show literal braces: {{x}}'\n+\n+.. note:: Parameter `delimiters` can be also passed to ``Template`` class as an argument:\n+\n+   ``Template(\"...\", delimiters=['((', '))'])``\n+\n+Filters\n+-------\n+\n+You can pass callable which will be automatically called with expression as parameter:\n+\n+.. code-block:: python\n+\n+    {{ expression | filtername }}\n+\n+Example:\n+\n+.. code-block:: python\n+\n+    >>> sub(\"Lowercase: {{ name | lower }}\", name=\"ALICE\", lower=lambda x: x.lower())\n+    'Lowercase: alice'\n+\n+Control Blocks\n+==============\n+\n+Tempita supports Python-like control flow directives.\n+These are evaluated at runtime and allow conditional rendering and iteration.\n+\n+Each block has an explicit *closing directive* such as ``endif`` or ``endfor``.\n+\n+``if`` / ``elif`` / ``else`` block\n+----------------------------------\n+\n+Conditional execution based on an expression.\n+\n+**Syntax**::\n+\n+    {{if condition}}\n+      ... content if true ...\n+    {{elif other_condition}}\n+      ... content if elif is true ...\n+    {{else}}\n+      ... content if all above are false ...\n+    {{endif}}\n+\n+**Example**:\n+\n+.. code-block:: python\n+\n+    >>> tmpl = Template(\"\"\"\n+    ... {{if x > 0}}\n+    ... Positive\n+    ... {{elif x == 0}}\n+    ... Zero\n+    ... {{else}}\n+    ... Negative\n+    ... {{endif}}\n+    ... \"\"\")\n+    >>> tmpl.substitute(x=-5)\n+    'Negative\\n'\n+\n+``for`` block\n+-------------\n+\n+Iterate over a sequence and render the body for each element.\n+\n+**Syntax**::\n+\n+    {{for var in iterable}}\n+      ... body using {{var}} ...\n+    {{endfor}}\n+\n+You may also unpack tuples or iterate with multiple variables.\n+\n+**Example**:\n+\n+.. code-block:: python\n+\n+    >>> tmpl = Template(\"\"\"\n+    ... {{for name, score in scores}}\n+    ... {{name}}: {{score}}\n+    ... {{endfor}}\n+    ... \"\"\")\n+    >>> print(tmpl.substitute(scores=[(\"Alice\", 95), (\"Bob\", 88)]))\n+    Alice: 95\n+    Bob: 88\n+\n+\n+.. note:: Tempita ``for`` block supports also ``{{break}}`` and ``{{continue}}`` statements.\n+\n+Nesting Blocks\n+--------------\n+\n+Blocks can be nested arbitrarily.\n+\n+.. code-block:: python\n+\n+    >>> tmpl = Template(\"\"\"\n+    ... {{for item in items}}\n+    ...   {{if item < 0}}\n+    ...   {{continue}}\n+    ...   {{elif item % 2 == 0}}\n+    ...   {{item}} is even\n+    ...   {{else}}\n+    ...   {{item}} is odd\n+    ...   {{endif}}\n+    ... {{endfor}}\n+    ... \"\"\")\n+    >>> print(tmpl.substitute(items=[-1, 1, 2, 3]))\n+      1 is odd\n+      2 is even\n+      3 is odd\n+\n+Indentation, Whitespace, and Newlines\n+-------------------------------------\n+\n+- The template preserves whitespace exactly as written around directives.\n+- Newlines in the template become newlines in output.",
            "html_url": "https://github.com/cython/cython/pull/7149#discussion_r2348792799",
            "id": 2348792799,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc6L_7vf",
            "original_commit_id": "2f8999048a5be9db604614622775a834e085f51d",
            "original_line": 242,
            "original_position": 242,
            "original_start_line": null,
            "path": "docs/src/userguide/tempita.rst",
            "position": 1,
            "pull_request_review_id": 3224281796,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7149",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2348792799/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-09-15T12:10:44Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2348792799",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/14075922?v=4",
                "events_url": "https://api.github.com/users/neutrinoceros/events{/privacy}",
                "followers_url": "https://api.github.com/users/neutrinoceros/followers",
                "following_url": "https://api.github.com/users/neutrinoceros/following{/other_user}",
                "gists_url": "https://api.github.com/users/neutrinoceros/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neutrinoceros",
                "id": 14075922,
                "login": "neutrinoceros",
                "node_id": "MDQ6VXNlcjE0MDc1OTIy",
                "organizations_url": "https://api.github.com/users/neutrinoceros/orgs",
                "received_events_url": "https://api.github.com/users/neutrinoceros/received_events",
                "repos_url": "https://api.github.com/users/neutrinoceros/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neutrinoceros/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neutrinoceros/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/neutrinoceros",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7149#discussion_r2375150091"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7149"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2375150091"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n- If all else fails, code generation using the :ref:`Tempita template engine <tempita>` can be used as a last resort.\r\n```",
            "commit_id": "a369d4f8961791e47436b70cfcf42eb672f097fb",
            "created_at": "2025-09-24T09:21:33Z",
            "diff_hunk": "@@ -322,4 +322,4 @@ i.e. the usual Python patterns.  Specifically:\n   but with the C struct name provided as :ref:`same cname string <resolve-conflicts>`.\n   This allows their usage from more use case specific code that can be included and\n   reused from different optional modules.\n-- If all else fails, code generation can be used as a last resort.\n+- If all else fails, code generation using :ref:`tempita templating language <tempita>` can be used as a last resort.",
            "html_url": "https://github.com/cython/cython/pull/7149#discussion_r2375150091",
            "id": 2375150091,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc6NkeoL",
            "original_commit_id": "a369d4f8961791e47436b70cfcf42eb672f097fb",
            "original_line": 325,
            "original_position": 5,
            "original_start_line": null,
            "path": "docs/src/userguide/migrating_to_cy30.rst",
            "position": 1,
            "pull_request_review_id": 3261991784,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7149",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2375150091/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-09-24T10:06:02Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2375150091",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7149#discussion_r2375157435"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7149"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2375157435"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nThis document describes the Tempita Templating Engine.\r\nIt was originally developed by Ian Bicking.\r\nThe original version of Tempita is available on `PyPI <https://pypi.org/project/Tempita/>`_ and documentation can be found at https://github.com/TurboGears/tempita/blob/main/README.rst.\r\n\r\nTempita is used internally in Cython for non-trivial code-generation purposes.\r\nIt is also available to users as a public API for generating or customizing code when building a Cython module.\r\n```",
            "commit_id": "a369d4f8961791e47436b70cfcf42eb672f097fb",
            "created_at": "2025-09-24T09:24:27Z",
            "diff_hunk": "@@ -0,0 +1,298 @@\n+.. _tempita:\n+\n+Tempita templating language\n+===========================\n+\n+This document describes vendored Tempita Templating Engine originally developed by Ian Bicking. Original version of Tempita\n+is available on `PyPI <https://pypi.org/project/Tempita/>`_.\n+Tempita is used internally in Cython for code-generation purposes. It is also available to users as a public API so they\n+can generate or customize code when building a Cython module.",
            "html_url": "https://github.com/cython/cython/pull/7149#discussion_r2375157435",
            "id": 2375157435,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc6Nkga7",
            "original_commit_id": "a369d4f8961791e47436b70cfcf42eb672f097fb",
            "original_line": 9,
            "original_position": 9,
            "original_start_line": 6,
            "path": "docs/src/userguide/tempita.rst",
            "position": 1,
            "pull_request_review_id": 3261991784,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7149",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2375157435/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-09-24T10:06:02Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2375157435",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7149#discussion_r2375168590"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7149"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2375168590"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nTempita is a simple templating language, similar to Jinja.\r\nBasic usage is as follows:\r\n```",
            "commit_id": "a369d4f8961791e47436b70cfcf42eb672f097fb",
            "created_at": "2025-09-24T09:28:41Z",
            "diff_hunk": "@@ -0,0 +1,298 @@\n+.. _tempita:\n+\n+Tempita templating language\n+===========================\n+\n+This document describes vendored Tempita Templating Engine originally developed by Ian Bicking. Original version of Tempita\n+is available on `PyPI <https://pypi.org/project/Tempita/>`_.\n+Tempita is used internally in Cython for code-generation purposes. It is also available to users as a public API so they\n+can generate or customize code when building a Cython module.\n+\n+Overview\n+--------\n+\n+Tempita is a simple templating language Cython built-in similar to Jinja. Basic usage\n+is as follows:",
            "html_url": "https://github.com/cython/cython/pull/7149#discussion_r2375168590",
            "id": 2375168590,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc6NkjJO",
            "original_commit_id": "a369d4f8961791e47436b70cfcf42eb672f097fb",
            "original_line": 15,
            "original_position": 15,
            "original_start_line": 14,
            "path": "docs/src/userguide/tempita.rst",
            "position": 1,
            "pull_request_review_id": 3261991784,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7149",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2375168590/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-09-24T10:06:02Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2375168590",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7149#discussion_r2375183498"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7149"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2375183498"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nWrite expressions as ``{{ ... }}``, which are evaluated in the template context.\r\n```",
            "commit_id": "a369d4f8961791e47436b70cfcf42eb672f097fb",
            "created_at": "2025-09-24T09:34:38Z",
            "diff_hunk": "@@ -0,0 +1,298 @@\n+.. _tempita:\n+\n+Tempita templating language\n+===========================\n+\n+This document describes vendored Tempita Templating Engine originally developed by Ian Bicking. Original version of Tempita\n+is available on `PyPI <https://pypi.org/project/Tempita/>`_.\n+Tempita is used internally in Cython for code-generation purposes. It is also available to users as a public API so they\n+can generate or customize code when building a Cython module.\n+\n+Overview\n+--------\n+\n+Tempita is a simple templating language Cython built-in similar to Jinja. Basic usage\n+is as follows:\n+\n+.. code-block:: python\n+\n+    from Cython.Tempita import Template\n+\n+    tmpl1 = Template(template_string)       # load from string\n+    tmpl2 = Template.from_filename(path)    # load template from file\n+\n+    tmpl1.substitute(**kwargs)     # pass parameters as named arguments.\n+    tmpl2.sub_vars(mapping)        # pass an argument as dict-like mapping.\n+\n+Tempita also provides a shortcut function:\n+\n+.. code-block:: python\n+\n+    from Cython.Tempita import sub\n+    sub(template_string, **kwargs)\n+\n+Templating Syntax\n+-----------------\n+\n+Below are the different directive types and expression forms supported.\n+\n+Simple Expression Substitution\n+------------------------------\n+\n+Surround expression with ``{{ ... }}``, which is evaluated in the template\n+context.",
            "html_url": "https://github.com/cython/cython/pull/7149#discussion_r2375183498",
            "id": 2375183498,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc6NkmyK",
            "original_commit_id": "a369d4f8961791e47436b70cfcf42eb672f097fb",
            "original_line": 43,
            "original_position": 43,
            "original_start_line": 42,
            "path": "docs/src/userguide/tempita.rst",
            "position": 1,
            "pull_request_review_id": 3261991784,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7149",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2375183498/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-09-24T10:06:02Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2375183498",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7149#discussion_r2375185814"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7149"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2375185814"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nYou can specify a default value for a variable using the ``default`` keyword,\r\nand overwrite it by passing it as argument to the template substitution:\r\n```",
            "commit_id": "a369d4f8961791e47436b70cfcf42eb672f097fb",
            "created_at": "2025-09-24T09:35:31Z",
            "diff_hunk": "@@ -0,0 +1,298 @@\n+.. _tempita:\n+\n+Tempita templating language\n+===========================\n+\n+This document describes vendored Tempita Templating Engine originally developed by Ian Bicking. Original version of Tempita\n+is available on `PyPI <https://pypi.org/project/Tempita/>`_.\n+Tempita is used internally in Cython for code-generation purposes. It is also available to users as a public API so they\n+can generate or customize code when building a Cython module.\n+\n+Overview\n+--------\n+\n+Tempita is a simple templating language Cython built-in similar to Jinja. Basic usage\n+is as follows:\n+\n+.. code-block:: python\n+\n+    from Cython.Tempita import Template\n+\n+    tmpl1 = Template(template_string)       # load from string\n+    tmpl2 = Template.from_filename(path)    # load template from file\n+\n+    tmpl1.substitute(**kwargs)     # pass parameters as named arguments.\n+    tmpl2.sub_vars(mapping)        # pass an argument as dict-like mapping.\n+\n+Tempita also provides a shortcut function:\n+\n+.. code-block:: python\n+\n+    from Cython.Tempita import sub\n+    sub(template_string, **kwargs)\n+\n+Templating Syntax\n+-----------------\n+\n+Below are the different directive types and expression forms supported.\n+\n+Simple Expression Substitution\n+------------------------------\n+\n+Surround expression with ``{{ ... }}``, which is evaluated in the template\n+context.\n+\n+Example:\n+\n+.. code-block:: python\n+\n+    >>> sub(\"Hello {{name}}!\", name=\"World\")\n+    'Hello World!'\n+\n+Expressions can be any valid Python expression: arithmetic, attribute access,\n+indexing, function calls etc.:\n+\n+.. code-block:: python\n+\n+    >>> sub(\"2 * 3 = {{2 * 3}}\")\n+    '2 * 3 = 6'\n+    >>> class User:\n+    ...     name = 'Mark'\n+    ...\n+    >>> sub(\"User: {{ user.name }}\", user=User())\n+    'User: Mark'\n+    >>> sub(\"Hex: {{ hex(num) }}\", num=10)\n+    'Hex: 0xa'\n+    >>> sub(\"Number: {{ func(num) }}\", func=abs, num=-10)\n+    'Number: 10'\n+    >>> sub(\"List[0] = {{ mylist[0] }}\", mylist=[10,20,30])\n+    'List[0] = 10'\n+    >>> sub(\"Dist['name'] = {{ mydict['name'] }}\", mydict={'name': 'Miss Islington'})\n+    \"Dist['name'] = Miss Islington\"\n+    >>> sub(\"Uppercase {{ string.upper() }}\", string=\"hello\")\n+    'Uppercase HELLO'\n+\n+Default Values\n+--------------\n+\n+You can specify a default value for a variable using ``default`` keyword:",
            "html_url": "https://github.com/cython/cython/pull/7149#discussion_r2375185814",
            "id": 2375185814,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc6NknWW",
            "original_commit_id": "a369d4f8961791e47436b70cfcf42eb672f097fb",
            "original_line": 78,
            "original_position": 78,
            "original_start_line": null,
            "path": "docs/src/userguide/tempita.rst",
            "position": 1,
            "pull_request_review_id": 3261991784,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7149",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2375185814/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-09-24T10:06:02Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2375185814",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7149#discussion_r2375191254"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7149"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2375191254"
                }
            },
            "author_association": "MEMBER",
            "body": "You should decide whether you want to have double spaces between sections or single lines, and stick to it. I prefer the more visible (and PEP-8-ish) double blank lines.",
            "commit_id": "8832941781c34392c44c4453d0db5bbf9374a8bb",
            "created_at": "2025-09-24T09:37:52Z",
            "diff_hunk": "@@ -0,0 +1,298 @@\n+.. _tempita:\n+\n+Tempita templating language\n+===========================\n+\n+This document describes vendored Tempita Templating Engine originally developed by Ian Bicking. Original version of Tempita\n+is available on `PyPI <https://pypi.org/project/Tempita/>`_.\n+Tempita is used internally in Cython for code-generation purposes. It is also available to users as a public API so they\n+can generate or customize code when building a Cython module.\n+\n+Overview\n+--------\n+\n+Tempita is a simple templating language Cython built-in similar to Jinja. Basic usage\n+is as follows:\n+\n+.. code-block:: python\n+\n+    from Cython.Tempita import Template\n+\n+    tmpl1 = Template(template_string)       # load from string\n+    tmpl2 = Template.from_filename(path)    # load template from file\n+\n+    tmpl1.substitute(**kwargs)     # pass parameters as named arguments.\n+    tmpl2.sub_vars(mapping)        # pass an argument as dict-like mapping.\n+\n+Tempita also provides a shortcut function:\n+\n+.. code-block:: python\n+\n+    from Cython.Tempita import sub\n+    sub(template_string, **kwargs)\n+\n+Templating Syntax\n+-----------------\n+\n+Below are the different directive types and expression forms supported.\n+\n+Simple Expression Substitution\n+------------------------------\n+\n+Surround expression with ``{{ ... }}``, which is evaluated in the template\n+context.\n+\n+Example:\n+\n+.. code-block:: python\n+\n+    >>> sub(\"Hello {{name}}!\", name=\"World\")\n+    'Hello World!'\n+\n+Expressions can be any valid Python expression: arithmetic, attribute access,\n+indexing, function calls etc.:\n+\n+.. code-block:: python\n+\n+    >>> sub(\"2 * 3 = {{2 * 3}}\")\n+    '2 * 3 = 6'\n+    >>> class User:\n+    ...     name = 'Mark'\n+    ...\n+    >>> sub(\"User: {{ user.name }}\", user=User())\n+    'User: Mark'\n+    >>> sub(\"Hex: {{ hex(num) }}\", num=10)\n+    'Hex: 0xa'\n+    >>> sub(\"Number: {{ func(num) }}\", func=abs, num=-10)\n+    'Number: 10'\n+    >>> sub(\"List[0] = {{ mylist[0] }}\", mylist=[10,20,30])\n+    'List[0] = 10'\n+    >>> sub(\"Dist['name'] = {{ mydict['name'] }}\", mydict={'name': 'Miss Islington'})\n+    \"Dist['name'] = Miss Islington\"\n+    >>> sub(\"Uppercase {{ string.upper() }}\", string=\"hello\")\n+    'Uppercase HELLO'\n+\n+Default Values\n+--------------\n+\n+You can specify a default value for a variable using ``default`` keyword:\n+\n+.. code-block:: python\n+\n+    >>> tmpl = Template(\"\"\"\n+    ... {{default name = \"Sir Lancelot the Brave\"}}\n+    ... My name is {{name}}.\n+    ... \"\"\"\n+    ... )\n+    >>> tmpl.substitute()\n+    'My name is Sir Lancelot the Brave.\\n'\n+    >>> tmpl.substitute(name=\"Sir Bedevere the Wise\")\n+    'My name is Sir Bedevere the Wise.\\n'\n+\n+\n+Inline Python Code\n+------------------\n+",
            "html_url": "https://github.com/cython/cython/pull/7149#discussion_r2375191254",
            "id": 2375191254,
            "line": 102,
            "node_id": "PRRC_kwDOABDGAc6NkorW",
            "original_commit_id": "a369d4f8961791e47436b70cfcf42eb672f097fb",
            "original_line": 95,
            "original_position": 95,
            "original_start_line": 91,
            "path": "docs/src/userguide/tempita.rst",
            "position": 102,
            "pull_request_review_id": 3261991784,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7149",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2375191254/reactions"
            },
            "side": "RIGHT",
            "start_line": 98,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-09-24T10:06:02Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2375191254",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7149#discussion_r2375197798"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7149"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2375197798"
                }
            },
            "author_association": "MEMBER",
            "body": "Let's use delimiters that visually distinguish themselves from the braces that we use everywhere else.\r\n```suggestion\r\n    >>> sub(\"Show literal braces: {{<<name>>}}\", delimiters=['<<', '>>'], name=\"x\")\r\n    'Show literal braces: {{x}}'\r\n```",
            "commit_id": "a369d4f8961791e47436b70cfcf42eb672f097fb",
            "created_at": "2025-09-24T09:40:27Z",
            "diff_hunk": "@@ -0,0 +1,298 @@\n+.. _tempita:\n+\n+Tempita templating language\n+===========================\n+\n+This document describes vendored Tempita Templating Engine originally developed by Ian Bicking. Original version of Tempita\n+is available on `PyPI <https://pypi.org/project/Tempita/>`_.\n+Tempita is used internally in Cython for code-generation purposes. It is also available to users as a public API so they\n+can generate or customize code when building a Cython module.\n+\n+Overview\n+--------\n+\n+Tempita is a simple templating language Cython built-in similar to Jinja. Basic usage\n+is as follows:\n+\n+.. code-block:: python\n+\n+    from Cython.Tempita import Template\n+\n+    tmpl1 = Template(template_string)       # load from string\n+    tmpl2 = Template.from_filename(path)    # load template from file\n+\n+    tmpl1.substitute(**kwargs)     # pass parameters as named arguments.\n+    tmpl2.sub_vars(mapping)        # pass an argument as dict-like mapping.\n+\n+Tempita also provides a shortcut function:\n+\n+.. code-block:: python\n+\n+    from Cython.Tempita import sub\n+    sub(template_string, **kwargs)\n+\n+Templating Syntax\n+-----------------\n+\n+Below are the different directive types and expression forms supported.\n+\n+Simple Expression Substitution\n+------------------------------\n+\n+Surround expression with ``{{ ... }}``, which is evaluated in the template\n+context.\n+\n+Example:\n+\n+.. code-block:: python\n+\n+    >>> sub(\"Hello {{name}}!\", name=\"World\")\n+    'Hello World!'\n+\n+Expressions can be any valid Python expression: arithmetic, attribute access,\n+indexing, function calls etc.:\n+\n+.. code-block:: python\n+\n+    >>> sub(\"2 * 3 = {{2 * 3}}\")\n+    '2 * 3 = 6'\n+    >>> class User:\n+    ...     name = 'Mark'\n+    ...\n+    >>> sub(\"User: {{ user.name }}\", user=User())\n+    'User: Mark'\n+    >>> sub(\"Hex: {{ hex(num) }}\", num=10)\n+    'Hex: 0xa'\n+    >>> sub(\"Number: {{ func(num) }}\", func=abs, num=-10)\n+    'Number: 10'\n+    >>> sub(\"List[0] = {{ mylist[0] }}\", mylist=[10,20,30])\n+    'List[0] = 10'\n+    >>> sub(\"Dist['name'] = {{ mydict['name'] }}\", mydict={'name': 'Miss Islington'})\n+    \"Dist['name'] = Miss Islington\"\n+    >>> sub(\"Uppercase {{ string.upper() }}\", string=\"hello\")\n+    'Uppercase HELLO'\n+\n+Default Values\n+--------------\n+\n+You can specify a default value for a variable using ``default`` keyword:\n+\n+.. code-block:: python\n+\n+    >>> tmpl = Template(\"\"\"\n+    ... {{default name = \"Sir Lancelot the Brave\"}}\n+    ... My name is {{name}}.\n+    ... \"\"\"\n+    ... )\n+    >>> tmpl.substitute()\n+    'My name is Sir Lancelot the Brave.\\n'\n+    >>> tmpl.substitute(name=\"Sir Bedevere the Wise\")\n+    'My name is Sir Bedevere the Wise.\\n'\n+\n+\n+Inline Python Code\n+------------------\n+\n+Arbitrary Python statements can be inserted inline with ``{{py: ...}}``.\n+These do not emit output directly but can modify the template context.\n+\n+.. code-block:: python\n+\n+    >>> tmpl = Template(\"\"\"\n+    ... {{py: x = 5}}\n+    ... Value of x: {{x}}\n+    ... \"\"\")\n+    >>> tmpl.substitute()\n+    'Value of x: 5\\n'\n+\n+Comments\n+--------\n+\n+Comments are introduced with ``{{# ... }}``. They are completely removed\n+from output.\n+\n+.. code-block:: python\n+\n+    >>> sub(\"Hello {{# This is a comment }}World.\")\n+    'Hello World.'\n+\n+Custom delimiters\n+-----------------\n+\n+If you want literal text that looks like a directive (e.g. ``{{...}}``), you\n+can use custom delimiters:\n+\n+.. code-block:: python\n+\n+    >>> sub(\"Show literal braces: {{((name))}}\", delimiters=['((', '))'], name=\"x\")\n+    'Show literal braces: {{x}}'",
            "html_url": "https://github.com/cython/cython/pull/7149#discussion_r2375197798",
            "id": 2375197798,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc6NkqRm",
            "original_commit_id": "a369d4f8961791e47436b70cfcf42eb672f097fb",
            "original_line": 128,
            "original_position": 128,
            "original_start_line": 127,
            "path": "docs/src/userguide/tempita.rst",
            "position": 1,
            "pull_request_review_id": 3261991784,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7149",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2375197798/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-09-24T10:06:02Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2375197798",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7149#discussion_r2375206270"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7149"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2375206270"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nCustom delimiter characters\r\n---------------------------\r\n\r\nIn cases where the double braces that Tempita normally uses as delimiters (``{{...}}``) get in the way,\r\nyou can replace them with other characters:\r\n```",
            "commit_id": "a369d4f8961791e47436b70cfcf42eb672f097fb",
            "created_at": "2025-09-24T09:43:39Z",
            "diff_hunk": "@@ -0,0 +1,298 @@\n+.. _tempita:\n+\n+Tempita templating language\n+===========================\n+\n+This document describes vendored Tempita Templating Engine originally developed by Ian Bicking. Original version of Tempita\n+is available on `PyPI <https://pypi.org/project/Tempita/>`_.\n+Tempita is used internally in Cython for code-generation purposes. It is also available to users as a public API so they\n+can generate or customize code when building a Cython module.\n+\n+Overview\n+--------\n+\n+Tempita is a simple templating language Cython built-in similar to Jinja. Basic usage\n+is as follows:\n+\n+.. code-block:: python\n+\n+    from Cython.Tempita import Template\n+\n+    tmpl1 = Template(template_string)       # load from string\n+    tmpl2 = Template.from_filename(path)    # load template from file\n+\n+    tmpl1.substitute(**kwargs)     # pass parameters as named arguments.\n+    tmpl2.sub_vars(mapping)        # pass an argument as dict-like mapping.\n+\n+Tempita also provides a shortcut function:\n+\n+.. code-block:: python\n+\n+    from Cython.Tempita import sub\n+    sub(template_string, **kwargs)\n+\n+Templating Syntax\n+-----------------\n+\n+Below are the different directive types and expression forms supported.\n+\n+Simple Expression Substitution\n+------------------------------\n+\n+Surround expression with ``{{ ... }}``, which is evaluated in the template\n+context.\n+\n+Example:\n+\n+.. code-block:: python\n+\n+    >>> sub(\"Hello {{name}}!\", name=\"World\")\n+    'Hello World!'\n+\n+Expressions can be any valid Python expression: arithmetic, attribute access,\n+indexing, function calls etc.:\n+\n+.. code-block:: python\n+\n+    >>> sub(\"2 * 3 = {{2 * 3}}\")\n+    '2 * 3 = 6'\n+    >>> class User:\n+    ...     name = 'Mark'\n+    ...\n+    >>> sub(\"User: {{ user.name }}\", user=User())\n+    'User: Mark'\n+    >>> sub(\"Hex: {{ hex(num) }}\", num=10)\n+    'Hex: 0xa'\n+    >>> sub(\"Number: {{ func(num) }}\", func=abs, num=-10)\n+    'Number: 10'\n+    >>> sub(\"List[0] = {{ mylist[0] }}\", mylist=[10,20,30])\n+    'List[0] = 10'\n+    >>> sub(\"Dist['name'] = {{ mydict['name'] }}\", mydict={'name': 'Miss Islington'})\n+    \"Dist['name'] = Miss Islington\"\n+    >>> sub(\"Uppercase {{ string.upper() }}\", string=\"hello\")\n+    'Uppercase HELLO'\n+\n+Default Values\n+--------------\n+\n+You can specify a default value for a variable using ``default`` keyword:\n+\n+.. code-block:: python\n+\n+    >>> tmpl = Template(\"\"\"\n+    ... {{default name = \"Sir Lancelot the Brave\"}}\n+    ... My name is {{name}}.\n+    ... \"\"\"\n+    ... )\n+    >>> tmpl.substitute()\n+    'My name is Sir Lancelot the Brave.\\n'\n+    >>> tmpl.substitute(name=\"Sir Bedevere the Wise\")\n+    'My name is Sir Bedevere the Wise.\\n'\n+\n+\n+Inline Python Code\n+------------------\n+\n+Arbitrary Python statements can be inserted inline with ``{{py: ...}}``.\n+These do not emit output directly but can modify the template context.\n+\n+.. code-block:: python\n+\n+    >>> tmpl = Template(\"\"\"\n+    ... {{py: x = 5}}\n+    ... Value of x: {{x}}\n+    ... \"\"\")\n+    >>> tmpl.substitute()\n+    'Value of x: 5\\n'\n+\n+Comments\n+--------\n+\n+Comments are introduced with ``{{# ... }}``. They are completely removed\n+from output.\n+\n+.. code-block:: python\n+\n+    >>> sub(\"Hello {{# This is a comment }}World.\")\n+    'Hello World.'\n+\n+Custom delimiters\n+-----------------\n+\n+If you want literal text that looks like a directive (e.g. ``{{...}}``), you\n+can use custom delimiters:",
            "html_url": "https://github.com/cython/cython/pull/7149#discussion_r2375206270",
            "id": 2375206270,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc6NksV-",
            "original_commit_id": "a369d4f8961791e47436b70cfcf42eb672f097fb",
            "original_line": 123,
            "original_position": 123,
            "original_start_line": 119,
            "path": "docs/src/userguide/tempita.rst",
            "position": 1,
            "pull_request_review_id": 3261991784,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7149",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2375206270/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-09-24T10:06:02Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2375206270",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7149#discussion_r2375217106"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7149"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2375217106"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n.. note:: The ``delimiters`` can also be passed as an argument to the ``Template`` class,\r\nthus keeping them together with the template definition that uses them,\r\nrather than needing to remember them later in the substitution step.\r\n```",
            "commit_id": "a369d4f8961791e47436b70cfcf42eb672f097fb",
            "created_at": "2025-09-24T09:47:53Z",
            "diff_hunk": "@@ -0,0 +1,298 @@\n+.. _tempita:\n+\n+Tempita templating language\n+===========================\n+\n+This document describes vendored Tempita Templating Engine originally developed by Ian Bicking. Original version of Tempita\n+is available on `PyPI <https://pypi.org/project/Tempita/>`_.\n+Tempita is used internally in Cython for code-generation purposes. It is also available to users as a public API so they\n+can generate or customize code when building a Cython module.\n+\n+Overview\n+--------\n+\n+Tempita is a simple templating language Cython built-in similar to Jinja. Basic usage\n+is as follows:\n+\n+.. code-block:: python\n+\n+    from Cython.Tempita import Template\n+\n+    tmpl1 = Template(template_string)       # load from string\n+    tmpl2 = Template.from_filename(path)    # load template from file\n+\n+    tmpl1.substitute(**kwargs)     # pass parameters as named arguments.\n+    tmpl2.sub_vars(mapping)        # pass an argument as dict-like mapping.\n+\n+Tempita also provides a shortcut function:\n+\n+.. code-block:: python\n+\n+    from Cython.Tempita import sub\n+    sub(template_string, **kwargs)\n+\n+Templating Syntax\n+-----------------\n+\n+Below are the different directive types and expression forms supported.\n+\n+Simple Expression Substitution\n+------------------------------\n+\n+Surround expression with ``{{ ... }}``, which is evaluated in the template\n+context.\n+\n+Example:\n+\n+.. code-block:: python\n+\n+    >>> sub(\"Hello {{name}}!\", name=\"World\")\n+    'Hello World!'\n+\n+Expressions can be any valid Python expression: arithmetic, attribute access,\n+indexing, function calls etc.:\n+\n+.. code-block:: python\n+\n+    >>> sub(\"2 * 3 = {{2 * 3}}\")\n+    '2 * 3 = 6'\n+    >>> class User:\n+    ...     name = 'Mark'\n+    ...\n+    >>> sub(\"User: {{ user.name }}\", user=User())\n+    'User: Mark'\n+    >>> sub(\"Hex: {{ hex(num) }}\", num=10)\n+    'Hex: 0xa'\n+    >>> sub(\"Number: {{ func(num) }}\", func=abs, num=-10)\n+    'Number: 10'\n+    >>> sub(\"List[0] = {{ mylist[0] }}\", mylist=[10,20,30])\n+    'List[0] = 10'\n+    >>> sub(\"Dist['name'] = {{ mydict['name'] }}\", mydict={'name': 'Miss Islington'})\n+    \"Dist['name'] = Miss Islington\"\n+    >>> sub(\"Uppercase {{ string.upper() }}\", string=\"hello\")\n+    'Uppercase HELLO'\n+\n+Default Values\n+--------------\n+\n+You can specify a default value for a variable using ``default`` keyword:\n+\n+.. code-block:: python\n+\n+    >>> tmpl = Template(\"\"\"\n+    ... {{default name = \"Sir Lancelot the Brave\"}}\n+    ... My name is {{name}}.\n+    ... \"\"\"\n+    ... )\n+    >>> tmpl.substitute()\n+    'My name is Sir Lancelot the Brave.\\n'\n+    >>> tmpl.substitute(name=\"Sir Bedevere the Wise\")\n+    'My name is Sir Bedevere the Wise.\\n'\n+\n+\n+Inline Python Code\n+------------------\n+\n+Arbitrary Python statements can be inserted inline with ``{{py: ...}}``.\n+These do not emit output directly but can modify the template context.\n+\n+.. code-block:: python\n+\n+    >>> tmpl = Template(\"\"\"\n+    ... {{py: x = 5}}\n+    ... Value of x: {{x}}\n+    ... \"\"\")\n+    >>> tmpl.substitute()\n+    'Value of x: 5\\n'\n+\n+Comments\n+--------\n+\n+Comments are introduced with ``{{# ... }}``. They are completely removed\n+from output.\n+\n+.. code-block:: python\n+\n+    >>> sub(\"Hello {{# This is a comment }}World.\")\n+    'Hello World.'\n+\n+Custom delimiters\n+-----------------\n+\n+If you want literal text that looks like a directive (e.g. ``{{...}}``), you\n+can use custom delimiters:\n+\n+.. code-block:: python\n+\n+    >>> sub(\"Show literal braces: {{((name))}}\", delimiters=['((', '))'], name=\"x\")\n+    'Show literal braces: {{x}}'\n+\n+.. note:: Parameter ``delimiters`` can be also passed to ``Template`` class as an argument:",
            "html_url": "https://github.com/cython/cython/pull/7149#discussion_r2375217106",
            "id": 2375217106,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc6Nku_S",
            "original_commit_id": "a369d4f8961791e47436b70cfcf42eb672f097fb",
            "original_line": 130,
            "original_position": 130,
            "original_start_line": null,
            "path": "docs/src/userguide/tempita.rst",
            "position": 1,
            "pull_request_review_id": 3261991784,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7149",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2375217106/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-09-24T10:06:02Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2375217106",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7149#discussion_r2375231043"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7149"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2375231043"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nFilters\r\n-------\r\n\r\nYou can post-process the result of an expression before it is written into the template.\r\nBelow, the ``filtername`` refers to a callable (function) that will be called by the template engine\r\nand receives the result of the preceding expression as argument.\r\nWhatever it outputs will then be written into the templating result.\r\n```",
            "commit_id": "a369d4f8961791e47436b70cfcf42eb672f097fb",
            "created_at": "2025-09-24T09:53:22Z",
            "diff_hunk": "@@ -0,0 +1,298 @@\n+.. _tempita:\n+\n+Tempita templating language\n+===========================\n+\n+This document describes vendored Tempita Templating Engine originally developed by Ian Bicking. Original version of Tempita\n+is available on `PyPI <https://pypi.org/project/Tempita/>`_.\n+Tempita is used internally in Cython for code-generation purposes. It is also available to users as a public API so they\n+can generate or customize code when building a Cython module.\n+\n+Overview\n+--------\n+\n+Tempita is a simple templating language Cython built-in similar to Jinja. Basic usage\n+is as follows:\n+\n+.. code-block:: python\n+\n+    from Cython.Tempita import Template\n+\n+    tmpl1 = Template(template_string)       # load from string\n+    tmpl2 = Template.from_filename(path)    # load template from file\n+\n+    tmpl1.substitute(**kwargs)     # pass parameters as named arguments.\n+    tmpl2.sub_vars(mapping)        # pass an argument as dict-like mapping.\n+\n+Tempita also provides a shortcut function:\n+\n+.. code-block:: python\n+\n+    from Cython.Tempita import sub\n+    sub(template_string, **kwargs)\n+\n+Templating Syntax\n+-----------------\n+\n+Below are the different directive types and expression forms supported.\n+\n+Simple Expression Substitution\n+------------------------------\n+\n+Surround expression with ``{{ ... }}``, which is evaluated in the template\n+context.\n+\n+Example:\n+\n+.. code-block:: python\n+\n+    >>> sub(\"Hello {{name}}!\", name=\"World\")\n+    'Hello World!'\n+\n+Expressions can be any valid Python expression: arithmetic, attribute access,\n+indexing, function calls etc.:\n+\n+.. code-block:: python\n+\n+    >>> sub(\"2 * 3 = {{2 * 3}}\")\n+    '2 * 3 = 6'\n+    >>> class User:\n+    ...     name = 'Mark'\n+    ...\n+    >>> sub(\"User: {{ user.name }}\", user=User())\n+    'User: Mark'\n+    >>> sub(\"Hex: {{ hex(num) }}\", num=10)\n+    'Hex: 0xa'\n+    >>> sub(\"Number: {{ func(num) }}\", func=abs, num=-10)\n+    'Number: 10'\n+    >>> sub(\"List[0] = {{ mylist[0] }}\", mylist=[10,20,30])\n+    'List[0] = 10'\n+    >>> sub(\"Dist['name'] = {{ mydict['name'] }}\", mydict={'name': 'Miss Islington'})\n+    \"Dist['name'] = Miss Islington\"\n+    >>> sub(\"Uppercase {{ string.upper() }}\", string=\"hello\")\n+    'Uppercase HELLO'\n+\n+Default Values\n+--------------\n+\n+You can specify a default value for a variable using ``default`` keyword:\n+\n+.. code-block:: python\n+\n+    >>> tmpl = Template(\"\"\"\n+    ... {{default name = \"Sir Lancelot the Brave\"}}\n+    ... My name is {{name}}.\n+    ... \"\"\"\n+    ... )\n+    >>> tmpl.substitute()\n+    'My name is Sir Lancelot the Brave.\\n'\n+    >>> tmpl.substitute(name=\"Sir Bedevere the Wise\")\n+    'My name is Sir Bedevere the Wise.\\n'\n+\n+\n+Inline Python Code\n+------------------\n+\n+Arbitrary Python statements can be inserted inline with ``{{py: ...}}``.\n+These do not emit output directly but can modify the template context.\n+\n+.. code-block:: python\n+\n+    >>> tmpl = Template(\"\"\"\n+    ... {{py: x = 5}}\n+    ... Value of x: {{x}}\n+    ... \"\"\")\n+    >>> tmpl.substitute()\n+    'Value of x: 5\\n'\n+\n+Comments\n+--------\n+\n+Comments are introduced with ``{{# ... }}``. They are completely removed\n+from output.\n+\n+.. code-block:: python\n+\n+    >>> sub(\"Hello {{# This is a comment }}World.\")\n+    'Hello World.'\n+\n+Custom delimiters\n+-----------------\n+\n+If you want literal text that looks like a directive (e.g. ``{{...}}``), you\n+can use custom delimiters:\n+\n+.. code-block:: python\n+\n+    >>> sub(\"Show literal braces: {{((name))}}\", delimiters=['((', '))'], name=\"x\")\n+    'Show literal braces: {{x}}'\n+\n+.. note:: Parameter ``delimiters`` can be also passed to ``Template`` class as an argument:\n+\n+   ``Template(\"...\", delimiters=['((', '))'])``\n+\n+Filters\n+-------\n+\n+You can pass callable which will be automatically called with expression as parameter:",
            "html_url": "https://github.com/cython/cython/pull/7149#discussion_r2375231043",
            "id": 2375231043,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc6NkyZD",
            "original_commit_id": "a369d4f8961791e47436b70cfcf42eb672f097fb",
            "original_line": 137,
            "original_position": 137,
            "original_start_line": 134,
            "path": "docs/src/userguide/tempita.rst",
            "position": 1,
            "pull_request_review_id": 3261991784,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7149",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2375231043/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-09-24T10:06:02Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2375231043",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7149#discussion_r2375241481"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7149"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2375241481"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n\r\nOverview\r\n********\r\n```",
            "commit_id": "a369d4f8961791e47436b70cfcf42eb672f097fb",
            "created_at": "2025-09-24T09:57:25Z",
            "diff_hunk": "@@ -0,0 +1,298 @@\n+.. _tempita:\n+\n+Tempita templating language\n+===========================\n+\n+This document describes vendored Tempita Templating Engine originally developed by Ian Bicking. Original version of Tempita\n+is available on `PyPI <https://pypi.org/project/Tempita/>`_.\n+Tempita is used internally in Cython for code-generation purposes. It is also available to users as a public API so they\n+can generate or customize code when building a Cython module.\n+\n+Overview\n+--------",
            "html_url": "https://github.com/cython/cython/pull/7149#discussion_r2375241481",
            "id": 2375241481,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc6Nk08J",
            "original_commit_id": "a369d4f8961791e47436b70cfcf42eb672f097fb",
            "original_line": 12,
            "original_position": 12,
            "original_start_line": 11,
            "path": "docs/src/userguide/tempita.rst",
            "position": 1,
            "pull_request_review_id": 3261991784,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7149",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2375241481/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-09-24T10:06:02Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2375241481",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7149#discussion_r2375242473"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7149"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2375242473"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n\r\nTemplating Syntax\r\n*****************\r\n```",
            "commit_id": "a369d4f8961791e47436b70cfcf42eb672f097fb",
            "created_at": "2025-09-24T09:57:49Z",
            "diff_hunk": "@@ -0,0 +1,298 @@\n+.. _tempita:\n+\n+Tempita templating language\n+===========================\n+\n+This document describes vendored Tempita Templating Engine originally developed by Ian Bicking. Original version of Tempita\n+is available on `PyPI <https://pypi.org/project/Tempita/>`_.\n+Tempita is used internally in Cython for code-generation purposes. It is also available to users as a public API so they\n+can generate or customize code when building a Cython module.\n+\n+Overview\n+--------\n+\n+Tempita is a simple templating language Cython built-in similar to Jinja. Basic usage\n+is as follows:\n+\n+.. code-block:: python\n+\n+    from Cython.Tempita import Template\n+\n+    tmpl1 = Template(template_string)       # load from string\n+    tmpl2 = Template.from_filename(path)    # load template from file\n+\n+    tmpl1.substitute(**kwargs)     # pass parameters as named arguments.\n+    tmpl2.sub_vars(mapping)        # pass an argument as dict-like mapping.\n+\n+Tempita also provides a shortcut function:\n+\n+.. code-block:: python\n+\n+    from Cython.Tempita import sub\n+    sub(template_string, **kwargs)\n+\n+Templating Syntax\n+-----------------",
            "html_url": "https://github.com/cython/cython/pull/7149#discussion_r2375242473",
            "id": 2375242473,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc6Nk1Lp",
            "original_commit_id": "a369d4f8961791e47436b70cfcf42eb672f097fb",
            "original_line": 35,
            "original_position": 35,
            "original_start_line": 34,
            "path": "docs/src/userguide/tempita.rst",
            "position": 1,
            "pull_request_review_id": 3261991784,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7149",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2375242473/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-09-24T10:06:02Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2375242473",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7149#discussion_r2375243658"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7149"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2375243658"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nControl Blocks\r\n**************\r\n```",
            "commit_id": "a369d4f8961791e47436b70cfcf42eb672f097fb",
            "created_at": "2025-09-24T09:58:14Z",
            "diff_hunk": "@@ -0,0 +1,298 @@\n+.. _tempita:\n+\n+Tempita templating language\n+===========================\n+\n+This document describes vendored Tempita Templating Engine originally developed by Ian Bicking. Original version of Tempita\n+is available on `PyPI <https://pypi.org/project/Tempita/>`_.\n+Tempita is used internally in Cython for code-generation purposes. It is also available to users as a public API so they\n+can generate or customize code when building a Cython module.\n+\n+Overview\n+--------\n+\n+Tempita is a simple templating language Cython built-in similar to Jinja. Basic usage\n+is as follows:\n+\n+.. code-block:: python\n+\n+    from Cython.Tempita import Template\n+\n+    tmpl1 = Template(template_string)       # load from string\n+    tmpl2 = Template.from_filename(path)    # load template from file\n+\n+    tmpl1.substitute(**kwargs)     # pass parameters as named arguments.\n+    tmpl2.sub_vars(mapping)        # pass an argument as dict-like mapping.\n+\n+Tempita also provides a shortcut function:\n+\n+.. code-block:: python\n+\n+    from Cython.Tempita import sub\n+    sub(template_string, **kwargs)\n+\n+Templating Syntax\n+-----------------\n+\n+Below are the different directive types and expression forms supported.\n+\n+Simple Expression Substitution\n+------------------------------\n+\n+Surround expression with ``{{ ... }}``, which is evaluated in the template\n+context.\n+\n+Example:\n+\n+.. code-block:: python\n+\n+    >>> sub(\"Hello {{name}}!\", name=\"World\")\n+    'Hello World!'\n+\n+Expressions can be any valid Python expression: arithmetic, attribute access,\n+indexing, function calls etc.:\n+\n+.. code-block:: python\n+\n+    >>> sub(\"2 * 3 = {{2 * 3}}\")\n+    '2 * 3 = 6'\n+    >>> class User:\n+    ...     name = 'Mark'\n+    ...\n+    >>> sub(\"User: {{ user.name }}\", user=User())\n+    'User: Mark'\n+    >>> sub(\"Hex: {{ hex(num) }}\", num=10)\n+    'Hex: 0xa'\n+    >>> sub(\"Number: {{ func(num) }}\", func=abs, num=-10)\n+    'Number: 10'\n+    >>> sub(\"List[0] = {{ mylist[0] }}\", mylist=[10,20,30])\n+    'List[0] = 10'\n+    >>> sub(\"Dist['name'] = {{ mydict['name'] }}\", mydict={'name': 'Miss Islington'})\n+    \"Dist['name'] = Miss Islington\"\n+    >>> sub(\"Uppercase {{ string.upper() }}\", string=\"hello\")\n+    'Uppercase HELLO'\n+\n+Default Values\n+--------------\n+\n+You can specify a default value for a variable using ``default`` keyword:\n+\n+.. code-block:: python\n+\n+    >>> tmpl = Template(\"\"\"\n+    ... {{default name = \"Sir Lancelot the Brave\"}}\n+    ... My name is {{name}}.\n+    ... \"\"\"\n+    ... )\n+    >>> tmpl.substitute()\n+    'My name is Sir Lancelot the Brave.\\n'\n+    >>> tmpl.substitute(name=\"Sir Bedevere the Wise\")\n+    'My name is Sir Bedevere the Wise.\\n'\n+\n+\n+Inline Python Code\n+------------------\n+\n+Arbitrary Python statements can be inserted inline with ``{{py: ...}}``.\n+These do not emit output directly but can modify the template context.\n+\n+.. code-block:: python\n+\n+    >>> tmpl = Template(\"\"\"\n+    ... {{py: x = 5}}\n+    ... Value of x: {{x}}\n+    ... \"\"\")\n+    >>> tmpl.substitute()\n+    'Value of x: 5\\n'\n+\n+Comments\n+--------\n+\n+Comments are introduced with ``{{# ... }}``. They are completely removed\n+from output.\n+\n+.. code-block:: python\n+\n+    >>> sub(\"Hello {{# This is a comment }}World.\")\n+    'Hello World.'\n+\n+Custom delimiters\n+-----------------\n+\n+If you want literal text that looks like a directive (e.g. ``{{...}}``), you\n+can use custom delimiters:\n+\n+.. code-block:: python\n+\n+    >>> sub(\"Show literal braces: {{((name))}}\", delimiters=['((', '))'], name=\"x\")\n+    'Show literal braces: {{x}}'\n+\n+.. note:: Parameter ``delimiters`` can be also passed to ``Template`` class as an argument:\n+\n+   ``Template(\"...\", delimiters=['((', '))'])``\n+\n+Filters\n+-------\n+\n+You can pass callable which will be automatically called with expression as parameter:\n+\n+.. code-block:: python\n+\n+    {{ expression | filtername }}\n+\n+Example:\n+\n+.. code-block:: python\n+\n+    >>> sub(\"Lowercase: {{ name | lower }}\", name=\"ALICE\", lower=lambda x: x.lower())\n+    'Lowercase: alice'\n+\n+Control Blocks\n+==============",
            "html_url": "https://github.com/cython/cython/pull/7149#discussion_r2375243658",
            "id": 2375243658,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc6Nk1eK",
            "original_commit_id": "a369d4f8961791e47436b70cfcf42eb672f097fb",
            "original_line": 151,
            "original_position": 151,
            "original_start_line": 150,
            "path": "docs/src/userguide/tempita.rst",
            "position": 1,
            "pull_request_review_id": 3261991784,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7149",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2375243658/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-09-24T10:06:02Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2375243658",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7149#discussion_r2375249119"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7149"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2375249119"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nYou may also unpack tuples or iterate with multiple variables, as known from Python for-loops.\r\n```",
            "commit_id": "a369d4f8961791e47436b70cfcf42eb672f097fb",
            "created_at": "2025-09-24T10:00:18Z",
            "diff_hunk": "@@ -0,0 +1,298 @@\n+.. _tempita:\n+\n+Tempita templating language\n+===========================\n+\n+This document describes vendored Tempita Templating Engine originally developed by Ian Bicking. Original version of Tempita\n+is available on `PyPI <https://pypi.org/project/Tempita/>`_.\n+Tempita is used internally in Cython for code-generation purposes. It is also available to users as a public API so they\n+can generate or customize code when building a Cython module.\n+\n+Overview\n+--------\n+\n+Tempita is a simple templating language Cython built-in similar to Jinja. Basic usage\n+is as follows:\n+\n+.. code-block:: python\n+\n+    from Cython.Tempita import Template\n+\n+    tmpl1 = Template(template_string)       # load from string\n+    tmpl2 = Template.from_filename(path)    # load template from file\n+\n+    tmpl1.substitute(**kwargs)     # pass parameters as named arguments.\n+    tmpl2.sub_vars(mapping)        # pass an argument as dict-like mapping.\n+\n+Tempita also provides a shortcut function:\n+\n+.. code-block:: python\n+\n+    from Cython.Tempita import sub\n+    sub(template_string, **kwargs)\n+\n+Templating Syntax\n+-----------------\n+\n+Below are the different directive types and expression forms supported.\n+\n+Simple Expression Substitution\n+------------------------------\n+\n+Surround expression with ``{{ ... }}``, which is evaluated in the template\n+context.\n+\n+Example:\n+\n+.. code-block:: python\n+\n+    >>> sub(\"Hello {{name}}!\", name=\"World\")\n+    'Hello World!'\n+\n+Expressions can be any valid Python expression: arithmetic, attribute access,\n+indexing, function calls etc.:\n+\n+.. code-block:: python\n+\n+    >>> sub(\"2 * 3 = {{2 * 3}}\")\n+    '2 * 3 = 6'\n+    >>> class User:\n+    ...     name = 'Mark'\n+    ...\n+    >>> sub(\"User: {{ user.name }}\", user=User())\n+    'User: Mark'\n+    >>> sub(\"Hex: {{ hex(num) }}\", num=10)\n+    'Hex: 0xa'\n+    >>> sub(\"Number: {{ func(num) }}\", func=abs, num=-10)\n+    'Number: 10'\n+    >>> sub(\"List[0] = {{ mylist[0] }}\", mylist=[10,20,30])\n+    'List[0] = 10'\n+    >>> sub(\"Dist['name'] = {{ mydict['name'] }}\", mydict={'name': 'Miss Islington'})\n+    \"Dist['name'] = Miss Islington\"\n+    >>> sub(\"Uppercase {{ string.upper() }}\", string=\"hello\")\n+    'Uppercase HELLO'\n+\n+Default Values\n+--------------\n+\n+You can specify a default value for a variable using ``default`` keyword:\n+\n+.. code-block:: python\n+\n+    >>> tmpl = Template(\"\"\"\n+    ... {{default name = \"Sir Lancelot the Brave\"}}\n+    ... My name is {{name}}.\n+    ... \"\"\"\n+    ... )\n+    >>> tmpl.substitute()\n+    'My name is Sir Lancelot the Brave.\\n'\n+    >>> tmpl.substitute(name=\"Sir Bedevere the Wise\")\n+    'My name is Sir Bedevere the Wise.\\n'\n+\n+\n+Inline Python Code\n+------------------\n+\n+Arbitrary Python statements can be inserted inline with ``{{py: ...}}``.\n+These do not emit output directly but can modify the template context.\n+\n+.. code-block:: python\n+\n+    >>> tmpl = Template(\"\"\"\n+    ... {{py: x = 5}}\n+    ... Value of x: {{x}}\n+    ... \"\"\")\n+    >>> tmpl.substitute()\n+    'Value of x: 5\\n'\n+\n+Comments\n+--------\n+\n+Comments are introduced with ``{{# ... }}``. They are completely removed\n+from output.\n+\n+.. code-block:: python\n+\n+    >>> sub(\"Hello {{# This is a comment }}World.\")\n+    'Hello World.'\n+\n+Custom delimiters\n+-----------------\n+\n+If you want literal text that looks like a directive (e.g. ``{{...}}``), you\n+can use custom delimiters:\n+\n+.. code-block:: python\n+\n+    >>> sub(\"Show literal braces: {{((name))}}\", delimiters=['((', '))'], name=\"x\")\n+    'Show literal braces: {{x}}'\n+\n+.. note:: Parameter ``delimiters`` can be also passed to ``Template`` class as an argument:\n+\n+   ``Template(\"...\", delimiters=['((', '))'])``\n+\n+Filters\n+-------\n+\n+You can pass callable which will be automatically called with expression as parameter:\n+\n+.. code-block:: python\n+\n+    {{ expression | filtername }}\n+\n+Example:\n+\n+.. code-block:: python\n+\n+    >>> sub(\"Lowercase: {{ name | lower }}\", name=\"ALICE\", lower=lambda x: x.lower())\n+    'Lowercase: alice'\n+\n+Control Blocks\n+==============\n+\n+Tempita supports Python-like control flow directives.\n+These are evaluated at runtime and allow conditional rendering and iteration.\n+\n+Each block has an explicit *closing directive* such as ``endif`` or ``endfor``.\n+\n+``if`` / ``elif`` / ``else`` block\n+----------------------------------\n+\n+Conditional execution based on an expression.\n+\n+**Syntax**::\n+\n+    {{if condition}}\n+      ... content if true ...\n+    {{elif other_condition}}\n+      ... content if elif is true ...\n+    {{else}}\n+      ... content if all above are false ...\n+    {{endif}}\n+\n+**Example**:\n+\n+.. code-block:: python\n+\n+    >>> tmpl = Template(\"\"\"\n+    ... {{if x > 0}}\n+    ... Positive\n+    ... {{elif x == 0}}\n+    ... Zero\n+    ... {{else}}\n+    ... Negative\n+    ... {{endif}}\n+    ... \"\"\")\n+    >>> tmpl.substitute(x=-5)\n+    'Negative\\n'\n+\n+``for`` block\n+-------------\n+\n+Iterate over a sequence and render the body for each element.\n+\n+**Syntax**::\n+\n+    {{for var in iterable}}\n+      ... body using {{var}} ...\n+    {{endfor}}\n+\n+You may also unpack tuples or iterate with multiple variables.",
            "html_url": "https://github.com/cython/cython/pull/7149#discussion_r2375249119",
            "id": 2375249119,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc6Nk2zf",
            "original_commit_id": "a369d4f8961791e47436b70cfcf42eb672f097fb",
            "original_line": 200,
            "original_position": 200,
            "original_start_line": null,
            "path": "docs/src/userguide/tempita.rst",
            "position": 1,
            "pull_request_review_id": 3261991784,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7149",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2375249119/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-09-24T10:06:02Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2375249119",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7149#discussion_r2375252112"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7149"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2375252112"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n.. note:: As known from Python's for-loop, Tempita ``for`` blocks also support ``{{break}}`` and ``{{continue}}`` statements.\r\n```",
            "commit_id": "a369d4f8961791e47436b70cfcf42eb672f097fb",
            "created_at": "2025-09-24T10:01:30Z",
            "diff_hunk": "@@ -0,0 +1,298 @@\n+.. _tempita:\n+\n+Tempita templating language\n+===========================\n+\n+This document describes vendored Tempita Templating Engine originally developed by Ian Bicking. Original version of Tempita\n+is available on `PyPI <https://pypi.org/project/Tempita/>`_.\n+Tempita is used internally in Cython for code-generation purposes. It is also available to users as a public API so they\n+can generate or customize code when building a Cython module.\n+\n+Overview\n+--------\n+\n+Tempita is a simple templating language Cython built-in similar to Jinja. Basic usage\n+is as follows:\n+\n+.. code-block:: python\n+\n+    from Cython.Tempita import Template\n+\n+    tmpl1 = Template(template_string)       # load from string\n+    tmpl2 = Template.from_filename(path)    # load template from file\n+\n+    tmpl1.substitute(**kwargs)     # pass parameters as named arguments.\n+    tmpl2.sub_vars(mapping)        # pass an argument as dict-like mapping.\n+\n+Tempita also provides a shortcut function:\n+\n+.. code-block:: python\n+\n+    from Cython.Tempita import sub\n+    sub(template_string, **kwargs)\n+\n+Templating Syntax\n+-----------------\n+\n+Below are the different directive types and expression forms supported.\n+\n+Simple Expression Substitution\n+------------------------------\n+\n+Surround expression with ``{{ ... }}``, which is evaluated in the template\n+context.\n+\n+Example:\n+\n+.. code-block:: python\n+\n+    >>> sub(\"Hello {{name}}!\", name=\"World\")\n+    'Hello World!'\n+\n+Expressions can be any valid Python expression: arithmetic, attribute access,\n+indexing, function calls etc.:\n+\n+.. code-block:: python\n+\n+    >>> sub(\"2 * 3 = {{2 * 3}}\")\n+    '2 * 3 = 6'\n+    >>> class User:\n+    ...     name = 'Mark'\n+    ...\n+    >>> sub(\"User: {{ user.name }}\", user=User())\n+    'User: Mark'\n+    >>> sub(\"Hex: {{ hex(num) }}\", num=10)\n+    'Hex: 0xa'\n+    >>> sub(\"Number: {{ func(num) }}\", func=abs, num=-10)\n+    'Number: 10'\n+    >>> sub(\"List[0] = {{ mylist[0] }}\", mylist=[10,20,30])\n+    'List[0] = 10'\n+    >>> sub(\"Dist['name'] = {{ mydict['name'] }}\", mydict={'name': 'Miss Islington'})\n+    \"Dist['name'] = Miss Islington\"\n+    >>> sub(\"Uppercase {{ string.upper() }}\", string=\"hello\")\n+    'Uppercase HELLO'\n+\n+Default Values\n+--------------\n+\n+You can specify a default value for a variable using ``default`` keyword:\n+\n+.. code-block:: python\n+\n+    >>> tmpl = Template(\"\"\"\n+    ... {{default name = \"Sir Lancelot the Brave\"}}\n+    ... My name is {{name}}.\n+    ... \"\"\"\n+    ... )\n+    >>> tmpl.substitute()\n+    'My name is Sir Lancelot the Brave.\\n'\n+    >>> tmpl.substitute(name=\"Sir Bedevere the Wise\")\n+    'My name is Sir Bedevere the Wise.\\n'\n+\n+\n+Inline Python Code\n+------------------\n+\n+Arbitrary Python statements can be inserted inline with ``{{py: ...}}``.\n+These do not emit output directly but can modify the template context.\n+\n+.. code-block:: python\n+\n+    >>> tmpl = Template(\"\"\"\n+    ... {{py: x = 5}}\n+    ... Value of x: {{x}}\n+    ... \"\"\")\n+    >>> tmpl.substitute()\n+    'Value of x: 5\\n'\n+\n+Comments\n+--------\n+\n+Comments are introduced with ``{{# ... }}``. They are completely removed\n+from output.\n+\n+.. code-block:: python\n+\n+    >>> sub(\"Hello {{# This is a comment }}World.\")\n+    'Hello World.'\n+\n+Custom delimiters\n+-----------------\n+\n+If you want literal text that looks like a directive (e.g. ``{{...}}``), you\n+can use custom delimiters:\n+\n+.. code-block:: python\n+\n+    >>> sub(\"Show literal braces: {{((name))}}\", delimiters=['((', '))'], name=\"x\")\n+    'Show literal braces: {{x}}'\n+\n+.. note:: Parameter ``delimiters`` can be also passed to ``Template`` class as an argument:\n+\n+   ``Template(\"...\", delimiters=['((', '))'])``\n+\n+Filters\n+-------\n+\n+You can pass callable which will be automatically called with expression as parameter:\n+\n+.. code-block:: python\n+\n+    {{ expression | filtername }}\n+\n+Example:\n+\n+.. code-block:: python\n+\n+    >>> sub(\"Lowercase: {{ name | lower }}\", name=\"ALICE\", lower=lambda x: x.lower())\n+    'Lowercase: alice'\n+\n+Control Blocks\n+==============\n+\n+Tempita supports Python-like control flow directives.\n+These are evaluated at runtime and allow conditional rendering and iteration.\n+\n+Each block has an explicit *closing directive* such as ``endif`` or ``endfor``.\n+\n+``if`` / ``elif`` / ``else`` block\n+----------------------------------\n+\n+Conditional execution based on an expression.\n+\n+**Syntax**::\n+\n+    {{if condition}}\n+      ... content if true ...\n+    {{elif other_condition}}\n+      ... content if elif is true ...\n+    {{else}}\n+      ... content if all above are false ...\n+    {{endif}}\n+\n+**Example**:\n+\n+.. code-block:: python\n+\n+    >>> tmpl = Template(\"\"\"\n+    ... {{if x > 0}}\n+    ... Positive\n+    ... {{elif x == 0}}\n+    ... Zero\n+    ... {{else}}\n+    ... Negative\n+    ... {{endif}}\n+    ... \"\"\")\n+    >>> tmpl.substitute(x=-5)\n+    'Negative\\n'\n+\n+``for`` block\n+-------------\n+\n+Iterate over a sequence and render the body for each element.\n+\n+**Syntax**::\n+\n+    {{for var in iterable}}\n+      ... body using {{var}} ...\n+    {{endfor}}\n+\n+You may also unpack tuples or iterate with multiple variables.\n+\n+**Example**:\n+\n+.. code-block:: python\n+\n+    >>> tmpl = Template(\"\"\"\n+    ... {{for name, score in scores}}\n+    ... {{name}}: {{score}}\n+    ... {{endfor}}\n+    ... \"\"\")\n+    >>> print(tmpl.substitute(scores=[(\"Alice\", 95), (\"Bob\", 88)]))\n+    Alice: 95\n+    Bob: 88\n+\n+\n+.. note:: Tempita ``for`` block supports also ``{{break}}`` and ``{{continue}}`` statements.",
            "html_url": "https://github.com/cython/cython/pull/7149#discussion_r2375252112",
            "id": 2375252112,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc6Nk3iQ",
            "original_commit_id": "a369d4f8961791e47436b70cfcf42eb672f097fb",
            "original_line": 216,
            "original_position": 216,
            "original_start_line": null,
            "path": "docs/src/userguide/tempita.rst",
            "position": 1,
            "pull_request_review_id": 3261991784,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7149",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2375252112/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-09-24T10:06:02Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2375252112",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7149#discussion_r2375254719"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7149"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2375254719"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n\r\nExamples\r\n********\r\n```",
            "commit_id": "a369d4f8961791e47436b70cfcf42eb672f097fb",
            "created_at": "2025-09-24T10:02:38Z",
            "diff_hunk": "@@ -0,0 +1,298 @@\n+.. _tempita:\n+\n+Tempita templating language\n+===========================\n+\n+This document describes vendored Tempita Templating Engine originally developed by Ian Bicking. Original version of Tempita\n+is available on `PyPI <https://pypi.org/project/Tempita/>`_.\n+Tempita is used internally in Cython for code-generation purposes. It is also available to users as a public API so they\n+can generate or customize code when building a Cython module.\n+\n+Overview\n+--------\n+\n+Tempita is a simple templating language Cython built-in similar to Jinja. Basic usage\n+is as follows:\n+\n+.. code-block:: python\n+\n+    from Cython.Tempita import Template\n+\n+    tmpl1 = Template(template_string)       # load from string\n+    tmpl2 = Template.from_filename(path)    # load template from file\n+\n+    tmpl1.substitute(**kwargs)     # pass parameters as named arguments.\n+    tmpl2.sub_vars(mapping)        # pass an argument as dict-like mapping.\n+\n+Tempita also provides a shortcut function:\n+\n+.. code-block:: python\n+\n+    from Cython.Tempita import sub\n+    sub(template_string, **kwargs)\n+\n+Templating Syntax\n+-----------------\n+\n+Below are the different directive types and expression forms supported.\n+\n+Simple Expression Substitution\n+------------------------------\n+\n+Surround expression with ``{{ ... }}``, which is evaluated in the template\n+context.\n+\n+Example:\n+\n+.. code-block:: python\n+\n+    >>> sub(\"Hello {{name}}!\", name=\"World\")\n+    'Hello World!'\n+\n+Expressions can be any valid Python expression: arithmetic, attribute access,\n+indexing, function calls etc.:\n+\n+.. code-block:: python\n+\n+    >>> sub(\"2 * 3 = {{2 * 3}}\")\n+    '2 * 3 = 6'\n+    >>> class User:\n+    ...     name = 'Mark'\n+    ...\n+    >>> sub(\"User: {{ user.name }}\", user=User())\n+    'User: Mark'\n+    >>> sub(\"Hex: {{ hex(num) }}\", num=10)\n+    'Hex: 0xa'\n+    >>> sub(\"Number: {{ func(num) }}\", func=abs, num=-10)\n+    'Number: 10'\n+    >>> sub(\"List[0] = {{ mylist[0] }}\", mylist=[10,20,30])\n+    'List[0] = 10'\n+    >>> sub(\"Dist['name'] = {{ mydict['name'] }}\", mydict={'name': 'Miss Islington'})\n+    \"Dist['name'] = Miss Islington\"\n+    >>> sub(\"Uppercase {{ string.upper() }}\", string=\"hello\")\n+    'Uppercase HELLO'\n+\n+Default Values\n+--------------\n+\n+You can specify a default value for a variable using ``default`` keyword:\n+\n+.. code-block:: python\n+\n+    >>> tmpl = Template(\"\"\"\n+    ... {{default name = \"Sir Lancelot the Brave\"}}\n+    ... My name is {{name}}.\n+    ... \"\"\"\n+    ... )\n+    >>> tmpl.substitute()\n+    'My name is Sir Lancelot the Brave.\\n'\n+    >>> tmpl.substitute(name=\"Sir Bedevere the Wise\")\n+    'My name is Sir Bedevere the Wise.\\n'\n+\n+\n+Inline Python Code\n+------------------\n+\n+Arbitrary Python statements can be inserted inline with ``{{py: ...}}``.\n+These do not emit output directly but can modify the template context.\n+\n+.. code-block:: python\n+\n+    >>> tmpl = Template(\"\"\"\n+    ... {{py: x = 5}}\n+    ... Value of x: {{x}}\n+    ... \"\"\")\n+    >>> tmpl.substitute()\n+    'Value of x: 5\\n'\n+\n+Comments\n+--------\n+\n+Comments are introduced with ``{{# ... }}``. They are completely removed\n+from output.\n+\n+.. code-block:: python\n+\n+    >>> sub(\"Hello {{# This is a comment }}World.\")\n+    'Hello World.'\n+\n+Custom delimiters\n+-----------------\n+\n+If you want literal text that looks like a directive (e.g. ``{{...}}``), you\n+can use custom delimiters:\n+\n+.. code-block:: python\n+\n+    >>> sub(\"Show literal braces: {{((name))}}\", delimiters=['((', '))'], name=\"x\")\n+    'Show literal braces: {{x}}'\n+\n+.. note:: Parameter ``delimiters`` can be also passed to ``Template`` class as an argument:\n+\n+   ``Template(\"...\", delimiters=['((', '))'])``\n+\n+Filters\n+-------\n+\n+You can pass callable which will be automatically called with expression as parameter:\n+\n+.. code-block:: python\n+\n+    {{ expression | filtername }}\n+\n+Example:\n+\n+.. code-block:: python\n+\n+    >>> sub(\"Lowercase: {{ name | lower }}\", name=\"ALICE\", lower=lambda x: x.lower())\n+    'Lowercase: alice'\n+\n+Control Blocks\n+==============\n+\n+Tempita supports Python-like control flow directives.\n+These are evaluated at runtime and allow conditional rendering and iteration.\n+\n+Each block has an explicit *closing directive* such as ``endif`` or ``endfor``.\n+\n+``if`` / ``elif`` / ``else`` block\n+----------------------------------\n+\n+Conditional execution based on an expression.\n+\n+**Syntax**::\n+\n+    {{if condition}}\n+      ... content if true ...\n+    {{elif other_condition}}\n+      ... content if elif is true ...\n+    {{else}}\n+      ... content if all above are false ...\n+    {{endif}}\n+\n+**Example**:\n+\n+.. code-block:: python\n+\n+    >>> tmpl = Template(\"\"\"\n+    ... {{if x > 0}}\n+    ... Positive\n+    ... {{elif x == 0}}\n+    ... Zero\n+    ... {{else}}\n+    ... Negative\n+    ... {{endif}}\n+    ... \"\"\")\n+    >>> tmpl.substitute(x=-5)\n+    'Negative\\n'\n+\n+``for`` block\n+-------------\n+\n+Iterate over a sequence and render the body for each element.\n+\n+**Syntax**::\n+\n+    {{for var in iterable}}\n+      ... body using {{var}} ...\n+    {{endfor}}\n+\n+You may also unpack tuples or iterate with multiple variables.\n+\n+**Example**:\n+\n+.. code-block:: python\n+\n+    >>> tmpl = Template(\"\"\"\n+    ... {{for name, score in scores}}\n+    ... {{name}}: {{score}}\n+    ... {{endfor}}\n+    ... \"\"\")\n+    >>> print(tmpl.substitute(scores=[(\"Alice\", 95), (\"Bob\", 88)]))\n+    Alice: 95\n+    Bob: 88\n+\n+\n+.. note:: Tempita ``for`` block supports also ``{{break}}`` and ``{{continue}}`` statements.\n+\n+Nesting Blocks\n+--------------\n+\n+Blocks can be nested arbitrarily.\n+\n+.. code-block:: python\n+\n+    >>> tmpl = Template(\"\"\"\n+    ... {{for item in items}}\n+    ...   {{if item < 0}}\n+    ...   {{continue}}\n+    ...   {{elif item % 2 == 0}}\n+    ...   {{item}} is even\n+    ...   {{else}}\n+    ...   {{item}} is odd\n+    ...   {{endif}}\n+    ... {{endfor}}\n+    ... \"\"\")\n+    >>> print(tmpl.substitute(items=[-1, 1, 2, 3]))\n+      1 is odd\n+      2 is even\n+      3 is odd\n+\n+Indentation, Whitespace, and Newlines\n+-------------------------------------\n+\n+- Templates preserve whitespace exactly as written around directives.\n+- Newlines in templates become newlines in outputs.\n+- Indentation is preserved, so control block bodies should be indented\n+  meaningfully by the template author if you want nice output.\n+\n+Examples\n+--------",
            "html_url": "https://github.com/cython/cython/pull/7149#discussion_r2375254719",
            "id": 2375254719,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc6Nk4K_",
            "original_commit_id": "a369d4f8961791e47436b70cfcf42eb672f097fb",
            "original_line": 250,
            "original_position": 250,
            "original_start_line": 249,
            "path": "docs/src/userguide/tempita.rst",
            "position": 1,
            "pull_request_review_id": 3261991784,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7149",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2375254719/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-09-24T10:06:02Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2375254719",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7149#discussion_r2375257402"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7149"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2375257402"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nHere are consolidated examples showing most of the available syntax in use:\r\n```",
            "commit_id": "a369d4f8961791e47436b70cfcf42eb672f097fb",
            "created_at": "2025-09-24T10:03:46Z",
            "diff_hunk": "@@ -0,0 +1,298 @@\n+.. _tempita:\n+\n+Tempita templating language\n+===========================\n+\n+This document describes vendored Tempita Templating Engine originally developed by Ian Bicking. Original version of Tempita\n+is available on `PyPI <https://pypi.org/project/Tempita/>`_.\n+Tempita is used internally in Cython for code-generation purposes. It is also available to users as a public API so they\n+can generate or customize code when building a Cython module.\n+\n+Overview\n+--------\n+\n+Tempita is a simple templating language Cython built-in similar to Jinja. Basic usage\n+is as follows:\n+\n+.. code-block:: python\n+\n+    from Cython.Tempita import Template\n+\n+    tmpl1 = Template(template_string)       # load from string\n+    tmpl2 = Template.from_filename(path)    # load template from file\n+\n+    tmpl1.substitute(**kwargs)     # pass parameters as named arguments.\n+    tmpl2.sub_vars(mapping)        # pass an argument as dict-like mapping.\n+\n+Tempita also provides a shortcut function:\n+\n+.. code-block:: python\n+\n+    from Cython.Tempita import sub\n+    sub(template_string, **kwargs)\n+\n+Templating Syntax\n+-----------------\n+\n+Below are the different directive types and expression forms supported.\n+\n+Simple Expression Substitution\n+------------------------------\n+\n+Surround expression with ``{{ ... }}``, which is evaluated in the template\n+context.\n+\n+Example:\n+\n+.. code-block:: python\n+\n+    >>> sub(\"Hello {{name}}!\", name=\"World\")\n+    'Hello World!'\n+\n+Expressions can be any valid Python expression: arithmetic, attribute access,\n+indexing, function calls etc.:\n+\n+.. code-block:: python\n+\n+    >>> sub(\"2 * 3 = {{2 * 3}}\")\n+    '2 * 3 = 6'\n+    >>> class User:\n+    ...     name = 'Mark'\n+    ...\n+    >>> sub(\"User: {{ user.name }}\", user=User())\n+    'User: Mark'\n+    >>> sub(\"Hex: {{ hex(num) }}\", num=10)\n+    'Hex: 0xa'\n+    >>> sub(\"Number: {{ func(num) }}\", func=abs, num=-10)\n+    'Number: 10'\n+    >>> sub(\"List[0] = {{ mylist[0] }}\", mylist=[10,20,30])\n+    'List[0] = 10'\n+    >>> sub(\"Dist['name'] = {{ mydict['name'] }}\", mydict={'name': 'Miss Islington'})\n+    \"Dist['name'] = Miss Islington\"\n+    >>> sub(\"Uppercase {{ string.upper() }}\", string=\"hello\")\n+    'Uppercase HELLO'\n+\n+Default Values\n+--------------\n+\n+You can specify a default value for a variable using ``default`` keyword:\n+\n+.. code-block:: python\n+\n+    >>> tmpl = Template(\"\"\"\n+    ... {{default name = \"Sir Lancelot the Brave\"}}\n+    ... My name is {{name}}.\n+    ... \"\"\"\n+    ... )\n+    >>> tmpl.substitute()\n+    'My name is Sir Lancelot the Brave.\\n'\n+    >>> tmpl.substitute(name=\"Sir Bedevere the Wise\")\n+    'My name is Sir Bedevere the Wise.\\n'\n+\n+\n+Inline Python Code\n+------------------\n+\n+Arbitrary Python statements can be inserted inline with ``{{py: ...}}``.\n+These do not emit output directly but can modify the template context.\n+\n+.. code-block:: python\n+\n+    >>> tmpl = Template(\"\"\"\n+    ... {{py: x = 5}}\n+    ... Value of x: {{x}}\n+    ... \"\"\")\n+    >>> tmpl.substitute()\n+    'Value of x: 5\\n'\n+\n+Comments\n+--------\n+\n+Comments are introduced with ``{{# ... }}``. They are completely removed\n+from output.\n+\n+.. code-block:: python\n+\n+    >>> sub(\"Hello {{# This is a comment }}World.\")\n+    'Hello World.'\n+\n+Custom delimiters\n+-----------------\n+\n+If you want literal text that looks like a directive (e.g. ``{{...}}``), you\n+can use custom delimiters:\n+\n+.. code-block:: python\n+\n+    >>> sub(\"Show literal braces: {{((name))}}\", delimiters=['((', '))'], name=\"x\")\n+    'Show literal braces: {{x}}'\n+\n+.. note:: Parameter ``delimiters`` can be also passed to ``Template`` class as an argument:\n+\n+   ``Template(\"...\", delimiters=['((', '))'])``\n+\n+Filters\n+-------\n+\n+You can pass callable which will be automatically called with expression as parameter:\n+\n+.. code-block:: python\n+\n+    {{ expression | filtername }}\n+\n+Example:\n+\n+.. code-block:: python\n+\n+    >>> sub(\"Lowercase: {{ name | lower }}\", name=\"ALICE\", lower=lambda x: x.lower())\n+    'Lowercase: alice'\n+\n+Control Blocks\n+==============\n+\n+Tempita supports Python-like control flow directives.\n+These are evaluated at runtime and allow conditional rendering and iteration.\n+\n+Each block has an explicit *closing directive* such as ``endif`` or ``endfor``.\n+\n+``if`` / ``elif`` / ``else`` block\n+----------------------------------\n+\n+Conditional execution based on an expression.\n+\n+**Syntax**::\n+\n+    {{if condition}}\n+      ... content if true ...\n+    {{elif other_condition}}\n+      ... content if elif is true ...\n+    {{else}}\n+      ... content if all above are false ...\n+    {{endif}}\n+\n+**Example**:\n+\n+.. code-block:: python\n+\n+    >>> tmpl = Template(\"\"\"\n+    ... {{if x > 0}}\n+    ... Positive\n+    ... {{elif x == 0}}\n+    ... Zero\n+    ... {{else}}\n+    ... Negative\n+    ... {{endif}}\n+    ... \"\"\")\n+    >>> tmpl.substitute(x=-5)\n+    'Negative\\n'\n+\n+``for`` block\n+-------------\n+\n+Iterate over a sequence and render the body for each element.\n+\n+**Syntax**::\n+\n+    {{for var in iterable}}\n+      ... body using {{var}} ...\n+    {{endfor}}\n+\n+You may also unpack tuples or iterate with multiple variables.\n+\n+**Example**:\n+\n+.. code-block:: python\n+\n+    >>> tmpl = Template(\"\"\"\n+    ... {{for name, score in scores}}\n+    ... {{name}}: {{score}}\n+    ... {{endfor}}\n+    ... \"\"\")\n+    >>> print(tmpl.substitute(scores=[(\"Alice\", 95), (\"Bob\", 88)]))\n+    Alice: 95\n+    Bob: 88\n+\n+\n+.. note:: Tempita ``for`` block supports also ``{{break}}`` and ``{{continue}}`` statements.\n+\n+Nesting Blocks\n+--------------\n+\n+Blocks can be nested arbitrarily.\n+\n+.. code-block:: python\n+\n+    >>> tmpl = Template(\"\"\"\n+    ... {{for item in items}}\n+    ...   {{if item < 0}}\n+    ...   {{continue}}\n+    ...   {{elif item % 2 == 0}}\n+    ...   {{item}} is even\n+    ...   {{else}}\n+    ...   {{item}} is odd\n+    ...   {{endif}}\n+    ... {{endfor}}\n+    ... \"\"\")\n+    >>> print(tmpl.substitute(items=[-1, 1, 2, 3]))\n+      1 is odd\n+      2 is even\n+      3 is odd\n+\n+Indentation, Whitespace, and Newlines\n+-------------------------------------\n+\n+- Templates preserve whitespace exactly as written around directives.\n+- Newlines in templates become newlines in outputs.\n+- Indentation is preserved, so control block bodies should be indented\n+  meaningfully by the template author if you want nice output.\n+\n+Examples\n+--------\n+\n+Here are consolidated examples showing most syntax in use:",
            "html_url": "https://github.com/cython/cython/pull/7149#discussion_r2375257402",
            "id": 2375257402,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc6Nk406",
            "original_commit_id": "a369d4f8961791e47436b70cfcf42eb672f097fb",
            "original_line": 252,
            "original_position": 252,
            "original_start_line": null,
            "path": "docs/src/userguide/tempita.rst",
            "position": 1,
            "pull_request_review_id": 3261991784,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7149",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2375257402/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-09-24T10:06:02Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2375257402",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7149#discussion_r2375259751"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7149"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2375259751"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n\r\n\r\nNotes and Limitations\r\n*********************\r\n```",
            "commit_id": "a369d4f8961791e47436b70cfcf42eb672f097fb",
            "created_at": "2025-09-24T10:04:45Z",
            "diff_hunk": "@@ -0,0 +1,298 @@\n+.. _tempita:\n+\n+Tempita templating language\n+===========================\n+\n+This document describes vendored Tempita Templating Engine originally developed by Ian Bicking. Original version of Tempita\n+is available on `PyPI <https://pypi.org/project/Tempita/>`_.\n+Tempita is used internally in Cython for code-generation purposes. It is also available to users as a public API so they\n+can generate or customize code when building a Cython module.\n+\n+Overview\n+--------\n+\n+Tempita is a simple templating language Cython built-in similar to Jinja. Basic usage\n+is as follows:\n+\n+.. code-block:: python\n+\n+    from Cython.Tempita import Template\n+\n+    tmpl1 = Template(template_string)       # load from string\n+    tmpl2 = Template.from_filename(path)    # load template from file\n+\n+    tmpl1.substitute(**kwargs)     # pass parameters as named arguments.\n+    tmpl2.sub_vars(mapping)        # pass an argument as dict-like mapping.\n+\n+Tempita also provides a shortcut function:\n+\n+.. code-block:: python\n+\n+    from Cython.Tempita import sub\n+    sub(template_string, **kwargs)\n+\n+Templating Syntax\n+-----------------\n+\n+Below are the different directive types and expression forms supported.\n+\n+Simple Expression Substitution\n+------------------------------\n+\n+Surround expression with ``{{ ... }}``, which is evaluated in the template\n+context.\n+\n+Example:\n+\n+.. code-block:: python\n+\n+    >>> sub(\"Hello {{name}}!\", name=\"World\")\n+    'Hello World!'\n+\n+Expressions can be any valid Python expression: arithmetic, attribute access,\n+indexing, function calls etc.:\n+\n+.. code-block:: python\n+\n+    >>> sub(\"2 * 3 = {{2 * 3}}\")\n+    '2 * 3 = 6'\n+    >>> class User:\n+    ...     name = 'Mark'\n+    ...\n+    >>> sub(\"User: {{ user.name }}\", user=User())\n+    'User: Mark'\n+    >>> sub(\"Hex: {{ hex(num) }}\", num=10)\n+    'Hex: 0xa'\n+    >>> sub(\"Number: {{ func(num) }}\", func=abs, num=-10)\n+    'Number: 10'\n+    >>> sub(\"List[0] = {{ mylist[0] }}\", mylist=[10,20,30])\n+    'List[0] = 10'\n+    >>> sub(\"Dist['name'] = {{ mydict['name'] }}\", mydict={'name': 'Miss Islington'})\n+    \"Dist['name'] = Miss Islington\"\n+    >>> sub(\"Uppercase {{ string.upper() }}\", string=\"hello\")\n+    'Uppercase HELLO'\n+\n+Default Values\n+--------------\n+\n+You can specify a default value for a variable using ``default`` keyword:\n+\n+.. code-block:: python\n+\n+    >>> tmpl = Template(\"\"\"\n+    ... {{default name = \"Sir Lancelot the Brave\"}}\n+    ... My name is {{name}}.\n+    ... \"\"\"\n+    ... )\n+    >>> tmpl.substitute()\n+    'My name is Sir Lancelot the Brave.\\n'\n+    >>> tmpl.substitute(name=\"Sir Bedevere the Wise\")\n+    'My name is Sir Bedevere the Wise.\\n'\n+\n+\n+Inline Python Code\n+------------------\n+\n+Arbitrary Python statements can be inserted inline with ``{{py: ...}}``.\n+These do not emit output directly but can modify the template context.\n+\n+.. code-block:: python\n+\n+    >>> tmpl = Template(\"\"\"\n+    ... {{py: x = 5}}\n+    ... Value of x: {{x}}\n+    ... \"\"\")\n+    >>> tmpl.substitute()\n+    'Value of x: 5\\n'\n+\n+Comments\n+--------\n+\n+Comments are introduced with ``{{# ... }}``. They are completely removed\n+from output.\n+\n+.. code-block:: python\n+\n+    >>> sub(\"Hello {{# This is a comment }}World.\")\n+    'Hello World.'\n+\n+Custom delimiters\n+-----------------\n+\n+If you want literal text that looks like a directive (e.g. ``{{...}}``), you\n+can use custom delimiters:\n+\n+.. code-block:: python\n+\n+    >>> sub(\"Show literal braces: {{((name))}}\", delimiters=['((', '))'], name=\"x\")\n+    'Show literal braces: {{x}}'\n+\n+.. note:: Parameter ``delimiters`` can be also passed to ``Template`` class as an argument:\n+\n+   ``Template(\"...\", delimiters=['((', '))'])``\n+\n+Filters\n+-------\n+\n+You can pass callable which will be automatically called with expression as parameter:\n+\n+.. code-block:: python\n+\n+    {{ expression | filtername }}\n+\n+Example:\n+\n+.. code-block:: python\n+\n+    >>> sub(\"Lowercase: {{ name | lower }}\", name=\"ALICE\", lower=lambda x: x.lower())\n+    'Lowercase: alice'\n+\n+Control Blocks\n+==============\n+\n+Tempita supports Python-like control flow directives.\n+These are evaluated at runtime and allow conditional rendering and iteration.\n+\n+Each block has an explicit *closing directive* such as ``endif`` or ``endfor``.\n+\n+``if`` / ``elif`` / ``else`` block\n+----------------------------------\n+\n+Conditional execution based on an expression.\n+\n+**Syntax**::\n+\n+    {{if condition}}\n+      ... content if true ...\n+    {{elif other_condition}}\n+      ... content if elif is true ...\n+    {{else}}\n+      ... content if all above are false ...\n+    {{endif}}\n+\n+**Example**:\n+\n+.. code-block:: python\n+\n+    >>> tmpl = Template(\"\"\"\n+    ... {{if x > 0}}\n+    ... Positive\n+    ... {{elif x == 0}}\n+    ... Zero\n+    ... {{else}}\n+    ... Negative\n+    ... {{endif}}\n+    ... \"\"\")\n+    >>> tmpl.substitute(x=-5)\n+    'Negative\\n'\n+\n+``for`` block\n+-------------\n+\n+Iterate over a sequence and render the body for each element.\n+\n+**Syntax**::\n+\n+    {{for var in iterable}}\n+      ... body using {{var}} ...\n+    {{endfor}}\n+\n+You may also unpack tuples or iterate with multiple variables.\n+\n+**Example**:\n+\n+.. code-block:: python\n+\n+    >>> tmpl = Template(\"\"\"\n+    ... {{for name, score in scores}}\n+    ... {{name}}: {{score}}\n+    ... {{endfor}}\n+    ... \"\"\")\n+    >>> print(tmpl.substitute(scores=[(\"Alice\", 95), (\"Bob\", 88)]))\n+    Alice: 95\n+    Bob: 88\n+\n+\n+.. note:: Tempita ``for`` block supports also ``{{break}}`` and ``{{continue}}`` statements.\n+\n+Nesting Blocks\n+--------------\n+\n+Blocks can be nested arbitrarily.\n+\n+.. code-block:: python\n+\n+    >>> tmpl = Template(\"\"\"\n+    ... {{for item in items}}\n+    ...   {{if item < 0}}\n+    ...   {{continue}}\n+    ...   {{elif item % 2 == 0}}\n+    ...   {{item}} is even\n+    ...   {{else}}\n+    ...   {{item}} is odd\n+    ...   {{endif}}\n+    ... {{endfor}}\n+    ... \"\"\")\n+    >>> print(tmpl.substitute(items=[-1, 1, 2, 3]))\n+      1 is odd\n+      2 is even\n+      3 is odd\n+\n+Indentation, Whitespace, and Newlines\n+-------------------------------------\n+\n+- Templates preserve whitespace exactly as written around directives.\n+- Newlines in templates become newlines in outputs.\n+- Indentation is preserved, so control block bodies should be indented\n+  meaningfully by the template author if you want nice output.\n+\n+Examples\n+--------\n+\n+Here are consolidated examples showing most syntax in use:\n+\n+.. code-block:: python\n+\n+    from Cython.Tempita import Template\n+\n+    tmpl = Template(\"\"\"\n+    Header\n+    {{# This is a comment }}\n+\n+    {{if user[\"is_admin\"]}}\n+      Welcome, Admin {{user[\"name\"]}}!\n+    {{else}}\n+      Hello, {{user[\"name\"] or 'Guest'}}.\n+    {{endif}}\n+\n+    {{for item in items}}\n+      * {{item[\"name\"]}}: {{item[\"value\"]}}\n+    {{endfor}}\n+\n+    {{py: x = 1 + 2}}\n+    Inline code result: {{x}}\n+\n+    Expression: 1 + 2 = {{1 + 2}}\n+\n+    \"\"\")\n+\n+    print(tmpl.substitute(user={'name': 'Bob', 'is_admin': False},\n+                          items=[{'name':'A','value':10},\n+                                 {'name':'B','value':20}]))\n+\n+Output::\n+\n+    Header\n+      Hello, Bob.\n+\n+      * A: 10\n+      * B: 20\n+\n+    Expression: 1 + 2 = 3\n+\n+Notes and Limitations\n+---------------------",
            "html_url": "https://github.com/cython/cython/pull/7149#discussion_r2375259751",
            "id": 2375259751,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc6Nk5Zn",
            "original_commit_id": "a369d4f8961791e47436b70cfcf42eb672f097fb",
            "original_line": 294,
            "original_position": 294,
            "original_start_line": 292,
            "path": "docs/src/userguide/tempita.rst",
            "position": 1,
            "pull_request_review_id": 3261991784,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7149",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2375259751/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-09-24T10:06:02Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2375259751",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7149#discussion_r2376567702"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7149"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2376567702"
                }
            },
            "author_association": "MEMBER",
            "body": "Done",
            "commit_id": "8832941781c34392c44c4453d0db5bbf9374a8bb",
            "created_at": "2025-09-24T17:44:36Z",
            "diff_hunk": "@@ -0,0 +1,298 @@\n+.. _tempita:\n+\n+Tempita templating language\n+===========================\n+\n+This document describes vendored Tempita Templating Engine originally developed by Ian Bicking. Original version of Tempita\n+is available on `PyPI <https://pypi.org/project/Tempita/>`_.\n+Tempita is used internally in Cython for code-generation purposes. It is also available to users as a public API so they\n+can generate or customize code when building a Cython module.\n+\n+Overview\n+--------\n+\n+Tempita is a simple templating language Cython built-in similar to Jinja. Basic usage\n+is as follows:\n+\n+.. code-block:: python\n+\n+    from Cython.Tempita import Template\n+\n+    tmpl1 = Template(template_string)       # load from string\n+    tmpl2 = Template.from_filename(path)    # load template from file\n+\n+    tmpl1.substitute(**kwargs)     # pass parameters as named arguments.\n+    tmpl2.sub_vars(mapping)        # pass an argument as dict-like mapping.\n+\n+Tempita also provides a shortcut function:\n+\n+.. code-block:: python\n+\n+    from Cython.Tempita import sub\n+    sub(template_string, **kwargs)\n+\n+Templating Syntax\n+-----------------\n+\n+Below are the different directive types and expression forms supported.\n+\n+Simple Expression Substitution\n+------------------------------\n+\n+Surround expression with ``{{ ... }}``, which is evaluated in the template\n+context.\n+\n+Example:\n+\n+.. code-block:: python\n+\n+    >>> sub(\"Hello {{name}}!\", name=\"World\")\n+    'Hello World!'\n+\n+Expressions can be any valid Python expression: arithmetic, attribute access,\n+indexing, function calls etc.:\n+\n+.. code-block:: python\n+\n+    >>> sub(\"2 * 3 = {{2 * 3}}\")\n+    '2 * 3 = 6'\n+    >>> class User:\n+    ...     name = 'Mark'\n+    ...\n+    >>> sub(\"User: {{ user.name }}\", user=User())\n+    'User: Mark'\n+    >>> sub(\"Hex: {{ hex(num) }}\", num=10)\n+    'Hex: 0xa'\n+    >>> sub(\"Number: {{ func(num) }}\", func=abs, num=-10)\n+    'Number: 10'\n+    >>> sub(\"List[0] = {{ mylist[0] }}\", mylist=[10,20,30])\n+    'List[0] = 10'\n+    >>> sub(\"Dist['name'] = {{ mydict['name'] }}\", mydict={'name': 'Miss Islington'})\n+    \"Dist['name'] = Miss Islington\"\n+    >>> sub(\"Uppercase {{ string.upper() }}\", string=\"hello\")\n+    'Uppercase HELLO'\n+\n+Default Values\n+--------------\n+\n+You can specify a default value for a variable using ``default`` keyword:\n+\n+.. code-block:: python\n+\n+    >>> tmpl = Template(\"\"\"\n+    ... {{default name = \"Sir Lancelot the Brave\"}}\n+    ... My name is {{name}}.\n+    ... \"\"\"\n+    ... )\n+    >>> tmpl.substitute()\n+    'My name is Sir Lancelot the Brave.\\n'\n+    >>> tmpl.substitute(name=\"Sir Bedevere the Wise\")\n+    'My name is Sir Bedevere the Wise.\\n'\n+\n+\n+Inline Python Code\n+------------------\n+",
            "html_url": "https://github.com/cython/cython/pull/7149#discussion_r2376567702",
            "id": 2376567702,
            "in_reply_to_id": 2375191254,
            "line": 102,
            "node_id": "PRRC_kwDOABDGAc6Np4uW",
            "original_commit_id": "a369d4f8961791e47436b70cfcf42eb672f097fb",
            "original_line": 95,
            "original_position": 95,
            "original_start_line": 91,
            "path": "docs/src/userguide/tempita.rst",
            "position": 102,
            "pull_request_review_id": 3263993898,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7149",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2376567702/reactions"
            },
            "side": "RIGHT",
            "start_line": 98,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-09-24T17:44:37Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2376567702",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/cython/cython/issues/7149/comments",
    "commit_data": [
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/5eb86b2d0d2a9a65e69f8d47443985bb269bf6b8/comments",
            "commit": {
                "author": {
                    "date": "2025-09-12T21:44:13Z",
                    "email": "matusvalo@users.noreply.github.com",
                    "name": "Matus Valo"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-09-12T21:46:08Z",
                    "email": "matusvalo@users.noreply.github.com",
                    "name": "Matus Valo"
                },
                "message": "Docs: introduce documentation of tempita",
                "tree": {
                    "sha": "83d8cf0d2ce27b41fded87df03df84e6312f80ca",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/83d8cf0d2ce27b41fded87df03df84e6312f80ca"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/5eb86b2d0d2a9a65e69f8d47443985bb269bf6b8",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/5eb86b2d0d2a9a65e69f8d47443985bb269bf6b8",
            "node_id": "C_kwDOFL4z49oAKDVlYjg2YjJkMGQyYTlhNjVlNjlmOGQ0NzQ0Mzk4NWJiMjY5YmY2Yjg",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/08c972c10b7bdecc5f98d28d73d3f466e5b369da",
                    "sha": "08c972c10b7bdecc5f98d28d73d3f466e5b369da",
                    "url": "https://api.github.com/repos/cython/cython/commits/08c972c10b7bdecc5f98d28d73d3f466e5b369da"
                }
            ],
            "sha": "5eb86b2d0d2a9a65e69f8d47443985bb269bf6b8",
            "url": "https://api.github.com/repos/cython/cython/commits/5eb86b2d0d2a9a65e69f8d47443985bb269bf6b8"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/0218f80ab6e2e59fbf8679c50ec2832c1fb0b254/comments",
            "commit": {
                "author": {
                    "date": "2025-09-12T21:54:24Z",
                    "email": "matusvalo@users.noreply.github.com",
                    "name": "Matus Valo"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-09-12T21:54:24Z",
                    "email": "matusvalo@users.noreply.github.com",
                    "name": "Matus Valo"
                },
                "message": "Add link to tempita documentation",
                "tree": {
                    "sha": "f196c9fded2d521ccd488cd41b00c3d6fb6e7310",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/f196c9fded2d521ccd488cd41b00c3d6fb6e7310"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/0218f80ab6e2e59fbf8679c50ec2832c1fb0b254",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/0218f80ab6e2e59fbf8679c50ec2832c1fb0b254",
            "node_id": "C_kwDOFL4z49oAKDAyMThmODBhYjZlMmU1OWZiZjg2NzljNTBlYzI4MzJjMWZiMGIyNTQ",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/5eb86b2d0d2a9a65e69f8d47443985bb269bf6b8",
                    "sha": "5eb86b2d0d2a9a65e69f8d47443985bb269bf6b8",
                    "url": "https://api.github.com/repos/cython/cython/commits/5eb86b2d0d2a9a65e69f8d47443985bb269bf6b8"
                }
            ],
            "sha": "0218f80ab6e2e59fbf8679c50ec2832c1fb0b254",
            "url": "https://api.github.com/repos/cython/cython/commits/0218f80ab6e2e59fbf8679c50ec2832c1fb0b254"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/2f8999048a5be9db604614622775a834e085f51d/comments",
            "commit": {
                "author": {
                    "date": "2025-09-13T13:23:02Z",
                    "email": "matusvalo@users.noreply.github.com",
                    "name": "mv-python"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-09-13T13:23:02Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "typo\n\nCo-authored-by: da-woods <dw-git@d-woods.co.uk>",
                "tree": {
                    "sha": "cb7603a13b41ea6df077c2115cb631ce691c684b",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/cb7603a13b41ea6df077c2115cb631ce691c684b"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/2f8999048a5be9db604614622775a834e085f51d",
                "verification": {
                    "payload": "tree cb7603a13b41ea6df077c2115cb631ce691c684b\nparent 0218f80ab6e2e59fbf8679c50ec2832c1fb0b254\nauthor mv-python <matusvalo@users.noreply.github.com> 1757769782 +0200\ncommitter GitHub <noreply@github.com> 1757769782 +0200\n\ntypo\n\nCo-authored-by: da-woods <dw-git@d-woods.co.uk>",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJoxXA2CRC1aQ7uu5UhlAAArF8QAA1HVPyXTtOCOAuDBc4m6Mv5\nlGnWDNjKQg5zo3Pq9IOBsaLnzz7bt+nNYiEtyVtpJofKclyhr2Pu4/viXUvvoC3q\nQmvWQA2Vt8jsha+E7r2D+MCGHX34BGxPOgknylJm09GVjMFLoBKNjtsIFvS6T5aa\nT6VuaUxGCocvQoAfrQTAlTrWtBzgFO2EFwy9T3obBI++F2EvOvvgDOpHKe4s6qJT\nHI0W96Z+42eK1UpO/Lpaehmn/QOg3cqtrm7xvkXlhk0S1Yzj5OKI8ai4muMpF5gr\nP5IgSyTwZkI314Wk1OSwztNu0YjAcGy7yEe8Y30gzm4rI01ZUOOlgYHOgS0KK8OS\nwHLI10CS7Wkyspw4KSvVpcUiAalOXr921wEzJgrOVtqQiEiTtBI5TejAX2UB/wnv\nuyXWIZ1AHK7/Nen6Pc6fuUAdyXmMak/Xz+oSy6NayfZTBQ++hqoLXVqdWha+tZaH\n0ubcPYzJtRZCjeCwPiWAkDCzoA2jmcpz5wNEZ+4FQSeEKCv1c/TEBJbYsssvRj69\nW9thjOcqeWYmAxTG0Wsa4BtjDoMTC6dFo68XHlA7EJfBDmVT05p53jZsHyQMTiL4\nPKljQdhFC6teP/m+yTPgEkMtdMpN9UnRMQ5NEoIm2cd3JOW2LDXN6afRnbJWrju8\nXMqeS7FLfY4HthDt2x7H\n=NKQw\n-----END PGP SIGNATURE-----\n",
                    "verified": true,
                    "verified_at": "2025-09-13T13:23:02Z"
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/2f8999048a5be9db604614622775a834e085f51d",
            "node_id": "C_kwDOFL4z49oAKDJmODk5OTA0OGE1YmU5ZGI2MDQ2MTQ2MjI3NzVhODM0ZTA4NWY1MWQ",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/0218f80ab6e2e59fbf8679c50ec2832c1fb0b254",
                    "sha": "0218f80ab6e2e59fbf8679c50ec2832c1fb0b254",
                    "url": "https://api.github.com/repos/cython/cython/commits/0218f80ab6e2e59fbf8679c50ec2832c1fb0b254"
                }
            ],
            "sha": "2f8999048a5be9db604614622775a834e085f51d",
            "url": "https://api.github.com/repos/cython/cython/commits/2f8999048a5be9db604614622775a834e085f51d"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/20f8b7364bd2cf0f6af097b349c00f5efde0f255/comments",
            "commit": {
                "author": {
                    "date": "2025-09-23T20:37:03Z",
                    "email": "matusvalo@users.noreply.github.com",
                    "name": "mv-python"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-09-23T20:37:03Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Apply suggestions from code review\n\nCo-authored-by: Clément Robert <cr52@protonmail.com>",
                "tree": {
                    "sha": "db49909db10edc4d69441b70ff07da192331341d",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/db49909db10edc4d69441b70ff07da192331341d"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/20f8b7364bd2cf0f6af097b349c00f5efde0f255",
                "verification": {
                    "payload": "tree db49909db10edc4d69441b70ff07da192331341d\nparent 2f8999048a5be9db604614622775a834e085f51d\nauthor mv-python <matusvalo@users.noreply.github.com> 1758659823 +0200\ncommitter GitHub <noreply@github.com> 1758659823 +0200\n\nApply suggestions from code review\n\nCo-authored-by: Clément Robert <cr52@protonmail.com>",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJo0wTwCRC1aQ7uu5UhlAAA8eUQAIR7eKErjnqeZoYcaADNcmbS\nNwYxoFjVQfbm7RckKdn943xWXm/r1wo0N3X6N8rGb1IfUjSJxJYpxbKwSHeLfnP8\nR/dF3Ry8tRP1UnRaf1FSQnKHeyCRd6KFOYJ1MXCOBaCwS51tRx4P84LUM07t69fj\nCS7xeFPNu2/vcSSQCiEy1gMmnVonB70OkNR9dyA4wbrP1LzXrImv1ImoVl09kZnK\nCYTtcX7xUqLeS+SrLEOohB3s9iR177hn7ULuMpjL4vI2xsjl7qgdWDtkiUmIGnT6\nRF2qUaH8McfcXarOWU9ViXZIr2ZUHIoG1gbw/L1QAy3t8fRZQjgODnRTqbvW6qzf\nSDd9TfBIRJiVDKeoukgan2HWjbdL0VTcVlyO+wpZNRFwLxKVphe5jmVpGxc7Plhf\nQ10JJZR5Zt2OYDUVyCQ8Gjw1+3w9gi0Zg7QJ9HZ9B0l2hNjPR84yoej95mw2n3qi\nGN0sNpnGYcHmguXA9b4N7G7E3klKGummCkoSD4pf81qWHkCmXPRBs6rsH6J9uxq/\nKd+07Gpw/x2jtoRh8AkUnZU+tDBBOe+JygVs0ZWi+Xgqq3Et2QvzWOBcJzvHt4Z+\nCYRj6hXj7LAZZDeg6NvXM9dWDlRzu0r3+9AV16mQQgikJ9fvzwEUGOt0MMt+t5P5\nMNMXCR7TJHzFYKTIlKpM\n=Q5l7\n-----END PGP SIGNATURE-----\n",
                    "verified": true,
                    "verified_at": "2025-09-23T20:37:04Z"
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/20f8b7364bd2cf0f6af097b349c00f5efde0f255",
            "node_id": "C_kwDOFL4z49oAKDIwZjhiNzM2NGJkMmNmMGY2YWYwOTdiMzQ5YzAwZjVlZmRlMGYyNTU",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/2f8999048a5be9db604614622775a834e085f51d",
                    "sha": "2f8999048a5be9db604614622775a834e085f51d",
                    "url": "https://api.github.com/repos/cython/cython/commits/2f8999048a5be9db604614622775a834e085f51d"
                }
            ],
            "sha": "20f8b7364bd2cf0f6af097b349c00f5efde0f255",
            "url": "https://api.github.com/repos/cython/cython/commits/20f8b7364bd2cf0f6af097b349c00f5efde0f255"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/a616a3aea636d8136cc9866e357b1ec71ef12886/comments",
            "commit": {
                "author": {
                    "date": "2025-09-23T20:39:09Z",
                    "email": "matusvalo@users.noreply.github.com",
                    "name": "Matus Valo"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-09-23T20:39:09Z",
                    "email": "matusvalo@users.noreply.github.com",
                    "name": "Matus Valo"
                },
                "message": "Improve introduction.\n\nCo-authored-by: da-woods <dw-git@d-woods.co.uk>",
                "tree": {
                    "sha": "e94c736fe2db284a19aca59452900edb1c20ddcc",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/e94c736fe2db284a19aca59452900edb1c20ddcc"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/a616a3aea636d8136cc9866e357b1ec71ef12886",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/a616a3aea636d8136cc9866e357b1ec71ef12886",
            "node_id": "C_kwDOFL4z49oAKGE2MTZhM2FlYTYzNmQ4MTM2Y2M5ODY2ZTM1N2IxZWM3MWVmMTI4ODY",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/20f8b7364bd2cf0f6af097b349c00f5efde0f255",
                    "sha": "20f8b7364bd2cf0f6af097b349c00f5efde0f255",
                    "url": "https://api.github.com/repos/cython/cython/commits/20f8b7364bd2cf0f6af097b349c00f5efde0f255"
                }
            ],
            "sha": "a616a3aea636d8136cc9866e357b1ec71ef12886",
            "url": "https://api.github.com/repos/cython/cython/commits/a616a3aea636d8136cc9866e357b1ec71ef12886"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/086c83ac6c90a49fb227b46f4de6257ffe32c8a4/comments",
            "commit": {
                "author": {
                    "date": "2025-09-23T20:41:25Z",
                    "email": "matusvalo@users.noreply.github.com",
                    "name": "Matus Valo"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-09-23T20:41:25Z",
                    "email": "matusvalo@users.noreply.github.com",
                    "name": "Matus Valo"
                },
                "message": "Improve wording.\n\nCo-authored-by: da-woods <dw-git@d-woods.co.uk>",
                "tree": {
                    "sha": "67315af833357bdb8b6c53792143202112c4f371",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/67315af833357bdb8b6c53792143202112c4f371"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/086c83ac6c90a49fb227b46f4de6257ffe32c8a4",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/086c83ac6c90a49fb227b46f4de6257ffe32c8a4",
            "node_id": "C_kwDOFL4z49oAKDA4NmM4M2FjNmM5MGE0OWZiMjI3YjQ2ZjRkZTYyNTdmZmUzMmM4YTQ",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/a616a3aea636d8136cc9866e357b1ec71ef12886",
                    "sha": "a616a3aea636d8136cc9866e357b1ec71ef12886",
                    "url": "https://api.github.com/repos/cython/cython/commits/a616a3aea636d8136cc9866e357b1ec71ef12886"
                }
            ],
            "sha": "086c83ac6c90a49fb227b46f4de6257ffe32c8a4",
            "url": "https://api.github.com/repos/cython/cython/commits/086c83ac6c90a49fb227b46f4de6257ffe32c8a4"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/a369d4f8961791e47436b70cfcf42eb672f097fb/comments",
            "commit": {
                "author": {
                    "date": "2025-09-23T20:55:28Z",
                    "email": "matusvalo@users.noreply.github.com",
                    "name": "Matus Valo"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-09-23T20:55:28Z",
                    "email": "matusvalo@users.noreply.github.com",
                    "name": "Matus Valo"
                },
                "message": "Mention original tempita author",
                "tree": {
                    "sha": "7543d1563b596cef8d1053fea7482c1a5a81c806",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/7543d1563b596cef8d1053fea7482c1a5a81c806"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/a369d4f8961791e47436b70cfcf42eb672f097fb",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/a369d4f8961791e47436b70cfcf42eb672f097fb",
            "node_id": "C_kwDOFL4z49oAKGEzNjlkNGY4OTYxNzkxZTQ3NDM2YjcwY2ZjZjQyZWI2NzJmMDk3ZmI",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/086c83ac6c90a49fb227b46f4de6257ffe32c8a4",
                    "sha": "086c83ac6c90a49fb227b46f4de6257ffe32c8a4",
                    "url": "https://api.github.com/repos/cython/cython/commits/086c83ac6c90a49fb227b46f4de6257ffe32c8a4"
                }
            ],
            "sha": "a369d4f8961791e47436b70cfcf42eb672f097fb",
            "url": "https://api.github.com/repos/cython/cython/commits/a369d4f8961791e47436b70cfcf42eb672f097fb"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/03e4a77ce57cd4b35889737b7725bc6ee3fdaa22/comments",
            "commit": {
                "author": {
                    "date": "2025-09-24T17:37:33Z",
                    "email": "matusvalo@users.noreply.github.com",
                    "name": "mv-python"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-09-24T17:37:33Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Apply suggestions from code review\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                "tree": {
                    "sha": "542361fd23a91979361ac516941d01148aa92ba0",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/542361fd23a91979361ac516941d01148aa92ba0"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/03e4a77ce57cd4b35889737b7725bc6ee3fdaa22",
                "verification": {
                    "payload": "tree 542361fd23a91979361ac516941d01148aa92ba0\nparent a369d4f8961791e47436b70cfcf42eb672f097fb\nauthor mv-python <matusvalo@users.noreply.github.com> 1758735453 +0200\ncommitter GitHub <noreply@github.com> 1758735453 +0200\n\nApply suggestions from code review\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJo1CxdCRC1aQ7uu5UhlAAAS2gQAG1jB3TJMpWag54EPiHQB0Vl\n47pP12SqQc/s1UIW9tKtagr+qufdIJFi8qJbpXLUbcCklqEZxK2DFeJWfbWuQSUT\noDbIjk0pR/S/GP0rP/FY5kydVv5YhGet8LKejBdHaCRoqxSPv9VPrBjmk0kMSVMm\nl9+bP9rKDvGA/0/C7XgpJI3kzWRc/CX7qmeotjLd6mBjiR1wUDhgfcBbFqROv8Xn\n6ye+gVS5Cw+vwtgiKPM49CoHsgk9ShGY++KywKsjiI9/a2gj0BML/J2Wg5O5kQ2U\nisCp6flaMi49cIOxO3+feJVTbKUDEb+zQwq0c81zZ9kqEMO3SE8NckhsuqlwvX3C\nXk6riHqpCdreFobGurJ4q3DPGbcOoOrUKdCvaKeuLQZZSoTahqvKJ5XhjYcYXgEU\nPKQeuAZE6nDch8aGFSC1wGaqJ8WuI33z9+ATSFOJacJNvIqtiZcMD93r2pPOwZPB\n+IQIsyIBOlKQbErQgK+8ZzA+65Qx12Noe6oiYJ4cqSAlMpBTLpTq2Tj5fC+XQB8D\nXCw3lWD3F0g7SY4ScJ/Zur4KWNrQSBCu08aKIzB89Y2Owh5RcD/9ML6H99Fq5SdL\ns0pW9/iUkwu/Ywx1UyjnA2bwswNV+ZohibCqy8y4yc4D9YINeBK/goHBHIOZSaA8\ncOeeOJ80buAg/XWdaaLV\n=dQ+8\n-----END PGP SIGNATURE-----\n",
                    "verified": true,
                    "verified_at": "2025-09-24T17:37:33Z"
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/03e4a77ce57cd4b35889737b7725bc6ee3fdaa22",
            "node_id": "C_kwDOFL4z49oAKDAzZTRhNzdjZTU3Y2Q0YjM1ODg5NzM3Yjc3MjViYzZlZTNmZGFhMjI",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/a369d4f8961791e47436b70cfcf42eb672f097fb",
                    "sha": "a369d4f8961791e47436b70cfcf42eb672f097fb",
                    "url": "https://api.github.com/repos/cython/cython/commits/a369d4f8961791e47436b70cfcf42eb672f097fb"
                }
            ],
            "sha": "03e4a77ce57cd4b35889737b7725bc6ee3fdaa22",
            "url": "https://api.github.com/repos/cython/cython/commits/03e4a77ce57cd4b35889737b7725bc6ee3fdaa22"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/8832941781c34392c44c4453d0db5bbf9374a8bb/comments",
            "commit": {
                "author": {
                    "date": "2025-09-24T17:44:15Z",
                    "email": "matusvalo@users.noreply.github.com",
                    "name": "Matus Valo"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-09-24T17:44:15Z",
                    "email": "matusvalo@users.noreply.github.com",
                    "name": "Matus Valo"
                },
                "message": "Use 2 separating lines before section",
                "tree": {
                    "sha": "bc381ad27513fce43a6439ec304dbcafb88b8894",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/bc381ad27513fce43a6439ec304dbcafb88b8894"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/8832941781c34392c44c4453d0db5bbf9374a8bb",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/8832941781c34392c44c4453d0db5bbf9374a8bb",
            "node_id": "C_kwDOFL4z49oAKDg4MzI5NDE3ODFjMzQzOTJjNDRjNDQ1M2QwZGI1YmJmOTM3NGE4YmI",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/03e4a77ce57cd4b35889737b7725bc6ee3fdaa22",
                    "sha": "03e4a77ce57cd4b35889737b7725bc6ee3fdaa22",
                    "url": "https://api.github.com/repos/cython/cython/commits/03e4a77ce57cd4b35889737b7725bc6ee3fdaa22"
                }
            ],
            "sha": "8832941781c34392c44c4453d0db5bbf9374a8bb",
            "url": "https://api.github.com/repos/cython/cython/commits/8832941781c34392c44c4453d0db5bbf9374a8bb"
        }
    ],
    "commits_url": "https://api.github.com/repos/cython/cython/pulls/7149/commits",
    "created_at": "2025-09-12T21:44:29Z",
    "diff_url": "https://github.com/cython/cython/pull/7149.diff",
    "draft": false,
    "head": {
        "label": "matusvalo:tempita",
        "ref": "tempita",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/matusvalo/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/matusvalo/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/matusvalo/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/matusvalo/cython/branches{/branch}",
            "clone_url": "https://github.com/matusvalo/cython.git",
            "collaborators_url": "https://api.github.com/repos/matusvalo/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/matusvalo/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/matusvalo/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/matusvalo/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/matusvalo/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/matusvalo/cython/contributors",
            "created_at": "2021-03-15T14:49:34Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/matusvalo/cython/deployments",
            "description": "The most widely used Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/matusvalo/cython/downloads",
            "events_url": "https://api.github.com/repos/matusvalo/cython/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/matusvalo/cython/forks",
            "full_name": "matusvalo/cython",
            "git_commits_url": "https://api.github.com/repos/matusvalo/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/matusvalo/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/matusvalo/cython/git/tags{/sha}",
            "git_url": "git://github.com/matusvalo/cython.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://cython.org",
            "hooks_url": "https://api.github.com/repos/matusvalo/cython/hooks",
            "html_url": "https://github.com/matusvalo/cython",
            "id": 348009443,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/matusvalo/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/matusvalo/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/matusvalo/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/matusvalo/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/matusvalo/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/matusvalo/cython/languages",
            "license": {
                "key": "apache-2.0",
                "name": "Apache License 2.0",
                "node_id": "MDc6TGljZW5zZTI=",
                "spdx_id": "Apache-2.0",
                "url": "https://api.github.com/licenses/apache-2.0"
            },
            "merges_url": "https://api.github.com/repos/matusvalo/cython/merges",
            "milestones_url": "https://api.github.com/repos/matusvalo/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkzNDgwMDk0NDM=",
            "notifications_url": "https://api.github.com/repos/matusvalo/cython/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/matusvalo/cython/pulls{/number}",
            "pushed_at": "2025-09-25T18:00:23Z",
            "releases_url": "https://api.github.com/repos/matusvalo/cython/releases{/id}",
            "size": 77153,
            "ssh_url": "git@github.com:matusvalo/cython.git",
            "stargazers_count": 2,
            "stargazers_url": "https://api.github.com/repos/matusvalo/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/matusvalo/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/matusvalo/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/matusvalo/cython/subscription",
            "svn_url": "https://github.com/matusvalo/cython",
            "tags_url": "https://api.github.com/repos/matusvalo/cython/tags",
            "teams_url": "https://api.github.com/repos/matusvalo/cython/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/matusvalo/cython/git/trees{/sha}",
            "updated_at": "2025-09-12T21:42:15Z",
            "url": "https://api.github.com/repos/matusvalo/cython",
            "visibility": "public",
            "watchers": 2,
            "watchers_count": 2,
            "web_commit_signoff_required": false
        },
        "sha": "8832941781c34392c44c4453d0db5bbf9374a8bb",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
            "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
            "followers_url": "https://api.github.com/users/matusvalo/followers",
            "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
            "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/matusvalo",
            "id": 827060,
            "login": "matusvalo",
            "node_id": "MDQ6VXNlcjgyNzA2MA==",
            "organizations_url": "https://api.github.com/users/matusvalo/orgs",
            "received_events_url": "https://api.github.com/users/matusvalo/received_events",
            "repos_url": "https://api.github.com/users/matusvalo/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/matusvalo",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/cython/cython/pull/7149",
    "id": 2824099832,
    "issue_url": "https://api.github.com/repos/cython/cython/issues/7149",
    "labels": [
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425561345,
            "name": "Documentation",
            "node_id": "MDU6TGFiZWw0MjU1NjEzNDU=",
            "url": "https://api.github.com/repos/cython/cython/labels/Documentation"
        },
        {
            "color": "E94CE1",
            "default": false,
            "description": "",
            "id": 4820489689,
            "name": "tempita",
            "node_id": "LA_kwDOABDGAc8AAAABH1LV2Q",
            "url": "https://api.github.com/repos/cython/cython/labels/tempita"
        }
    ],
    "locked": false,
    "merge_commit_sha": "3695495f575715ece80bf07ab79aece1acdbd9ed",
    "merged_at": "2025-09-25T18:00:17Z",
    "milestone": null,
    "node_id": "PR_kwDOABDGAc6oVFf4",
    "number": 7149,
    "patch_url": "https://github.com/cython/cython/pull/7149.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/cython/cython/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/cython/cython/pulls/7149/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/cython/cython/statuses/8832941781c34392c44c4453d0db5bbf9374a8bb",
    "title": "Docs: introduce documentation of tempita",
    "updated_at": "2025-09-25T18:00:23Z",
    "url": "https://api.github.com/repos/cython/cython/pulls/7149",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
        "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
        "followers_url": "https://api.github.com/users/matusvalo/followers",
        "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
        "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/matusvalo",
        "id": 827060,
        "login": "matusvalo",
        "node_id": "MDQ6VXNlcjgyNzA2MA==",
        "organizations_url": "https://api.github.com/users/matusvalo/orgs",
        "received_events_url": "https://api.github.com/users/matusvalo/received_events",
        "repos_url": "https://api.github.com/users/matusvalo/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/matusvalo",
        "user_view_type": "public"
    }
}