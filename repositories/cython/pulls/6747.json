{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/cython/cython/issues/6747/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/cython/cython/pulls/6747/commits"
        },
        "html": {
            "href": "https://github.com/cython/cython/pull/6747"
        },
        "issue": {
            "href": "https://api.github.com/repos/cython/cython/issues/6747"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/cython/cython/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/cython/cython/pulls/6747/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/cython/cython/pulls/6747"
        },
        "statuses": {
            "href": "https://api.github.com/repos/cython/cython/statuses/351fece9623859efd7f30ca936a303686b1342c9"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "cython:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/cython/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/cython/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/cython/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/cython/cython/branches{/branch}",
            "clone_url": "https://github.com/cython/cython.git",
            "collaborators_url": "https://api.github.com/repos/cython/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/cython/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/cython/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/cython/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/cython/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/cython/cython/contributors",
            "created_at": "2010-11-21T07:44:20Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/cython/cython/deployments",
            "description": "The most widely used Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/cython/cython/downloads",
            "events_url": "https://api.github.com/repos/cython/cython/events",
            "fork": false,
            "forks": 1520,
            "forks_count": 1520,
            "forks_url": "https://api.github.com/repos/cython/cython/forks",
            "full_name": "cython/cython",
            "git_commits_url": "https://api.github.com/repos/cython/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/cython/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/cython/cython/git/tags{/sha}",
            "git_url": "git://github.com/cython/cython.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": false,
            "has_wiki": true,
            "homepage": "https://cython.org",
            "hooks_url": "https://api.github.com/repos/cython/cython/hooks",
            "html_url": "https://github.com/cython/cython",
            "id": 1099265,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/cython/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/cython/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/cython/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/cython/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/cython/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/cython/cython/languages",
            "license": {
                "key": "apache-2.0",
                "name": "Apache License 2.0",
                "node_id": "MDc6TGljZW5zZTI=",
                "spdx_id": "Apache-2.0",
                "url": "https://api.github.com/licenses/apache-2.0"
            },
            "merges_url": "https://api.github.com/repos/cython/cython/merges",
            "milestones_url": "https://api.github.com/repos/cython/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkxMDk5MjY1",
            "notifications_url": "https://api.github.com/repos/cython/cython/notifications{?since,all,participating}",
            "open_issues": 1430,
            "open_issues_count": 1430,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/486082?v=4",
                "events_url": "https://api.github.com/users/cython/events{/privacy}",
                "followers_url": "https://api.github.com/users/cython/followers",
                "following_url": "https://api.github.com/users/cython/following{/other_user}",
                "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/cython",
                "id": 486082,
                "login": "cython",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
                "organizations_url": "https://api.github.com/users/cython/orgs",
                "received_events_url": "https://api.github.com/users/cython/received_events",
                "repos_url": "https://api.github.com/users/cython/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/cython",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/cython/cython/pulls{/number}",
            "pushed_at": "2025-03-26T20:20:06Z",
            "releases_url": "https://api.github.com/repos/cython/cython/releases{/id}",
            "size": 75206,
            "ssh_url": "git@github.com:cython/cython.git",
            "stargazers_count": 9876,
            "stargazers_url": "https://api.github.com/repos/cython/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/cython/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/cython/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/cython/cython/subscription",
            "svn_url": "https://github.com/cython/cython",
            "tags_url": "https://api.github.com/repos/cython/cython/tags",
            "teams_url": "https://api.github.com/repos/cython/cython/teams",
            "topics": [
                "big-data",
                "c",
                "cpp",
                "cpython",
                "cpython-extensions",
                "cython",
                "performance",
                "python"
            ],
            "trees_url": "https://api.github.com/repos/cython/cython/git/trees{/sha}",
            "updated_at": "2025-03-27T13:13:41Z",
            "url": "https://api.github.com/repos/cython/cython",
            "visibility": "public",
            "watchers": 9876,
            "watchers_count": 9876,
            "web_commit_signoff_required": false
        },
        "sha": "54f649599a32499c3371f55b04cd4ace957bb677",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/486082?v=4",
            "events_url": "https://api.github.com/users/cython/events{/privacy}",
            "followers_url": "https://api.github.com/users/cython/followers",
            "following_url": "https://api.github.com/users/cython/following{/other_user}",
            "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/cython",
            "id": 486082,
            "login": "cython",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
            "organizations_url": "https://api.github.com/users/cython/orgs",
            "received_events_url": "https://api.github.com/users/cython/received_events",
            "repos_url": "https://api.github.com/users/cython/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/cython",
            "user_view_type": "public"
        }
    },
    "body": "Replaces most of our specialized PyMethodCallNode code with PyObject_VectorcallMethod. This avoids __Pyx_PyMethod_New (which is slow in the Limited API specifically) and essentially lets Python do all the unpacking stuff that we don't have access to.\r\n\r\nThis is something like a 35% speed up on the bm_richards_pyclass code in the Limited API.",
    "closed_at": "2025-03-26T20:15:56Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6747#discussion_r2008284322"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6747"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2008284322"
                }
            },
            "author_association": "MEMBER",
            "body": "The default for `negate` in all cases outside of the closely fallback related code seems to be True. That suggests that all other code shouldn't pass a flag and the one exception should be the only special place, preferably not using the same method. I'd consider moving the actual C condition into a class level constant and then writing it from two different places. Maybe call it `FALLBACK_CASE` so that you can write `f\"#if {FALLBACK_CASE}\"`.",
            "commit_id": "351fece9623859efd7f30ca936a303686b1342c9",
            "created_at": "2025-03-21T20:20:31Z",
            "diff_hunk": "@@ -6632,16 +6632,68 @@ class PyMethodCallNode(CallNode):\n     # arg_tuple   TupleNode     the arguments for the args tuple\n     # kwdict      ExprNode or None  keyword dictionary (if present)\n     # unpack      bool\n+    # function_obj ExprNode or None   copy of self.function.obj (in some situations)    \n \n-    subexprs = ['function', 'arg_tuple', 'kwdict']\n+    subexprs = ['function', 'arg_tuple', 'kwdict', 'function_obj']\n     is_temp = True\n     kwdict = None\n+    direct_fallback = False\n+    function_obj = None\n+\n+    def __init__(self, pos, **kwds):\n+        super().__init__(pos, **kwds)\n+        if self.allow_direct_fallback_call():\n+            self.direct_fallback = True\n+            self.function_obj = ProxyNode(self.function.obj)\n+            self.function.obj = CloneNode(self.function_obj)\n+\n+    def allow_direct_fallback_call(self):\n+        if self.kwdict and not isinstance(self.kwdict, DictNode):\n+            return False\n+        if not self.function.is_attribute:\n+            return False\n+        return True\n+    \n+    def generate_direct_fallback_guard(self, code, negate):",
            "html_url": "https://github.com/cython/cython/pull/6747#discussion_r2008284322",
            "id": 2008284322,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc53s_yi",
            "original_commit_id": "cf8d5bd487938f01bc095f23024a5207e99f5264",
            "original_line": 6657,
            "original_position": 27,
            "original_start_line": null,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_review_id": 2707178676,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6747",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2008284322/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-03-21T20:30:52Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2008284322",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6747#discussion_r2008289237"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6747"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2008289237"
                }
            },
            "author_association": "MEMBER",
            "body": "The fact that the calling code has a ready-made \"keyword_variable\" with a leading comma separator seems a pure accident. I'd rather pass the args and kwdict and then do a proper code generation here. Calling code shouldn't know too much about the way the code is generated here.",
            "commit_id": "351fece9623859efd7f30ca936a303686b1342c9",
            "created_at": "2025-03-21T20:24:22Z",
            "diff_hunk": "@@ -6632,16 +6632,68 @@ class PyMethodCallNode(CallNode):\n     # arg_tuple   TupleNode     the arguments for the args tuple\n     # kwdict      ExprNode or None  keyword dictionary (if present)\n     # unpack      bool\n+    # function_obj ExprNode or None   copy of self.function.obj (in some situations)    \n \n-    subexprs = ['function', 'arg_tuple', 'kwdict']\n+    subexprs = ['function', 'arg_tuple', 'kwdict', 'function_obj']\n     is_temp = True\n     kwdict = None\n+    direct_fallback = False\n+    function_obj = None\n+\n+    def __init__(self, pos, **kwds):\n+        super().__init__(pos, **kwds)\n+        if self.allow_direct_fallback_call():\n+            self.direct_fallback = True\n+            self.function_obj = ProxyNode(self.function.obj)\n+            self.function.obj = CloneNode(self.function_obj)\n+\n+    def allow_direct_fallback_call(self):\n+        if self.kwdict and not isinstance(self.kwdict, DictNode):\n+            return False\n+        if not self.function.is_attribute:\n+            return False\n+        return True\n+    \n+    def generate_direct_fallback_guard(self, code, negate):\n+        if self.direct_fallback:\n+            # negate gives the guard for the regular code\n+            code.putln(f\"#if {'!' if negate else ''}(CYTHON_VECTORCALL && !CYTHON_UNPACK_METHODS)\")\n+\n+    def generate_direct_fallback(self,  code, len_args, keyword_variable):",
            "html_url": "https://github.com/cython/cython/pull/6747#discussion_r2008289237",
            "id": 2008289237,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc53tA_V",
            "original_commit_id": "cf8d5bd487938f01bc095f23024a5207e99f5264",
            "original_line": 6662,
            "original_position": 32,
            "original_start_line": null,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_review_id": 2707178676,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6747",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2008289237/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-03-21T20:30:52Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2008289237",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6747#discussion_r2008289853"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6747"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2008289853"
                }
            },
            "author_association": "MEMBER",
            "body": "`__pyx_callargs` is probably in `Naming`? EDIT: Apparently not. Then, if it's used in more than one place, it should come from there.",
            "commit_id": "351fece9623859efd7f30ca936a303686b1342c9",
            "created_at": "2025-03-21T20:24:58Z",
            "diff_hunk": "@@ -6632,16 +6632,68 @@ class PyMethodCallNode(CallNode):\n     # arg_tuple   TupleNode     the arguments for the args tuple\n     # kwdict      ExprNode or None  keyword dictionary (if present)\n     # unpack      bool\n+    # function_obj ExprNode or None   copy of self.function.obj (in some situations)    \n \n-    subexprs = ['function', 'arg_tuple', 'kwdict']\n+    subexprs = ['function', 'arg_tuple', 'kwdict', 'function_obj']\n     is_temp = True\n     kwdict = None\n+    direct_fallback = False\n+    function_obj = None\n+\n+    def __init__(self, pos, **kwds):\n+        super().__init__(pos, **kwds)\n+        if self.allow_direct_fallback_call():\n+            self.direct_fallback = True\n+            self.function_obj = ProxyNode(self.function.obj)\n+            self.function.obj = CloneNode(self.function_obj)\n+\n+    def allow_direct_fallback_call(self):\n+        if self.kwdict and not isinstance(self.kwdict, DictNode):\n+            return False\n+        if not self.function.is_attribute:\n+            return False\n+        return True\n+    \n+    def generate_direct_fallback_guard(self, code, negate):\n+        if self.direct_fallback:\n+            # negate gives the guard for the regular code\n+            code.putln(f\"#if {'!' if negate else ''}(CYTHON_VECTORCALL && !CYTHON_UNPACK_METHODS)\")\n+\n+    def generate_direct_fallback(self,  code, len_args, keyword_variable):\n+        if not self.direct_fallback:\n+            return\n+        code.putln(\"#else\")\n+        # The assumption here is that if we can use vectorcall, but can't unpack methods\n+        # then PyObject_VectorcallMethod is better because it does most of this stuff internally.\n+        # This is especially the case for the Limited API where method creation is expensive\n+        code.putln(f\"{self.result()} = PyObject_VectorcallMethod(\"\n+                   f\"{code.get_py_string_const(self.function.attribute)}, \"\n+                   f\"__pyx_callargs, {len_args+1}{keyword_variable or ', NULL'});\")",
            "html_url": "https://github.com/cython/cython/pull/6747#discussion_r2008289853",
            "id": 2008289853,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc53tBI9",
            "original_commit_id": "cf8d5bd487938f01bc095f23024a5207e99f5264",
            "original_line": 6671,
            "original_position": 41,
            "original_start_line": null,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_review_id": 2707178676,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6747",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2008289853/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-03-21T20:49:38Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2008289853",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6747#discussion_r2008292419"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6747"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2008292419"
                }
            },
            "author_association": "MEMBER",
            "body": "It seems weird to pass `arg_offset_cname` just to mark it as unused. That creates a very tight dependency on the calling code and the alternative calling code. It's the caller and user of the argument that should mark the argument as unused, not the fallback code that does not use (or should even know about) it.",
            "commit_id": "351fece9623859efd7f30ca936a303686b1342c9",
            "created_at": "2025-03-21T20:27:20Z",
            "diff_hunk": "@@ -6632,16 +6632,68 @@ class PyMethodCallNode(CallNode):\n     # arg_tuple   TupleNode     the arguments for the args tuple\n     # kwdict      ExprNode or None  keyword dictionary (if present)\n     # unpack      bool\n+    # function_obj ExprNode or None   copy of self.function.obj (in some situations)    \n \n-    subexprs = ['function', 'arg_tuple', 'kwdict']\n+    subexprs = ['function', 'arg_tuple', 'kwdict', 'function_obj']\n     is_temp = True\n     kwdict = None\n+    direct_fallback = False\n+    function_obj = None\n+\n+    def __init__(self, pos, **kwds):\n+        super().__init__(pos, **kwds)\n+        if self.allow_direct_fallback_call():\n+            self.direct_fallback = True\n+            self.function_obj = ProxyNode(self.function.obj)\n+            self.function.obj = CloneNode(self.function_obj)\n+\n+    def allow_direct_fallback_call(self):\n+        if self.kwdict and not isinstance(self.kwdict, DictNode):\n+            return False\n+        if not self.function.is_attribute:\n+            return False\n+        return True\n+    \n+    def generate_direct_fallback_guard(self, code, negate):\n+        if self.direct_fallback:\n+            # negate gives the guard for the regular code\n+            code.putln(f\"#if {'!' if negate else ''}(CYTHON_VECTORCALL && !CYTHON_UNPACK_METHODS)\")\n+\n+    def generate_direct_fallback(self,  code, len_args, keyword_variable):\n+        if not self.direct_fallback:\n+            return\n+        code.putln(\"#else\")\n+        # The assumption here is that if we can use vectorcall, but can't unpack methods\n+        # then PyObject_VectorcallMethod is better because it does most of this stuff internally.\n+        # This is especially the case for the Limited API where method creation is expensive\n+        code.putln(f\"{self.result()} = PyObject_VectorcallMethod(\"\n+                   f\"{code.get_py_string_const(self.function.attribute)}, \"\n+                   f\"__pyx_callargs, {len_args+1}{keyword_variable or ', NULL'});\")\n+        \n+    def generate_direct_fallback_self_assignment(self, code, self_arg, arg_offset_cname):\n+        if not self.direct_fallback:\n+            return\n+        self.generate_direct_fallback_guard(code, negate=False)\n+        code.putln(f\"{self_arg} = {self.function_obj.result()};\")\n+        code.put_incref(self_arg, py_object_type)\n+        code.putln(f\"CYTHON_UNUSED_VAR({arg_offset_cname});\")",
            "html_url": "https://github.com/cython/cython/pull/6747#discussion_r2008292419",
            "id": 2008292419,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc53tBxD",
            "original_commit_id": "cf8d5bd487938f01bc095f23024a5207e99f5264",
            "original_line": 6679,
            "original_position": 49,
            "original_start_line": null,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_review_id": 2707178676,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6747",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2008292419/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-03-21T20:30:52Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2008292419",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6747#discussion_r2008294378"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6747"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2008294378"
                }
            },
            "author_association": "MEMBER",
            "body": "Outdated comment.",
            "commit_id": "351fece9623859efd7f30ca936a303686b1342c9",
            "created_at": "2025-03-21T20:29:34Z",
            "diff_hunk": "@@ -6632,16 +6632,71 @@ class PyMethodCallNode(CallNode):\n     # arg_tuple   TupleNode     the arguments for the args tuple\n     # kwdict      ExprNode or None  keyword dictionary (if present)\n     # unpack      bool\n+    # function_obj ExprNode or None   copy of self.function.obj (in some situations)\n \n-    subexprs = ['function', 'arg_tuple', 'kwdict']\n+    subexprs = ['function', 'arg_tuple', 'kwdict', 'function_obj']\n     is_temp = True\n     kwdict = None\n+    direct_fallback = False\n+    function_obj = None\n+\n+    def __init__(self, pos, **kwds):\n+        super().__init__(pos, **kwds)\n+        if self.allow_direct_fallback_call():\n+            self.direct_fallback = True\n+            if self.function.obj.is_simple() and not self.function.obj.result_in_temp():\n+                self.function_obj = copy.copy(self.function.obj)\n+            else:\n+                self.function_obj = ProxyNode(self.function.obj)\n+                self.function.obj = CloneNode(self.function_obj)\n+\n+    def allow_direct_fallback_call(self):\n+        if self.kwdict and not isinstance(self.kwdict, DictNode):\n+            return False\n+        if not self.function.is_attribute:\n+            return False\n+        return True\n+\n+    def generate_direct_fallback_guard(self, code, negate):\n+        if self.direct_fallback:\n+            # negate gives the guard for the regular code\n+            code.putln(f\"#if {'!' if negate else ''}(CYTHON_VECTORCALL && !CYTHON_UNPACK_METHODS)\")\n+\n+    def generate_direct_fallback(self,  code, len_args, keyword_variable):\n+        if not self.direct_fallback:\n+            return\n+        code.putln(\"#else\")\n+        # The assumption here is that if we can use vectorcall, but can't unpack methods\n+        # then PyObject_VectorcallMethod is better because it does most of this stuff internally.\n+        # This is especially the case for the Limited API where method creation is expensive\n+        code.putln(f\"{self.result()} = PyObject_VectorcallMethod(\"\n+                   f\"{code.get_py_string_const(self.function.attribute)}, \"\n+                   f\"__pyx_callargs, {len_args+1}{keyword_variable or ', NULL'});\")\n+\n+    def generate_direct_fallback_self_assignment(self, code, self_arg, arg_offset_cname):\n+        if not self.direct_fallback:\n+            return\n+        self.generate_direct_fallback_guard(code, negate=False)\n+        code.putln(f\"{self_arg} = {self.function_obj.py_result()};\")\n+        code.put_incref(self_arg, py_object_type)\n+        code.putln(f\"CYTHON_UNUSED_VAR({arg_offset_cname});\")\n+        self.end_direct_fallback_guard(code)\n+\n+    def end_direct_fallback_guard(self, code):\n+        if self.direct_fallback:\n+            # new-line because not everything that precedes this uses putln apparently.",
            "html_url": "https://github.com/cython/cython/pull/6747#discussion_r2008294378",
            "id": 2008294378,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc53tCPq",
            "original_commit_id": "b6df7a6e9022cff5e31d8484d0d8719dd3fe96dc",
            "original_line": 6687,
            "original_position": 57,
            "original_start_line": null,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_review_id": 2707178676,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6747",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2008294378/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-03-21T20:30:52Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2008294378",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6747#discussion_r2008295424"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6747"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2008295424"
                }
            },
            "author_association": "MEMBER",
            "body": "What does this do?",
            "commit_id": "351fece9623859efd7f30ca936a303686b1342c9",
            "created_at": "2025-03-21T20:30:48Z",
            "diff_hunk": "@@ -6632,16 +6632,71 @@ class PyMethodCallNode(CallNode):\n     # arg_tuple   TupleNode     the arguments for the args tuple\n     # kwdict      ExprNode or None  keyword dictionary (if present)\n     # unpack      bool\n+    # function_obj ExprNode or None   copy of self.function.obj (in some situations)\n \n-    subexprs = ['function', 'arg_tuple', 'kwdict']\n+    subexprs = ['function', 'arg_tuple', 'kwdict', 'function_obj']\n     is_temp = True\n     kwdict = None\n+    direct_fallback = False\n+    function_obj = None\n+\n+    def __init__(self, pos, **kwds):\n+        super().__init__(pos, **kwds)\n+        if self.allow_direct_fallback_call():\n+            self.direct_fallback = True\n+            if self.function.obj.is_simple() and not self.function.obj.result_in_temp():\n+                self.function_obj = copy.copy(self.function.obj)",
            "html_url": "https://github.com/cython/cython/pull/6747#discussion_r2008295424",
            "id": 2008295424,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc53tCgA",
            "original_commit_id": "b6df7a6e9022cff5e31d8484d0d8719dd3fe96dc",
            "original_line": 6648,
            "original_position": 18,
            "original_start_line": 6647,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_review_id": 2707178676,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6747",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2008295424/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-03-21T20:30:52Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2008295424",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6747#discussion_r2009204913"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6747"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2009204913"
                }
            },
            "author_association": "MEMBER",
            "body": "It looks like it's worth doing this generally (and not just in the limited API) so I'm going to take out these guards and just generate one set of code",
            "commit_id": "351fece9623859efd7f30ca936a303686b1342c9",
            "created_at": "2025-03-23T19:20:14Z",
            "diff_hunk": "@@ -6632,16 +6632,68 @@ class PyMethodCallNode(CallNode):\n     # arg_tuple   TupleNode     the arguments for the args tuple\n     # kwdict      ExprNode or None  keyword dictionary (if present)\n     # unpack      bool\n+    # function_obj ExprNode or None   copy of self.function.obj (in some situations)    \n \n-    subexprs = ['function', 'arg_tuple', 'kwdict']\n+    subexprs = ['function', 'arg_tuple', 'kwdict', 'function_obj']\n     is_temp = True\n     kwdict = None\n+    direct_fallback = False\n+    function_obj = None\n+\n+    def __init__(self, pos, **kwds):\n+        super().__init__(pos, **kwds)\n+        if self.allow_direct_fallback_call():\n+            self.direct_fallback = True\n+            self.function_obj = ProxyNode(self.function.obj)\n+            self.function.obj = CloneNode(self.function_obj)\n+\n+    def allow_direct_fallback_call(self):\n+        if self.kwdict and not isinstance(self.kwdict, DictNode):\n+            return False\n+        if not self.function.is_attribute:\n+            return False\n+        return True\n+    \n+    def generate_direct_fallback_guard(self, code, negate):",
            "html_url": "https://github.com/cython/cython/pull/6747#discussion_r2009204913",
            "id": 2009204913,
            "in_reply_to_id": 2008284322,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc53wgix",
            "original_commit_id": "cf8d5bd487938f01bc095f23024a5207e99f5264",
            "original_line": 6657,
            "original_position": 27,
            "original_start_line": null,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_review_id": 2708702424,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6747",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2009204913/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-03-23T19:20:14Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2009204913",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6747#discussion_r2009268120"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6747"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2009268120"
                }
            },
            "author_association": "MEMBER",
            "body": "I should probably also apply this as an exclusion criteria",
            "commit_id": "351fece9623859efd7f30ca936a303686b1342c9",
            "created_at": "2025-03-23T22:00:30Z",
            "diff_hunk": "@@ -6655,21 +6680,28 @@ def generate_evaluation_code(self, code):\n             self.kwdict.generate_evaluation_code(code)\n \n         # make sure function is in temp so that we can replace the reference below if it's a method\n-        reuse_function_temp = self.function.is_temp\n-        if reuse_function_temp:\n-            function = self.function.result()\n-        else:\n-            function = code.funcstate.allocate_temp(py_object_type, manage_ref=True)\n-            self.function.make_owned_reference(code)\n-            code.put(\"%s = %s; \" % (function, self.function.py_result()))\n-            self.function.generate_disposal_code(code)\n-            self.function.free_temps(code)\n+        if not self.avoid_attribute_lookup:\n+            reuse_function_temp = self.function.is_temp\n+            if reuse_function_temp:\n+                function = self.function.result()\n+            else:\n+                function = code.funcstate.allocate_temp(py_object_type, manage_ref=True)\n+                self.function.make_owned_reference(code)\n+                code.putln(\"%s = %s; \" % (function, self.function.py_result()))\n+                self.function.generate_disposal_code(code)\n+                self.function.free_temps(code)\n \n         self_arg = code.funcstate.allocate_temp(py_object_type, manage_ref=True)\n         code.putln(\"%s = NULL;\" % self_arg)\n         arg_offset_cname = code.funcstate.allocate_temp(PyrexTypes.c_uint_type, manage_ref=False)\n         code.putln(\"%s = 0;\" % arg_offset_cname)\n \n+        if self.avoid_attribute_lookup:\n+            self.function_obj.generate_evaluation_code(code)\n+            code.putln(f\"{self_arg} = {self.function_obj.py_result()};\")\n+            code.put_incref(self_arg, py_object_type)\n+            code.putln(f\"{arg_offset_cname} = 1;\")\n+\n         def attribute_is_likely_method(attr):",
            "html_url": "https://github.com/cython/cython/pull/6747#discussion_r2009268120",
            "id": 2009268120,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc53wv-Y",
            "original_commit_id": "1de15d41ecc6665b425ab8c35a2922dd97e26bd5",
            "original_line": 6705,
            "original_position": 83,
            "original_start_line": null,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_review_id": 2708819475,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6747",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2009268120/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-03-23T22:00:30Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2009268120",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6747#discussion_r2009727081"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6747"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2009727081"
                }
            },
            "author_association": "MEMBER",
            "body": "Accidental change?",
            "commit_id": "351fece9623859efd7f30ca936a303686b1342c9",
            "created_at": "2025-03-24T08:49:26Z",
            "diff_hunk": "@@ -6628,20 +6628,56 @@ class PyMethodCallNode(CallNode):\n     # Specialised call to a (potential) PyMethodObject with non-constant argument tuple.\n     # Allows the self argument to be injected directly instead of repacking a tuple for it.\n     #\n-    # function    ExprNode      the function/method object to call\n+    # function    ExprNode  the function/method object to call",
            "html_url": "https://github.com/cython/cython/pull/6747#discussion_r2009727081",
            "id": 2009727081,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc53ygBp",
            "original_commit_id": "c57aec39070b0280ed0213db3620f465b217ad41",
            "original_line": 6631,
            "original_position": 5,
            "original_start_line": 6631,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_review_id": 2709590867,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6747",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2009727081/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "LEFT",
            "subject_type": "line",
            "updated_at": "2025-03-24T09:31:16Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2009727081",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6747#discussion_r2009769879"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6747"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2009769879"
                }
            },
            "author_association": "MEMBER",
            "body": "I'd make sure `function` is always assigned above and avoid the conditional usage here.",
            "commit_id": "351fece9623859efd7f30ca936a303686b1342c9",
            "created_at": "2025-03-24T09:16:14Z",
            "diff_hunk": "@@ -6764,18 +6810,22 @@ def attribute_is_likely_method(attr):\n             keyword_variable = f\", {self.kwdict.result()}\"\n         else:\n             keyword_variable = \"\"\n-        code.putln(\"%s = %s(%s, __pyx_callargs+1-%s, %d+%s%s);\" % (\n+        code.putln(\"%s = %s(%s, __pyx_callargs+1-%s, (%d+%s)%s %s);\" % (\n             self.result(),\n             function_caller,\n-            function,\n+            code.get_py_string_const(self.function.attribute) if self.avoid_attribute_lookup else function,",
            "html_url": "https://github.com/cython/cython/pull/6747#discussion_r2009769879",
            "id": 2009769879,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc53yqeX",
            "original_commit_id": "c57aec39070b0280ed0213db3620f465b217ad41",
            "original_line": 6816,
            "original_position": 167,
            "original_start_line": null,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_review_id": 2709590867,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6747",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2009769879/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-03-24T09:31:16Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2009769879",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6747#discussion_r2009790644"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6747"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2009790644"
                }
            },
            "author_association": "MEMBER",
            "body": "This code generation method is a lengthy mess of conditional code that could really benefit from getting split up into several smaller methods. That would allow two different implementations without all the new \"if avoid attribute lookup\" special casing, which just adds to the existing complexity. Actually, more than two implementations, \"having kwargs as key-value pairs\" is another very different case that merits its own separate method.\r\n\r\nI can't really say if this PR is a good place to do this split, but it feels very worthwhile.",
            "commit_id": "351fece9623859efd7f30ca936a303686b1342c9",
            "created_at": "2025-03-24T09:28:10Z",
            "diff_hunk": "@@ -6628,20 +6628,56 @@ class PyMethodCallNode(CallNode):\n     # Specialised call to a (potential) PyMethodObject with non-constant argument tuple.\n     # Allows the self argument to be injected directly instead of repacking a tuple for it.\n     #\n-    # function    ExprNode      the function/method object to call\n+    # function    ExprNode  the function/method object to call\n     # arg_tuple   TupleNode     the arguments for the args tuple\n     # kwdict      ExprNode or None  keyword dictionary (if present)\n     # unpack      bool\n+    # function_obj ExprNode or None   \n \n     subexprs = ['function', 'arg_tuple', 'kwdict']\n     is_temp = True\n     kwdict = None\n+    avoid_attribute_lookup = False\n+    function_obj = None\n+\n+    def __init__(self, pos, **kwds):\n+        super().__init__(pos, **kwds)\n+        if self.can_avoid_attribute_lookup():\n+            self.avoid_attribute_lookup = True\n+            self.function_obj = self.function.obj\n+\n+    def can_avoid_attribute_lookup(self):\n+        # Essentially, if the signature matches PyObject_VectorcallMethod\n+        # then it's worth doing that directly and not creating a new method in\n+        # the attribute lookup.\n+        if self.kwdict and not isinstance(self.kwdict, DictNode):\n+            return False\n+        if not self.function.is_attribute:\n+            return False\n+        # These two determine that it's not just a plain getattr\n+        if not self.function.is_py_attr:\n+            return False\n+        if self.function.is_special_lookup:\n+            return False\n+        if not self.attribute_is_likely_method(self.function):\n+            # PyObject_VectorcallMethod would work, but is more likely to\n+            # be a pessimization.\n+            return False\n+        return True\n+\n+    @staticmethod\n+    def attribute_is_likely_method(attr):\n+        obj = attr.obj\n+        if obj.is_name and obj.entry.is_pyglobal:\n+            return False  # more likely to be a function\n+        return True\n \n     def generate_evaluation_code(self, code):",
            "html_url": "https://github.com/cython/cython/pull/6747#discussion_r2009790644",
            "id": 2009790644,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc53yvi0",
            "original_commit_id": "c57aec39070b0280ed0213db3620f465b217ad41",
            "original_line": 6675,
            "original_position": 49,
            "original_start_line": null,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_review_id": 2709590867,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6747",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2009790644/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-03-24T09:31:34Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2009790644",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6747#discussion_r2010757592"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6747"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2010757592"
                }
            },
            "author_association": "MEMBER",
            "body": "I've had a go at splitting it up. It's still all a bit tightly coupled, but it's hopefully a bit more readable.",
            "commit_id": "351fece9623859efd7f30ca936a303686b1342c9",
            "created_at": "2025-03-24T18:53:20Z",
            "diff_hunk": "@@ -6628,20 +6628,56 @@ class PyMethodCallNode(CallNode):\n     # Specialised call to a (potential) PyMethodObject with non-constant argument tuple.\n     # Allows the self argument to be injected directly instead of repacking a tuple for it.\n     #\n-    # function    ExprNode      the function/method object to call\n+    # function    ExprNode  the function/method object to call\n     # arg_tuple   TupleNode     the arguments for the args tuple\n     # kwdict      ExprNode or None  keyword dictionary (if present)\n     # unpack      bool\n+    # function_obj ExprNode or None   \n \n     subexprs = ['function', 'arg_tuple', 'kwdict']\n     is_temp = True\n     kwdict = None\n+    avoid_attribute_lookup = False\n+    function_obj = None\n+\n+    def __init__(self, pos, **kwds):\n+        super().__init__(pos, **kwds)\n+        if self.can_avoid_attribute_lookup():\n+            self.avoid_attribute_lookup = True\n+            self.function_obj = self.function.obj\n+\n+    def can_avoid_attribute_lookup(self):\n+        # Essentially, if the signature matches PyObject_VectorcallMethod\n+        # then it's worth doing that directly and not creating a new method in\n+        # the attribute lookup.\n+        if self.kwdict and not isinstance(self.kwdict, DictNode):\n+            return False\n+        if not self.function.is_attribute:\n+            return False\n+        # These two determine that it's not just a plain getattr\n+        if not self.function.is_py_attr:\n+            return False\n+        if self.function.is_special_lookup:\n+            return False\n+        if not self.attribute_is_likely_method(self.function):\n+            # PyObject_VectorcallMethod would work, but is more likely to\n+            # be a pessimization.\n+            return False\n+        return True\n+\n+    @staticmethod\n+    def attribute_is_likely_method(attr):\n+        obj = attr.obj\n+        if obj.is_name and obj.entry.is_pyglobal:\n+            return False  # more likely to be a function\n+        return True\n \n     def generate_evaluation_code(self, code):",
            "html_url": "https://github.com/cython/cython/pull/6747#discussion_r2010757592",
            "id": 2010757592,
            "in_reply_to_id": 2009790644,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc532bnY",
            "original_commit_id": "c57aec39070b0280ed0213db3620f465b217ad41",
            "original_line": 6675,
            "original_position": 49,
            "original_start_line": null,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_review_id": 2711401768,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6747",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2010757592/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-03-24T18:53:20Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2010757592",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6747#discussion_r2010798190"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6747"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2010798190"
                }
            },
            "author_association": "MEMBER",
            "body": "I think I'd even try to go a step further and use two different classes for the two cases of `PyVectorcall_Method()` and regular method lookup/unpacking/calling. Maybe with a factory method to select (and instantiate) the right node class for the given configuration. Maybe with a common base class if needed to share functionality, although that seems limited overall. Simple parts might just end up as functions.",
            "commit_id": "351fece9623859efd7f30ca936a303686b1342c9",
            "created_at": "2025-03-24T19:23:09Z",
            "diff_hunk": "@@ -6628,20 +6628,56 @@ class PyMethodCallNode(CallNode):\n     # Specialised call to a (potential) PyMethodObject with non-constant argument tuple.\n     # Allows the self argument to be injected directly instead of repacking a tuple for it.\n     #\n-    # function    ExprNode      the function/method object to call\n+    # function    ExprNode  the function/method object to call\n     # arg_tuple   TupleNode     the arguments for the args tuple\n     # kwdict      ExprNode or None  keyword dictionary (if present)\n     # unpack      bool\n+    # function_obj ExprNode or None   \n \n     subexprs = ['function', 'arg_tuple', 'kwdict']\n     is_temp = True\n     kwdict = None\n+    avoid_attribute_lookup = False\n+    function_obj = None\n+\n+    def __init__(self, pos, **kwds):\n+        super().__init__(pos, **kwds)\n+        if self.can_avoid_attribute_lookup():\n+            self.avoid_attribute_lookup = True\n+            self.function_obj = self.function.obj\n+\n+    def can_avoid_attribute_lookup(self):\n+        # Essentially, if the signature matches PyObject_VectorcallMethod\n+        # then it's worth doing that directly and not creating a new method in\n+        # the attribute lookup.\n+        if self.kwdict and not isinstance(self.kwdict, DictNode):\n+            return False\n+        if not self.function.is_attribute:\n+            return False\n+        # These two determine that it's not just a plain getattr\n+        if not self.function.is_py_attr:\n+            return False\n+        if self.function.is_special_lookup:\n+            return False\n+        if not self.attribute_is_likely_method(self.function):\n+            # PyObject_VectorcallMethod would work, but is more likely to\n+            # be a pessimization.\n+            return False\n+        return True\n+\n+    @staticmethod\n+    def attribute_is_likely_method(attr):\n+        obj = attr.obj\n+        if obj.is_name and obj.entry.is_pyglobal:\n+            return False  # more likely to be a function\n+        return True\n \n     def generate_evaluation_code(self, code):",
            "html_url": "https://github.com/cython/cython/pull/6747#discussion_r2010798190",
            "id": 2010798190,
            "in_reply_to_id": 2009790644,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc532lhu",
            "original_commit_id": "c57aec39070b0280ed0213db3620f465b217ad41",
            "original_line": 6675,
            "original_position": 49,
            "original_start_line": null,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_review_id": 2711473629,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6747",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2010798190/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-03-24T19:23:09Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2010798190",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6747#discussion_r2011967361"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6747"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2011967361"
                }
            },
            "author_association": "MEMBER",
            "body": "This can go into `generate_evaluation_code`, thus avoiding the `if not self.unpack` short circuit below that just says \"well, the called asked for it but I don't feel like doing it\". The three variables are created outside and just *changed* here conditionally, but they are always used outside and thus should always be initialised outside.",
            "commit_id": "351fece9623859efd7f30ca936a303686b1342c9",
            "created_at": "2025-03-25T12:15:52Z",
            "diff_hunk": "@@ -6840,6 +6788,206 @@ def can_be_used_for_function(function):\n                     for assignment in entry.cf_assignments)\n         return may_be_a_method\n \n+class PyUnpackedMethodCallNode(PyMethodCallNode):\n+    \"\"\"\n+    Calls a Python method, potentially unpacking the method out\n+    of the PyMethod object.\n+    \"\"\"\n+\n+    def select_utility_code(self, kwargs_key_value_pairs, code):\n+        # returns the function cname\n+        if kwargs_key_value_pairs:\n+            code.globalstate.use_utility_code(\n+                UtilityCode.load_cached(\"PyObjectVectorCallKwBuilder\", \"ObjectHandling.c\"))\n+            return \"__Pyx_Object_Vectorcall_CallFromBuilder\"\n+        elif self.kwdict:\n+            code.globalstate.use_utility_code(\n+                    UtilityCode.load_cached(\"PyObjectFastCall\", \"ObjectHandling.c\"))\n+            return \"__Pyx_PyObject_FastCallDict\"\n+        else:\n+            code.globalstate.use_utility_code(\n+                UtilityCode.load_cached(\"PyObjectFastCall\", \"ObjectHandling.c\"))\n+            return \"__Pyx_PyObject_FastCall\"\n+\n+    def generate_unpacking_code(self, code, self_arg, arg_offset_cname, vectorcall_cname, function):\n+        code.putln(f\"{self_arg} = NULL;\")\n+        code.putln(f\"{arg_offset_cname} = 0;\")\n+        code.putln(f\"{vectorcall_cname} = __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET;\")",
            "html_url": "https://github.com/cython/cython/pull/6747#discussion_r2011967361",
            "id": 2011967361,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc537C-B",
            "original_commit_id": "0f898fcc4d0141185cc12b31fe75bbc668f9bed6",
            "original_line": 6815,
            "original_position": 225,
            "original_start_line": 6813,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_review_id": 2713516657,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6747",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2011967361/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-03-25T12:48:05Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2011967361",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6747#discussion_r2011987376"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6747"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2011987376"
                }
            },
            "author_association": "MEMBER",
            "body": "Having two separate variants (with/without `kwargs_key_value_pairs`) of this method should really simplify the implementations.",
            "commit_id": "351fece9623859efd7f30ca936a303686b1342c9",
            "created_at": "2025-03-25T12:28:50Z",
            "diff_hunk": "@@ -6653,87 +6688,19 @@ def generate_evaluation_code(self, code):\n                 keyvalue.generate_evaluation_code(code)\n         elif self.kwdict:\n             self.kwdict.generate_evaluation_code(code)\n+        return kwargs_key_value_pairs\n \n-        # make sure function is in temp so that we can replace the reference below if it's a method\n-        reuse_function_temp = self.function.is_temp\n-        if reuse_function_temp:\n-            function = self.function.result()\n-        else:\n-            function = code.funcstate.allocate_temp(py_object_type, manage_ref=True)\n-            self.function.make_owned_reference(code)\n-            code.put(\"%s = %s; \" % (function, self.function.py_result()))\n-            self.function.generate_disposal_code(code)\n-            self.function.free_temps(code)\n-\n-        self_arg = code.funcstate.allocate_temp(py_object_type, manage_ref=True)\n-        code.putln(\"%s = NULL;\" % self_arg)\n-        arg_offset_cname = code.funcstate.allocate_temp(PyrexTypes.c_uint_type, manage_ref=False)\n-        code.putln(\"%s = 0;\" % arg_offset_cname)\n-\n-        def attribute_is_likely_method(attr):\n-            obj = attr.obj\n-            if obj.is_name and obj.entry.is_pyglobal:\n-                return False  # more likely to be a function\n-            return True\n-\n-        if self.function.is_attribute:\n-            likely_method = 'likely' if attribute_is_likely_method(self.function) else 'unlikely'\n-        elif self.function.is_name and self.function.cf_state:\n-            # not an attribute itself, but might have been assigned from one (e.g. bound method)\n-            for assignment in self.function.cf_state:\n-                value = assignment.rhs\n-                if value and value.is_attribute and value.obj.type and value.obj.type.is_pyobject:\n-                    if attribute_is_likely_method(value):\n-                        likely_method = 'likely'\n-                        break\n-            else:\n-                likely_method = 'unlikely'\n-        else:\n-            likely_method = 'unlikely'\n-\n-        if self.unpack:\n-            # unpack is ultimately governed by optimize.unpack_method_calls\n-            # and is a separate decision to whether we want vectorcall-type behaviour\n-            code.putln(\"#if CYTHON_UNPACK_METHODS\")\n-            code.putln(\"if (%s(PyMethod_Check(%s))) {\" % (likely_method, function))\n-            code.putln(\"%s = PyMethod_GET_SELF(%s);\" % (self_arg, function))\n-            # the result of PyMethod_GET_SELF is always true in Py3.\n-            code.putln(f\"assert({self_arg});\")\n-            code.putln(\"PyObject* function = PyMethod_GET_FUNCTION(%s);\" % function)\n-            code.put_incref(self_arg, py_object_type)\n-            code.put_incref(\"function\", py_object_type)\n-            # free method object as early to possible to enable reuse from CPython's freelist\n-            code.put_decref_set(function, py_object_type, \"function\")\n-            code.putln(\"%s = 1;\" % arg_offset_cname)\n-            code.putln(\"}\")\n-            code.putln(\"#endif\")  # CYTHON_UNPACK_METHODS\n-            # TODO may need to deal with unused variables in the #else case\n-\n+    def generate_callargs(self, code, kwargs_key_value_pairs, args, self_arg):",
            "html_url": "https://github.com/cython/cython/pull/6747#discussion_r2011987376",
            "id": 2011987376,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc537H2w",
            "original_commit_id": "0f898fcc4d0141185cc12b31fe75bbc668f9bed6",
            "original_line": 6693,
            "original_position": 112,
            "original_start_line": null,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_review_id": 2713516657,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6747",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2011987376/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-03-25T12:48:05Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2011987376",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6747#discussion_r2012963904"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6747"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2012963904"
                }
            },
            "author_association": "MEMBER",
            "body": "Small detail that I think you've lost here - it's worth setting `__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET` for the use_method variant (although it probably only matters in the case where the method call optimization fails)",
            "commit_id": "351fece9623859efd7f30ca936a303686b1342c9",
            "created_at": "2025-03-25T21:26:54Z",
            "diff_hunk": "@@ -6832,160 +6772,154 @@ def generate_unpacking_code(self, code, self_arg, arg_offset_cname, vectorcall_c\n         else:\n             likely_method = 'unlikely'\n \n-        # unpack is ultimately governed by optimize.unpack_method_calls\n-        # and is a separate decision to whether we want vectorcall-type behaviour\n+        # Unpacking is ultimately governed by \"optimize.unpack_method_calls\"\n+        # and is a separate decision to whether we want vectorcall-type behaviour.\n         code.putln(\"#if CYTHON_UNPACK_METHODS\")\n-        code.putln(\"if (%s(PyMethod_Check(%s))) {\" % (likely_method, function))\n-        code.putln(\"%s = PyMethod_GET_SELF(%s);\" % (self_arg, function))\n-        # the result of PyMethod_GET_SELF is always true in Py3.\n+        code.putln(\"if (%s(PyMethod_Check(%s))) {\" % (likely_method, method_obj))\n+        code.putln(f\"{self_arg} = PyMethod_GET_SELF({method_obj});\")\n+        # The result of PyMethod_GET_SELF is always true in Py3.\n         code.putln(f\"assert({self_arg});\")\n-        code.putln(\"PyObject* function = PyMethod_GET_FUNCTION(%s);\" % function)\n+        code.putln(f\"PyObject* __pyx__function = PyMethod_GET_FUNCTION({method_obj});\")\n         code.put_incref(self_arg, py_object_type)\n-        code.put_incref(\"function\", py_object_type)\n+        code.put_incref(\"__pyx__function\", py_object_type)\n         # free method object as early to possible to enable reuse from CPython's freelist\n-        code.put_decref_set(function, py_object_type, \"function\")\n-        code.putln(f\"{arg_offset_cname} = 1;\")\n-        code.putln(f\"{vectorcall_cname} = 0;\")\n+        code.put_decref_set(method_obj, py_object_type, \"__pyx__function\")\n+        code.putln(f\"{space_for_selfarg_var} = 0;\")\n         code.putln(\"}\")\n         code.putln(\"#endif\")  # CYTHON_UNPACK_METHODS\n         # TODO may need to deal with unused variables in the #else case\n \n+    def generate_keyvalue_args(self, code, args, kwargs_key_value_pairs, kwnames_temp):\n+        code.putln(\n+            f\"{kwnames_temp} = __Pyx_MakeVectorcallBuilderKwds({len(kwargs_key_value_pairs)}); \"\n+            f\"{code.error_goto_if_null(kwnames_temp, self.pos)}\"\n+        )\n+        code.put_gotref(kwnames_temp, py_object_type)\n+\n+        for n, keyvalue in enumerate(kwargs_key_value_pairs):\n+            key_is_str = keyvalue.key.type is Builtin.unicode_type and not keyvalue.key.may_be_none()\n+            code.put_error_if_neg(\n+                self.pos,\n+                f\"__Pyx_VectorcallBuilder_AddArg{'' if key_is_str else '_Check'}(\"\n+                f\"{keyvalue.key.py_result()}, \"\n+                f\"{keyvalue.value.py_result()}, \"\n+                f\"{kwnames_temp}, \"\n+                f\"{Naming.callargs_cname}+{len(args) + 1}, \"\n+                f\"{n:d}\"\n+                \")\"\n+            )\n+\n+    def select_utility_code(self, code):\n+        # ... and return the utility function's cname.\n+        if self.use_method_vectorcall:\n+            if self.kwargs_key_value_pairs:\n+                name = \"PyObjectVectorCallMethodKwBuilder\"\n+                cfunc = \"__Pyx_Object_VectorcallMethod_CallFromBuilder\"\n+            else:\n+                name = \"PyObjectFastCallMethod\"\n+                cfunc = \"__Pyx_PyObject_FastCallMethod\"\n+        elif self.kwargs_key_value_pairs:\n+            name = \"PyObjectVectorCallKwBuilder\"\n+            cfunc = \"__Pyx_Object_Vectorcall_CallFromBuilder\"\n+        elif self.kwdict:\n+            name = \"PyObjectFastCall\"\n+            cfunc = \"__Pyx_PyObject_FastCallDict\"\n+        else:\n+            name = \"PyObjectFastCall\"\n+            cfunc = \"__Pyx_PyObject_FastCall\"\n+\n+        code.globalstate.use_utility_code(\n+            UtilityCode.load_cached(name, \"ObjectHandling.c\"))\n+        return cfunc\n+\n     def generate_evaluation_code(self, code):\n         code.mark_pos(self.pos)\n         self.allocate_temp_result(code)\n \n-        # make sure function is in temp so that we can replace the reference below if it's a method\n-        self.function.generate_evaluation_code(code)\n-        reuse_function_temp = self.function.is_temp\n-        if reuse_function_temp:\n-            function = self.function.result()\n-        else:\n-            function = code.funcstate.allocate_temp(py_object_type, manage_ref=True)\n-            self.function.make_owned_reference(code)\n-            code.putln(\"%s = %s; \" % (function, self.function.py_result()))\n-            self.function.generate_disposal_code(code)\n-            self.function.free_temps(code)\n-\n-        args = self.arg_tuple.args\n-        kwargs_key_value_pairs = self.kwdict.key_value_pairs if isinstance(self.kwdict, DictNode) else None\n-        self.generate_evaluate_args(code)\n+        kwargs_key_value_pairs = self.kwargs_key_value_pairs\n \n         self_arg = code.funcstate.allocate_temp(py_object_type, manage_ref=True)\n-        arg_offset_cname = code.funcstate.allocate_temp(PyrexTypes.c_uint_type, manage_ref=False)\n-        vectorcall_cname = code.funcstate.allocate_temp(PyrexTypes.c_py_ssize_t_type, manage_ref=False)\n+        function = self.generate_evaluate_function(code, self_arg)\n \n-        self.generate_unpacking_code(\n-            code,\n-            self_arg=self_arg,\n-            arg_offset_cname=arg_offset_cname,\n-            function=function,\n-            vectorcall_cname=vectorcall_cname)\n-\n-        function_caller = self.select_utility_code(kwargs_key_value_pairs, code)\n+        args = self.arg_tuple.args\n+        assert self.arg_tuple.mult_factor is None\n+        for arg in args:\n+            arg.generate_evaluation_code(code)\n \n-        # actually call the function\n-        code.putln(\"{\")\n-        keyword_variable = self.generate_callargs(\n-            code,\n-            kwargs_key_value_pairs=kwargs_key_value_pairs,\n-            args=args,\n-            self_arg=self_arg)\n+        if kwargs_key_value_pairs:\n+            for keyvalue in kwargs_key_value_pairs:\n+                keyvalue.generate_evaluation_code(code)\n+        elif self.kwdict:\n+            self.kwdict.generate_evaluation_code(code)\n \n-        code.putln(\"%s = %s(%s, __pyx_callargs+1-%s, (%d+%s)|%s %s);\" % (\n-            self.result(),\n-            function_caller,\n-            function,\n-            arg_offset_cname,\n-            len(args),\n-            arg_offset_cname,\n-            vectorcall_cname,\n-            f\", {keyword_variable}\" if keyword_variable else \"\"))\n+        # Leave space for self argument in before-first argument?\n+        space_for_selfarg = code.funcstate.allocate_temp(PyrexTypes.c_size_t_type, manage_ref=False)\n+        code.putln(f\"{space_for_selfarg} = {'0' if self.use_method_vectorcall else '1'};\")\n \n-        self.generate_arg_cleanup(\n+        self.generate_runtime_method_unpacking_code(\n             code,\n             self_arg=self_arg,\n-            args=args,\n-            kwargs_key_value_pairs=kwargs_key_value_pairs,\n-            keyword_variable=keyword_variable)\n-        for tmp in [self_arg, arg_offset_cname, vectorcall_cname]:\n-            code.funcstate.release_temp(tmp)\n-        code.putln(code.error_goto_if_null(self.result(), self.pos))\n-        self.generate_gotref(code)\n-\n-        if reuse_function_temp:\n-            self.function.generate_disposal_code(code)\n-            self.function.free_temps(code)\n-        else:\n-            code.put_decref_clear(function, py_object_type)\n-            code.funcstate.release_temp(function)\n-        code.putln(\"}\")\n+            space_for_selfarg_var=space_for_selfarg,\n+            method_obj=function,\n+        )\n \n-class PyDirectMethodCallNode(PyMethodCallNode):\n-    \"\"\"\n-    Skip the getattr stage and use PyObject_VectorCallMethod\n+        function_caller = self.select_utility_code(code)\n \n-    function_obj   ExprNode\n-    \"\"\"\n+        # Actually call the function.\n \n-    def __init__(self, pos, **kwds):\n-        super().__init__(pos, **kwds)\n-        self.function_obj = self.function.obj\n+        code.putln(\"{\")\n+        extra_keyword_args = f\"+ ((CYTHON_VECTORCALL) ? {len(kwargs_key_value_pairs)} : 0)\" if kwargs_key_value_pairs else \"\"\n \n-    def select_utility_code(self, kwargs_key_value_pairs, code):\n-        # returns the function cname\n-        if kwargs_key_value_pairs:\n-            code.globalstate.use_utility_code(\n-                UtilityCode.load_cached(\"PyObjectVectorCallMethodKwBuilder\", \"ObjectHandling.c\"))\n-            return \"__Pyx_Object_VectorcallMethod_CallFromBuilder\"\n-        else:\n-            code.globalstate.use_utility_code(\n-                UtilityCode.load_cached(\"PyObjectFastCallMethod\", \"ObjectHandling.c\"))\n-            return \"__Pyx_PyObject_FastCallMethod\"\n+        # To avoid passing an out-of-bounds argument pointer in the no-args case,\n+        # we need at least two entries, so we pad with NULL and point to that.\n+        # See https://github.com/cython/cython/issues/5668\n+        args_list = ', '.join(arg.py_result() for arg in args) if args else \"NULL\"\n+        code.putln(\n+            f\"PyObject *{Naming.callargs_cname}[{(len(args) + 1) if args else 2:d}{extra_keyword_args}] = {{{self_arg}, {args_list}}};\"\n+        )\n \n-    def generate_evaluation_code(self, code):\n-        code.mark_pos(self.pos)\n-        self.allocate_temp_result(code)\n+        keyword_variable = \"\"\n+        keyword_nodes_to_clean_up = kwargs_key_value_pairs\n \n-        function_name = code.get_py_string_const(self.function.attribute)\n+        if kwargs_key_value_pairs:\n+            keyword_variable = code.funcstate.allocate_temp(py_object_type, manage_ref=True)\n+            self.generate_keyvalue_args(code, args, kwargs_key_value_pairs, keyword_variable)\n+        elif self.kwdict:\n+            keyword_variable = self.kwdict.result()\n+            keyword_nodes_to_clean_up = [self.kwdict]\n \n-        args = self.arg_tuple.args\n-        kwargs_key_value_pairs = self.kwdict.key_value_pairs if isinstance(self.kwdict, DictNode) else None\n-        self.generate_evaluate_args(code)\n+        code.putln(\n+            f\"{self.result()} = {function_caller}(\"\n+            f\"{function}, \"\n+            f\"{Naming.callargs_cname}+{space_for_selfarg}, \"\n+            f\"({len(args)+1:d}-{space_for_selfarg}) | ({space_for_selfarg}*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET)\"",
            "html_url": "https://github.com/cython/cython/pull/6747#discussion_r2012963904",
            "id": 2012963904,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc53-2RA",
            "original_commit_id": "ac31f6857b2d46288b888a88b77298c0576c1ea3",
            "original_line": 6895,
            "original_position": 412,
            "original_start_line": null,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_review_id": 2715245717,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6747",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2012963904/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-03-25T21:26:54Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2012963904",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6747#discussion_r2013570862"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6747"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2013570862"
                }
            },
            "author_association": "MEMBER",
            "body": "Are you sure? The way I read it, we either pass `self` as first argument or prepend it to the array and set the flag. Which case is missing?",
            "commit_id": "351fece9623859efd7f30ca936a303686b1342c9",
            "created_at": "2025-03-26T07:57:37Z",
            "diff_hunk": "@@ -6832,160 +6772,154 @@ def generate_unpacking_code(self, code, self_arg, arg_offset_cname, vectorcall_c\n         else:\n             likely_method = 'unlikely'\n \n-        # unpack is ultimately governed by optimize.unpack_method_calls\n-        # and is a separate decision to whether we want vectorcall-type behaviour\n+        # Unpacking is ultimately governed by \"optimize.unpack_method_calls\"\n+        # and is a separate decision to whether we want vectorcall-type behaviour.\n         code.putln(\"#if CYTHON_UNPACK_METHODS\")\n-        code.putln(\"if (%s(PyMethod_Check(%s))) {\" % (likely_method, function))\n-        code.putln(\"%s = PyMethod_GET_SELF(%s);\" % (self_arg, function))\n-        # the result of PyMethod_GET_SELF is always true in Py3.\n+        code.putln(\"if (%s(PyMethod_Check(%s))) {\" % (likely_method, method_obj))\n+        code.putln(f\"{self_arg} = PyMethod_GET_SELF({method_obj});\")\n+        # The result of PyMethod_GET_SELF is always true in Py3.\n         code.putln(f\"assert({self_arg});\")\n-        code.putln(\"PyObject* function = PyMethod_GET_FUNCTION(%s);\" % function)\n+        code.putln(f\"PyObject* __pyx__function = PyMethod_GET_FUNCTION({method_obj});\")\n         code.put_incref(self_arg, py_object_type)\n-        code.put_incref(\"function\", py_object_type)\n+        code.put_incref(\"__pyx__function\", py_object_type)\n         # free method object as early to possible to enable reuse from CPython's freelist\n-        code.put_decref_set(function, py_object_type, \"function\")\n-        code.putln(f\"{arg_offset_cname} = 1;\")\n-        code.putln(f\"{vectorcall_cname} = 0;\")\n+        code.put_decref_set(method_obj, py_object_type, \"__pyx__function\")\n+        code.putln(f\"{space_for_selfarg_var} = 0;\")\n         code.putln(\"}\")\n         code.putln(\"#endif\")  # CYTHON_UNPACK_METHODS\n         # TODO may need to deal with unused variables in the #else case\n \n+    def generate_keyvalue_args(self, code, args, kwargs_key_value_pairs, kwnames_temp):\n+        code.putln(\n+            f\"{kwnames_temp} = __Pyx_MakeVectorcallBuilderKwds({len(kwargs_key_value_pairs)}); \"\n+            f\"{code.error_goto_if_null(kwnames_temp, self.pos)}\"\n+        )\n+        code.put_gotref(kwnames_temp, py_object_type)\n+\n+        for n, keyvalue in enumerate(kwargs_key_value_pairs):\n+            key_is_str = keyvalue.key.type is Builtin.unicode_type and not keyvalue.key.may_be_none()\n+            code.put_error_if_neg(\n+                self.pos,\n+                f\"__Pyx_VectorcallBuilder_AddArg{'' if key_is_str else '_Check'}(\"\n+                f\"{keyvalue.key.py_result()}, \"\n+                f\"{keyvalue.value.py_result()}, \"\n+                f\"{kwnames_temp}, \"\n+                f\"{Naming.callargs_cname}+{len(args) + 1}, \"\n+                f\"{n:d}\"\n+                \")\"\n+            )\n+\n+    def select_utility_code(self, code):\n+        # ... and return the utility function's cname.\n+        if self.use_method_vectorcall:\n+            if self.kwargs_key_value_pairs:\n+                name = \"PyObjectVectorCallMethodKwBuilder\"\n+                cfunc = \"__Pyx_Object_VectorcallMethod_CallFromBuilder\"\n+            else:\n+                name = \"PyObjectFastCallMethod\"\n+                cfunc = \"__Pyx_PyObject_FastCallMethod\"\n+        elif self.kwargs_key_value_pairs:\n+            name = \"PyObjectVectorCallKwBuilder\"\n+            cfunc = \"__Pyx_Object_Vectorcall_CallFromBuilder\"\n+        elif self.kwdict:\n+            name = \"PyObjectFastCall\"\n+            cfunc = \"__Pyx_PyObject_FastCallDict\"\n+        else:\n+            name = \"PyObjectFastCall\"\n+            cfunc = \"__Pyx_PyObject_FastCall\"\n+\n+        code.globalstate.use_utility_code(\n+            UtilityCode.load_cached(name, \"ObjectHandling.c\"))\n+        return cfunc\n+\n     def generate_evaluation_code(self, code):\n         code.mark_pos(self.pos)\n         self.allocate_temp_result(code)\n \n-        # make sure function is in temp so that we can replace the reference below if it's a method\n-        self.function.generate_evaluation_code(code)\n-        reuse_function_temp = self.function.is_temp\n-        if reuse_function_temp:\n-            function = self.function.result()\n-        else:\n-            function = code.funcstate.allocate_temp(py_object_type, manage_ref=True)\n-            self.function.make_owned_reference(code)\n-            code.putln(\"%s = %s; \" % (function, self.function.py_result()))\n-            self.function.generate_disposal_code(code)\n-            self.function.free_temps(code)\n-\n-        args = self.arg_tuple.args\n-        kwargs_key_value_pairs = self.kwdict.key_value_pairs if isinstance(self.kwdict, DictNode) else None\n-        self.generate_evaluate_args(code)\n+        kwargs_key_value_pairs = self.kwargs_key_value_pairs\n \n         self_arg = code.funcstate.allocate_temp(py_object_type, manage_ref=True)\n-        arg_offset_cname = code.funcstate.allocate_temp(PyrexTypes.c_uint_type, manage_ref=False)\n-        vectorcall_cname = code.funcstate.allocate_temp(PyrexTypes.c_py_ssize_t_type, manage_ref=False)\n+        function = self.generate_evaluate_function(code, self_arg)\n \n-        self.generate_unpacking_code(\n-            code,\n-            self_arg=self_arg,\n-            arg_offset_cname=arg_offset_cname,\n-            function=function,\n-            vectorcall_cname=vectorcall_cname)\n-\n-        function_caller = self.select_utility_code(kwargs_key_value_pairs, code)\n+        args = self.arg_tuple.args\n+        assert self.arg_tuple.mult_factor is None\n+        for arg in args:\n+            arg.generate_evaluation_code(code)\n \n-        # actually call the function\n-        code.putln(\"{\")\n-        keyword_variable = self.generate_callargs(\n-            code,\n-            kwargs_key_value_pairs=kwargs_key_value_pairs,\n-            args=args,\n-            self_arg=self_arg)\n+        if kwargs_key_value_pairs:\n+            for keyvalue in kwargs_key_value_pairs:\n+                keyvalue.generate_evaluation_code(code)\n+        elif self.kwdict:\n+            self.kwdict.generate_evaluation_code(code)\n \n-        code.putln(\"%s = %s(%s, __pyx_callargs+1-%s, (%d+%s)|%s %s);\" % (\n-            self.result(),\n-            function_caller,\n-            function,\n-            arg_offset_cname,\n-            len(args),\n-            arg_offset_cname,\n-            vectorcall_cname,\n-            f\", {keyword_variable}\" if keyword_variable else \"\"))\n+        # Leave space for self argument in before-first argument?\n+        space_for_selfarg = code.funcstate.allocate_temp(PyrexTypes.c_size_t_type, manage_ref=False)\n+        code.putln(f\"{space_for_selfarg} = {'0' if self.use_method_vectorcall else '1'};\")\n \n-        self.generate_arg_cleanup(\n+        self.generate_runtime_method_unpacking_code(\n             code,\n             self_arg=self_arg,\n-            args=args,\n-            kwargs_key_value_pairs=kwargs_key_value_pairs,\n-            keyword_variable=keyword_variable)\n-        for tmp in [self_arg, arg_offset_cname, vectorcall_cname]:\n-            code.funcstate.release_temp(tmp)\n-        code.putln(code.error_goto_if_null(self.result(), self.pos))\n-        self.generate_gotref(code)\n-\n-        if reuse_function_temp:\n-            self.function.generate_disposal_code(code)\n-            self.function.free_temps(code)\n-        else:\n-            code.put_decref_clear(function, py_object_type)\n-            code.funcstate.release_temp(function)\n-        code.putln(\"}\")\n+            space_for_selfarg_var=space_for_selfarg,\n+            method_obj=function,\n+        )\n \n-class PyDirectMethodCallNode(PyMethodCallNode):\n-    \"\"\"\n-    Skip the getattr stage and use PyObject_VectorCallMethod\n+        function_caller = self.select_utility_code(code)\n \n-    function_obj   ExprNode\n-    \"\"\"\n+        # Actually call the function.\n \n-    def __init__(self, pos, **kwds):\n-        super().__init__(pos, **kwds)\n-        self.function_obj = self.function.obj\n+        code.putln(\"{\")\n+        extra_keyword_args = f\"+ ((CYTHON_VECTORCALL) ? {len(kwargs_key_value_pairs)} : 0)\" if kwargs_key_value_pairs else \"\"\n \n-    def select_utility_code(self, kwargs_key_value_pairs, code):\n-        # returns the function cname\n-        if kwargs_key_value_pairs:\n-            code.globalstate.use_utility_code(\n-                UtilityCode.load_cached(\"PyObjectVectorCallMethodKwBuilder\", \"ObjectHandling.c\"))\n-            return \"__Pyx_Object_VectorcallMethod_CallFromBuilder\"\n-        else:\n-            code.globalstate.use_utility_code(\n-                UtilityCode.load_cached(\"PyObjectFastCallMethod\", \"ObjectHandling.c\"))\n-            return \"__Pyx_PyObject_FastCallMethod\"\n+        # To avoid passing an out-of-bounds argument pointer in the no-args case,\n+        # we need at least two entries, so we pad with NULL and point to that.\n+        # See https://github.com/cython/cython/issues/5668\n+        args_list = ', '.join(arg.py_result() for arg in args) if args else \"NULL\"\n+        code.putln(\n+            f\"PyObject *{Naming.callargs_cname}[{(len(args) + 1) if args else 2:d}{extra_keyword_args}] = {{{self_arg}, {args_list}}};\"\n+        )\n \n-    def generate_evaluation_code(self, code):\n-        code.mark_pos(self.pos)\n-        self.allocate_temp_result(code)\n+        keyword_variable = \"\"\n+        keyword_nodes_to_clean_up = kwargs_key_value_pairs\n \n-        function_name = code.get_py_string_const(self.function.attribute)\n+        if kwargs_key_value_pairs:\n+            keyword_variable = code.funcstate.allocate_temp(py_object_type, manage_ref=True)\n+            self.generate_keyvalue_args(code, args, kwargs_key_value_pairs, keyword_variable)\n+        elif self.kwdict:\n+            keyword_variable = self.kwdict.result()\n+            keyword_nodes_to_clean_up = [self.kwdict]\n \n-        args = self.arg_tuple.args\n-        kwargs_key_value_pairs = self.kwdict.key_value_pairs if isinstance(self.kwdict, DictNode) else None\n-        self.generate_evaluate_args(code)\n+        code.putln(\n+            f\"{self.result()} = {function_caller}(\"\n+            f\"{function}, \"\n+            f\"{Naming.callargs_cname}+{space_for_selfarg}, \"\n+            f\"({len(args)+1:d}-{space_for_selfarg}) | ({space_for_selfarg}*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET)\"",
            "html_url": "https://github.com/cython/cython/pull/6747#discussion_r2013570862",
            "id": 2013570862,
            "in_reply_to_id": 2012963904,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc54BKcu",
            "original_commit_id": "ac31f6857b2d46288b888a88b77298c0576c1ea3",
            "original_line": 6895,
            "original_position": 412,
            "original_start_line": null,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_review_id": 2716196318,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6747",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2013570862/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-03-26T07:57:38Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2013570862",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6747#discussion_r2013575580"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6747"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2013575580"
                }
            },
            "author_association": "MEMBER",
            "body": "For VectorcallMethod specifically\r\n\r\n> `nargsf` is the number of positional arguments including `args[0]`, plus [PY_VECTORCALL_ARGUMENTS_OFFSET](https://docs.python.org/3/c-api/call.html#c.PY_VECTORCALL_ARGUMENTS_OFFSET) if the value of `args[0]` may temporarily be changed.\r\n\r\nSo in this case it's saying that we don't care if they mess with `args[0]` (i.e. the array doesn't come from a tuple that's shared elsewhere, or similar).\r\n\r\nIt makes no difference if it's actually a method as we hope; it makes a small difference if it isn't a method because it lets it avoid reallocating the array.",
            "commit_id": "351fece9623859efd7f30ca936a303686b1342c9",
            "created_at": "2025-03-26T08:01:19Z",
            "diff_hunk": "@@ -6832,160 +6772,154 @@ def generate_unpacking_code(self, code, self_arg, arg_offset_cname, vectorcall_c\n         else:\n             likely_method = 'unlikely'\n \n-        # unpack is ultimately governed by optimize.unpack_method_calls\n-        # and is a separate decision to whether we want vectorcall-type behaviour\n+        # Unpacking is ultimately governed by \"optimize.unpack_method_calls\"\n+        # and is a separate decision to whether we want vectorcall-type behaviour.\n         code.putln(\"#if CYTHON_UNPACK_METHODS\")\n-        code.putln(\"if (%s(PyMethod_Check(%s))) {\" % (likely_method, function))\n-        code.putln(\"%s = PyMethod_GET_SELF(%s);\" % (self_arg, function))\n-        # the result of PyMethod_GET_SELF is always true in Py3.\n+        code.putln(\"if (%s(PyMethod_Check(%s))) {\" % (likely_method, method_obj))\n+        code.putln(f\"{self_arg} = PyMethod_GET_SELF({method_obj});\")\n+        # The result of PyMethod_GET_SELF is always true in Py3.\n         code.putln(f\"assert({self_arg});\")\n-        code.putln(\"PyObject* function = PyMethod_GET_FUNCTION(%s);\" % function)\n+        code.putln(f\"PyObject* __pyx__function = PyMethod_GET_FUNCTION({method_obj});\")\n         code.put_incref(self_arg, py_object_type)\n-        code.put_incref(\"function\", py_object_type)\n+        code.put_incref(\"__pyx__function\", py_object_type)\n         # free method object as early to possible to enable reuse from CPython's freelist\n-        code.put_decref_set(function, py_object_type, \"function\")\n-        code.putln(f\"{arg_offset_cname} = 1;\")\n-        code.putln(f\"{vectorcall_cname} = 0;\")\n+        code.put_decref_set(method_obj, py_object_type, \"__pyx__function\")\n+        code.putln(f\"{space_for_selfarg_var} = 0;\")\n         code.putln(\"}\")\n         code.putln(\"#endif\")  # CYTHON_UNPACK_METHODS\n         # TODO may need to deal with unused variables in the #else case\n \n+    def generate_keyvalue_args(self, code, args, kwargs_key_value_pairs, kwnames_temp):\n+        code.putln(\n+            f\"{kwnames_temp} = __Pyx_MakeVectorcallBuilderKwds({len(kwargs_key_value_pairs)}); \"\n+            f\"{code.error_goto_if_null(kwnames_temp, self.pos)}\"\n+        )\n+        code.put_gotref(kwnames_temp, py_object_type)\n+\n+        for n, keyvalue in enumerate(kwargs_key_value_pairs):\n+            key_is_str = keyvalue.key.type is Builtin.unicode_type and not keyvalue.key.may_be_none()\n+            code.put_error_if_neg(\n+                self.pos,\n+                f\"__Pyx_VectorcallBuilder_AddArg{'' if key_is_str else '_Check'}(\"\n+                f\"{keyvalue.key.py_result()}, \"\n+                f\"{keyvalue.value.py_result()}, \"\n+                f\"{kwnames_temp}, \"\n+                f\"{Naming.callargs_cname}+{len(args) + 1}, \"\n+                f\"{n:d}\"\n+                \")\"\n+            )\n+\n+    def select_utility_code(self, code):\n+        # ... and return the utility function's cname.\n+        if self.use_method_vectorcall:\n+            if self.kwargs_key_value_pairs:\n+                name = \"PyObjectVectorCallMethodKwBuilder\"\n+                cfunc = \"__Pyx_Object_VectorcallMethod_CallFromBuilder\"\n+            else:\n+                name = \"PyObjectFastCallMethod\"\n+                cfunc = \"__Pyx_PyObject_FastCallMethod\"\n+        elif self.kwargs_key_value_pairs:\n+            name = \"PyObjectVectorCallKwBuilder\"\n+            cfunc = \"__Pyx_Object_Vectorcall_CallFromBuilder\"\n+        elif self.kwdict:\n+            name = \"PyObjectFastCall\"\n+            cfunc = \"__Pyx_PyObject_FastCallDict\"\n+        else:\n+            name = \"PyObjectFastCall\"\n+            cfunc = \"__Pyx_PyObject_FastCall\"\n+\n+        code.globalstate.use_utility_code(\n+            UtilityCode.load_cached(name, \"ObjectHandling.c\"))\n+        return cfunc\n+\n     def generate_evaluation_code(self, code):\n         code.mark_pos(self.pos)\n         self.allocate_temp_result(code)\n \n-        # make sure function is in temp so that we can replace the reference below if it's a method\n-        self.function.generate_evaluation_code(code)\n-        reuse_function_temp = self.function.is_temp\n-        if reuse_function_temp:\n-            function = self.function.result()\n-        else:\n-            function = code.funcstate.allocate_temp(py_object_type, manage_ref=True)\n-            self.function.make_owned_reference(code)\n-            code.putln(\"%s = %s; \" % (function, self.function.py_result()))\n-            self.function.generate_disposal_code(code)\n-            self.function.free_temps(code)\n-\n-        args = self.arg_tuple.args\n-        kwargs_key_value_pairs = self.kwdict.key_value_pairs if isinstance(self.kwdict, DictNode) else None\n-        self.generate_evaluate_args(code)\n+        kwargs_key_value_pairs = self.kwargs_key_value_pairs\n \n         self_arg = code.funcstate.allocate_temp(py_object_type, manage_ref=True)\n-        arg_offset_cname = code.funcstate.allocate_temp(PyrexTypes.c_uint_type, manage_ref=False)\n-        vectorcall_cname = code.funcstate.allocate_temp(PyrexTypes.c_py_ssize_t_type, manage_ref=False)\n+        function = self.generate_evaluate_function(code, self_arg)\n \n-        self.generate_unpacking_code(\n-            code,\n-            self_arg=self_arg,\n-            arg_offset_cname=arg_offset_cname,\n-            function=function,\n-            vectorcall_cname=vectorcall_cname)\n-\n-        function_caller = self.select_utility_code(kwargs_key_value_pairs, code)\n+        args = self.arg_tuple.args\n+        assert self.arg_tuple.mult_factor is None\n+        for arg in args:\n+            arg.generate_evaluation_code(code)\n \n-        # actually call the function\n-        code.putln(\"{\")\n-        keyword_variable = self.generate_callargs(\n-            code,\n-            kwargs_key_value_pairs=kwargs_key_value_pairs,\n-            args=args,\n-            self_arg=self_arg)\n+        if kwargs_key_value_pairs:\n+            for keyvalue in kwargs_key_value_pairs:\n+                keyvalue.generate_evaluation_code(code)\n+        elif self.kwdict:\n+            self.kwdict.generate_evaluation_code(code)\n \n-        code.putln(\"%s = %s(%s, __pyx_callargs+1-%s, (%d+%s)|%s %s);\" % (\n-            self.result(),\n-            function_caller,\n-            function,\n-            arg_offset_cname,\n-            len(args),\n-            arg_offset_cname,\n-            vectorcall_cname,\n-            f\", {keyword_variable}\" if keyword_variable else \"\"))\n+        # Leave space for self argument in before-first argument?\n+        space_for_selfarg = code.funcstate.allocate_temp(PyrexTypes.c_size_t_type, manage_ref=False)\n+        code.putln(f\"{space_for_selfarg} = {'0' if self.use_method_vectorcall else '1'};\")\n \n-        self.generate_arg_cleanup(\n+        self.generate_runtime_method_unpacking_code(\n             code,\n             self_arg=self_arg,\n-            args=args,\n-            kwargs_key_value_pairs=kwargs_key_value_pairs,\n-            keyword_variable=keyword_variable)\n-        for tmp in [self_arg, arg_offset_cname, vectorcall_cname]:\n-            code.funcstate.release_temp(tmp)\n-        code.putln(code.error_goto_if_null(self.result(), self.pos))\n-        self.generate_gotref(code)\n-\n-        if reuse_function_temp:\n-            self.function.generate_disposal_code(code)\n-            self.function.free_temps(code)\n-        else:\n-            code.put_decref_clear(function, py_object_type)\n-            code.funcstate.release_temp(function)\n-        code.putln(\"}\")\n+            space_for_selfarg_var=space_for_selfarg,\n+            method_obj=function,\n+        )\n \n-class PyDirectMethodCallNode(PyMethodCallNode):\n-    \"\"\"\n-    Skip the getattr stage and use PyObject_VectorCallMethod\n+        function_caller = self.select_utility_code(code)\n \n-    function_obj   ExprNode\n-    \"\"\"\n+        # Actually call the function.\n \n-    def __init__(self, pos, **kwds):\n-        super().__init__(pos, **kwds)\n-        self.function_obj = self.function.obj\n+        code.putln(\"{\")\n+        extra_keyword_args = f\"+ ((CYTHON_VECTORCALL) ? {len(kwargs_key_value_pairs)} : 0)\" if kwargs_key_value_pairs else \"\"\n \n-    def select_utility_code(self, kwargs_key_value_pairs, code):\n-        # returns the function cname\n-        if kwargs_key_value_pairs:\n-            code.globalstate.use_utility_code(\n-                UtilityCode.load_cached(\"PyObjectVectorCallMethodKwBuilder\", \"ObjectHandling.c\"))\n-            return \"__Pyx_Object_VectorcallMethod_CallFromBuilder\"\n-        else:\n-            code.globalstate.use_utility_code(\n-                UtilityCode.load_cached(\"PyObjectFastCallMethod\", \"ObjectHandling.c\"))\n-            return \"__Pyx_PyObject_FastCallMethod\"\n+        # To avoid passing an out-of-bounds argument pointer in the no-args case,\n+        # we need at least two entries, so we pad with NULL and point to that.\n+        # See https://github.com/cython/cython/issues/5668\n+        args_list = ', '.join(arg.py_result() for arg in args) if args else \"NULL\"\n+        code.putln(\n+            f\"PyObject *{Naming.callargs_cname}[{(len(args) + 1) if args else 2:d}{extra_keyword_args}] = {{{self_arg}, {args_list}}};\"\n+        )\n \n-    def generate_evaluation_code(self, code):\n-        code.mark_pos(self.pos)\n-        self.allocate_temp_result(code)\n+        keyword_variable = \"\"\n+        keyword_nodes_to_clean_up = kwargs_key_value_pairs\n \n-        function_name = code.get_py_string_const(self.function.attribute)\n+        if kwargs_key_value_pairs:\n+            keyword_variable = code.funcstate.allocate_temp(py_object_type, manage_ref=True)\n+            self.generate_keyvalue_args(code, args, kwargs_key_value_pairs, keyword_variable)\n+        elif self.kwdict:\n+            keyword_variable = self.kwdict.result()\n+            keyword_nodes_to_clean_up = [self.kwdict]\n \n-        args = self.arg_tuple.args\n-        kwargs_key_value_pairs = self.kwdict.key_value_pairs if isinstance(self.kwdict, DictNode) else None\n-        self.generate_evaluate_args(code)\n+        code.putln(\n+            f\"{self.result()} = {function_caller}(\"\n+            f\"{function}, \"\n+            f\"{Naming.callargs_cname}+{space_for_selfarg}, \"\n+            f\"({len(args)+1:d}-{space_for_selfarg}) | ({space_for_selfarg}*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET)\"",
            "html_url": "https://github.com/cython/cython/pull/6747#discussion_r2013575580",
            "id": 2013575580,
            "in_reply_to_id": 2012963904,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc54BLmc",
            "original_commit_id": "ac31f6857b2d46288b888a88b77298c0576c1ea3",
            "original_line": 6895,
            "original_position": 412,
            "original_start_line": null,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_review_id": 2716204109,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6747",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2013575580/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-03-26T08:01:19Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2013575580",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/cython/cython/issues/6747/comments",
    "commit_data": [
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/2c6f2b8e07bc15a4552907ef12c20d392929c729/comments",
            "commit": {
                "author": {
                    "date": "2025-03-20T22:17:08Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-03-20T22:17:08Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Speed up Limited API with PyObject_VectorcallMethod\n\nReplaces most of our specialized PyMethodCallNode code with\nPyObject_VectorcallMethod. This avoids __Pyx_PyMethod_New (which\nis slow in the Limited API) and essentially lets Python do all\nthe unpacking stuff that we don't have access to.\n\nThis is something like a 35% speed up on the bm_richards_pyclass\ncode.",
                "tree": {
                    "sha": "ab02dc51c6cf15304f9e8a5ad12e2668cab2de0a",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/ab02dc51c6cf15304f9e8a5ad12e2668cab2de0a"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/2c6f2b8e07bc15a4552907ef12c20d392929c729",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/2c6f2b8e07bc15a4552907ef12c20d392929c729",
            "node_id": "C_kwDOAhr4b9oAKDJjNmYyYjhlMDdiYzE1YTQ1NTI5MDdlZjEyYzIwZDM5MjkyOWM3Mjk",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/93a7d09d47d8aae0dfcea41d06f4b140a1161499",
                    "sha": "93a7d09d47d8aae0dfcea41d06f4b140a1161499",
                    "url": "https://api.github.com/repos/cython/cython/commits/93a7d09d47d8aae0dfcea41d06f4b140a1161499"
                }
            ],
            "sha": "2c6f2b8e07bc15a4552907ef12c20d392929c729",
            "url": "https://api.github.com/repos/cython/cython/commits/2c6f2b8e07bc15a4552907ef12c20d392929c729"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/cf8d5bd487938f01bc095f23024a5207e99f5264/comments",
            "commit": {
                "author": {
                    "date": "2025-03-21T07:20:47Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-03-21T07:20:47Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Fix build",
                "tree": {
                    "sha": "b52b87372086df6d162a00f52dd654d92d9b74d0",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/b52b87372086df6d162a00f52dd654d92d9b74d0"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/cf8d5bd487938f01bc095f23024a5207e99f5264",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/cf8d5bd487938f01bc095f23024a5207e99f5264",
            "node_id": "C_kwDOAhr4b9oAKGNmOGQ1YmQ0ODc5MzhmMDFiYzA5NWYyMzAyNGE1MjA3ZTk5ZjUyNjQ",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/2c6f2b8e07bc15a4552907ef12c20d392929c729",
                    "sha": "2c6f2b8e07bc15a4552907ef12c20d392929c729",
                    "url": "https://api.github.com/repos/cython/cython/commits/2c6f2b8e07bc15a4552907ef12c20d392929c729"
                }
            ],
            "sha": "cf8d5bd487938f01bc095f23024a5207e99f5264",
            "url": "https://api.github.com/repos/cython/cython/commits/cf8d5bd487938f01bc095f23024a5207e99f5264"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/b6df7a6e9022cff5e31d8484d0d8719dd3fe96dc/comments",
            "commit": {
                "author": {
                    "date": "2025-03-21T20:15:48Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-03-21T20:15:48Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Assorted fixes",
                "tree": {
                    "sha": "de4e97b73b773ade039baf820046fb5312609dc7",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/de4e97b73b773ade039baf820046fb5312609dc7"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/b6df7a6e9022cff5e31d8484d0d8719dd3fe96dc",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/b6df7a6e9022cff5e31d8484d0d8719dd3fe96dc",
            "node_id": "C_kwDOAhr4b9oAKGI2ZGY3YTZlOTAyMmNmZjVlMzFkODQ4NGQwZDg3MTlkZDNmZTk2ZGM",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/cf8d5bd487938f01bc095f23024a5207e99f5264",
                    "sha": "cf8d5bd487938f01bc095f23024a5207e99f5264",
                    "url": "https://api.github.com/repos/cython/cython/commits/cf8d5bd487938f01bc095f23024a5207e99f5264"
                }
            ],
            "sha": "b6df7a6e9022cff5e31d8484d0d8719dd3fe96dc",
            "url": "https://api.github.com/repos/cython/cython/commits/b6df7a6e9022cff5e31d8484d0d8719dd3fe96dc"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/b4a0c1e60726ffc70414f3a20f97172e36b67abb/comments",
            "commit": {
                "author": {
                    "date": "2025-03-23T12:29:16Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-03-23T12:29:16Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Use PyObject_VectorcallMethod all the time",
                "tree": {
                    "sha": "d91a73e979c9e6efe6357fad1f0d991f6e84cf50",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/d91a73e979c9e6efe6357fad1f0d991f6e84cf50"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/b4a0c1e60726ffc70414f3a20f97172e36b67abb",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/b4a0c1e60726ffc70414f3a20f97172e36b67abb",
            "node_id": "C_kwDOAhr4b9oAKGI0YTBjMWU2MDcyNmZmYzcwNDE0ZjNhMjBmOTcxNzJlMzZiNjdhYmI",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/b6df7a6e9022cff5e31d8484d0d8719dd3fe96dc",
                    "sha": "b6df7a6e9022cff5e31d8484d0d8719dd3fe96dc",
                    "url": "https://api.github.com/repos/cython/cython/commits/b6df7a6e9022cff5e31d8484d0d8719dd3fe96dc"
                }
            ],
            "sha": "b4a0c1e60726ffc70414f3a20f97172e36b67abb",
            "url": "https://api.github.com/repos/cython/cython/commits/b4a0c1e60726ffc70414f3a20f97172e36b67abb"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/590315a1a86fd82e471dc78a367c6f59d9a05264/comments",
            "commit": {
                "author": {
                    "date": "2025-03-23T16:25:57Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-03-23T16:25:57Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Hopefully fix",
                "tree": {
                    "sha": "e1c46e694bb8685939a2281b3514c7efbcdf5632",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/e1c46e694bb8685939a2281b3514c7efbcdf5632"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/590315a1a86fd82e471dc78a367c6f59d9a05264",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/590315a1a86fd82e471dc78a367c6f59d9a05264",
            "node_id": "C_kwDOAhr4b9oAKDU5MDMxNWExYTg2ZmQ4MmU0NzFkYzc4YTM2N2M2ZjU5ZDlhMDUyNjQ",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/b4a0c1e60726ffc70414f3a20f97172e36b67abb",
                    "sha": "b4a0c1e60726ffc70414f3a20f97172e36b67abb",
                    "url": "https://api.github.com/repos/cython/cython/commits/b4a0c1e60726ffc70414f3a20f97172e36b67abb"
                }
            ],
            "sha": "590315a1a86fd82e471dc78a367c6f59d9a05264",
            "url": "https://api.github.com/repos/cython/cython/commits/590315a1a86fd82e471dc78a367c6f59d9a05264"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/588e28a5346ee4b94bf817932a564c79aded6788/comments",
            "commit": {
                "author": {
                    "date": "2025-03-23T20:33:21Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-03-23T20:33:21Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Always use vectorcall method",
                "tree": {
                    "sha": "be2b1e4ff244ae74abeb8cd90527a59a65050d9f",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/be2b1e4ff244ae74abeb8cd90527a59a65050d9f"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/588e28a5346ee4b94bf817932a564c79aded6788",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/588e28a5346ee4b94bf817932a564c79aded6788",
            "node_id": "C_kwDOAhr4b9oAKDU4OGUyOGE1MzQ2ZWU0Yjk0YmY4MTc5MzJhNTY0Yzc5YWRlZDY3ODg",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/590315a1a86fd82e471dc78a367c6f59d9a05264",
                    "sha": "590315a1a86fd82e471dc78a367c6f59d9a05264",
                    "url": "https://api.github.com/repos/cython/cython/commits/590315a1a86fd82e471dc78a367c6f59d9a05264"
                }
            ],
            "sha": "588e28a5346ee4b94bf817932a564c79aded6788",
            "url": "https://api.github.com/repos/cython/cython/commits/588e28a5346ee4b94bf817932a564c79aded6788"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/34c0a07047b0f96500659f3104481f50cc54fefa/comments",
            "commit": {
                "author": {
                    "date": "2025-03-23T20:35:49Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-03-23T20:35:49Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Merge branch 'master' into speed-up-limited-api-with-PyObject_VectorcallMethod",
                "tree": {
                    "sha": "39cd522db3331453480c44e84059879f159e5714",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/39cd522db3331453480c44e84059879f159e5714"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/34c0a07047b0f96500659f3104481f50cc54fefa",
                "verification": {
                    "payload": "tree 39cd522db3331453480c44e84059879f159e5714\nparent 588e28a5346ee4b94bf817932a564c79aded6788\nparent 030e3886fa094ecae6121f8ccacaf814956dca5c\nauthor da-woods <dw-git@d-woods.co.uk> 1742762149 +0000\ncommitter GitHub <noreply@github.com> 1742762149 +0000\n\nMerge branch 'master' into speed-up-limited-api-with-PyObject_VectorcallMethod",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJn4HClCRC1aQ7uu5UhlAAAoqkQAHXvGUwaU+fe3zFp0Kj2fJLW\nuDHreCSN1PybVrYjGmsTFHooghwG+1tuS9ne5zzypK3C2fJu8TnsQkO3yCsQZFUp\nvvZ3XEa+6O9xCqsb5x31ElV+ls3tmhbGWIpPHtO2WoTCNunWtAZg/TXJ7LKV1yhB\ntjm7Ybj5/+Z5BL1qFvJBJt+C+xcjP6kcn3g/V+BhV6nE8EPsP/Iz6HCMmmtTzjeS\nSJhGJdszKUGIa6wmqq0Hb2tJVuQ6bbXY5d9Zjn0ZRspnM6dqsNETi0s5jNO2wAD+\nA54vDmvGsoYsmR/DiOJMLqLPXgjrubSSPuci780QBK6BkbxCXkks2TgZIQPqK0wd\nyy2X1YfyXwA3C5koKLcF325OGgv7mbb3NFozhvIzb5KVe2YEUdzm4U1Ps3AgU2+8\n3ol21/j9l9Sa57dDbtwWT1IW5zmFWMZIFswWxVQT37/NznpML509pGpCfr9d6Phb\n+I2vZLqEaIYkEk4t8/pQxFjSlq2sOzRJl1XitydqFv2MfUHiJ0w3PFQFEqWH1pXQ\nRPMbr5LT8AwijPe5DXu5Nn2w8fgPFC7zaem8SvBvTBFKAmSWLuexM5X3twiJf9xP\nX58tLQgo3D25CKkgyJIaN+JMyqQCEzkehgg4bwjUChVWuN6Wzx4DcxXeUuYvYU4L\ntlbJF1MNBHmfa/a8Zknb\n=qJqZ\n-----END PGP SIGNATURE-----\n",
                    "verified": true,
                    "verified_at": "2025-03-23T20:35:52Z"
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/34c0a07047b0f96500659f3104481f50cc54fefa",
            "node_id": "C_kwDOAhr4b9oAKDM0YzBhMDcwNDdiMGY5NjUwMDY1OWYzMTA0NDgxZjUwY2M1NGZlZmE",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/588e28a5346ee4b94bf817932a564c79aded6788",
                    "sha": "588e28a5346ee4b94bf817932a564c79aded6788",
                    "url": "https://api.github.com/repos/cython/cython/commits/588e28a5346ee4b94bf817932a564c79aded6788"
                },
                {
                    "html_url": "https://github.com/cython/cython/commit/030e3886fa094ecae6121f8ccacaf814956dca5c",
                    "sha": "030e3886fa094ecae6121f8ccacaf814956dca5c",
                    "url": "https://api.github.com/repos/cython/cython/commits/030e3886fa094ecae6121f8ccacaf814956dca5c"
                }
            ],
            "sha": "34c0a07047b0f96500659f3104481f50cc54fefa",
            "url": "https://api.github.com/repos/cython/cython/commits/34c0a07047b0f96500659f3104481f50cc54fefa"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/1de15d41ecc6665b425ab8c35a2922dd97e26bd5/comments",
            "commit": {
                "author": {
                    "date": "2025-03-23T21:19:42Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-03-23T21:20:24Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Fixes",
                "tree": {
                    "sha": "5613a63a294ca7e473cd57f0a095290dadf19754",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/5613a63a294ca7e473cd57f0a095290dadf19754"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/1de15d41ecc6665b425ab8c35a2922dd97e26bd5",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/1de15d41ecc6665b425ab8c35a2922dd97e26bd5",
            "node_id": "C_kwDOAhr4b9oAKDFkZTE1ZDQxZWNjNjY2NWI0MjVhYjhjMzVhMjkyMmRkOTdlMjZiZDU",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/34c0a07047b0f96500659f3104481f50cc54fefa",
                    "sha": "34c0a07047b0f96500659f3104481f50cc54fefa",
                    "url": "https://api.github.com/repos/cython/cython/commits/34c0a07047b0f96500659f3104481f50cc54fefa"
                }
            ],
            "sha": "1de15d41ecc6665b425ab8c35a2922dd97e26bd5",
            "url": "https://api.github.com/repos/cython/cython/commits/1de15d41ecc6665b425ab8c35a2922dd97e26bd5"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/c8535b6235f3e4c131d3a1b40bc93f4920a56fec/comments",
            "commit": {
                "author": {
                    "date": "2025-03-24T07:40:35Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-03-24T07:40:35Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Fix tests and hopefully Py3.8",
                "tree": {
                    "sha": "8c347d0f78c8b9fbb8ff58bcaf0fb1b57a92e84f",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/8c347d0f78c8b9fbb8ff58bcaf0fb1b57a92e84f"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/c8535b6235f3e4c131d3a1b40bc93f4920a56fec",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/c8535b6235f3e4c131d3a1b40bc93f4920a56fec",
            "node_id": "C_kwDOAhr4b9oAKGM4NTM1YjYyMzVmM2U0YzEzMWQzYTFiNDBiYzkzZjQ5MjBhNTZmZWM",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/1de15d41ecc6665b425ab8c35a2922dd97e26bd5",
                    "sha": "1de15d41ecc6665b425ab8c35a2922dd97e26bd5",
                    "url": "https://api.github.com/repos/cython/cython/commits/1de15d41ecc6665b425ab8c35a2922dd97e26bd5"
                }
            ],
            "sha": "c8535b6235f3e4c131d3a1b40bc93f4920a56fec",
            "url": "https://api.github.com/repos/cython/cython/commits/c8535b6235f3e4c131d3a1b40bc93f4920a56fec"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/c57aec39070b0280ed0213db3620f465b217ad41/comments",
            "commit": {
                "author": {
                    "date": "2025-03-24T07:45:32Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-03-24T07:45:32Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Tweak criteria",
                "tree": {
                    "sha": "05ac85ba7b2e501b79d626d910156acf0aa26824",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/05ac85ba7b2e501b79d626d910156acf0aa26824"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/c57aec39070b0280ed0213db3620f465b217ad41",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/c57aec39070b0280ed0213db3620f465b217ad41",
            "node_id": "C_kwDOAhr4b9oAKGM1N2FlYzM5MDcwYjAyODBlZDAyMTNkYjM2MjBmNDY1YjIxN2FkNDE",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/c8535b6235f3e4c131d3a1b40bc93f4920a56fec",
                    "sha": "c8535b6235f3e4c131d3a1b40bc93f4920a56fec",
                    "url": "https://api.github.com/repos/cython/cython/commits/c8535b6235f3e4c131d3a1b40bc93f4920a56fec"
                }
            ],
            "sha": "c57aec39070b0280ed0213db3620f465b217ad41",
            "url": "https://api.github.com/repos/cython/cython/commits/c57aec39070b0280ed0213db3620f465b217ad41"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/e4856681ecd8f7e93c5bd2efc5743ac817804b51/comments",
            "commit": {
                "author": {
                    "date": "2025-03-24T18:49:20Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-03-24T18:49:20Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Some refactoring",
                "tree": {
                    "sha": "a5fc627307113223a475bd26269b5631851bfbc4",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/a5fc627307113223a475bd26269b5631851bfbc4"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/e4856681ecd8f7e93c5bd2efc5743ac817804b51",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/e4856681ecd8f7e93c5bd2efc5743ac817804b51",
            "node_id": "C_kwDOAhr4b9oAKGU0ODU2NjgxZWNkOGY3ZTkzYzViZDJlZmM1NzQzYWM4MTc4MDRiNTE",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/c57aec39070b0280ed0213db3620f465b217ad41",
                    "sha": "c57aec39070b0280ed0213db3620f465b217ad41",
                    "url": "https://api.github.com/repos/cython/cython/commits/c57aec39070b0280ed0213db3620f465b217ad41"
                }
            ],
            "sha": "e4856681ecd8f7e93c5bd2efc5743ac817804b51",
            "url": "https://api.github.com/repos/cython/cython/commits/e4856681ecd8f7e93c5bd2efc5743ac817804b51"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/b23de9d6e8d8eeea1973ce2ef95734676d7df16d/comments",
            "commit": {
                "author": {
                    "date": "2025-03-24T18:51:58Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-03-24T18:51:58Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Little more tidying",
                "tree": {
                    "sha": "68d3472c5d6afe692be65c850e52d83295fe80bc",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/68d3472c5d6afe692be65c850e52d83295fe80bc"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/b23de9d6e8d8eeea1973ce2ef95734676d7df16d",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/b23de9d6e8d8eeea1973ce2ef95734676d7df16d",
            "node_id": "C_kwDOAhr4b9oAKGIyM2RlOWQ2ZThkOGVlZWExOTczY2UyZWY5NTczNDY3NmQ3ZGYxNmQ",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/e4856681ecd8f7e93c5bd2efc5743ac817804b51",
                    "sha": "e4856681ecd8f7e93c5bd2efc5743ac817804b51",
                    "url": "https://api.github.com/repos/cython/cython/commits/e4856681ecd8f7e93c5bd2efc5743ac817804b51"
                }
            ],
            "sha": "b23de9d6e8d8eeea1973ce2ef95734676d7df16d",
            "url": "https://api.github.com/repos/cython/cython/commits/b23de9d6e8d8eeea1973ce2ef95734676d7df16d"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/55eb8837ee07a4f9359738107289d7cbaa127300/comments",
            "commit": {
                "author": {
                    "date": "2025-03-24T19:31:38Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-03-24T19:31:38Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Fix 3.8 refcounting",
                "tree": {
                    "sha": "1722e6a7378adb661d04f46b1fe03eacb2b636ca",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/1722e6a7378adb661d04f46b1fe03eacb2b636ca"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/55eb8837ee07a4f9359738107289d7cbaa127300",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/55eb8837ee07a4f9359738107289d7cbaa127300",
            "node_id": "C_kwDOAhr4b9oAKDU1ZWI4ODM3ZWUwN2E0ZjkzNTk3MzgxMDcyODlkN2NiYWExMjczMDA",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/b23de9d6e8d8eeea1973ce2ef95734676d7df16d",
                    "sha": "b23de9d6e8d8eeea1973ce2ef95734676d7df16d",
                    "url": "https://api.github.com/repos/cython/cython/commits/b23de9d6e8d8eeea1973ce2ef95734676d7df16d"
                }
            ],
            "sha": "55eb8837ee07a4f9359738107289d7cbaa127300",
            "url": "https://api.github.com/repos/cython/cython/commits/55eb8837ee07a4f9359738107289d7cbaa127300"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/6dd8c1e30ed5bf349219737e392e4420b4701f33/comments",
            "commit": {
                "author": {
                    "date": "2025-03-25T10:30:58Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-03-25T10:30:58Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Shift different implementations into separate classes",
                "tree": {
                    "sha": "1d0d19ade28fe9ee89a08de1179291d671aa330d",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/1d0d19ade28fe9ee89a08de1179291d671aa330d"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/6dd8c1e30ed5bf349219737e392e4420b4701f33",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/6dd8c1e30ed5bf349219737e392e4420b4701f33",
            "node_id": "C_kwDOAhr4b9oAKDZkZDhjMWUzMGVkNWJmMzQ5MjE5NzM3ZTM5MmU0NDIwYjQ3MDFmMzM",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/55eb8837ee07a4f9359738107289d7cbaa127300",
                    "sha": "55eb8837ee07a4f9359738107289d7cbaa127300",
                    "url": "https://api.github.com/repos/cython/cython/commits/55eb8837ee07a4f9359738107289d7cbaa127300"
                }
            ],
            "sha": "6dd8c1e30ed5bf349219737e392e4420b4701f33",
            "url": "https://api.github.com/repos/cython/cython/commits/6dd8c1e30ed5bf349219737e392e4420b4701f33"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/8f14dc3bf5affdf2cf0c9f0ba22357b2c2367aa5/comments",
            "commit": {
                "author": {
                    "date": "2025-03-25T10:39:03Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-03-25T10:39:03Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Fix argsoffset on regular calls",
                "tree": {
                    "sha": "c616816fccb001191729875db189f71ae8915bf1",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/c616816fccb001191729875db189f71ae8915bf1"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/8f14dc3bf5affdf2cf0c9f0ba22357b2c2367aa5",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/8f14dc3bf5affdf2cf0c9f0ba22357b2c2367aa5",
            "node_id": "C_kwDOAhr4b9oAKDhmMTRkYzNiZjVhZmZkZjJjZjBjOWYwYmEyMjM1N2IyYzIzNjdhYTU",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/6dd8c1e30ed5bf349219737e392e4420b4701f33",
                    "sha": "6dd8c1e30ed5bf349219737e392e4420b4701f33",
                    "url": "https://api.github.com/repos/cython/cython/commits/6dd8c1e30ed5bf349219737e392e4420b4701f33"
                }
            ],
            "sha": "8f14dc3bf5affdf2cf0c9f0ba22357b2c2367aa5",
            "url": "https://api.github.com/repos/cython/cython/commits/8f14dc3bf5affdf2cf0c9f0ba22357b2c2367aa5"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/0f898fcc4d0141185cc12b31fe75bbc668f9bed6/comments",
            "commit": {
                "author": {
                    "date": "2025-03-25T11:59:14Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-03-25T11:59:14Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Fix tests",
                "tree": {
                    "sha": "f475050d2a256761a38b559d4a2a2d7b423fe07e",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/f475050d2a256761a38b559d4a2a2d7b423fe07e"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/0f898fcc4d0141185cc12b31fe75bbc668f9bed6",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/0f898fcc4d0141185cc12b31fe75bbc668f9bed6",
            "node_id": "C_kwDOAhr4b9oAKDBmODk4ZmNjNGQwMTQxMTg1Y2MxMmIzMWZlNzViYmM2NjhmOWJlZDY",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/8f14dc3bf5affdf2cf0c9f0ba22357b2c2367aa5",
                    "sha": "8f14dc3bf5affdf2cf0c9f0ba22357b2c2367aa5",
                    "url": "https://api.github.com/repos/cython/cython/commits/8f14dc3bf5affdf2cf0c9f0ba22357b2c2367aa5"
                }
            ],
            "sha": "0f898fcc4d0141185cc12b31fe75bbc668f9bed6",
            "url": "https://api.github.com/repos/cython/cython/commits/0f898fcc4d0141185cc12b31fe75bbc668f9bed6"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/d7c2070d1847e6bd10940607cafff7cd408de53e/comments",
            "commit": {
                "author": {
                    "date": "2025-03-25T12:37:46Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-03-25T12:37:46Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "message": "Merge branch 'master' into speed-up-limited-api-with-PyObject_VectorcallMethod",
                "tree": {
                    "sha": "ea3cbfd680563b9043b19da83267fe7ac2c9f814",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/ea3cbfd680563b9043b19da83267fe7ac2c9f814"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/d7c2070d1847e6bd10940607cafff7cd408de53e",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/d7c2070d1847e6bd10940607cafff7cd408de53e",
            "node_id": "C_kwDOAhr4b9oAKGQ3YzIwNzBkMTg0N2U2YmQxMDk0MDYwN2NhZmZmN2NkNDA4ZGU1M2U",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/ed4c8d8554f30d1ce3bc9a5901ade142a80d48f9",
                    "sha": "ed4c8d8554f30d1ce3bc9a5901ade142a80d48f9",
                    "url": "https://api.github.com/repos/cython/cython/commits/ed4c8d8554f30d1ce3bc9a5901ade142a80d48f9"
                },
                {
                    "html_url": "https://github.com/cython/cython/commit/0f898fcc4d0141185cc12b31fe75bbc668f9bed6",
                    "sha": "0f898fcc4d0141185cc12b31fe75bbc668f9bed6",
                    "url": "https://api.github.com/repos/cython/cython/commits/0f898fcc4d0141185cc12b31fe75bbc668f9bed6"
                }
            ],
            "sha": "d7c2070d1847e6bd10940607cafff7cd408de53e",
            "url": "https://api.github.com/repos/cython/cython/commits/d7c2070d1847e6bd10940607cafff7cd408de53e"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/ac31f6857b2d46288b888a88b77298c0576c1ea3/comments",
            "commit": {
                "author": {
                    "date": "2025-03-25T20:36:38Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-03-25T20:36:38Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "message": "Refactor PyMethodCallNode back into one class but try to make the code generation easier to follow.",
                "tree": {
                    "sha": "5299570f2a1cce1db32f9278b918b113f36ff8ba",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/5299570f2a1cce1db32f9278b918b113f36ff8ba"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/ac31f6857b2d46288b888a88b77298c0576c1ea3",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/ac31f6857b2d46288b888a88b77298c0576c1ea3",
            "node_id": "C_kwDOAhr4b9oAKGFjMzFmNjg1N2IyZDQ2Mjg4Yjg4OGE4OGI3NzI5OGMwNTc2YzFlYTM",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/d7c2070d1847e6bd10940607cafff7cd408de53e",
                    "sha": "d7c2070d1847e6bd10940607cafff7cd408de53e",
                    "url": "https://api.github.com/repos/cython/cython/commits/d7c2070d1847e6bd10940607cafff7cd408de53e"
                }
            ],
            "sha": "ac31f6857b2d46288b888a88b77298c0576c1ea3",
            "url": "https://api.github.com/repos/cython/cython/commits/ac31f6857b2d46288b888a88b77298c0576c1ea3"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/7d8ab757f29cd7fae959648c9fccb7a4d97ee42d/comments",
            "commit": {
                "author": {
                    "date": "2025-03-25T20:53:44Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-03-25T20:53:44Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "message": "Remove unused variables.",
                "tree": {
                    "sha": "b64fbfb337235983bf60f4b0daee76d541aa5dda",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/b64fbfb337235983bf60f4b0daee76d541aa5dda"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/7d8ab757f29cd7fae959648c9fccb7a4d97ee42d",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/7d8ab757f29cd7fae959648c9fccb7a4d97ee42d",
            "node_id": "C_kwDOAhr4b9oAKDdkOGFiNzU3ZjI5Y2Q3ZmFlOTU5NjQ4YzlmY2NiN2E0ZDk3ZWU0MmQ",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/ac31f6857b2d46288b888a88b77298c0576c1ea3",
                    "sha": "ac31f6857b2d46288b888a88b77298c0576c1ea3",
                    "url": "https://api.github.com/repos/cython/cython/commits/ac31f6857b2d46288b888a88b77298c0576c1ea3"
                }
            ],
            "sha": "7d8ab757f29cd7fae959648c9fccb7a4d97ee42d",
            "url": "https://api.github.com/repos/cython/cython/commits/7d8ab757f29cd7fae959648c9fccb7a4d97ee42d"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/8fae08e9deed6446d650ba7c8360b57d80714f4e/comments",
            "commit": {
                "author": {
                    "date": "2025-03-25T20:58:11Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-03-25T20:58:11Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "message": "Minor code cleanups.",
                "tree": {
                    "sha": "20c82fdcf4c0791155a04db00ce56ebf6373de44",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/20c82fdcf4c0791155a04db00ce56ebf6373de44"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/8fae08e9deed6446d650ba7c8360b57d80714f4e",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/8fae08e9deed6446d650ba7c8360b57d80714f4e",
            "node_id": "C_kwDOAhr4b9oAKDhmYWUwOGU5ZGVlZDY0NDZkNjUwYmE3YzgzNjBiNTdkODA3MTRmNGU",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/7d8ab757f29cd7fae959648c9fccb7a4d97ee42d",
                    "sha": "7d8ab757f29cd7fae959648c9fccb7a4d97ee42d",
                    "url": "https://api.github.com/repos/cython/cython/commits/7d8ab757f29cd7fae959648c9fccb7a4d97ee42d"
                }
            ],
            "sha": "8fae08e9deed6446d650ba7c8360b57d80714f4e",
            "url": "https://api.github.com/repos/cython/cython/commits/8fae08e9deed6446d650ba7c8360b57d80714f4e"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/9f2949a99c98e287a37fbf735e8618681cd44b7c/comments",
            "commit": {
                "author": {
                    "date": "2025-03-25T20:59:21Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-03-25T20:59:21Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "message": "Clean up function before handling errors.",
                "tree": {
                    "sha": "7da75cc6ce1adc617b03c566c4d4429d3e155e14",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/7da75cc6ce1adc617b03c566c4d4429d3e155e14"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/9f2949a99c98e287a37fbf735e8618681cd44b7c",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/9f2949a99c98e287a37fbf735e8618681cd44b7c",
            "node_id": "C_kwDOAhr4b9oAKDlmMjk0OWE5OWM5OGUyODdhMzdmYmY3MzVlODYxODY4MWNkNDRiN2M",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/8fae08e9deed6446d650ba7c8360b57d80714f4e",
                    "sha": "8fae08e9deed6446d650ba7c8360b57d80714f4e",
                    "url": "https://api.github.com/repos/cython/cython/commits/8fae08e9deed6446d650ba7c8360b57d80714f4e"
                }
            ],
            "sha": "9f2949a99c98e287a37fbf735e8618681cd44b7c",
            "url": "https://api.github.com/repos/cython/cython/commits/9f2949a99c98e287a37fbf735e8618681cd44b7c"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/b54389c2b937ba96f622f3e258f0f178c7d23e13/comments",
            "commit": {
                "author": {
                    "date": "2025-03-26T08:09:52Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-03-26T08:09:52Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "message": "Always set \"__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET\" when using VectorcallMethod.",
                "tree": {
                    "sha": "c5fdad708ee69f40e8155feaf499ed1169d0f485",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/c5fdad708ee69f40e8155feaf499ed1169d0f485"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/b54389c2b937ba96f622f3e258f0f178c7d23e13",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/b54389c2b937ba96f622f3e258f0f178c7d23e13",
            "node_id": "C_kwDOAhr4b9oAKGI1NDM4OWMyYjkzN2JhOTZmNjIyZjNlMjU4ZjBmMTc4YzdkMjNlMTM",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/9f2949a99c98e287a37fbf735e8618681cd44b7c",
                    "sha": "9f2949a99c98e287a37fbf735e8618681cd44b7c",
                    "url": "https://api.github.com/repos/cython/cython/commits/9f2949a99c98e287a37fbf735e8618681cd44b7c"
                }
            ],
            "sha": "b54389c2b937ba96f622f3e258f0f178c7d23e13",
            "url": "https://api.github.com/repos/cython/cython/commits/b54389c2b937ba96f622f3e258f0f178c7d23e13"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/e27a74e8cc1ef8a0cfbe39de4eb748d994c9727e/comments",
            "commit": {
                "author": {
                    "date": "2025-03-26T09:27:54Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "scoder"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-03-26T09:27:54Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Merge branch 'master' into speed-up-limited-api-with-PyObject_VectorcallMethod",
                "tree": {
                    "sha": "e54e7d1f9d2cb32f451fbbe93133a41e8b9980cc",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/e54e7d1f9d2cb32f451fbbe93133a41e8b9980cc"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/e27a74e8cc1ef8a0cfbe39de4eb748d994c9727e",
                "verification": {
                    "payload": "tree e54e7d1f9d2cb32f451fbbe93133a41e8b9980cc\nparent b54389c2b937ba96f622f3e258f0f178c7d23e13\nparent 54f649599a32499c3371f55b04cd4ace957bb677\nauthor scoder <stefan_ml@behnel.de> 1742981274 +0100\ncommitter GitHub <noreply@github.com> 1742981274 +0100\n\nMerge branch 'master' into speed-up-limited-api-with-PyObject_VectorcallMethod",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJn48iaCRC1aQ7uu5UhlAAAJLIQAD0XeTuJjdzTBsOcF2ti8xoU\nogNi47LpuzJ0bnQZZ5StpvnXF+34vtHQyycxUQK/RSKDk2Ob43n1833QTBLCwImh\n6G73Urb7Qz6/WoQBzf3cghZUmZ6/ZeOFQnlbo2xLqMjAYWNDCbYApUcaCbEARcLm\nTnwhqbCOTiha30juyxwXu7+EOGcBFoBxDE6WAuGkM62hlWmww2zboLsCxRt84j0g\n/0THBsgaTiAjW9wiW+MQLYqJjbDcuOYsVkYTREfjdOKTre13N/Icyo4Nk5WARLwA\nlGMhe0SMQ6qL8/zPHM7Yx2BizFCFkSJ0Mdz7JzE5m3GOkpz0+BvbPlR+W2KuMM+I\nyF2u9613VNb4WPH1NMHLkfK/WBXAMZ1nQX+uJmZsIY4dkZa0iJ5TMEr97+dhyXpL\nzsJIBwxGuOjYyIN0oP555Sjhj1OBsgew4CAPA8p3MGsMkLJy557dmvzxfIuH19KI\nbC/xijzNOwPcpnp0VkPlIkEhGLf0B6mEYT2YaYSL5W8asNzApHJqad8oG8cOy656\nOIH+yk608kNiXwHBXqG+mU3s2svk+DGK42X+YrOjC6TRyCkY04FVTYfQ6I2oxbmd\nBAUdtPjBkU3e2Ly5+OJ3jxgbrf4y50g+ZpwI6mv+VsBW7WVVW88a0VNA4+LY3cLP\nMy5oA75kwXTKGg2XsjoK\n=WkeY\n-----END PGP SIGNATURE-----\n",
                    "verified": true,
                    "verified_at": "2025-03-26T09:27:56Z"
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/e27a74e8cc1ef8a0cfbe39de4eb748d994c9727e",
            "node_id": "C_kwDOAhr4b9oAKGUyN2E3NGU4Y2MxZWY4YTBjZmJlMzlkZTRlYjc0OGQ5OTRjOTcyN2U",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/b54389c2b937ba96f622f3e258f0f178c7d23e13",
                    "sha": "b54389c2b937ba96f622f3e258f0f178c7d23e13",
                    "url": "https://api.github.com/repos/cython/cython/commits/b54389c2b937ba96f622f3e258f0f178c7d23e13"
                },
                {
                    "html_url": "https://github.com/cython/cython/commit/54f649599a32499c3371f55b04cd4ace957bb677",
                    "sha": "54f649599a32499c3371f55b04cd4ace957bb677",
                    "url": "https://api.github.com/repos/cython/cython/commits/54f649599a32499c3371f55b04cd4ace957bb677"
                }
            ],
            "sha": "e27a74e8cc1ef8a0cfbe39de4eb748d994c9727e",
            "url": "https://api.github.com/repos/cython/cython/commits/e27a74e8cc1ef8a0cfbe39de4eb748d994c9727e"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/d5026ea32c30c3a52e37f6b0961050535704d97a/comments",
            "commit": {
                "author": {
                    "date": "2025-03-26T09:30:23Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-03-26T09:40:53Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "message": "Undo accidental formatting changes.",
                "tree": {
                    "sha": "1a5adfc423e55d102e56fe15829a8ffe797939c0",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/1a5adfc423e55d102e56fe15829a8ffe797939c0"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/d5026ea32c30c3a52e37f6b0961050535704d97a",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/d5026ea32c30c3a52e37f6b0961050535704d97a",
            "node_id": "C_kwDOAhr4b9oAKGQ1MDI2ZWEzMmMzMGMzYTUyZTM3ZjZiMDk2MTA1MDUzNTcwNGQ5N2E",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/e27a74e8cc1ef8a0cfbe39de4eb748d994c9727e",
                    "sha": "e27a74e8cc1ef8a0cfbe39de4eb748d994c9727e",
                    "url": "https://api.github.com/repos/cython/cython/commits/e27a74e8cc1ef8a0cfbe39de4eb748d994c9727e"
                }
            ],
            "sha": "d5026ea32c30c3a52e37f6b0961050535704d97a",
            "url": "https://api.github.com/repos/cython/cython/commits/d5026ea32c30c3a52e37f6b0961050535704d97a"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/ec22de1f816b152cb801f6e3daafc6592afd6f76/comments",
            "commit": {
                "author": {
                    "date": "2025-03-26T09:36:59Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-03-26T09:40:53Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "message": "Use identical comments in test.",
                "tree": {
                    "sha": "ac12c03b19e254ed1bd9e14d4767cc6e47a6a0cf",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/ac12c03b19e254ed1bd9e14d4767cc6e47a6a0cf"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/ec22de1f816b152cb801f6e3daafc6592afd6f76",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/ec22de1f816b152cb801f6e3daafc6592afd6f76",
            "node_id": "C_kwDOAhr4b9oAKGVjMjJkZTFmODE2YjE1MmNiODAxZjZlM2RhYWZjNjU5MmFmZDZmNzY",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/d5026ea32c30c3a52e37f6b0961050535704d97a",
                    "sha": "d5026ea32c30c3a52e37f6b0961050535704d97a",
                    "url": "https://api.github.com/repos/cython/cython/commits/d5026ea32c30c3a52e37f6b0961050535704d97a"
                }
            ],
            "sha": "ec22de1f816b152cb801f6e3daafc6592afd6f76",
            "url": "https://api.github.com/repos/cython/cython/commits/ec22de1f816b152cb801f6e3daafc6592afd6f76"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/5219af8f53dc28fb4f846051eac261103815501a/comments",
            "commit": {
                "author": {
                    "date": "2025-03-26T09:40:26Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-03-26T09:42:26Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "message": "Clean up test a little.",
                "tree": {
                    "sha": "07dbbd76cb9687fabd1b0795772b1a5bc4d8f1ad",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/07dbbd76cb9687fabd1b0795772b1a5bc4d8f1ad"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/5219af8f53dc28fb4f846051eac261103815501a",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/5219af8f53dc28fb4f846051eac261103815501a",
            "node_id": "C_kwDOAhr4b9oAKDUyMTlhZjhmNTNkYzI4ZmI0Zjg0NjA1MWVhYzI2MTEwMzgxNTUwMWE",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/ec22de1f816b152cb801f6e3daafc6592afd6f76",
                    "sha": "ec22de1f816b152cb801f6e3daafc6592afd6f76",
                    "url": "https://api.github.com/repos/cython/cython/commits/ec22de1f816b152cb801f6e3daafc6592afd6f76"
                }
            ],
            "sha": "5219af8f53dc28fb4f846051eac261103815501a",
            "url": "https://api.github.com/repos/cython/cython/commits/5219af8f53dc28fb4f846051eac261103815501a"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/eee84cf56e68ecaf5f73c266a3e7ca7f28a43b28/comments",
            "commit": {
                "author": {
                    "date": "2025-03-26T09:53:33Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-03-26T09:53:33Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "message": "Release temps earlier.",
                "tree": {
                    "sha": "ae542cfcc6a1cf0f48ab9c3864d1d00e504b1e05",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/ae542cfcc6a1cf0f48ab9c3864d1d00e504b1e05"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/eee84cf56e68ecaf5f73c266a3e7ca7f28a43b28",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/eee84cf56e68ecaf5f73c266a3e7ca7f28a43b28",
            "node_id": "C_kwDOAhr4b9oAKGVlZTg0Y2Y1NmU2OGVjYWY1ZjczYzI2NmEzZTdjYTdmMjhhNDNiMjg",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/5219af8f53dc28fb4f846051eac261103815501a",
                    "sha": "5219af8f53dc28fb4f846051eac261103815501a",
                    "url": "https://api.github.com/repos/cython/cython/commits/5219af8f53dc28fb4f846051eac261103815501a"
                }
            ],
            "sha": "eee84cf56e68ecaf5f73c266a3e7ca7f28a43b28",
            "url": "https://api.github.com/repos/cython/cython/commits/eee84cf56e68ecaf5f73c266a3e7ca7f28a43b28"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/1858da2cfab039d91842abd2dd8a88951755219b/comments",
            "commit": {
                "author": {
                    "date": "2025-03-26T09:54:08Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-03-26T09:54:08Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "message": "Consistently use local variables for both kwdict and unpacked kwargs.",
                "tree": {
                    "sha": "099c5508e4d6302ffd0740b1f58c7f0c6c272a94",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/099c5508e4d6302ffd0740b1f58c7f0c6c272a94"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/1858da2cfab039d91842abd2dd8a88951755219b",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/1858da2cfab039d91842abd2dd8a88951755219b",
            "node_id": "C_kwDOAhr4b9oAKDE4NThkYTJjZmFiMDM5ZDkxODQyYWJkMmRkOGE4ODk1MTc1NTIxOWI",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/eee84cf56e68ecaf5f73c266a3e7ca7f28a43b28",
                    "sha": "eee84cf56e68ecaf5f73c266a3e7ca7f28a43b28",
                    "url": "https://api.github.com/repos/cython/cython/commits/eee84cf56e68ecaf5f73c266a3e7ca7f28a43b28"
                }
            ],
            "sha": "1858da2cfab039d91842abd2dd8a88951755219b",
            "url": "https://api.github.com/repos/cython/cython/commits/1858da2cfab039d91842abd2dd8a88951755219b"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/351fece9623859efd7f30ca936a303686b1342c9/comments",
            "commit": {
                "author": {
                    "date": "2025-03-26T10:03:00Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-03-26T10:03:00Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "message": "No reason not to use \"__Pyx_PyDict_NewPresized()\" in non-vectorcall code.",
                "tree": {
                    "sha": "582404b64197ecb20770ead52f43226b6df749c6",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/582404b64197ecb20770ead52f43226b6df749c6"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/351fece9623859efd7f30ca936a303686b1342c9",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/351fece9623859efd7f30ca936a303686b1342c9",
            "node_id": "C_kwDOAhr4b9oAKDM1MWZlY2U5NjIzODU5ZWZkN2YzMGNhOTM2YTMwMzY4NmIxMzQyYzk",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/1858da2cfab039d91842abd2dd8a88951755219b",
                    "sha": "1858da2cfab039d91842abd2dd8a88951755219b",
                    "url": "https://api.github.com/repos/cython/cython/commits/1858da2cfab039d91842abd2dd8a88951755219b"
                }
            ],
            "sha": "351fece9623859efd7f30ca936a303686b1342c9",
            "url": "https://api.github.com/repos/cython/cython/commits/351fece9623859efd7f30ca936a303686b1342c9"
        }
    ],
    "commits_url": "https://api.github.com/repos/cython/cython/pulls/6747/commits",
    "created_at": "2025-03-20T22:19:57Z",
    "diff_url": "https://github.com/cython/cython/pull/6747.diff",
    "draft": false,
    "head": {
        "label": "da-woods:speed-up-limited-api-with-PyObject_VectorcallMethod",
        "ref": "speed-up-limited-api-with-PyObject_VectorcallMethod",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/da-woods/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/da-woods/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/da-woods/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/da-woods/cython/branches{/branch}",
            "clone_url": "https://github.com/da-woods/cython.git",
            "collaborators_url": "https://api.github.com/repos/da-woods/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/da-woods/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/da-woods/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/da-woods/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/da-woods/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/da-woods/cython/contributors",
            "created_at": "2015-05-09T08:55:00Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/da-woods/cython/deployments",
            "description": "A Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/da-woods/cython/downloads",
            "events_url": "https://api.github.com/repos/da-woods/cython/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/da-woods/cython/forks",
            "full_name": "da-woods/cython",
            "git_commits_url": "https://api.github.com/repos/da-woods/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/da-woods/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/da-woods/cython/git/tags{/sha}",
            "git_url": "git://github.com/da-woods/cython.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "http://cython.org",
            "hooks_url": "https://api.github.com/repos/da-woods/cython/hooks",
            "html_url": "https://github.com/da-woods/cython",
            "id": 35321967,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/da-woods/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/da-woods/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/da-woods/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/da-woods/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/da-woods/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/da-woods/cython/languages",
            "license": {
                "key": "apache-2.0",
                "name": "Apache License 2.0",
                "node_id": "MDc6TGljZW5zZTI=",
                "spdx_id": "Apache-2.0",
                "url": "https://api.github.com/licenses/apache-2.0"
            },
            "merges_url": "https://api.github.com/repos/da-woods/cython/merges",
            "milestones_url": "https://api.github.com/repos/da-woods/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkzNTMyMTk2Nw==",
            "notifications_url": "https://api.github.com/repos/da-woods/cython/notifications{?since,all,participating}",
            "open_issues": 2,
            "open_issues_count": 2,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/da-woods/cython/pulls{/number}",
            "pushed_at": "2025-03-26T20:35:37Z",
            "releases_url": "https://api.github.com/repos/da-woods/cython/releases{/id}",
            "size": 78037,
            "ssh_url": "git@github.com:da-woods/cython.git",
            "stargazers_count": 2,
            "stargazers_url": "https://api.github.com/repos/da-woods/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/da-woods/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/da-woods/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/da-woods/cython/subscription",
            "svn_url": "https://github.com/da-woods/cython",
            "tags_url": "https://api.github.com/repos/da-woods/cython/tags",
            "teams_url": "https://api.github.com/repos/da-woods/cython/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/da-woods/cython/git/trees{/sha}",
            "updated_at": "2025-03-12T23:15:39Z",
            "url": "https://api.github.com/repos/da-woods/cython",
            "visibility": "public",
            "watchers": 2,
            "watchers_count": 2,
            "web_commit_signoff_required": false
        },
        "sha": "351fece9623859efd7f30ca936a303686b1342c9",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
            "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
            "followers_url": "https://api.github.com/users/da-woods/followers",
            "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
            "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/da-woods",
            "id": 10536947,
            "login": "da-woods",
            "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
            "organizations_url": "https://api.github.com/users/da-woods/orgs",
            "received_events_url": "https://api.github.com/users/da-woods/received_events",
            "repos_url": "https://api.github.com/users/da-woods/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/da-woods",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/cython/cython/pull/6747",
    "id": 2408123539,
    "issue_url": "https://api.github.com/repos/cython/cython/issues/6747",
    "labels": [
        {
            "color": "f9d0c4",
            "default": false,
            "description": null,
            "id": 414805151,
            "name": "performance",
            "node_id": "MDU6TGFiZWw0MTQ4MDUxNTE=",
            "url": "https://api.github.com/repos/cython/cython/labels/performance"
        },
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425556272,
            "name": "Optimization",
            "node_id": "MDU6TGFiZWw0MjU1NTYyNzI=",
            "url": "https://api.github.com/repos/cython/cython/labels/Optimization"
        },
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425556330,
            "name": "Code Generation",
            "node_id": "MDU6TGFiZWw0MjU1NTYzMzA=",
            "url": "https://api.github.com/repos/cython/cython/labels/Code%20Generation"
        }
    ],
    "locked": false,
    "merge_commit_sha": "d98a39c6150680632def8c71825156652e4012b7",
    "merged_at": "2025-03-26T20:15:56Z",
    "milestone": {
        "closed_at": null,
        "closed_issues": 380,
        "created_at": "2019-02-24T14:21:23Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
            "events_url": "https://api.github.com/users/scoder/events{/privacy}",
            "followers_url": "https://api.github.com/users/scoder/followers",
            "following_url": "https://api.github.com/users/scoder/following{/other_user}",
            "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/scoder",
            "id": 491659,
            "login": "scoder",
            "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
            "organizations_url": "https://api.github.com/users/scoder/orgs",
            "received_events_url": "https://api.github.com/users/scoder/received_events",
            "repos_url": "https://api.github.com/users/scoder/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/scoder",
            "user_view_type": "public"
        },
        "description": "* Remove code for Python 2 and Python < 3.8.\r\n* Integrate better with Python 3.\r\n* Improve support for the Limited API.\r\n* Start supporting GIL-free Python 3.13.\r\n* Support the Py3.13 `sys.monitoring` API.\r\n* Support and use `am_send` for coroutines.",
        "due_on": null,
        "html_url": "https://github.com/cython/cython/milestone/65",
        "id": 4082235,
        "labels_url": "https://api.github.com/repos/cython/cython/milestones/65/labels",
        "node_id": "MDk6TWlsZXN0b25lNDA4MjIzNQ==",
        "number": 65,
        "open_issues": 17,
        "state": "open",
        "title": "3.1",
        "updated_at": "2025-03-26T20:20:07Z",
        "url": "https://api.github.com/repos/cython/cython/milestones/65"
    },
    "node_id": "PR_kwDOABDGAc6PiQyT",
    "number": 6747,
    "patch_url": "https://github.com/cython/cython/pull/6747.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/cython/cython/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/cython/cython/pulls/6747/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/cython/cython/statuses/351fece9623859efd7f30ca936a303686b1342c9",
    "title": "Speed up method calls with PyObject_VectorcallMethod",
    "updated_at": "2025-03-26T20:35:37Z",
    "url": "https://api.github.com/repos/cython/cython/pulls/6747",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
        "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
        "followers_url": "https://api.github.com/users/da-woods/followers",
        "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
        "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/da-woods",
        "id": 10536947,
        "login": "da-woods",
        "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
        "organizations_url": "https://api.github.com/users/da-woods/orgs",
        "received_events_url": "https://api.github.com/users/da-woods/received_events",
        "repos_url": "https://api.github.com/users/da-woods/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/da-woods",
        "user_view_type": "public"
    }
}