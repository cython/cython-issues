{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/cython/cython/issues/3518/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/cython/cython/pulls/3518/commits"
        },
        "html": {
            "href": "https://github.com/cython/cython/pull/3518"
        },
        "issue": {
            "href": "https://api.github.com/repos/cython/cython/issues/3518"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/cython/cython/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/cython/cython/pulls/3518/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/cython/cython/pulls/3518"
        },
        "statuses": {
            "href": "https://api.github.com/repos/cython/cython/statuses/5c194be5c535c12231fa48b3cb60ef4eda90d35f"
        }
    },
    "assignee": null,
    "assignees": [],
    "author_association": "FIRST_TIME_CONTRIBUTOR",
    "base": {
        "label": "cython:master",
        "ref": "master",
        "repo": {
            "archive_url": "https://api.github.com/repos/cython/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/cython/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/cython/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/cython/cython/branches{/branch}",
            "clone_url": "https://github.com/cython/cython.git",
            "collaborators_url": "https://api.github.com/repos/cython/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/cython/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/cython/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/cython/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/cython/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/cython/cython/contributors",
            "created_at": "2010-11-21T07:44:20Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/cython/cython/deployments",
            "description": "The most widely used Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/cython/cython/downloads",
            "events_url": "https://api.github.com/repos/cython/cython/events",
            "fork": false,
            "forks": 1004,
            "forks_count": 1004,
            "forks_url": "https://api.github.com/repos/cython/cython/forks",
            "full_name": "cython/cython",
            "git_commits_url": "https://api.github.com/repos/cython/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/cython/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/cython/cython/git/tags{/sha}",
            "git_url": "git://github.com/cython/cython.git",
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://cython.org",
            "hooks_url": "https://api.github.com/repos/cython/cython/hooks",
            "html_url": "https://github.com/cython/cython",
            "id": 1099265,
            "issue_comment_url": "https://api.github.com/repos/cython/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/cython/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/cython/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/cython/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/cython/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/cython/cython/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/cython/cython/merges",
            "milestones_url": "https://api.github.com/repos/cython/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkxMDk5MjY1",
            "notifications_url": "https://api.github.com/repos/cython/cython/notifications{?since,all,participating}",
            "open_issues": 818,
            "open_issues_count": 818,
            "owner": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/486082?v=4",
                "events_url": "https://api.github.com/users/cython/events{/privacy}",
                "followers_url": "https://api.github.com/users/cython/followers",
                "following_url": "https://api.github.com/users/cython/following{/other_user}",
                "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/cython",
                "id": 486082,
                "login": "cython",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
                "organizations_url": "https://api.github.com/users/cython/orgs",
                "received_events_url": "https://api.github.com/users/cython/received_events",
                "repos_url": "https://api.github.com/users/cython/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/cython"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/cython/cython/pulls{/number}",
            "pushed_at": "2020-04-15T11:32:02Z",
            "releases_url": "https://api.github.com/repos/cython/cython/releases{/id}",
            "size": 57208,
            "ssh_url": "git@github.com:cython/cython.git",
            "stargazers_count": 5067,
            "stargazers_url": "https://api.github.com/repos/cython/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/cython/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/cython/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/cython/cython/subscription",
            "svn_url": "https://github.com/cython/cython",
            "tags_url": "https://api.github.com/repos/cython/cython/tags",
            "teams_url": "https://api.github.com/repos/cython/cython/teams",
            "trees_url": "https://api.github.com/repos/cython/cython/git/trees{/sha}",
            "updated_at": "2020-04-15T14:01:28Z",
            "url": "https://api.github.com/repos/cython/cython",
            "watchers": 5067,
            "watchers_count": 5067
        },
        "sha": "34cde7c658208c3782155a7b291918d982b85c77",
        "user": {
            "avatar_url": "https://avatars3.githubusercontent.com/u/486082?v=4",
            "events_url": "https://api.github.com/users/cython/events{/privacy}",
            "followers_url": "https://api.github.com/users/cython/followers",
            "following_url": "https://api.github.com/users/cython/following{/other_user}",
            "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/cython",
            "id": 486082,
            "login": "cython",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
            "organizations_url": "https://api.github.com/users/cython/orgs",
            "received_events_url": "https://api.github.com/users/cython/received_events",
            "repos_url": "https://api.github.com/users/cython/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/cython"
        }
    },
    "body": "To address https://github.com/cython/cython/issues/2753\r\n\r\nTODO: Write tests",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3518#discussion_r408626074"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3518"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/408626074"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I think the issue with this is that `PyObject_GetItem` ends up repeating everything you've just done, so therefore this path is unnecessarily slow.\r\n\r\nThe original issue [linked to the commit that added this feature in CPython](https://github.com/python/cpython/pull/4732/files#diff-fa8da9109fa9e26d43de374c663544fe) so it'd be easy enough to take the code from there.",
            "commit_id": "5c194be5c535c12231fa48b3cb60ef4eda90d35f",
            "created_at": "2020-04-15T07:10:03Z",
            "diff_hunk": "@@ -309,7 +304,13 @@ static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {\n     if (likely(m && m->mp_subscript)) {\n         return m->mp_subscript(obj, key);\n     }\n-    return __Pyx_PyObject_GetIndex(obj, key);\n+    PySequenceMethods *sm = Py_TYPE(obj)->tp_as_sequence;\n+    if (likely(sm && sm->sq_item)) {\n+        return __Pyx_PyObject_GetIndex(obj, key);\n+    }\n+\n+    // Fall back on CPython's GetItem for non-mappings, non-sequences.\n+    return PyObject_GetItem(obj, key);",
            "html_url": "https://github.com/cython/cython/pull/3518#discussion_r408626074",
            "id": 408626074,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYyNjA3NA==",
            "original_commit_id": "3a61c02cb770e33272d19bbcc2963a5d905314c3",
            "original_line": 313,
            "original_position": 23,
            "original_start_line": null,
            "path": "Cython/Utility/ObjectHandling.c",
            "position": null,
            "pull_request_review_id": 393508366,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3518",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-04-15T10:24:50Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/408626074",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3518#discussion_r408629211"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3518"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/408629211"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "This change now means the function won't fail (but may crash), even if the sequence isn't subscriptable, since the check is elsewhere. I think this method is only used from `__Pyx_PyObject_GetItem` so it shouldn't break anything. But maybe it atleast requires a comment saying \"obj MUST have tp_as_sequence\" ?",
            "commit_id": "5c194be5c535c12231fa48b3cb60ef4eda90d35f",
            "created_at": "2020-04-15T07:16:28Z",
            "diff_hunk": "@@ -285,11 +285,6 @@ static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* k\n static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {\n     PyObject *runerr;\n     Py_ssize_t key_value;\n-    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;\n-    if (unlikely(!(m && m->sq_item))) {\n-        PyErr_Format(PyExc_TypeError, \"'%.200s' object is not subscriptable\", Py_TYPE(obj)->tp_name);\n-        return NULL;\n-    }",
            "html_url": "https://github.com/cython/cython/pull/3518#discussion_r408629211",
            "id": 408629211,
            "line": 292,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYyOTIxMQ==",
            "original_commit_id": "3a61c02cb770e33272d19bbcc2963a5d905314c3",
            "original_line": 292,
            "original_position": 8,
            "original_start_line": null,
            "path": "Cython/Utility/ObjectHandling.c",
            "position": 11,
            "pull_request_review_id": 393508366,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3518",
            "side": "LEFT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-04-15T10:24:50Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/408629211",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3518#discussion_r408650020"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3518"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/408650020"
                }
            },
            "author_association": "NONE",
            "body": "Yes it seems better to just duplicate the logic in CPython's GetItem to deal with this. I'll update to do this.\r\n\r\nOne thing I'm unsure about in general is why cython duplicates the implementations of these functions. Are there optimizations that cython is making that can't be implemented within CPython? Do I need to take any of this into account when adapting the implementation from CPython?",
            "commit_id": "5c194be5c535c12231fa48b3cb60ef4eda90d35f",
            "created_at": "2020-04-15T07:54:41Z",
            "diff_hunk": "@@ -309,7 +304,13 @@ static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {\n     if (likely(m && m->mp_subscript)) {\n         return m->mp_subscript(obj, key);\n     }\n-    return __Pyx_PyObject_GetIndex(obj, key);\n+    PySequenceMethods *sm = Py_TYPE(obj)->tp_as_sequence;\n+    if (likely(sm && sm->sq_item)) {\n+        return __Pyx_PyObject_GetIndex(obj, key);\n+    }\n+\n+    // Fall back on CPython's GetItem for non-mappings, non-sequences.\n+    return PyObject_GetItem(obj, key);",
            "html_url": "https://github.com/cython/cython/pull/3518#discussion_r408650020",
            "id": 408650020,
            "in_reply_to_id": 408626074,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY1MDAyMA==",
            "original_commit_id": "3a61c02cb770e33272d19bbcc2963a5d905314c3",
            "original_line": 313,
            "original_position": 23,
            "original_start_line": null,
            "path": "Cython/Utility/ObjectHandling.c",
            "position": null,
            "pull_request_review_id": 393537011,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3518",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-04-15T10:24:50Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/408650020",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/771072?v=4",
                "events_url": "https://api.github.com/users/msg555/events{/privacy}",
                "followers_url": "https://api.github.com/users/msg555/followers",
                "following_url": "https://api.github.com/users/msg555/following{/other_user}",
                "gists_url": "https://api.github.com/users/msg555/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/msg555",
                "id": 771072,
                "login": "msg555",
                "node_id": "MDQ6VXNlcjc3MTA3Mg==",
                "organizations_url": "https://api.github.com/users/msg555/orgs",
                "received_events_url": "https://api.github.com/users/msg555/received_events",
                "repos_url": "https://api.github.com/users/msg555/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/msg555/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/msg555/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/msg555"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3518#discussion_r408658328"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3518"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/408658328"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I didn't write the original code so I'm not 100% sure sure. I think there's two potential speedups I can see:\r\n\r\n1. No `NULL` check at the start of the function (which I think is helped because Cython has a pretty good idea of what can be NULL or not)\r\n2. Special-case for tuple in `__Pyx_GetItemInt_Fast`.\r\n\r\nI'm not 100% sure what you need to account for though.",
            "commit_id": "5c194be5c535c12231fa48b3cb60ef4eda90d35f",
            "created_at": "2020-04-15T08:09:26Z",
            "diff_hunk": "@@ -309,7 +304,13 @@ static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {\n     if (likely(m && m->mp_subscript)) {\n         return m->mp_subscript(obj, key);\n     }\n-    return __Pyx_PyObject_GetIndex(obj, key);\n+    PySequenceMethods *sm = Py_TYPE(obj)->tp_as_sequence;\n+    if (likely(sm && sm->sq_item)) {\n+        return __Pyx_PyObject_GetIndex(obj, key);\n+    }\n+\n+    // Fall back on CPython's GetItem for non-mappings, non-sequences.\n+    return PyObject_GetItem(obj, key);",
            "html_url": "https://github.com/cython/cython/pull/3518#discussion_r408658328",
            "id": 408658328,
            "in_reply_to_id": 408626074,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY1ODMyOA==",
            "original_commit_id": "3a61c02cb770e33272d19bbcc2963a5d905314c3",
            "original_line": 313,
            "original_position": 23,
            "original_start_line": null,
            "path": "Cython/Utility/ObjectHandling.c",
            "position": null,
            "pull_request_review_id": 393547393,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3518",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-04-15T10:24:50Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/408658328",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3518#discussion_r408660426"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3518"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/408660426"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "This comment actually looks like it isn't true. It looks like `__Pyx_GetItemInt_Fast` actually handles non-`tp_as_sequence` cases, and even a generic fallback `PyObject_GetItem` in `__Pyx_GetItemInt_Generic` at the end. Presumably the check for `tp_as_sequence` allows the compile to identify that only one code-path is ever used and inline only the relevant bits. So it may be necessary to produce optimized code, but probably doesn't crash.",
            "commit_id": "5c194be5c535c12231fa48b3cb60ef4eda90d35f",
            "created_at": "2020-04-15T08:13:21Z",
            "diff_hunk": "@@ -285,11 +285,6 @@ static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* k\n static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {\n     PyObject *runerr;\n     Py_ssize_t key_value;\n-    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;\n-    if (unlikely(!(m && m->sq_item))) {\n-        PyErr_Format(PyExc_TypeError, \"'%.200s' object is not subscriptable\", Py_TYPE(obj)->tp_name);\n-        return NULL;\n-    }",
            "html_url": "https://github.com/cython/cython/pull/3518#discussion_r408660426",
            "id": 408660426,
            "in_reply_to_id": 408629211,
            "line": 292,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2MDQyNg==",
            "original_commit_id": "3a61c02cb770e33272d19bbcc2963a5d905314c3",
            "original_line": 292,
            "original_position": 8,
            "original_start_line": null,
            "path": "Cython/Utility/ObjectHandling.c",
            "position": 11,
            "pull_request_review_id": 393547393,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3518",
            "side": "LEFT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-04-15T10:24:50Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/408660426",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3518#discussion_r408741044"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3518"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/408741044"
                }
            },
            "author_association": "NONE",
            "body": "Alright, thanks so much for the help.\r\n\r\nUpdated the PR to pull in the implementation from CPython 3.7. It also looks like the PR is going to be a bit more complicated than I first thought as it seems we need to add support for implicit classmethods (correct me if I'm wrong here).\r\n\r\nI probably need to add some logic around the python version as well when deciding what should be considered an implicit classmethod for total correctness here.\r\n\r\nAdditionally it looks like there's going to be needed some fixes to the mro logic to be fully compliant with PEP 560. Haven't looked totally at what's going to be required but the included test from CPython still has 7 failing mro-related tests.",
            "commit_id": "5c194be5c535c12231fa48b3cb60ef4eda90d35f",
            "created_at": "2020-04-15T10:29:28Z",
            "diff_hunk": "@@ -309,7 +304,13 @@ static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {\n     if (likely(m && m->mp_subscript)) {\n         return m->mp_subscript(obj, key);\n     }\n-    return __Pyx_PyObject_GetIndex(obj, key);\n+    PySequenceMethods *sm = Py_TYPE(obj)->tp_as_sequence;\n+    if (likely(sm && sm->sq_item)) {\n+        return __Pyx_PyObject_GetIndex(obj, key);\n+    }\n+\n+    // Fall back on CPython's GetItem for non-mappings, non-sequences.\n+    return PyObject_GetItem(obj, key);",
            "html_url": "https://github.com/cython/cython/pull/3518#discussion_r408741044",
            "id": 408741044,
            "in_reply_to_id": 408626074,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc0MTA0NA==",
            "original_commit_id": "3a61c02cb770e33272d19bbcc2963a5d905314c3",
            "original_line": 313,
            "original_position": 23,
            "original_start_line": null,
            "path": "Cython/Utility/ObjectHandling.c",
            "position": null,
            "pull_request_review_id": 393649310,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3518",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-04-15T10:29:29Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/408741044",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/771072?v=4",
                "events_url": "https://api.github.com/users/msg555/events{/privacy}",
                "followers_url": "https://api.github.com/users/msg555/followers",
                "following_url": "https://api.github.com/users/msg555/following{/other_user}",
                "gists_url": "https://api.github.com/users/msg555/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/msg555",
                "id": 771072,
                "login": "msg555",
                "node_id": "MDQ6VXNlcjc3MTA3Mg==",
                "organizations_url": "https://api.github.com/users/msg555/orgs",
                "received_events_url": "https://api.github.com/users/msg555/received_events",
                "repos_url": "https://api.github.com/users/msg555/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/msg555/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/msg555/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/msg555"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3518#discussion_r408742152"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3518"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/408742152"
                }
            },
            "author_association": "NONE",
            "body": "How should I signal this test should only run for Python >= 3.7? Should I just add logic to the tests to skip based on the runtime python version?",
            "commit_id": "5c194be5c535c12231fa48b3cb60ef4eda90d35f",
            "created_at": "2020-04-15T10:31:35Z",
            "diff_hunk": "@@ -0,0 +1,288 @@\n+### COPIED FROM CPython 3.7\n+# cython: language_level=3",
            "html_url": "https://github.com/cython/cython/pull/3518#discussion_r408742152",
            "id": 408742152,
            "line": 2,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc0MjE1Mg==",
            "original_commit_id": "5c194be5c535c12231fa48b3cb60ef4eda90d35f",
            "original_line": 2,
            "original_position": 2,
            "original_start_line": null,
            "path": "tests/run/test_genericclass.py",
            "position": 2,
            "pull_request_review_id": 393650668,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3518",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-04-15T10:31:35Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/408742152",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/771072?v=4",
                "events_url": "https://api.github.com/users/msg555/events{/privacy}",
                "followers_url": "https://api.github.com/users/msg555/followers",
                "following_url": "https://api.github.com/users/msg555/following{/other_user}",
                "gists_url": "https://api.github.com/users/msg555/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/msg555",
                "id": 771072,
                "login": "msg555",
                "node_id": "MDQ6VXNlcjc3MTA3Mg==",
                "organizations_url": "https://api.github.com/users/msg555/orgs",
                "received_events_url": "https://api.github.com/users/msg555/received_events",
                "repos_url": "https://api.github.com/users/msg555/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/msg555/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/msg555/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/msg555"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3518#discussion_r408742926"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3518"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/408742926"
                }
            },
            "author_association": "NONE",
            "body": "Need to double check whether this should be added to the front or back of decorators",
            "commit_id": "5c194be5c535c12231fa48b3cb60ef4eda90d35f",
            "created_at": "2020-04-15T10:33:06Z",
            "diff_hunk": "@@ -2883,7 +2883,12 @@ def analyse_declarations(self, env):\n             self.is_staticmethod = False\n \n         if self.name == '__new__' and env.is_py_class_scope:\n-            self.is_staticmethod = 1\n+            self.is_staticmethod = True\n+        if not self.is_classmethod and self.name in ('__class_getitem__', '__init_subclass__') and env.is_py_class_scope:\n+            from .ExprNodes import NameNode\n+            self.decorators = self.decorators or []\n+            self.decorators.append(DecoratorNode(self.pos, decorator=NameNode(self.pos, name='classmethod')))",
            "html_url": "https://github.com/cython/cython/pull/3518#discussion_r408742926",
            "id": 408742926,
            "line": 2890,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc0MjkyNg==",
            "original_commit_id": "5c194be5c535c12231fa48b3cb60ef4eda90d35f",
            "original_line": 2890,
            "original_position": 9,
            "original_start_line": null,
            "path": "Cython/Compiler/Nodes.py",
            "position": 9,
            "pull_request_review_id": 393651592,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3518",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-04-15T10:33:06Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/408742926",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/771072?v=4",
                "events_url": "https://api.github.com/users/msg555/events{/privacy}",
                "followers_url": "https://api.github.com/users/msg555/followers",
                "following_url": "https://api.github.com/users/msg555/following{/other_user}",
                "gists_url": "https://api.github.com/users/msg555/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/msg555",
                "id": 771072,
                "login": "msg555",
                "node_id": "MDQ6VXNlcjc3MTA3Mg==",
                "organizations_url": "https://api.github.com/users/msg555/orgs",
                "received_events_url": "https://api.github.com/users/msg555/received_events",
                "repos_url": "https://api.github.com/users/msg555/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/msg555/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/msg555/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/msg555"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3518#discussion_r408748599"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3518"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/408748599"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I'd probably change this to `PyObject_GetAttrString(PYIDENT(\"__class_getitem__\"))` which uses the Cython mechanisms for defining identifier names (it might have to be `PyObject_GetAttr`... not 100% sure).\r\n\r\nThen I don't actually see the need to restrict to to Python 3.7+ - it's only an attribute lookup+function call so it should be possible for Cython to support it on any version of Python.",
            "commit_id": "5c194be5c535c12231fa48b3cb60ef4eda90d35f",
            "created_at": "2020-04-15T10:43:42Z",
            "diff_hunk": "@@ -282,35 +282,46 @@ static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* k\n // //@requires: GetItemInt - added in IndexNode as it uses templating.\n \n #if CYTHON_USE_TYPE_SLOTS\n-static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {\n-    PyObject *runerr;\n-    Py_ssize_t key_value;\n-    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;\n-    if (unlikely(!(m && m->sq_item))) {\n-        PyErr_Format(PyExc_TypeError, \"'%.200s' object is not subscriptable\", Py_TYPE(obj)->tp_name);\n-        return NULL;\n-    }\n-\n-    key_value = __Pyx_PyIndex_AsSsize_t(index);\n-    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {\n-        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);\n+static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {\n+    PyTypeObject* tp = Py_TYPE(obj);\n+    PyMappingMethods *mm = tp->tp_as_mapping;\n+    if (likely(mm && mm->mp_subscript)) {\n+        return mm->mp_subscript(obj, key);\n+    }\n+\n+    PySequenceMethods *sm = tp->tp_as_sequence;\n+    if (likely(sm && sm->sq_item)) {\n+        PyObject *runerr;\n+        Py_ssize_t key_value;\n+        key_value = __Pyx_PyIndex_AsSsize_t(key);\n+        if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {\n+            return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);\n+        }\n+        if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {\n+            PyErr_Clear();\n+            PyErr_Format(PyExc_IndexError, \"cannot fit '%.200s' into an index-sized integer\", Py_TYPE(key)->tp_name);\n+        }\n+        return NULL; \n+    }\n+    \n+#if PY_VERSION_HEX >= 0x03070000\n+    if (likely(PyType_Check(obj))) {\n+        PyObject *meth;\n+        _Py_IDENTIFIER(__class_getitem__);\n+        if (_PyObject_LookupAttrId(obj, &PyId___class_getitem__, &meth) < 0) {",
            "html_url": "https://github.com/cython/cython/pull/3518#discussion_r408748599",
            "id": 408748599,
            "line": 311,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc0ODU5OQ==",
            "original_commit_id": "5c194be5c535c12231fa48b3cb60ef4eda90d35f",
            "original_line": 311,
            "original_position": 42,
            "original_start_line": null,
            "path": "Cython/Utility/ObjectHandling.c",
            "position": 42,
            "pull_request_review_id": 393658458,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3518",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-04-15T10:48:36Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/408748599",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3518#discussion_r408749041"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3518"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/408749041"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I'd probably drop the MRO stuff and do it in a separate full request. It's almost certainly less important for Cython since the chances are that the `typing` module will never be compiled so Cython will never see it's MRO stuff.\r\n\r\nWith that done, I think the test could actually run on any Python version.",
            "commit_id": "5c194be5c535c12231fa48b3cb60ef4eda90d35f",
            "created_at": "2020-04-15T10:44:44Z",
            "diff_hunk": "@@ -0,0 +1,288 @@\n+### COPIED FROM CPython 3.7\n+# cython: language_level=3",
            "html_url": "https://github.com/cython/cython/pull/3518#discussion_r408749041",
            "id": 408749041,
            "in_reply_to_id": 408742152,
            "line": 2,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc0OTA0MQ==",
            "original_commit_id": "5c194be5c535c12231fa48b3cb60ef4eda90d35f",
            "original_line": 2,
            "original_position": 2,
            "original_start_line": null,
            "path": "tests/run/test_genericclass.py",
            "position": 2,
            "pull_request_review_id": 393658458,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3518",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-04-15T10:48:36Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/408749041",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3518#discussion_r408750565"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3518"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/408750565"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "You may well have to change this to a doctest instead since that's what Cython uses. There's probably a simple way of setting up `__doc__ = \"unittest.main(__module__)\"` so doctest just calls unit test (but it might be slightly different...)",
            "commit_id": "5c194be5c535c12231fa48b3cb60ef4eda90d35f",
            "created_at": "2020-04-15T10:47:46Z",
            "diff_hunk": "@@ -0,0 +1,288 @@\n+### COPIED FROM CPython 3.7\n+# cython: language_level=3\n+import unittest\n+from test import support\n+\n+\n+class TestMROEntry(unittest.TestCase):\n+    def test_mro_entry_signature(self):\n+        tested = []\n+        class B: ...\n+        class C:\n+            def __mro_entries__(self, *args, **kwargs):\n+                tested.extend([args, kwargs])\n+                return (C,)\n+        c = C()\n+        self.assertEqual(tested, [])\n+        class D(B, c): ...\n+        self.assertEqual(tested[0], ((B, c),))\n+        self.assertEqual(tested[1], {})\n+\n+    def test_mro_entry(self):\n+        tested = []\n+        class A: ...\n+        class B: ...\n+        class C:\n+            def __mro_entries__(self, bases):\n+                tested.append(bases)\n+                return (self.__class__,)\n+        c = C()\n+        self.assertEqual(tested, [])\n+        class D(A, c, B): ...\n+        self.assertEqual(tested[-1], (A, c, B))\n+        self.assertEqual(D.__bases__, (A, C, B))\n+        self.assertEqual(D.__orig_bases__, (A, c, B))\n+        self.assertEqual(D.__mro__, (D, A, C, B, object))\n+        d = D()\n+        class E(d): ...\n+        self.assertEqual(tested[-1], (d,))\n+        self.assertEqual(E.__bases__, (D,))\n+\n+    def test_mro_entry_none(self):\n+        tested = []\n+        class A: ...\n+        class B: ...\n+        class C:\n+            def __mro_entries__(self, bases):\n+                tested.append(bases)\n+                return ()\n+        c = C()\n+        self.assertEqual(tested, [])\n+        class D(A, c, B): ...\n+        self.assertEqual(tested[-1], (A, c, B))\n+        self.assertEqual(D.__bases__, (A, B))\n+        self.assertEqual(D.__orig_bases__, (A, c, B))\n+        self.assertEqual(D.__mro__, (D, A, B, object))\n+        class E(c): ...\n+        self.assertEqual(tested[-1], (c,))\n+        self.assertEqual(E.__bases__, (object,))\n+        self.assertEqual(E.__orig_bases__, (c,))\n+        self.assertEqual(E.__mro__, (E, object))\n+\n+    def test_mro_entry_with_builtins(self):\n+        tested = []\n+        class A: ...\n+        class C:\n+            def __mro_entries__(self, bases):\n+                tested.append(bases)\n+                return (dict,)\n+        c = C()\n+        self.assertEqual(tested, [])\n+        class D(A, c): ...\n+        self.assertEqual(tested[-1], (A, c))\n+        self.assertEqual(D.__bases__, (A, dict))\n+        self.assertEqual(D.__orig_bases__, (A, c))\n+        self.assertEqual(D.__mro__, (D, A, dict, object))\n+\n+    def test_mro_entry_with_builtins_2(self):\n+        tested = []\n+        class C:\n+            def __mro_entries__(self, bases):\n+                tested.append(bases)\n+                return (C,)\n+        c = C()\n+        self.assertEqual(tested, [])\n+        class D(c, dict): ...\n+        self.assertEqual(tested[-1], (c, dict))\n+        self.assertEqual(D.__bases__, (C, dict))\n+        self.assertEqual(D.__orig_bases__, (c, dict))\n+        self.assertEqual(D.__mro__, (D, C, dict, object))\n+\n+    def test_mro_entry_errors(self):\n+        class C_too_many:\n+            def __mro_entries__(self, bases, something, other):\n+                return ()\n+        c = C_too_many()\n+        with self.assertRaises(TypeError):\n+            class D(c): ...\n+        class C_too_few:\n+            def __mro_entries__(self):\n+                return ()\n+        d = C_too_few()\n+        with self.assertRaises(TypeError):\n+            class D(d): ...\n+\n+    def test_mro_entry_errors_2(self):\n+        class C_not_callable:\n+            __mro_entries__ = \"Surprise!\"\n+        c = C_not_callable()\n+        with self.assertRaises(TypeError):\n+            class D(c): ...\n+        class C_not_tuple:\n+            def __mro_entries__(self):\n+                return object\n+        c = C_not_tuple()\n+        with self.assertRaises(TypeError):\n+            class D(c): ...\n+\n+    def test_mro_entry_metaclass(self):\n+        meta_args = []\n+        class Meta(type):\n+            def __new__(mcls, name, bases, ns):\n+                meta_args.extend([mcls, name, bases, ns])\n+                return super().__new__(mcls, name, bases, ns)\n+        class A: ...\n+        class C:\n+            def __mro_entries__(self, bases):\n+                return (A,)\n+        c = C()\n+        class D(c, metaclass=Meta):\n+            x = 1\n+        self.assertEqual(meta_args[0], Meta)\n+        self.assertEqual(meta_args[1], 'D')\n+        self.assertEqual(meta_args[2], (A,))\n+        self.assertEqual(meta_args[3]['x'], 1)\n+        self.assertEqual(D.__bases__, (A,))\n+        self.assertEqual(D.__orig_bases__, (c,))\n+        self.assertEqual(D.__mro__, (D, A, object))\n+        self.assertEqual(D.__class__, Meta)\n+\n+    def test_mro_entry_type_call(self):\n+        # Substitution should _not_ happen in direct type call\n+        class C:\n+            def __mro_entries__(self, bases):\n+                return ()\n+        c = C()\n+        with self.assertRaisesRegex(TypeError,\n+                                    \"MRO entry resolution; \"\n+                                    \"use types.new_class()\"):\n+            type('Bad', (c,), {})\n+\n+\n+class TestClassGetitem(unittest.TestCase):\n+    def test_class_getitem(self):\n+        getitem_args = []\n+        class C:\n+            def __class_getitem__(*args, **kwargs):\n+                getitem_args.extend([args, kwargs])\n+                return None\n+        C[int, str]\n+        self.assertEqual(getitem_args[0], (C, (int, str)))\n+        self.assertEqual(getitem_args[1], {})\n+\n+    def test_class_getitem_format(self):\n+        class C:\n+            def __class_getitem__(cls, item):\n+                return f'C[{item.__name__}]'\n+        self.assertEqual(C[int], 'C[int]')\n+        self.assertEqual(C[C], 'C[C]')\n+\n+    def test_class_getitem_inheritance(self):\n+        class C:\n+            def __class_getitem__(cls, item):\n+                return f'{cls.__name__}[{item.__name__}]'\n+        class D(C): ...\n+        self.assertEqual(D[int], 'D[int]')\n+        self.assertEqual(D[D], 'D[D]')\n+\n+    def test_class_getitem_inheritance_2(self):\n+        class C:\n+            def __class_getitem__(cls, item):\n+                return 'Should not see this'\n+        class D(C):\n+            def __class_getitem__(cls, item):\n+                return f'{cls.__name__}[{item.__name__}]'\n+        self.assertEqual(D[int], 'D[int]')\n+        self.assertEqual(D[D], 'D[D]')\n+\n+    def test_class_getitem_classmethod(self):\n+        class C:\n+            @classmethod\n+            def __class_getitem__(cls, item):\n+                return f'{cls.__name__}[{item.__name__}]'\n+        class D(C): ...\n+        self.assertEqual(D[int], 'D[int]')\n+        self.assertEqual(D[D], 'D[D]')\n+\n+    def test_class_getitem_patched(self):\n+        class C:\n+            def __init_subclass__(cls):\n+                def __class_getitem__(cls, item):\n+                    return f'{cls.__name__}[{item.__name__}]'\n+                cls.__class_getitem__ = classmethod(__class_getitem__)\n+        class D(C): ...\n+        self.assertEqual(D[int], 'D[int]')\n+        self.assertEqual(D[D], 'D[D]')\n+\n+    def test_class_getitem_with_builtins(self):\n+        class A(dict):\n+            called_with = None\n+\n+            def __class_getitem__(cls, item):\n+                cls.called_with = item\n+        class B(A):\n+            pass\n+        self.assertIs(B.called_with, None)\n+        B[int]\n+        self.assertIs(B.called_with, int)\n+\n+    def test_class_getitem_errors(self):\n+        class C_too_few:\n+            def __class_getitem__(cls):\n+                return None\n+        with self.assertRaises(TypeError):\n+            C_too_few[int]\n+        class C_too_many:\n+            def __class_getitem__(cls, one, two):\n+                return None\n+        with self.assertRaises(TypeError):\n+            C_too_many[int]\n+\n+    def test_class_getitem_errors_2(self):\n+        class C:\n+            def __class_getitem__(cls, item):\n+                return None\n+        with self.assertRaises(TypeError):\n+            C()[int]\n+        class E: ...\n+        e = E()\n+        e.__class_getitem__ = lambda cls, item: 'This will not work'\n+        with self.assertRaises(TypeError):\n+            e[int]\n+        class C_not_callable:\n+            __class_getitem__ = \"Surprise!\"\n+        with self.assertRaises(TypeError):\n+            C_not_callable[int]\n+\n+    def test_class_getitem_metaclass(self):\n+        class Meta(type):\n+            def __class_getitem__(cls, item):\n+                return f'{cls.__name__}[{item.__name__}]'\n+        self.assertEqual(Meta[int], 'Meta[int]')\n+\n+    def test_class_getitem_with_metaclass(self):\n+        class Meta(type): pass\n+        class C(metaclass=Meta):\n+            def __class_getitem__(cls, item):\n+                return f'{cls.__name__}[{item.__name__}]'\n+        self.assertEqual(C[int], 'C[int]')\n+\n+    def test_class_getitem_metaclass_first(self):\n+        class Meta(type):\n+            def __getitem__(cls, item):\n+                return 'from metaclass'\n+        class C(metaclass=Meta):\n+            def __class_getitem__(cls, item):\n+                return 'from __class_getitem__'\n+        self.assertEqual(C[int], 'from metaclass')\n+\n+\n+@support.cpython_only\n+class CAPITest(unittest.TestCase):\n+\n+    def test_c_class(self):\n+        from _testcapi import Generic, GenericAlias\n+        self.assertIsInstance(Generic.__class_getitem__(int), GenericAlias)\n+\n+        IntGeneric = Generic[int]\n+        self.assertIs(type(IntGeneric), GenericAlias)\n+        self.assertEqual(IntGeneric.__mro_entries__(()), (int,))\n+        class C(IntGeneric):\n+            pass\n+        self.assertEqual(C.__bases__, (int,))\n+        self.assertEqual(C.__orig_bases__, (IntGeneric,))\n+        self.assertEqual(C.__mro__, (C, int, object))\n+\n+\n+if __name__ == \"__main__\":",
            "html_url": "https://github.com/cython/cython/pull/3518#discussion_r408750565",
            "id": 408750565,
            "line": 287,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc1MDU2NQ==",
            "original_commit_id": "5c194be5c535c12231fa48b3cb60ef4eda90d35f",
            "original_line": 287,
            "original_position": 287,
            "original_start_line": null,
            "path": "tests/run/test_genericclass.py",
            "position": 287,
            "pull_request_review_id": 393658458,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3518",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-04-15T10:48:36Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/408750565",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3518#discussion_r408751815"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3518"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/408751815"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "It'll be the outermost decorator, so probably the front I think. (Although at the minute it probably won't work if there are any other decorators present anyway - I have a PR in to fix this but it's big and some of the changes are unpopular)",
            "commit_id": "5c194be5c535c12231fa48b3cb60ef4eda90d35f",
            "created_at": "2020-04-15T10:50:13Z",
            "diff_hunk": "@@ -2883,7 +2883,12 @@ def analyse_declarations(self, env):\n             self.is_staticmethod = False\n \n         if self.name == '__new__' and env.is_py_class_scope:\n-            self.is_staticmethod = 1\n+            self.is_staticmethod = True\n+        if not self.is_classmethod and self.name in ('__class_getitem__', '__init_subclass__') and env.is_py_class_scope:\n+            from .ExprNodes import NameNode\n+            self.decorators = self.decorators or []\n+            self.decorators.append(DecoratorNode(self.pos, decorator=NameNode(self.pos, name='classmethod')))",
            "html_url": "https://github.com/cython/cython/pull/3518#discussion_r408751815",
            "id": 408751815,
            "in_reply_to_id": 408742926,
            "line": 2890,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc1MTgxNQ==",
            "original_commit_id": "5c194be5c535c12231fa48b3cb60ef4eda90d35f",
            "original_line": 2890,
            "original_position": 9,
            "original_start_line": null,
            "path": "Cython/Compiler/Nodes.py",
            "position": 9,
            "pull_request_review_id": 393662498,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3518",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-04-15T10:50:13Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/408751815",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3518#discussion_r408753154"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3518"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/408753154"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "On the first line, add:\r\n\r\n```\r\n#mode: run\r\n#tag: pure3.7\r\n```\r\n\r\nto tell the testrunner that a) the test should be run, and b) it should also run it in plain Python>=3.7 just to show that it matches the plain Python behaviour",
            "commit_id": "5c194be5c535c12231fa48b3cb60ef4eda90d35f",
            "created_at": "2020-04-15T10:52:52Z",
            "diff_hunk": "@@ -0,0 +1,288 @@\n+### COPIED FROM CPython 3.7",
            "html_url": "https://github.com/cython/cython/pull/3518#discussion_r408753154",
            "id": 408753154,
            "line": 1,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc1MzE1NA==",
            "original_commit_id": "5c194be5c535c12231fa48b3cb60ef4eda90d35f",
            "original_line": 1,
            "original_position": 1,
            "original_start_line": null,
            "path": "tests/run/test_genericclass.py",
            "position": 1,
            "pull_request_review_id": 393664083,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3518",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-04-15T10:52:52Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/408753154",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/cython/cython/issues/3518/comments",
    "commit_data": [
        {
            "author": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/771072?v=4",
                "events_url": "https://api.github.com/users/msg555/events{/privacy}",
                "followers_url": "https://api.github.com/users/msg555/followers",
                "following_url": "https://api.github.com/users/msg555/following{/other_user}",
                "gists_url": "https://api.github.com/users/msg555/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/msg555",
                "id": 771072,
                "login": "msg555",
                "node_id": "MDQ6VXNlcjc3MTA3Mg==",
                "organizations_url": "https://api.github.com/users/msg555/orgs",
                "received_events_url": "https://api.github.com/users/msg555/received_events",
                "repos_url": "https://api.github.com/users/msg555/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/msg555/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/msg555/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/msg555"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/5c194be5c535c12231fa48b3cb60ef4eda90d35f/comments",
            "commit": {
                "author": {
                    "date": "2020-04-15T05:04:50Z",
                    "email": "msg555@gmail.com",
                    "name": "msg555"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-04-15T10:24:35Z",
                    "email": "msg555@gmail.com",
                    "name": "msg555"
                },
                "message": "Default to PyObject_GetItem for unhandle cases",
                "tree": {
                    "sha": "a7152d01713e24ac775a21a54ba39e6d029baddb",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/a7152d01713e24ac775a21a54ba39e6d029baddb"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/5c194be5c535c12231fa48b3cb60ef4eda90d35f",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/771072?v=4",
                "events_url": "https://api.github.com/users/msg555/events{/privacy}",
                "followers_url": "https://api.github.com/users/msg555/followers",
                "following_url": "https://api.github.com/users/msg555/following{/other_user}",
                "gists_url": "https://api.github.com/users/msg555/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/msg555",
                "id": 771072,
                "login": "msg555",
                "node_id": "MDQ6VXNlcjc3MTA3Mg==",
                "organizations_url": "https://api.github.com/users/msg555/orgs",
                "received_events_url": "https://api.github.com/users/msg555/received_events",
                "repos_url": "https://api.github.com/users/msg555/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/msg555/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/msg555/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/msg555"
            },
            "html_url": "https://github.com/cython/cython/commit/5c194be5c535c12231fa48b3cb60ef4eda90d35f",
            "node_id": "MDY6Q29tbWl0MjU1ODEwMjA1OjVjMTk0YmU1YzUzNWMxMjIzMWZhNDhiM2NiNjBlZjRlZGE5MGQzNWY=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/34cde7c658208c3782155a7b291918d982b85c77",
                    "sha": "34cde7c658208c3782155a7b291918d982b85c77",
                    "url": "https://api.github.com/repos/cython/cython/commits/34cde7c658208c3782155a7b291918d982b85c77"
                }
            ],
            "sha": "5c194be5c535c12231fa48b3cb60ef4eda90d35f",
            "url": "https://api.github.com/repos/cython/cython/commits/5c194be5c535c12231fa48b3cb60ef4eda90d35f"
        }
    ],
    "commits_url": "https://api.github.com/repos/cython/cython/pulls/3518/commits",
    "created_at": "2020-04-15T05:07:52Z",
    "diff_url": "https://github.com/cython/cython/pull/3518.diff",
    "draft": true,
    "head": {
        "label": "msg555:master",
        "ref": "master",
        "repo": {
            "archive_url": "https://api.github.com/repos/msg555/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/msg555/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/msg555/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/msg555/cython/branches{/branch}",
            "clone_url": "https://github.com/msg555/cython.git",
            "collaborators_url": "https://api.github.com/repos/msg555/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/msg555/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/msg555/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/msg555/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/msg555/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/msg555/cython/contributors",
            "created_at": "2020-04-15T05:04:05Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/msg555/cython/deployments",
            "description": "The most widely used Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/msg555/cython/downloads",
            "events_url": "https://api.github.com/repos/msg555/cython/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/msg555/cython/forks",
            "full_name": "msg555/cython",
            "git_commits_url": "https://api.github.com/repos/msg555/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/msg555/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/msg555/cython/git/tags{/sha}",
            "git_url": "git://github.com/msg555/cython.git",
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://cython.org",
            "hooks_url": "https://api.github.com/repos/msg555/cython/hooks",
            "html_url": "https://github.com/msg555/cython",
            "id": 255810205,
            "issue_comment_url": "https://api.github.com/repos/msg555/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/msg555/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/msg555/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/msg555/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/msg555/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/msg555/cython/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/msg555/cython/merges",
            "milestones_url": "https://api.github.com/repos/msg555/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkyNTU4MTAyMDU=",
            "notifications_url": "https://api.github.com/repos/msg555/cython/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/771072?v=4",
                "events_url": "https://api.github.com/users/msg555/events{/privacy}",
                "followers_url": "https://api.github.com/users/msg555/followers",
                "following_url": "https://api.github.com/users/msg555/following{/other_user}",
                "gists_url": "https://api.github.com/users/msg555/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/msg555",
                "id": 771072,
                "login": "msg555",
                "node_id": "MDQ6VXNlcjc3MTA3Mg==",
                "organizations_url": "https://api.github.com/users/msg555/orgs",
                "received_events_url": "https://api.github.com/users/msg555/received_events",
                "repos_url": "https://api.github.com/users/msg555/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/msg555/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/msg555/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/msg555"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/msg555/cython/pulls{/number}",
            "pushed_at": "2020-04-15T10:24:49Z",
            "releases_url": "https://api.github.com/repos/msg555/cython/releases{/id}",
            "size": 57109,
            "ssh_url": "git@github.com:msg555/cython.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/msg555/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/msg555/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/msg555/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/msg555/cython/subscription",
            "svn_url": "https://github.com/msg555/cython",
            "tags_url": "https://api.github.com/repos/msg555/cython/tags",
            "teams_url": "https://api.github.com/repos/msg555/cython/teams",
            "trees_url": "https://api.github.com/repos/msg555/cython/git/trees{/sha}",
            "updated_at": "2020-04-15T10:24:52Z",
            "url": "https://api.github.com/repos/msg555/cython",
            "watchers": 0,
            "watchers_count": 0
        },
        "sha": "5c194be5c535c12231fa48b3cb60ef4eda90d35f",
        "user": {
            "avatar_url": "https://avatars1.githubusercontent.com/u/771072?v=4",
            "events_url": "https://api.github.com/users/msg555/events{/privacy}",
            "followers_url": "https://api.github.com/users/msg555/followers",
            "following_url": "https://api.github.com/users/msg555/following{/other_user}",
            "gists_url": "https://api.github.com/users/msg555/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/msg555",
            "id": 771072,
            "login": "msg555",
            "node_id": "MDQ6VXNlcjc3MTA3Mg==",
            "organizations_url": "https://api.github.com/users/msg555/orgs",
            "received_events_url": "https://api.github.com/users/msg555/received_events",
            "repos_url": "https://api.github.com/users/msg555/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/msg555/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/msg555/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/msg555"
        }
    },
    "html_url": "https://github.com/cython/cython/pull/3518",
    "id": 403544037,
    "issue_url": "https://api.github.com/repos/cython/cython/issues/3518",
    "labels": [],
    "locked": false,
    "merge_commit_sha": "e28871dd0a9608d579e0e95869f1d694302db6cd",
    "merged_at": null,
    "milestone": null,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NDAzNTQ0MDM3",
    "number": 3518,
    "patch_url": "https://github.com/cython/cython/pull/3518.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/cython/cython/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/cython/cython/pulls/3518/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/cython/cython/statuses/5c194be5c535c12231fa48b3cb60ef4eda90d35f",
    "title": "Default to PyObject_GetItem for unhandle cases",
    "updated_at": "2020-04-15T10:52:52Z",
    "url": "https://api.github.com/repos/cython/cython/pulls/3518",
    "user": {
        "avatar_url": "https://avatars1.githubusercontent.com/u/771072?v=4",
        "events_url": "https://api.github.com/users/msg555/events{/privacy}",
        "followers_url": "https://api.github.com/users/msg555/followers",
        "following_url": "https://api.github.com/users/msg555/following{/other_user}",
        "gists_url": "https://api.github.com/users/msg555/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/msg555",
        "id": 771072,
        "login": "msg555",
        "node_id": "MDQ6VXNlcjc3MTA3Mg==",
        "organizations_url": "https://api.github.com/users/msg555/orgs",
        "received_events_url": "https://api.github.com/users/msg555/received_events",
        "repos_url": "https://api.github.com/users/msg555/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/msg555/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/msg555/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/msg555"
    }
}